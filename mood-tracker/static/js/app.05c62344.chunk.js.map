{"version":3,"sources":["assets/wallpaper.jpg","shared/dateRange.js","styles/entrancesStyles.js","components/EntrancesComponent.js","styles/postEntryStyles.js","components/PostEntryComponent.js","components/LoginComponent.js","App.js","index.js"],"names":["module","exports","dateRange","styles","mainView","flex","marginTop","StatusBar","currentHeight","postButton","position","height","width","borderRadius","bottom","alignSelf","backgroundColor","justifyContent","postButtonLabel","scrollView","paddingHorizontal","Platform","OS","section","paddingVertical","borderBottomWidth","borderColor","sectionTitle","fontSize","color","fontWeight","card","cardRow","flexDirection","alignItems","moodBadge","fontFamily","textAlign","emotionBadge","marginRight","textBadge","lineHeight","text","spaceBetween","icon","entryIcon","paddingRight","console","log","JSON","stringify","Navigator","arguments","getToday","monthSig","now","Date","toString","split","indexOf","join","getNextDate","date","next","nextDate","LoadAddress","entry","address","View","style","name","fill","Text","Loadjornal","jornal","LoadEmotions","emotions","length","map","emotion","index","moodColors","EntryCard","mood","time","_id","EntrancesScreen","props","state","userEntries","selectedDate","isLoading","isDataSynced","showTodayIfNewEntry","bind","onNextButtonPress","loadUserData","setSelectedDate","this","setState","route","params","newPost","navigation","setParams","a","async","info","userInfo","fetch","cors_uri","method","UsersResult","ok","Error","status","statusText","url","json","Users","user","filter","username","reverse","alert","isToday","ImageBackground","source","require","ScrollView","Pressable","onPress","navigate","Component","entrances","borderWidth","content","flexGrow","paddingBottom","borderTopWidth","contentRow","padding","entryTitle","paddingLeft","postButtonView","moodButton","left","jornalText","minHeight","saveButton","borderTopLeftRadius","borderTopRightRadius","datetime","slice","goodEnergizedEmotions","goodCalmEmotions","badEnergizedEmotions","badCalmEmotions","basicEmotions","emotionGroups","emotionGroupsNames","isSelectedEmotions","i","FormattedTime","newTime","h","parseInt","m","PostEntranceScreen","moodButtons","colors","colorsSelected","moods","emotionButtons","star","selectedMood","jornalEntry","startTime","selectedEntry","onSaveButtonPress","EmotionButtons","MoodButtons","postEntryHeader","onEmotionButtonPress","onMoodButtonPress","inputSection","setSelectedEntry","InputCard","JornalInput","postNewEntryAsync","styles2","goBack","item","selectMood","selectEmotion","title","textAlignVertical","multiline","placeholder","onChangeText","value","setSelected","inputStyle","inputs","sectionName","newEntry","endTime","postUserEntryOpts","headers","body","postUserEntryResult","flexWrap","login","cardHeader","paddingTop","cardSection","inputField","button","buttonLabel","loadingIcon","LoginScreen","password","email","isUserAuth","submitButton","onSignIn","onSignUp","animation","textField","setField","sign","signIn","authUser","errMsg","postUserOpts","entries","postUserResult","TextInput","Tab","createBottomTabNavigator","Stack","createNativeStackNavigator","HomeScreen","initialRouteName","screenOptions","headerShown","Screen","component","options","initialParams","SettingsScreen","mainScreenOptions","tabBarActiveTintColor","tabBarInactiveTintColor","tabBarHideOnKeyboard","tabBarIcon","iconName","focused","size","App","NavigationContainer","registerRootComponent"],"mappings":"yEAAAA,EAAOC,QAAU,IAA0B,uC,+RCoiB5BC,EApiBG,CACd,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,c,iBC1bWC,EApGA,CACXC,SAAU,CACNC,KAAM,EACNC,UAAWC,IAAUC,eAEzBC,WAAY,CACRC,SAAU,WACVC,OAAQ,GACRC,MAAO,GACPC,aAAc,GACdC,OAAQ,KACRC,UAAW,SACXC,gBAAiB,gBACjBC,eAAgB,UAEpBC,gBAAiB,CACbH,UAAW,UAEfI,WAAY,CACRC,kBAAkC,OAAfC,IAASC,GAAc,KAAO,MACjDV,MAAO,OACPG,UAAW,UAEfQ,QAAS,CACLC,gBAAiB,MACjBC,kBAAmB,EACnBC,YAAa,yBAGjBC,aAAc,CACVH,gBAAiB,IACjBI,SAAU,GACVC,MAAO,QACPC,WAAY,OAGhBC,KAAM,CACFzB,UAAW,KACXkB,gBAAiB,EACjBJ,kBAAmB,GACnBP,aAAc,GACdG,gBAAiB,mBAErBgB,QAAS,CACLC,cAAe,MACfT,gBAAiB,EAEjBU,WAAY,UAIhBC,UAAW,CACPC,WAAY,aACZpB,gBAAiB,QACjBH,aAAc,GACdW,gBAAiB,EACjBZ,MAAO,IACPgB,SAAU,GACVS,UAAW,UAGfC,aAAc,CACVF,WAAY,aACZpB,gBAAiB,YACjBH,aAAc,GACdW,gBAAiB,EACjBJ,kBAAmB,KACnBmB,YAAa,EAEbX,SAAU,GACVS,UAAW,UAEfG,UAAW,CACPJ,WAAY,aACZpB,gBAAiB,YACjBH,aAAc,GACdW,gBAAiB,EACjBJ,kBAAmB,GACnBR,MAAO,OACPgB,SAAU,GACVa,WAAY,GACZJ,UAAW,QAEfK,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","file":"static/js/app.05c62344.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/wallpaper.9987c866.jpg\";","const dateRange = [\r\n    \"2021-01-01\",\r\n    \"2021-01-02\",\r\n    \"2021-01-03\",\r\n    \"2021-01-04\",\r\n    \"2021-01-05\",\r\n    \"2021-01-06\",\r\n    \"2021-01-07\",\r\n    \"2021-01-08\",\r\n    \"2021-01-09\",\r\n    \"2021-01-10\",\r\n    \"2021-01-11\",\r\n    \"2021-01-12\",\r\n    \"2021-01-13\",\r\n    \"2021-01-14\",\r\n    \"2021-01-15\",\r\n    \"2021-01-16\",\r\n    \"2021-01-17\",\r\n    \"2021-01-18\",\r\n    \"2021-01-19\",\r\n    \"2021-01-20\",\r\n    \"2021-01-21\",\r\n    \"2021-01-22\",\r\n    \"2021-01-23\",\r\n    \"2021-01-24\",\r\n    \"2021-01-25\",\r\n    \"2021-01-26\",\r\n    \"2021-01-27\",\r\n    \"2021-01-28\",\r\n    \"2021-01-29\",\r\n    \"2021-01-30\",\r\n    \"2021-01-31\",\r\n    \"2021-02-01\",\r\n    \"2021-02-02\",\r\n    \"2021-02-03\",\r\n    \"2021-02-04\",\r\n    \"2021-02-05\",\r\n    \"2021-02-06\",\r\n    \"2021-02-07\",\r\n    \"2021-02-08\",\r\n    \"2021-02-09\",\r\n    \"2021-02-10\",\r\n    \"2021-02-11\",\r\n    \"2021-02-12\",\r\n    \"2021-02-13\",\r\n    \"2021-02-14\",\r\n    \"2021-02-15\",\r\n    \"2021-02-16\",\r\n    \"2021-02-17\",\r\n    \"2021-02-18\",\r\n    \"2021-02-19\",\r\n    \"2021-02-20\",\r\n    \"2021-02-21\",\r\n    \"2021-02-22\",\r\n    \"2021-02-23\",\r\n    \"2021-02-24\",\r\n    \"2021-02-25\",\r\n    \"2021-02-26\",\r\n    \"2021-02-27\",\r\n    \"2021-02-28\",\r\n    \"2021-03-01\",\r\n    \"2021-03-02\",\r\n    \"2021-03-03\",\r\n    \"2021-03-04\",\r\n    \"2021-03-05\",\r\n    \"2021-03-06\",\r\n    \"2021-03-07\",\r\n    \"2021-03-08\",\r\n    \"2021-03-09\",\r\n    \"2021-03-10\",\r\n    \"2021-03-11\",\r\n    \"2021-03-12\",\r\n    \"2021-03-13\",\r\n    \"2021-03-14\",\r\n    \"2021-03-15\",\r\n    \"2021-03-16\",\r\n    \"2021-03-17\",\r\n    \"2021-03-18\",\r\n    \"2021-03-19\",\r\n    \"2021-03-20\",\r\n    \"2021-03-21\",\r\n    \"2021-03-22\",\r\n    \"2021-03-23\",\r\n    \"2021-03-24\",\r\n    \"2021-03-25\",\r\n    \"2021-03-26\",\r\n    \"2021-03-27\",\r\n    \"2021-03-28\",\r\n    \"2021-03-29\",\r\n    \"2021-03-30\",\r\n    \"2021-03-31\",\r\n    \"2021-04-01\",\r\n    \"2021-04-02\",\r\n    \"2021-04-03\",\r\n    \"2021-04-04\",\r\n    \"2021-04-05\",\r\n    \"2021-04-06\",\r\n    \"2021-04-07\",\r\n    \"2021-04-08\",\r\n    \"2021-04-09\",\r\n    \"2021-04-10\",\r\n    \"2021-04-11\",\r\n    \"2021-04-12\",\r\n    \"2021-04-13\",\r\n    \"2021-04-14\",\r\n    \"2021-04-15\",\r\n    \"2021-04-16\",\r\n    \"2021-04-17\",\r\n    \"2021-04-18\",\r\n    \"2021-04-19\",\r\n    \"2021-04-20\",\r\n    \"2021-04-21\",\r\n    \"2021-04-22\",\r\n    \"2021-04-23\",\r\n    \"2021-04-24\",\r\n    \"2021-04-25\",\r\n    \"2021-04-26\",\r\n    \"2021-04-27\",\r\n    \"2021-04-28\",\r\n    \"2021-04-29\",\r\n    \"2021-04-30\",\r\n    \"2021-05-01\",\r\n    \"2021-05-02\",\r\n    \"2021-05-03\",\r\n    \"2021-05-04\",\r\n    \"2021-05-05\",\r\n    \"2021-05-06\",\r\n    \"2021-05-07\",\r\n    \"2021-05-08\",\r\n    \"2021-05-09\",\r\n    \"2021-05-10\",\r\n    \"2021-05-11\",\r\n    \"2021-05-12\",\r\n    \"2021-05-13\",\r\n    \"2021-05-14\",\r\n    \"2021-05-15\",\r\n    \"2021-05-16\",\r\n    \"2021-05-17\",\r\n    \"2021-05-18\",\r\n    \"2021-05-19\",\r\n    \"2021-05-20\",\r\n    \"2021-05-21\",\r\n    \"2021-05-22\",\r\n    \"2021-05-23\",\r\n    \"2021-05-24\",\r\n    \"2021-05-25\",\r\n    \"2021-05-26\",\r\n    \"2021-05-27\",\r\n    \"2021-05-28\",\r\n    \"2021-05-29\",\r\n    \"2021-05-30\",\r\n    \"2021-05-31\",\r\n    \"2021-06-01\",\r\n    \"2021-06-02\",\r\n    \"2021-06-03\",\r\n    \"2021-06-04\",\r\n    \"2021-06-05\",\r\n    \"2021-06-06\",\r\n    \"2021-06-07\",\r\n    \"2021-06-08\",\r\n    \"2021-06-09\",\r\n    \"2021-06-10\",\r\n    \"2021-06-11\",\r\n    \"2021-06-12\",\r\n    \"2021-06-13\",\r\n    \"2021-06-14\",\r\n    \"2021-06-15\",\r\n    \"2021-06-16\",\r\n    \"2021-06-17\",\r\n    \"2021-06-18\",\r\n    \"2021-06-19\",\r\n    \"2021-06-20\",\r\n    \"2021-06-21\",\r\n    \"2021-06-22\",\r\n    \"2021-06-23\",\r\n    \"2021-06-24\",\r\n    \"2021-06-25\",\r\n    \"2021-06-26\",\r\n    \"2021-06-27\",\r\n    \"2021-06-28\",\r\n    \"2021-06-29\",\r\n    \"2021-06-30\",\r\n    \"2021-07-01\",\r\n    \"2021-07-02\",\r\n    \"2021-07-03\",\r\n    \"2021-07-04\",\r\n    \"2021-07-05\",\r\n    \"2021-07-06\",\r\n    \"2021-07-07\",\r\n    \"2021-07-08\",\r\n    \"2021-07-09\",\r\n    \"2021-07-10\",\r\n    \"2021-07-11\",\r\n    \"2021-07-12\",\r\n    \"2021-07-13\",\r\n    \"2021-07-14\",\r\n    \"2021-07-15\",\r\n    \"2021-07-16\",\r\n    \"2021-07-17\",\r\n    \"2021-07-18\",\r\n    \"2021-07-19\",\r\n    \"2021-07-20\",\r\n    \"2021-07-21\",\r\n    \"2021-07-22\",\r\n    \"2021-07-23\",\r\n    \"2021-07-24\",\r\n    \"2021-07-25\",\r\n    \"2021-07-26\",\r\n    \"2021-07-27\",\r\n    \"2021-07-28\",\r\n    \"2021-07-29\",\r\n    \"2021-07-30\",\r\n    \"2021-07-31\",\r\n    \"2021-08-01\",\r\n    \"2021-08-02\",\r\n    \"2021-08-03\",\r\n    \"2021-08-04\",\r\n    \"2021-08-05\",\r\n    \"2021-08-06\",\r\n    \"2021-08-07\",\r\n    \"2021-08-08\",\r\n    \"2021-08-09\",\r\n    \"2021-08-10\",\r\n    \"2021-08-11\",\r\n    \"2021-08-12\",\r\n    \"2021-08-13\",\r\n    \"2021-08-14\",\r\n    \"2021-08-15\",\r\n    \"2021-08-16\",\r\n    \"2021-08-17\",\r\n    \"2021-08-18\",\r\n    \"2021-08-19\",\r\n    \"2021-08-20\",\r\n    \"2021-08-21\",\r\n    \"2021-08-22\",\r\n    \"2021-08-23\",\r\n    \"2021-08-24\",\r\n    \"2021-08-25\",\r\n    \"2021-08-26\",\r\n    \"2021-08-27\",\r\n    \"2021-08-28\",\r\n    \"2021-08-29\",\r\n    \"2021-08-30\",\r\n    \"2021-08-31\",\r\n    \"2021-09-01\",\r\n    \"2021-09-02\",\r\n    \"2021-09-03\",\r\n    \"2021-09-04\",\r\n    \"2021-09-05\",\r\n    \"2021-09-06\",\r\n    \"2021-09-07\",\r\n    \"2021-09-08\",\r\n    \"2021-09-09\",\r\n    \"2021-09-10\",\r\n    \"2021-09-11\",\r\n    \"2021-09-12\",\r\n    \"2021-09-13\",\r\n    \"2021-09-14\",\r\n    \"2021-09-15\",\r\n    \"2021-09-16\",\r\n    \"2021-09-17\",\r\n    \"2021-09-18\",\r\n    \"2021-09-19\",\r\n    \"2021-09-20\",\r\n    \"2021-09-21\",\r\n    \"2021-09-22\",\r\n    \"2021-09-23\",\r\n    \"2021-09-24\",\r\n    \"2021-09-25\",\r\n    \"2021-09-26\",\r\n    \"2021-09-27\",\r\n    \"2021-09-28\",\r\n    \"2021-09-29\",\r\n    \"2021-09-30\",\r\n    \"2021-10-01\",\r\n    \"2021-10-02\",\r\n    \"2021-10-03\",\r\n    \"2021-10-04\",\r\n    \"2021-10-05\",\r\n    \"2021-10-06\",\r\n    \"2021-10-07\",\r\n    \"2021-10-08\",\r\n    \"2021-10-09\",\r\n    \"2021-10-10\",\r\n    \"2021-10-11\",\r\n    \"2021-10-12\",\r\n    \"2021-10-13\",\r\n    \"2021-10-14\",\r\n    \"2021-10-15\",\r\n    \"2021-10-16\",\r\n    \"2021-10-17\",\r\n    \"2021-10-18\",\r\n    \"2021-10-19\",\r\n    \"2021-10-20\",\r\n    \"2021-10-21\",\r\n    \"2021-10-22\",\r\n    \"2021-10-23\",\r\n    \"2021-10-24\",\r\n    \"2021-10-25\",\r\n    \"2021-10-26\",\r\n    \"2021-10-27\",\r\n    \"2021-10-28\",\r\n    \"2021-10-29\",\r\n    \"2021-10-30\",\r\n    \"2021-10-31\",\r\n    \"2021-11-01\",\r\n    \"2021-11-02\",\r\n    \"2021-11-03\",\r\n    \"2021-11-04\",\r\n    \"2021-11-05\",\r\n    \"2021-11-06\",\r\n    \"2021-11-07\",\r\n    \"2021-11-08\",\r\n    \"2021-11-09\",\r\n    \"2021-11-10\",\r\n    \"2021-11-11\",\r\n    \"2021-11-12\",\r\n    \"2021-11-13\",\r\n    \"2021-11-14\",\r\n    \"2021-11-15\",\r\n    \"2021-11-16\",\r\n    \"2021-11-17\",\r\n    \"2021-11-18\",\r\n    \"2021-11-19\",\r\n    \"2021-11-20\",\r\n    \"2021-11-21\",\r\n    \"2021-11-22\",\r\n    \"2021-11-23\",\r\n    \"2021-11-24\",\r\n    \"2021-11-25\",\r\n    \"2021-11-26\",\r\n    \"2021-11-27\",\r\n    \"2021-11-28\",\r\n    \"2021-11-29\",\r\n    \"2021-11-30\",\r\n    \"2021-12-01\",\r\n    \"2021-12-02\",\r\n    \"2021-12-03\",\r\n    \"2021-12-04\",\r\n    \"2021-12-05\",\r\n    \"2021-12-06\",\r\n    \"2021-12-07\",\r\n    \"2021-12-08\",\r\n    \"2021-12-09\",\r\n    \"2021-12-10\",\r\n    \"2021-12-11\",\r\n    \"2021-12-12\",\r\n    \"2021-12-13\",\r\n    \"2021-12-14\",\r\n    \"2021-12-15\",\r\n    \"2021-12-16\",\r\n    \"2021-12-17\",\r\n    \"2021-12-18\",\r\n    \"2021-12-19\",\r\n    \"2021-12-20\",\r\n    \"2021-12-21\",\r\n    \"2021-12-22\",\r\n    \"2021-12-23\",\r\n    \"2021-12-24\",\r\n    \"2021-12-25\",\r\n    \"2021-12-26\",\r\n    \"2021-12-27\",\r\n    \"2021-12-28\",\r\n    \"2021-12-29\",\r\n    \"2021-12-30\",\r\n    \"2021-12-31\",\r\n    \"2022-01-01\",\r\n    \"2022-01-02\",\r\n    \"2022-01-03\",\r\n    \"2022-01-04\",\r\n    \"2022-01-05\",\r\n    \"2022-01-06\",\r\n    \"2022-01-07\",\r\n    \"2022-01-08\",\r\n    \"2022-01-09\",\r\n    \"2022-01-10\",\r\n    \"2022-01-11\",\r\n    \"2022-01-12\",\r\n    \"2022-01-13\",\r\n    \"2022-01-14\",\r\n    \"2022-01-15\",\r\n    \"2022-01-16\",\r\n    \"2022-01-17\",\r\n    \"2022-01-18\",\r\n    \"2022-01-19\",\r\n    \"2022-01-20\",\r\n    \"2022-01-21\",\r\n    \"2022-01-22\",\r\n    \"2022-01-23\",\r\n    \"2022-01-24\",\r\n    \"2022-01-25\",\r\n    \"2022-01-26\",\r\n    \"2022-01-27\",\r\n    \"2022-01-28\",\r\n    \"2022-01-29\",\r\n    \"2022-01-30\",\r\n    \"2022-01-31\",\r\n    \"2022-02-01\",\r\n    \"2022-02-02\",\r\n    \"2022-02-03\",\r\n    \"2022-02-04\",\r\n    \"2022-02-05\",\r\n    \"2022-02-06\",\r\n    \"2022-02-07\",\r\n    \"2022-02-08\",\r\n    \"2022-02-09\",\r\n    \"2022-02-10\",\r\n    \"2022-02-11\",\r\n    \"2022-02-12\",\r\n    \"2022-02-13\",\r\n    \"2022-02-14\",\r\n    \"2022-02-15\",\r\n    \"2022-02-16\",\r\n    \"2022-02-17\",\r\n    \"2022-02-18\",\r\n    \"2022-02-19\",\r\n    \"2022-02-20\",\r\n    \"2022-02-21\",\r\n    \"2022-02-22\",\r\n    \"2022-02-23\",\r\n    \"2022-02-24\",\r\n    \"2022-02-25\",\r\n    \"2022-02-26\",\r\n    \"2022-02-27\",\r\n    \"2022-02-28\",\r\n    \"2022-03-01\",\r\n    \"2022-03-02\",\r\n    \"2022-03-03\",\r\n    \"2022-03-04\",\r\n    \"2022-03-05\",\r\n    \"2022-03-06\",\r\n    \"2022-03-07\",\r\n    \"2022-03-08\",\r\n    \"2022-03-09\",\r\n    \"2022-03-10\",\r\n    \"2022-03-11\",\r\n    \"2022-03-12\",\r\n    \"2022-03-13\",\r\n    \"2022-03-14\",\r\n    \"2022-03-15\",\r\n    \"2022-03-16\",\r\n    \"2022-03-17\",\r\n    \"2022-03-18\",\r\n    \"2022-03-19\",\r\n    \"2022-03-20\",\r\n    \"2022-03-21\",\r\n    \"2022-03-22\",\r\n    \"2022-03-23\",\r\n    \"2022-03-24\",\r\n    \"2022-03-25\",\r\n    \"2022-03-26\",\r\n    \"2022-03-27\",\r\n    \"2022-03-28\",\r\n    \"2022-03-29\",\r\n    \"2022-03-30\",\r\n    \"2022-03-31\",\r\n    \"2022-04-01\",\r\n    \"2022-04-02\",\r\n    \"2022-04-03\",\r\n    \"2022-04-04\",\r\n    \"2022-04-05\",\r\n    \"2022-04-06\",\r\n    \"2022-04-07\",\r\n    \"2022-04-08\",\r\n    \"2022-04-09\",\r\n    \"2022-04-10\",\r\n    \"2022-04-11\",\r\n    \"2022-04-12\",\r\n    \"2022-04-13\",\r\n    \"2022-04-14\",\r\n    \"2022-04-15\",\r\n    \"2022-04-16\",\r\n    \"2022-04-17\",\r\n    \"2022-04-18\",\r\n    \"2022-04-19\",\r\n    \"2022-04-20\",\r\n    \"2022-04-21\",\r\n    \"2022-04-22\",\r\n    \"2022-04-23\",\r\n    \"2022-04-24\",\r\n    \"2022-04-25\",\r\n    \"2022-04-26\",\r\n    \"2022-04-27\",\r\n    \"2022-04-28\",\r\n    \"2022-04-29\",\r\n    \"2022-04-30\",\r\n    \"2022-05-01\",\r\n    \"2022-05-02\",\r\n    \"2022-05-03\",\r\n    \"2022-05-04\",\r\n    \"2022-05-05\",\r\n    \"2022-05-06\",\r\n    \"2022-05-07\",\r\n    \"2022-05-08\",\r\n    \"2022-05-09\",\r\n    \"2022-05-10\",\r\n    \"2022-05-11\",\r\n    \"2022-05-12\",\r\n    \"2022-05-13\",\r\n    \"2022-05-14\",\r\n    \"2022-05-15\",\r\n    \"2022-05-16\",\r\n    \"2022-05-17\",\r\n    \"2022-05-18\",\r\n    \"2022-05-19\",\r\n    \"2022-05-20\",\r\n    \"2022-05-21\",\r\n    \"2022-05-22\",\r\n    \"2022-05-23\",\r\n    \"2022-05-24\",\r\n    \"2022-05-25\",\r\n    \"2022-05-26\",\r\n    \"2022-05-27\",\r\n    \"2022-05-28\",\r\n    \"2022-05-29\",\r\n    \"2022-05-30\",\r\n    \"2022-05-31\",\r\n    \"2022-06-01\",\r\n    \"2022-06-02\",\r\n    \"2022-06-03\",\r\n    \"2022-06-04\",\r\n    \"2022-06-05\",\r\n    \"2022-06-06\",\r\n    \"2022-06-07\",\r\n    \"2022-06-08\",\r\n    \"2022-06-09\",\r\n    \"2022-06-10\",\r\n    \"2022-06-11\",\r\n    \"2022-06-12\",\r\n    \"2022-06-13\",\r\n    \"2022-06-14\",\r\n    \"2022-06-15\",\r\n    \"2022-06-16\",\r\n    \"2022-06-17\",\r\n    \"2022-06-18\",\r\n    \"2022-06-19\",\r\n    \"2022-06-20\",\r\n    \"2022-06-21\",\r\n    \"2022-06-22\",\r\n    \"2022-06-23\",\r\n    \"2022-06-24\",\r\n    \"2022-06-25\",\r\n    \"2022-06-26\",\r\n    \"2022-06-27\",\r\n    \"2022-06-28\",\r\n    \"2022-06-29\",\r\n    \"2022-06-30\"\r\n]\r\nexport default dateRange;","//import StatusBar from 'react-native'\r\nimport { StatusBar } from 'expo-status-bar';\r\nimport { Platform } from 'react-native';\r\n\r\nconst styles = {\r\n    mainView: {\r\n        flex: 1,                 \r\n        marginTop: StatusBar.currentHeight,\r\n    },\r\n    postButton: {\r\n        position: 'absolute',\r\n        height: 60,\r\n        width: 60,\r\n        borderRadius: 30,\r\n        bottom: '0%',\r\n        alignSelf: 'center',\r\n        backgroundColor: 'rgba(0,0,0,1)',\r\n        justifyContent: 'center',  \r\n    },\r\n    postButtonLabel: {\r\n        alignSelf: 'center',\r\n    },\r\n    scrollView: {\r\n        paddingHorizontal: Platform.OS != 'web' ? '5%' : '25%',\r\n        width: '100%',\r\n        alignSelf: 'center'\r\n    },\r\n    section: {\r\n        paddingVertical: '16%',\r\n        borderBottomWidth: 1,\r\n        borderColor: 'rgba(155,155,155,0.3)',\r\n\r\n    },\r\n    sectionTitle: {\r\n        paddingVertical: 7.5,\r\n        fontSize: 18,\r\n        color: 'white',\r\n        fontWeight: '400',\r\n        // backgroundColor: 'blue',    \r\n    },\r\n    card: {\r\n        marginTop: '5%',\r\n        paddingVertical: 5,\r\n        paddingHorizontal: 10,\r\n        borderRadius: 20,\r\n        backgroundColor: 'rgba(0,0,0,0.2)',\r\n    },\r\n    cardRow: {\r\n        flexDirection: 'row',\r\n        paddingVertical: 5,\r\n        // justifyContent: 'center',\r\n        alignItems: 'center',\r\n        // backgroundColor: 'blue',  \r\n        // borderWidth: 2,  \r\n    },\r\n    moodBadge: {\r\n        fontFamily: 'sans-serif',\r\n        backgroundColor: 'green',\r\n        borderRadius: 30,\r\n        paddingVertical: 6,\r\n        width: 130,\r\n        fontSize: 16,\r\n        textAlign: 'center',\r\n        // left: 5,\r\n    },\r\n    emotionBadge: {\r\n        fontFamily: 'sans-serif',\r\n        backgroundColor: 'aliceblue',\r\n        borderRadius: 30,\r\n        paddingVertical: 7,\r\n        paddingHorizontal: 12.5,\r\n        marginRight: 6,\r\n        // width: '100%', //must be removed, badge should have text width\r\n        fontSize: 15,\r\n        textAlign: 'center',\r\n    },\r\n    textBadge: {\r\n        fontFamily: 'sans-serif',\r\n        backgroundColor: 'aliceblue',\r\n        borderRadius: 20,\r\n        paddingVertical: 4,\r\n        paddingHorizontal: 10,\r\n        width: '100%', //must be removed, badge should have text width\r\n        fontSize: 14,\r\n        lineHeight: 22,\r\n        textAlign: 'left',\r\n    },\r\n    text: {\r\n        fontFamily: 'sans-serif',\r\n        fontSize: 14,\r\n        color: 'white'\r\n    },\r\n    spaceBetween: {\r\n        justifyContent: 'space-between',\r\n    },\r\n    icon: {\r\n        paddingHorizontal: 12,\r\n        },\r\n    entryIcon: {\r\n        paddingRight: 30,\r\n        },\r\n    \r\n};\r\n\r\nexport default styles;","\r\nimport React, { Component } from 'react';\r\nimport { View, Text, ImageBackground, Pressable, ScrollView} from 'react-native';\r\nimport { Icon } from 'react-native-eva-icons'\r\n\r\nconsole.log('Navigator.arguments: ' + JSON.stringify(Navigator.arguments))    \r\n\r\nimport DATA from '../shared/DatabaseReduced'\r\nimport dateRange from '../shared/dateRange'\r\nimport styles from '../styles/entrancesStyles'\r\n\r\nconst cors_uri = 'https://morning-journey-78874.herokuapp.com/'\r\n\r\nfunction convertMonthSig(monthSig) {\r\n    const monthSigs = ['Jan', 'Feb', 'Mar', 'Apr', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dec']\r\n    const months = ['01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12']\r\n    const thisMonth = months[monthSigs.indexOf(monthSig)]\r\n    return thisMonth\r\n}\r\nfunction getTime() {\r\n    //Wed,Jan,26,2022,15:12:37,GMT-0300,(Horário,Padrão,de,Brasília)\r\n    const now = Date().toString().split(' ')\r\n    const time = now[4]\r\n    return time\r\n}\r\nfunction getToday() {\r\n    const now = Date().toString().split(' ')\r\n    const today = [ now[3], convertMonthSig(now[1]), now[2] ].join('-')\r\n    return today\r\n}\r\nfunction getNextDate(date, next='next') {\r\n    const nextDate = dateRange[dateRange.indexOf(date) + (next=='previous' ? -1 : 1)]\r\n    return nextDate\r\n}\r\n\r\nconst now = new Date().toString().split(' ')\r\nconst date = now[2]+'th ' + now[1]\r\n\r\n\r\nfunction LoadAddress ({entry}) {\r\n    if (entry.address) {\r\n        return(\r\n            <View style={styles.cardRow}>\r\n                <Icon name='pin' height={16} width={16} fill='rgba(255,255,255,0.75)' style={styles.icon} />\r\n                <Text style={styles.text}>{entry.address}</Text>\r\n            </View>        \r\n        )\r\n    } else {\r\n        return <></>\r\n    }\r\n}\r\nfunction Loadjornal ({entry}) {\r\n    if (entry.jornal) {\r\n        return <Text style={styles.textBadge}>{entry.jornal}</Text>\r\n    } else {\r\n        return <></>\r\n    }\r\n}\r\nfunction LoadEmotions ({entry}) {\r\n    if (entry.emotions.length>0) {\r\n        return (\r\n                    entry.emotions.map((emotion, index) => {\r\n                        return(\r\n                            <Text key={index} style={styles.emotionBadge}>{emotion}</Text>\r\n                        )\r\n                    })\r\n        )\r\n    } else {\r\n        return (\r\n            <></>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nconst moodColors = {'Horrível': 'red', 'Mau': 'blue', 'Regular': 'grey', 'Good': 'orange', 'Bem': 'orange', 'Ótimo': 'green', 'Great': 'green'};\r\nfunction EntryCard({ entry }) {\r\n    return (\r\n        <View key={entry._id} style={styles.card}>\r\n            \r\n            <View style={[styles.cardRow, styles.spaceBetween]}>\r\n                <Text style={[styles.moodBadge, {backgroundColor: moodColors[entry.mood]}]}>{entry.mood}</Text>\r\n                <View style={[styles.cardRow]}>\r\n                    <Icon name='edit' height={18} width={18} fill='rgba(255,255,255,0.75)' style={styles.icon} />\r\n                    <Text style={styles.text}>{entry.time}</Text>\r\n               </View>\r\n            </View>\r\n\r\n            <View style={styles.cardRow}>\r\n                <LoadEmotions entry={entry} />\r\n            </View>        \r\n            \r\n                <LoadAddress entry={entry} />\r\n\r\n            <View style={styles.cardRow}>\r\n                <Loadjornal entry={entry} />\r\n            </View>\r\n        \r\n        </View>\r\n    );\r\n}\r\n\r\nexport default class EntrancesScreen extends Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            userEntries: [],\r\n            date: getToday(),\r\n            time: getTime(),\r\n            selectedDate: getToday(),\r\n            isLoading: false,\r\n            isDataSynced: false,\r\n        };\r\n        this.showTodayIfNewEntry = this.showTodayIfNewEntry.bind(this);\r\n        this.onNextButtonPress = this.onNextButtonPress.bind(this);\r\n        this.loadUserData = this.loadUserData.bind(this);\r\n    }\r\n    \r\n    onNextButtonPress(next='next') { \r\n\r\n        function setSelectedDate() {\r\n            this.setState( {selectedDate: getNextDate(this.state.selectedDate, next)} ) \r\n        }\r\n        setSelectedDate = setSelectedDate.bind(this);\r\n        return setSelectedDate\r\n    }\r\n\r\n    showTodayIfNewEntry() {\r\n        console.log('Checking if user just posted an entry...');\r\n        if (this.props.route.params) {\r\n            if (this.props.route.params.newPost) {\r\n                console.log('Checked, user posted. Setting today as selected date...')\r\n\r\n                this.setState({\r\n                    selectedDate: getToday(),\r\n                    isDataSynced: false,\r\n                });\r\n                this.props.navigation.setParams({newPost: false});\r\n            } else console.log('Checked, user did not just post.')\r\n        }\r\n    }\r\n\r\n    async loadUserData() {\r\n\r\n        if (!this.state.isDataSynced & !this.state.isLoading) {\r\n\r\n            var info = this.props.route.params.userInfo;\r\n            this.setState({ isLoading: true });\r\n      \r\n            try {\r\n            console.log('Attempting to sync user entries...')\r\n            var UsersResult = await fetch(`${cors_uri}https://mood-tracker-server.herokuapp.com/Users`, { method: 'GET' });\r\n              \r\n              if (!UsersResult.ok) {\r\n                console.log('fetch GET request failed. Throwing error...')\r\n                throw new Error(UsersResult.status + ', ' + UsersResult.statusText + '. For GET request in url: ' + UsersResult.url)\r\n              } else {\r\n\r\n                console.log('fetch GET request successful.')\r\n                console.log(UsersResult.status + ', ' + UsersResult.statusText + '. For GET request in url: ' + UsersResult.url)\r\n      \r\n                const Users = await UsersResult.json();\r\n                const user = Users.filter((user) => user.username === info.username)[0]\r\n                this.setState({userEntries: user['entries'].reverse(), isDataSynced: true})  \r\n                console.log('User entries successfully synced!')\r\n              }\r\n    \r\n            } catch (error) {\r\n              alert('Erro ao carregar entradas, tente novamente.')\r\n              console.log('Erro capturado:')\r\n              console.log(error);\r\n      \r\n            } finally {\r\n              this.setState({ isLoading: false });\r\n            }    \r\n        \r\n        } else {\r\n            console.log('User data loading or already synced, skipping sync...')\r\n        }\r\n      }\r\n\r\n    render() {\r\n\r\n        const isToday = this.state.selectedDate === this.state.date\r\n        this.showTodayIfNewEntry();        \r\n        this.loadUserData()\r\n\r\n        return(\r\n\r\n            <ImageBackground source={require('../assets/wallpaper.jpg')} style={[styles.mainView]}>\r\n                <ScrollView style={styles.scrollView}>\r\n\r\n                    <View style={styles.section}>\r\n                        <View style={[styles.cardRow, {justifyContent: 'space-between'}]}>\r\n                            <Pressable onPress={ this.onNextButtonPress('previous') }>\r\n                                <Icon name='arrow-back' width={35} height={35} fill='white' />\r\n                            </Pressable>\r\n                            <Text style={styles.sectionTitle}>{'Suas entradas  •  ' + ( this.state.selectedDate===this.state.date ? 'Hoje, ' : '' ) + this.state.selectedDate}</Text>\r\n                            {\r\n                                !isToday ? (\r\n                                    <Pressable onPress={ this.onNextButtonPress() }>\r\n                                        <Icon name='arrow-forward' width={35} height={35} fill='white' />\r\n                                    </Pressable>   \r\n                                ) : (\r\n                                    <View></View>\r\n                                )\r\n                            }\r\n                        </View>\r\n                        {this.state.userEntries.filter( (entry) => entry.date === this.state.selectedDate ).map(entry => <EntryCard entry={entry} />)}\r\n        \r\n                    </View>\r\n                    \r\n                    {/* <View style={styles.section}>\r\n                        <Text style={styles.sectionTitle}>Gratidão</Text>\r\n                        {this.state.DATA.map(entry => <anotherExampleCard key={entry._id} entry={entry} />)}\r\n                    </View> */}\r\n\r\n                </ScrollView>\r\n\r\n                <Pressable onPress={() => { this.props.navigation.navigate( 'PostEntrance', {} )} }  style={[styles.postButton]}>\r\n                        <Icon name='plus-circle' width={72} height={72} fill='white' style={styles.postButtonLabel}/>\r\n                </Pressable>\r\n  \r\n            </ImageBackground>\r\n            )\r\n      \r\n    }\r\n  }\r\n","const styles = {\r\n  \r\n  entrances: {\r\n    marginTop: 27.5,\r\n    borderWidth: 0,\r\n    flex:1,\r\n    justifyContent: 'space-between',\r\n    alignItems: 'flex-start',\r\n    paddingVertical: '0%',\r\n    paddingHorizontal: '0%',\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    // paddingVertical: '5%',\r\n    paddingBottom: '0%',\r\n    paddingHorizontal: '6%',\r\n    alignSelf: 'stretch',\r\n    // justifyContent: 'space-between',\r\n    borderColor: 'black',\r\n    // borderWidth: 3,\r\n    // backgroundColor: 'blue',\r\n  },\r\n  section: {\r\n    // flex: 1,\r\n    paddingVertical: '10%',\r\n    paddingHorizontal: '10%',\r\n    justifyContent: 'flex-start',\r\n    borderTopWidth: 1,\r\n    borderBottomWidth: 1,\r\n  },\r\n  contentRow: {\r\n    // flex: 1,\r\n    // alignSelf: 'stretch', \r\n    flexDirection: 'column',\r\n    padding: 10,\r\n    marginTop: 22,\r\n    borderWidth: 1,\r\n    borderColor: 'rgba(155,155,155, 0.4)',\r\n    borderRadius: 30,\r\n    backgroundColor: 'rgba(255,255,255, 0.3)',\r\n\r\n  },\r\n  entryTitle: {\r\n    paddingBottom: 3,\r\n    paddingLeft: 5,\r\n    fontSize: 19,\r\n    // textAlign: 'center',\r\n    color: 'white'\r\n  },\r\n  postButtonView: {\r\n    // flexDirection: 'row',\r\n    height: 60,\r\n    width: 60,\r\n    borderRadius: 30,\r\n    alignSelf: 'center',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    backgroundColor: 'white',\r\n  },\r\n  postButton: {\r\n    // flex: 1,\r\n    // justifyContent: 'center',\r\n    // alignItems: 'center',\r\n    // borderColor: 'black',\r\n    // borderWidth: 3,\r\n    // backgroundColor: 'blue',\r\n  },\r\n  postButtonLabel: {\r\n    // alignSelf: 'center',\r\n    fontSize: 45,\r\n    fontWeight: 'bold',\r\n  },\r\n  moodButton: {\r\n      borderRadius: 30,\r\n      justifyContent: 'center',\r\n  },\r\n  date: {\r\n    position: 'relative',\r\n    left: '60%',\r\n    paddingVertical: 8,\r\n    paddingHorizontal: 10,\r\n    fontSize: 15,\r\n    alignSelf: 'center',\r\n    backgroundColor: 'white',\r\n    borderRadius: 20\r\n  },\r\n  jornalText: {\r\n    paddingVertical: 5,\r\n    paddingHorizontal: 10,\r\n    minHeight:100,\r\n    width: '100%',\r\n    borderRadius: 20,\r\n    color: 'white',\r\n    fontSize: 14,\r\n  },\r\n  saveButton: {\r\n    // position: 'absolute',\r\n    // bottom: 0,\r\n    height: 50,\r\n    width: '100%',\r\n    // alignSelf: 'center',\r\n    borderTopLeftRadius: 30,\r\n    borderTopRightRadius: 30,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    backgroundColor: 'white'\r\n  },\r\n  card: {\r\n    marginTop: '5%',\r\n    paddingVertical: 5,\r\n    paddingHorizontal: 10,\r\n    borderRadius: 20,\r\n    backgroundColor: 'rgba(255,255,255,0.3)',\r\n},\r\ncardRow: {\r\n    flexDirection: 'row',\r\n    paddingVertical: 5,\r\n    // justifyContent: 'center',\r\n    alignItems: 'center',\r\n    // backgroundColor: 'blue',  \r\n    // borderWidth: 2,  \r\n},\r\nmoodBadge: {\r\n    backgroundColor: 'green',\r\n    borderRadius: 30,\r\n    paddingVertical: 6,\r\n    width: 130,\r\n    fontSize: 16,\r\n    textAlign: 'center',\r\n    // left: 5,\r\n},\r\nemotionBadge: {\r\n    backgroundColor: 'rgba(1,1,1,0.5)',\r\n    borderRadius: 30,\r\n    paddingVertical: 7,\r\n    paddingHorizontal: 12.5,\r\n    marginRight: 6,\r\n    // width: '100%', //must be removed, badge should have text width\r\n    fontSize: 15,\r\n    textAlign: 'center',\r\n},\r\n\r\n}\r\n\r\nexport default styles;","import React, {useState, Component} from 'react';\r\nimport { View, Text, ImageBackground, Pressable, ScrollView } from 'react-native';\r\nimport { TextInput} from 'react-native-gesture-handler';\r\nimport { Icon } from 'react-native-eva-icons'\r\n\r\nimport styles from '../styles/postEntryStyles'\r\nimport styles2 from '../styles/entrancesStyles'\r\n\r\nconst cors_uri = 'https://morning-journey-78874.herokuapp.com/'\r\n\r\nstyles.emotionBadge = {\r\n    backgroundColor: 'rgba(1,1,1,0.5)',\r\n    borderRadius: 30,\r\n    paddingVertical: 7,\r\n    paddingHorizontal: 12.5,\r\n    marginRight: 6,\r\n    // width: '100%', //must be removed, badge should have text width\r\n    fontSize: 15,\r\n    textAlign: 'center',\r\n}\r\n\r\nstyles.text = {fontSize: 14}\r\n\r\n\r\n// Date() => wed jan 91 2022 07:46:57 ...\r\nconst now = new Date().toString().split(' ')\r\nconst datetime = now[2] + ' ' + now[1] + ' ' + now[3] + ' - ' + now[4].slice(0, 5)\r\n\r\nconst goodEnergizedEmotions = ['Animado(a)', 'Concentrado(a)', 'Desinibido(a)', 'Motivado(a)', 'Energizado(a)', 'Euforico(a)', 'Emocionado(a)', 'Amor']\r\nconst goodCalmEmotions = ['Alíviado(a)', 'Calmo(a)', 'Confortável', 'Despreocupado(a)', 'Inspirado(a)', 'Orgulhoso(a)', 'Paz', 'Relaxado(a)', 'Satisfeito(a)', 'Seguro(a)']\r\nconst badEnergizedEmotions = ['Agitado(a)', 'Ansioso(a)', 'Triste', 'Decepcionado(a)', 'Depressivo(a)', 'Desesperado(a)', 'Frustrado(a)', 'Insatisfeito(a)', 'Irritado(a)', 'Medo', 'Paranoico(a)', 'Preocupado(a)', 'Impaciente', 'Raiva', 'Revoltado(a)', 'Sobrecarregado(a)', 'Tenso(a)', 'Anti-social', 'Enojado(a)']\r\nconst badCalmEmotions = ['Timido(a)', 'Cansado(a)', 'Confuso(a)', 'Desanimado(a)', 'Vergonha', 'Inseguro(a)', 'Apático(a)', 'Solitário(a)', 'Tedio']\r\nconst basicEmotions = [ ...goodEnergizedEmotions, ...goodCalmEmotions, ...badEnergizedEmotions, ...badCalmEmotions]\r\nconst emotionGroups = [goodEnergizedEmotions, goodCalmEmotions, badEnergizedEmotions, badCalmEmotions]\r\nconst emotionGroupsNames = ['Bem & Energizado', 'Bem & Calmo', 'Mal e Energizado', 'Mal & Calmo']\r\nvar isSelectedEmotions = {}\r\nfor (var i=0; i<basicEmotions.length; i++){\r\nisSelectedEmotions[basicEmotions[i]] = false\r\n}\r\n// Array(basicEmotions.length).fill(false)\r\n\r\n\r\nfunction convertMonthSig(monthSig) {\r\n    const monthSigs = ['Jan', 'Feb', 'Mar', 'Apr', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dec']\r\n    const months = ['01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12']\r\n    const thisMonth = months[monthSigs.indexOf(monthSig)]\r\n    return thisMonth\r\n}\r\n\r\nfunction getTime() {\r\n    //Wed,Jan,26,2022,15:12:37,GMT-0300,(Horário,Padrão,de,Brasília)\r\n    const now = Date().toString().split(' ')\r\n    const time = now[4]\r\n    return time\r\n}\r\n\r\nfunction getToday() {\r\n    const now = Date().toString().split(' ')\r\n    const today = [ now[3], convertMonthSig(now[1]), now[2] ].join('-')\r\n    return today\r\n}\r\n\r\nfunction FormattedTime() {\r\n    // const time = new Date().toString().split(' ')[4]\r\n    var newTime = getTime().slice(0,5)\r\n    var h = parseInt(newTime.slice(0,2))\r\n    var m = parseInt(newTime.slice(3,5))\r\n    newTime = h > 12 ? ( (h-12).toString().length==1 ? '0'+(h-12) : h-12 ) + ':' +  m + ' PM' : ( h.toString().length==1 ? '0'+ h : h ) + ':' + m + ' AM'\r\n    return newTime\r\n}\r\n\r\nexport default class PostEntranceScreen extends Component {\r\n  \r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            moodButtons: {\r\n            colors: ['darkred', 'lightblue', 'darkgrey', 'pink', 'lightgreen'],\r\n            colorsSelected: ['red', 'blue', 'grey', 'purple', 'green'],\r\n            moods: ['Horrivel', 'Mal', 'Regular', 'Bem', 'Ótimo'],  \r\n            },\r\n            emotionButtons: {\r\n                isSelectedEmotions: isSelectedEmotions,\r\n                basicEmotions: basicEmotions,\r\n                emotionGroups: emotionGroups,\r\n            },\r\n            star: false,\r\n            selectedMood: null,\r\n            jornalEntry: '',    \r\n            emotions: [],\r\n            address: '',\r\n\r\n            startTime: FormattedTime(),\r\n            selectedEntry: 'Mood',\r\n            isLoading: false,\r\n        };\r\n\r\n        this.onSaveButtonPress = this.onSaveButtonPress.bind(this);\r\n        this.EmotionButtons = this.EmotionButtons.bind(this);\r\n        this.MoodButtons = this.MoodButtons.bind(this);\r\n        this.postEntryHeader = this.postEntryHeader.bind(this);\r\n        this.onEmotionButtonPress = this.onEmotionButtonPress.bind(this);\r\n        this.onMoodButtonPress = this.onMoodButtonPress.bind(this);\r\n        this.inputSection = this.inputSection.bind(this);\r\n        this.setSelectedEntry = this.setSelectedEntry.bind(this);\r\n        this.InputCard = this.InputCard.bind(this);\r\n        this.JornalInput = this.JornalInput.bind(this);\r\n        this.postNewEntryAsync = this.postNewEntryAsync.bind(this);\r\n    }\r\n\r\n    postEntryHeader() {\r\n        return(\r\n            <View style={[styles2.cardRow, {justifyContent: 'space-between'}]}>\r\n                <Pressable onPress={() => {this.props.navigation.goBack()}}  style={styles.postButton}>\r\n                    <Icon name='arrow-back' fill='white' height={30} width={30}/>\r\n                </Pressable>\r\n                <View style={[styles2.emotionBadge, {flexDirection: 'row'}]}>\r\n                    <Text > {datetime} </Text>\r\n                    <Icon name='edit' fill='rgba(75,75,75,1)' height={20} width={20}/>\r\n                </View>\r\n                <Pressable onPress={() => {this.setState({star: !this.state.star})}}  style={styles.postButton}>\r\n                    <Icon name={this.state.star ? 'star' : 'star-outline'} fill='rgba(245,245,245,0.7)' height={30} width={30}/>\r\n                </Pressable>\r\n            </View>\r\n        )\r\n    }\r\n\r\n    onMoodButtonPress(item) {\r\n        // alert(e)\r\n        function selectMood() {\r\n            if (this.state.selectedMood==item) {\r\n                this.setState({selectedMood: null})\r\n            } else {\r\n                this.setState({selectedMood: item})\r\n            }\r\n        }\r\n        selectMood = selectMood.bind(this);\r\n        return selectMood\r\n    }\r\n\r\n    onEmotionButtonPress(emotion) { \r\n        function selectEmotion () {\r\n            this.setState({\r\n                emotionButtons: {\r\n                    ...this.state.emotionButtons,\r\n                    isSelectedEmotions: {\r\n                        ...this.state.emotionButtons.isSelectedEmotions,\r\n                        [emotion]: !this.state.emotionButtons.isSelectedEmotions[emotion]\r\n                    }\r\n                }\r\n            })\r\n        }\r\n        selectEmotion = selectEmotion.bind(this);\r\n        return selectEmotion\r\n    }\r\n\r\n    MoodButtons() {\r\n        return(\r\n            this.state.moodButtons.moods.map((item, index) => (\r\n                <View key={'mood '+index} style={{width: 65, height: 65, alignItems: 'center', justifyContent: 'center'}} >\r\n                    <Pressable\r\n                    title={item}\r\n                    onPress={this.onMoodButtonPress(item)}\r\n                    style={[\r\n                        styles.moodButton,\r\n                        this.state.selectedMood==item ? {\r\n                            height: 60,\r\n                            width: 60,\r\n                            fontWeight: 'bold',\r\n                            backgroundColor: this.state.moodButtons.colorsSelected[index],\r\n                            borderWidth: 2,\r\n                            borderColor: this.state.moodButtons.colors[index],\r\n                        } : {\r\n                            height: 50,\r\n                            width: 50,\r\n                            fontWeight: null,\r\n                            backgroundColor: this.state.moodButtons.colors[index]\r\n                        }\r\n                    ]}\r\n                    >\r\n                        <Text style={{textAlign: 'center', textAlignVertical: 'center'}}>{item}</Text>\r\n                    </Pressable>\r\n                </View>\r\n            ))\r\n        )\r\n    }\r\n\r\n    EmotionButtons(emotions) {\r\n        return(\r\n            emotions.map( emotion => (\r\n                <Pressable\r\n                title={emotion}\r\n                style={ {paddingVertical: 5} }\r\n                onPress={this.onEmotionButtonPress(emotion)}\r\n                >\r\n                    <Text style={[styles.emotionBadge, {backgroundColor: this.state.emotionButtons.isSelectedEmotions[emotion] ? 'steelblue' : 'white' }]}>{emotion}</Text>\r\n                </Pressable>\r\n            ))\r\n        )\r\n    }\r\n\r\n    JornalInput() {\r\n        return(\r\n        <TextInput multiline \r\n            placeholder='Today was...' \r\n            style={styles.jornalText}\r\n            onChangeText={text => this.setState({jornalEntry: text})}\r\n            value={this.state.jornalEntry}\r\n            >\r\n        </TextInput>\r\n        )\r\n    }\r\n\r\n    setSelectedEntry (entry) {\r\n        function setSelected() {\r\n            this.setState( {selectedEntry:  this.state.selectedEntry === entry ? null : entry  } )\r\n        }\r\n        setSelected = setSelected.bind(this);\r\n        return setSelected\r\n    }\r\n\r\n    inputSection(section, inputStyle, inputs) {\r\n        // if (this.state.isEntrySelected[section]) {\r\n        if (this.state.selectedEntry === section) {\r\n\r\n            if (section == 'Emotions') {\r\n                return this.state.emotionButtons.emotionGroups.map((emotions, index) => (\r\n                    <View style={{width: '100%', alignItems: 'center'}}>\r\n                        <Text style={{fontSize: 15, color: 'white', paddingVertical: 11}}>{emotionGroupsNames[index]}</Text>\r\n                        <View key={index} style={[styles2.cardRow, inputStyle]}>\r\n                            {inputs(emotions)}\r\n                        </View>\r\n                    </View>\r\n                ))\r\n            } else {\r\n                return(\r\n                    <View style={[styles2.cardRow, inputStyle]}>\r\n                        {inputs}\r\n                    </View>\r\n                )    \r\n            }\r\n        } else {\r\n            return(\r\n                <></>\r\n            )\r\n        }\r\n\r\n    }\r\n\r\n    InputCard(section, sectionName, icon, inputStyle, inputs) {\r\n        return(\r\n            <View style={[styles2.card]}>\r\n                <Pressable style={styles2.cardRow}  onPress={this.setSelectedEntry(section)}>\r\n                    <Icon name={icon} fill='rgba(255,255,255,0.75)' height={25} width={25} style={styles2.entryIcon}/>\r\n                    <Text style={styles.entryTitle}> {sectionName} </Text>\r\n                </Pressable>\r\n\r\n                {this.inputSection(section=section, inputStyle=inputStyle, inputs=inputs)}\r\n\r\n            </View>\r\n        )\r\n    }\r\n\r\n    onSaveButtonPress () {\r\n        if (!this.state.selectedMood) {\r\n            alert('Necessário adicionar uma avaliação.')\r\n\r\n        } else {\r\n            const newEntry = {\r\n                jornal: this.state.jornalEntry,\r\n                mood: this.state.selectedMood,\r\n                emotions: this.state.emotionButtons.basicEmotions.filter( emotion => this.state.emotionButtons.isSelectedEmotions[emotion] ) ,\r\n                address: this.state.address,\r\n                date: getToday(),\r\n                startTime: this.state.startTime,\r\n                endTime: FormattedTime(),\r\n                star: this.state.star,\r\n            }\r\n            this.postNewEntryAsync(newEntry)\r\n        }\r\n    }\r\n\r\n    async postNewEntryAsync(newEntry) {\r\n        this.setState({ isLoading: true });\r\n        var info = this.props.route.params.userInfo;\r\n\r\n        try {\r\n        const postUserEntryOpts = { \r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify( newEntry ),\r\n        }\r\n        var postUserEntryResult = await fetch(`${cors_uri}https://mood-tracker-server.herokuapp.com/Users/${info.username}/entries`, postUserEntryOpts);\r\n        // var postUserEntryResult = await fetch('http://localhost:3000/Users/'+info.username +'/entries', postUserEntryOpts);\r\n\r\n        if (postUserEntryResult.ok) {\r\n            console.log('fetch POST request successful. Printing response status...')\r\n            console.log('Status: ' + postUserEntryResult.status + ', ' + postUserEntryResult.statusText)\r\n\r\n            this.props.navigation.navigate('Entrances', {newPost: true} )    \r\n\r\n        } else {\r\n            console.log('fetch POST request failed. Throwing error status...')\r\n            throw new Error('Status: ' + postUserEntryResult.status + ', ' + postUserEntryResult.statusText)\r\n        }\r\n  \r\n        } catch (error) {\r\n          alert('Erro no servidor, não foi possível adicionar a entrada. Por favor, tente novamente.')\r\n          console.log('Erro capturado:')\r\n          console.log(error);\r\n\r\n        } finally {\r\n          this.setState({ isLoading: false });\r\n        }\r\n\r\n    }\r\n  \r\n    render() {\r\n\r\n        return(\r\n            <ImageBackground source={require('../assets/wallpaper.jpg')} style={{width: '100%', height: '100%'}}>\r\n                <ScrollView style={styles2.scrollView}>\r\n                    <View style={styles2.section}>\r\n                            {this.postEntryHeader()}\r\n                            {this.InputCard('Mood', 'Avaliação', 'activity', {justifyContent: 'space-between'}, this.MoodButtons())}\r\n                            {this.InputCard('Emotions', 'Emoções', 'color-palette', {flexWrap: 'wrap', justifyContent: 'space-evenly'}, this.EmotionButtons)}\r\n                            {this.InputCard('Jornal', 'Jornal', 'book-open', {flexDirection: 'column'}, this.JornalInput())}\r\n                    </View>\r\n                </ScrollView>  \r\n\r\n                <Pressable \r\n                onPress={this.onSaveButtonPress} \r\n                style={styles.saveButton}\r\n                >\r\n                    <Text style={{fontWeight:'bold', fontSize: 17}}>Salvar</Text>\r\n                </Pressable>\r\n    \r\n            </ImageBackground>\r\n        )    \r\n    }\r\n}\r\n","import { Icon } from 'react-native-eva-icons'\r\n\r\nimport React, { Component } from 'react';\r\nimport { View, Text, ImageBackground, TextInput, Pressable } from 'react-native';\r\n\r\nconst cors_uri = 'https://morning-journey-78874.herokuapp.com/'\r\n\r\nconst styles = {\r\n  login: {\r\n    mainView: {\r\n      flex: 1,\r\n      // padding: 30,\r\n      justifyContent: 'center',\r\n      alignItems: 'center',\r\n    },\r\n    card: {\r\n      height: '70%',\r\n      width: 350,\r\n      paddingHorizontal: 10,\r\n      paddingVertical: 10,\r\n      // paddingBottom: 20,\r\n      borderWidth: 1,\r\n      borderRadius: 10,\r\n      backgroundColor: 'azure',\r\n      // justifyContent: 'start',\r\n    },\r\n    cardHeader: {\r\n      height: '30%',\r\n      fontSize: 25,\r\n      fontWeight: 'bold',\r\n      color: 'black',\r\n      paddingTop: 30,\r\n      paddingBottom: 50,\r\n      paddingLeft: 15,\r\n      // borderWidth: 2,\r\n    },\r\n    cardSection: {\r\n      height: '25%',\r\n      // width: '100%',\r\n      justifyContent: 'space-evenly',\r\n      alignItems: 'center',\r\n      // borderWidth: 1,\r\n    },\r\n    inputField: {\r\n      height: 40,\r\n      width: '100%',\r\n      // marginBottom: 10, \r\n      paddingLeft: 10,\r\n      fontSize: 14,\r\n      borderRadius: 5,\r\n      borderWidth: 1,\r\n      borderColor: 'grey',\r\n      backgroundColor: 'white'\r\n    },\r\n    button: {\r\n      height: 40,\r\n      width: '100%',\r\n      // marginBottom: 10,\r\n      borderRadius: 5,\r\n      borderWidth: 1,\r\n      borderColor: 'grey',\r\n      textAlign: 'center',\r\n      justifyContent: 'center',\r\n      backgroundColor: 'dodgerblue',        \r\n    },\r\n    buttonLabel: {\r\n      fontSize: 15,\r\n      fontWeight: 'bold',\r\n      color: 'black',\r\n    },\r\n    text: {\r\n      fontSize: 15,\r\n      textAlign: 'center',\r\n      // color: 'black',\r\n    },\r\n    loadingIcon: {\r\n      alignSelf: 'center'\r\n  },\r\n  }\r\n}\r\n\r\n  class LoginScreen extends Component {\r\n  \r\n    constructor(props) {\r\n      super(props);\r\n  \r\n      this.state = {\r\n        userInfo: {\r\n            password: '',\r\n            email: '',    \r\n            username: '',\r\n        },\r\n        isUserAuth: false,\r\n        isLoading: false,\r\n      }\r\n      this.onChangeText = this.onChangeText.bind(this);\r\n      this.submitButton = this.submitButton.bind(this);\r\n      this.onSignIn = this.onSignIn.bind(this);\r\n      this.onSignUp = this.onSignUp.bind(this);\r\n    }\r\n\r\n    loadingIcon() {\r\n      if (this.state.isLoading) {\r\n        return  <Icon name='loader-outline' animation='pulse' width={25} height={25}></Icon>// <Text>Loading...</Text>\r\n      } else {\r\n        return <></>\r\n      }\r\n    }\r\n\r\n    onChangeText(textField) {\r\n      function setField(text) {\r\n        this.setState( { userInfo: { ...this.state.userInfo, [textField] : text}} )\r\n      }\r\n      setField = setField.bind(this);\r\n      return setField\r\n    }\r\n  \r\n    submitButton(sign) {\r\n      const signIn = sign == 'signin'\r\n      return(\r\n        <Pressable onPress={signIn ? this.onSignIn : this.onSignUp} style={[styles.login.button]}>\r\n          <Text style={styles.login.buttonLabel}>{ signIn ? 'Entrar' : 'Cadastrar-se' }</Text>\r\n        </Pressable>\r\n      )\r\n    }\r\n\r\n    async onSignIn() {\r\n\r\n      var info = this.state.userInfo;\r\n      this.setState({ isLoading: true });\r\n\r\n      try {\r\n        var UsersResult = await fetch(`${cors_uri}https://mood-tracker-server.herokuapp.com/Users`, { method: 'GET' });\r\n        \r\n        if (UsersResult.ok) {\r\n          console.log('fetch GET request successful.')\r\n        } else {\r\n          console.log('fetch GET request failed. Throwing error...')\r\n          throw new Error(UsersResult.status + ', ' + UsersResult.statusText + '. For GET request in url: ' + UsersResult.url)\r\n        }\r\n\r\n        const Users = await UsersResult.json();\r\n        const user = Users.filter((user) => user.email === info.email)[0]\r\n        \r\n        if ( user ) {          \r\n          \r\n          if (user.password === info.password) {\r\n            alert('Login realizado com sucesso!')\r\n            this.setState({isUserAuth: true, userInfo: { ...info, username: info.email.split('@')[0]} })\r\n            this.props.authUser(this.state.userInfo)  // Father class component method that authenticates the user.\r\n\r\n          } else {\r\n            const errMsg = 'Senha incorreta'\r\n            alert(errMsg)\r\n            console.log(errMsg)\r\n            return  \r\n          }\r\n\r\n        } else {\r\n          const errMsg = 'Email não cadastrado.'\r\n          alert(errMsg)\r\n          console.log(errMsg)\r\n          return\r\n        }\r\n\r\n      } catch (error) {\r\n        alert('Operação não concluída, tente novamente.')\r\n        console.log('Erro capturado:')\r\n        console.log(error);\r\n\r\n      } finally {\r\n        this.setState({ isLoading: false });\r\n      }\r\n    }\r\n\r\n    async onSignUp() {\r\n      this.setState({ isLoading: true });\r\n      var info = this.state.userInfo;\r\n      try {\r\n        var UsersResult = await fetch(`${cors_uri}https://mood-tracker-server.herokuapp.com/Users`, { method: 'GET' });\r\n        if (UsersResult.ok) {\r\n          console.log('fetch GET request successful.')\r\n        } else {\r\n          console.log('fetch GET request failed. Throwing error.')\r\n          throw new Error(UsersResult.status + ', ' + UsersResult.statusText + '. For GET request in url: ' + UsersResult.url)\r\n        }\r\n\r\n        const Users = await UsersResult.json();\r\n        if ( Users.filter((user) => user.email === info.email)[0] ) {          \r\n            const errMsg = 'Email já cadastrado.'\r\n            alert(errMsg)\r\n            console.log(errMsg)\r\n            return  \r\n\r\n        } else { // ready to post user info and create new user account.\r\n          info.username = info.email.split('@')[0]\r\n          const postUserOpts = { \r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify( { entries: [], ...info } )\r\n          }\r\n          var postUserResult = await fetch(`${cors_uri}https://mood-tracker-server.herokuapp.com/Users/${info.username}`, postUserOpts);\r\n\r\n          if (postUserResult.ok) {\r\n            console.log('fetch POST request successful.')\r\n            console.log('Status: ' + postUserResult.status + ', ' + postUserResult.statusText + '. For POST request in url: ' + postUserResult.url)\r\n            this.onSignIn()\r\n            alert('Cadastro realizado com sucesso. Fazendo login...')\r\n\r\n          } else {\r\n            console.log('fetch POST request failed. Throwing error...')\r\n            throw new Error('Status: ' + postUserResult.status + ', ' + postUserResult.statusText + '. For GET request in url: ' + postUserResult.url)\r\n          }\r\n        }\r\n\r\n      } catch (error) {\r\n        alert('Erro no servidor, não foi possível realizar o cadastro. Por favor, tente novamente.')\r\n        console.log('Erro capturado:')\r\n        console.log(error);\r\n      } finally {\r\n        this.setState({ isLoading: false });\r\n      }\r\n    }\r\n  \r\n    render() {\r\n  \r\n      return(\r\n        <ImageBackground source={require('../assets/wallpaper.jpg')} style={[styles.login.mainView]}>\r\n          <View style={styles.login.card}>\r\n\r\n            <Text style={styles.login.cardHeader}>Entrar</Text>\r\n            {/* <View style={styles.login.cardBody}> */}\r\n              <View style={styles.login.cardSection}>\r\n                {/* <TextInput placeholder='Nome de Usuário' onChangeText={this.onChangeText('username')} style={styles.login.inputField} ></TextInput> */}\r\n                <TextInput placeholder='Email' onChangeText={this.onChangeText('email')} style={styles.login.inputField}></TextInput>\r\n                <TextInput placeholder='Senha' onChangeText={this.onChangeText('password')} style={styles.login.inputField}></TextInput>\r\n              </View>\r\n              <View style={styles.login.cardSection}>\r\n                {this.submitButton('signin')}\r\n                {this.submitButton('signup')}\r\n              </View>\r\n              <View style={styles.login.cardSection}>\r\n                {this.loadingIcon()}\r\n              </View>\r\n            {/* </View> */}\r\n\r\n          </View>\r\n        </ImageBackground>\r\n      )\r\n    }\r\n  }\r\n  \r\nexport default LoginScreen;","import { Icon } from 'react-native-eva-icons'\n\nimport React, { Component } from 'react';0\nimport { View, Text, ImageBackground, TextInput, Pressable } from 'react-native';\n\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\n//import { createDrawerNavigator } from '@react-navigation/drawer';\n\nimport EntrancesScreen from './components/EntrancesComponent';\nimport PostEntranceScreen from './components/PostEntryComponent';\nimport LoginScreen from './components/LoginComponent'\n\nconst Tab = createBottomTabNavigator();\nconst Stack = createNativeStackNavigator();\n\nfunction HomeScreen(props) {\n  return(    \n    <Stack.Navigator \n    initialRouteName='Entrances' \n    screenOptions={{\n      headerShown: false,\n    }}\n    > \n      <Stack.Screen\n      name=\"Entrances\"\n      component={EntrancesScreen}\n      options={{title: 'Suas entradas'}}\n      initialParams={{userInfo: props.route.params.userInfo}}\n      />\n      <Stack.Screen\n      name=\"PostEntrance\"\n      component={PostEntranceScreen}\n      options={{title: 'Adicione uma  entrada'}}\n      initialParams={{userInfo: props.route.params.userInfo}}\n      />\n    </Stack.Navigator>\n  )\n}\n\nfunction SettingsScreen() {\n  return(\n    <ImageBackground source={require('./assets/wallpaper.jpg')} style={{width: '100%', height: '100%'}}>\n      <Text>Settings</Text>\n    </ImageBackground>\n  )\n}\n\nconst mainScreenOptions = ({ route }) => ({\n  headerShown: false,\n  tabBarActiveTintColor: 'tomato',\n  tabBarInactiveTintColor: 'gray',\n  tabBarHideOnKeyboard: true,\n  tabBarIcon: ({ focused, color, size }) => {\n    let iconName;\n    if (route.name === 'Home') {\n      iconName = focused\n        ? 'book'\n        : 'book-outline';\n    } else if (route.name === 'Settings') {\n      iconName = focused ? 'settings' : 'settings-outline';\n    }\n    // You can return any component that you like here!\n    return <Icon name={iconName} width={size} height={size} fill='grey'></Icon>\n  },\n})\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isUserAuth: false,\n      userInfo: null,\n    };\n    this.authUser = this.authUser.bind(this);\n  }\n\n  authUser(userInfo) {\n    this.setState( {isUserAuth: true, userInfo: userInfo} )\n  }\n\n  render() {\n\n    if (!this.state.isUserAuth) {\n      return <LoginScreen authUser={this.authUser} />\n    } else {\n      return (\n        <NavigationContainer>\n          <Tab.Navigator\n            screenOptions={mainScreenOptions}\n          >\n            <Tab.Screen name=\"Home\" component={HomeScreen} initialParams={{userInfo: this.state.userInfo}}/>\n            <Tab.Screen name=\"Settings\" component={SettingsScreen} initialParams={{userInfo: this.state.userInfo}} />\n          </Tab.Navigator>    \n        </NavigationContainer>\n      );  \n    }\n  }\n} \n\nexport default App;","import { registerRootComponent } from 'expo';\n\nimport App from './App';\n\n// registerRootComponent calls AppRegistry.registerComponent('main', () => App);\n// It also ensures that whether you load the app in Expo Go or in a native build,\n// the environment is set up appropriately\nregisterRootComponent(App);\n"],"sourceRoot":""}