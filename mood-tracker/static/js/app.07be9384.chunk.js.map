{"version":3,"sources":["assets/wallpaper.jpg","styles/entrancesStyles.js","components/subcomponents/userEntryCards.js","shared/dateRange.js","components/EntrancesComponent.js","styles/postEntryStyles.js","components/subcomponents/GoogleMapsAPI.js","components/subcomponents/OpenWeatherMapAPI.js","components/PostEntryComponent.js","styles/loginStyles.js","components/LoginComponent.js","App.js","index.js"],"names":["module","exports","styles","mainView","flex","marginTop","StatusBar","currentHeight","postButton","position","height","width","borderRadius","bottom","alignSelf","backgroundColor","justifyContent","postButtonLabel","scrollView","section","paddingVertical","borderBottomWidth","borderColor","sectionTitle","fontSize","color","fontWeight","card","paddingHorizontal","cardRow","flexDirection","alignItems","moodBadge","fontFamily","textAlign","emotionBadge","marginRight","textBadge","lineHeight","text","spaceBetween","icon","entryIcon","paddingRight","borderWidth","moodColors","MoodHeader","entry","View","style","Text","mood","star","name","fill","paddingLeft","paddingBottom","startTime","slice","Address","useState","isCollapsed","setIsCollapsed","address","numberOfLines","onPress","Emotions","emotions","length","flexWrap","map","emotion","index","Pressable","Jornal","jornal","EntryCard","EmptyCard","props","textStyle","navigation","navigate","CardsLoadingMessage","UserEntryCards","state","date","userEntries","isEntriesSyncing","newPost","syncUserEntries","bind","console","log","this","setInterval","updateIfNewPost","forgetNewPost","selDateEntries","filter","a","async","setState","fetch","corsURI","method","UsersResult","usersStatus","status","statusText","ok","json","users","user","email","userInfo","reverse","entriesSynced","Error","UserEntryCardsList","Component","dateRange","monthDict","englishMonthSigs","portugueseMonthSigs","englishWeekDayMap","Today","now","Date","toString","split","join","getNextDate","next","nextDate","indexOf","formatDate","selDate","ymd","yesterday","englishWeekDay","weekDay","prefix","i","oneDigit","stringNumber","EntrancesScreen","time","selectedDate","entriesLoading","onNextButtonPress","setSelectedDate","setParams","isToday","ImageBackground","source","require","ScrollView","route","params","entrances","content","flexGrow","contentRow","padding","entryTitle","postButtonView","moodButtonView","moodButton","marginColor","marginWidth","left","jornalText","minHeight","saveButton","borderTopLeftRadius","borderTopRightRadius","entryCardEmotionBadge","GoogleMapsAPI","GoogleMapsJavascriptAPIkey","GoogleMapsGeocodingAPIKey","OpenWeatherMapAPI","KEY","Location","moods","emotionGroupsNames","goodEnergizedEmotions","goodCalmEmotions","badEnergizedEmotions","badCalmEmotions","basicEmotions","emotionGroups","isSelectedEmotions","monthSigs","months","monthNameMap","monthSig","getTime","formatPostEntryDatetimeTitle","m","PostEntranceScreen","selectedMood","jornalEntry","weather","selectedEntry","isLoading","locationServiceEnabled","userCoordinates","userCurrentAddress","onSaveButtonPress","EmotionButtons","MoodButtons","postEntryHeader","onEmotionButtonPress","onMoodButtonPress","inputSection","setSelectedEntry","InputCard","JornalInput","postNewEntryAsync","checkIfLocationEnabled","getCurrentLocation","coords","lat","latitude","lng","longitude","then","res","resStatus","enabled","LocationServiceEnabled","Alert","alert","cancelable","response","fetchWeather","goBack","item","selectMood","selColor","moodButtonViewStyle","title","textAlignVertical","selectEmotion","multiline","placeholder","onChangeText","value","setSelected","sectionName","inputStyle","inputs","addressObj","newEntry","street","streetNumber","district","subregion","region","endTime","info","postUserEntryOpts","headers","body","JSON","stringify","username","postUserEntryResult","login","titleView","titleIcon","paddingTop","cardHeader","cardTitle","top","cardSection","loadingIcon","inputField","button","buttonLabel","msgBox","msg","falseParams","appendValueToUri","uri","validateEmail","emailStatus","apiResp","apiRespJson","formatCheck","smtpCheck","LoginScreen","animation","TextInput","autoComplete","importantForAutofill","secureTextEntry","submitButton","LoginIcon","loginMsg","password","isUserAuth","isDataLoading","setLoginMsg","onSignIn","onSignUp","setTimeout","textField","setField","sign","signIn","encPass","UsersStatus","Users","authUser","postUserResult","emailValidation","reqStatus","passwordCheck","postUserOpts","entries","postUserStatus","successMsg","errMsg","createBottomTabNavigator","Stack","createNativeStackNavigator","HomeScreen","Navigator","initialRouteName","screenOptions","headerShown","Screen","component","options","initialParams","App","NavigationContainer","registerRootComponent"],"mappings":"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ACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,a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","file":"static/js/app.07be9384.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/wallpaper.9987c866.jpg\";","import { StatusBar } from 'expo-status-bar';\r\n\r\n//import StatusBar from 'react-native'\r\n// import { Platform } from 'react-native';\r\n\r\n// import { Dimensions } from 'react-native';\r\n// var windowWidth = Dimensions.get('window').width;\r\n// var windowHeight = Dimensions.get('window').height;\r\n\r\n// import DeviceInfo from 'react-native-device-info';\r\n// import AsyncStorage from '@react-native-community/async-storage';\r\n\r\n// // how can i do some code that will gives me if its \"Handset\"=> Smartphone , \r\n// //if its \"unknown\"=> Laptop/Computer \r\n// //and it will be saved as well in my async-storage.\r\n\r\n// //this some example that i wanna get it works well coz now its not work good\r\n\r\n// const funct1=  (type) => {\r\n// let type = DeviceInfo.getDeviceType();\r\n\r\n// if type==='Handset'{\r\n//   AsyncStorage.setItem('PLATFORM-TYPE', 'Smartphone');\r\n// }\r\n// if type==='unknown'{\r\n//   AsyncStorage.setItem('PLATFORM-TYPE', 'Laptop/Computer');\r\n// }\r\n// };\r\n\r\nconst styles = {\r\n    mainView: {\r\n        flex: 1,                 \r\n        marginTop: StatusBar.currentHeight,\r\n    },\r\n    postButton: {\r\n        position: 'absolute',\r\n        height: 60,\r\n        width: 60,\r\n        borderRadius: 30,\r\n        bottom: '2%',\r\n        alignSelf: 'center',\r\n        backgroundColor: 'rgba(0,0,0,1)',\r\n        justifyContent: 'center',  \r\n    },\r\n    postButtonLabel: {\r\n        alignSelf: 'center',\r\n    },\r\n    scrollView: {\r\n        // paddingHorizontal: Platform.OS != 'web' ? '5%' : '5%',\r\n        width: '100%',\r\n        alignSelf: 'center',\r\n    },\r\n    section: {\r\n        width: 350,\r\n        paddingVertical: '16%',\r\n        borderBottomWidth: 1,\r\n        borderColor: 'rgba(155,155,155,0.3)',\r\n        alignSelf: 'center',\r\n\r\n    },\r\n    sectionTitle: {\r\n        paddingVertical: 7.5,\r\n        fontSize: 18,\r\n        color: 'white',\r\n        fontWeight: '400',\r\n    },\r\n    card: {\r\n        marginTop: '5%',\r\n        paddingVertical: 5,\r\n        paddingHorizontal: 10,\r\n        borderRadius: 20,\r\n        backgroundColor: 'rgba(0,0,0,0.2)',\r\n    },\r\n    cardRow: {\r\n        flexDirection: 'row',\r\n        paddingVertical: 5,\r\n        alignItems: 'center',\r\n    },\r\n    moodBadge: {\r\n        fontFamily: 'sans-serif',\r\n        backgroundColor: 'green',\r\n        borderRadius: 30,\r\n        paddingVertical: 6,\r\n        width: 130,\r\n        fontSize: 16,\r\n        textAlign: 'center',\r\n    },\r\n    emotionBadge: {\r\n        fontFamily: 'sans-serif',\r\n        backgroundColor: 'aliceblue',\r\n        borderRadius: 30,\r\n        paddingVertical: 7,\r\n        paddingHorizontal: 12.5,\r\n        marginRight: 6,\r\n        fontSize: 15,\r\n        textAlign: 'center',\r\n    },\r\n    textBadge: {\r\n        fontFamily: 'sans-serif',\r\n        backgroundColor: 'aliceblue',\r\n        borderRadius: 20,\r\n        paddingVertical: 4,\r\n        paddingHorizontal: 10,\r\n        width: '100%',\r\n        fontSize: 14,\r\n        lineHeight: 22,\r\n        textAlign: 'left',\r\n    },\r\n    text: {\r\n        fontFamily: 'sans-serif',\r\n        fontSize: 14,\r\n        color: 'white'\r\n    },\r\n    spaceBetween: {\r\n        justifyContent: 'space-between',\r\n    },\r\n    icon: {\r\n        paddingHorizontal: 12,\r\n        },\r\n    entryIcon: {\r\n        paddingRight: 0,\r\n        borderWidth: 1,\r\n        },\r\n    \r\n};\r\n\r\nexport default styles;","// Module import\r\nimport React, { Component, useState } from 'react';\r\nimport { View, Text, Pressable} from 'react-native';\r\nimport { Icon } from 'react-native-eva-icons'\r\n\r\n// Local import\r\nimport styles from '../../styles/entrancesStyles'\r\n\r\n// cors-midpoint uri (needed to avoid cors' allow-cross-origin error when fetching)\r\nconst corsURI = 'https://morning-journey-78874.herokuapp.com/'\r\nconst appServerURI = 'https://mood-tracker-server.herokuapp.com/'\r\n\r\n// Defining mood colors schema\r\nconst moodColors = {'Horrível': '#ff3333', 'Mal': '#0099cc', 'Regular': '#ffffff', 'Bem': '#ffff33', 'Ótimo': '#00b300'};\r\n\r\nfunction MoodHeader({entry}) {\r\n    return(\r\n        <View style={[styles.cardRow, styles.spaceBetween]}>\r\n            <View style={{flexDirection: 'row', alignItems: 'center'}}>\r\n                <Text style={[styles.moodBadge, {backgroundColor: moodColors[entry.mood]}]}>{entry.mood}</Text>\r\n                { entry.star ? <Icon name='star' fill='gold' width={27} height={27} style={{paddingLeft: 15, paddingBottom: 2}} ></Icon> : <></> }\r\n            </View>\r\n            <View style={[styles.cardRow]}>\r\n                <Icon name='edit' height={18} width={18} fill='rgba(255,255,255,0.65)' style={{paddingRight: 8}} />\r\n                <Text style={styles.text}>{entry.startTime.slice(0,5)}</Text>\r\n            </View>\r\n        </View>\r\n\r\n    )\r\n}\r\n\r\nfunction Address ({entry}) {\r\n\r\n    const [isCollapsed, setIsCollapsed] = useState( 1 );\r\n    if (entry.address) {\r\n        return(\r\n            <View style={styles.cardRow}>\r\n                <Text numberOfLines={ isCollapsed } onPress={ () => { setIsCollapsed( isCollapsed ? 0 : 1 ) }} style={styles.text}>\r\n                    <Icon name='pin' height={16} width={16} fill='rgba(255,255,255,0.75)' style={{marginRight: 7}} />\r\n                    {entry.address}\r\n                </Text>\r\n            </View>        \r\n        )\r\n    } else {\r\n        return <></>\r\n    }\r\n}\r\n\r\nfunction Emotions ({entry}) {\r\n    if (entry.emotions.length>0) {\r\n        return (\r\n            <View style={[styles.cardRow, {flexWrap: 'wrap', justifyContent: 'flex-start'}]}>\r\n                { entry.emotions.map((emotion, index) => {\r\n                    return(\r\n                        <Pressable key={'emotion-' + emotion} style={{paddingVertical: 5, paddingHorizontal: 2}}>\r\n                            <Text style={[styles.emotionBadge]}>{emotion}</Text>\r\n                        </Pressable>\r\n                    )\r\n                })}\r\n            </View>\r\n        )\r\n    } else {\r\n        return (\r\n            <></>\r\n        )\r\n    }\r\n}\r\n\r\nfunction Jornal({ entry }) {\r\n    if (entry.jornal) {\r\n        return(\r\n            <View style={styles.cardRow}>\r\n                <Text style={styles.textBadge}>{entry.jornal}</Text>\r\n            </View>\r\n        )\r\n    } else {\r\n        return <></>\r\n    }\r\n}\r\n\r\nfunction EntryCard({ entry }) {\r\n    return (\r\n        <View style={styles.card}>\r\n            <MoodHeader entry={entry} />\r\n            <Emotions entry={entry} />\r\n            <Address entry={entry} />\r\n            <Jornal entry={entry} />\r\n        </View>\r\n    );\r\n}\r\n\r\nfunction EmptyCard(props) {\r\n    const textStyle = {fontSize: 16, color: 'white', marginTop: 7}\r\n    return (\r\n        <Pressable onPress={ () => props.navigation.navigate( 'PostEntrance', {} ) } style={[styles.card, {alignItems: 'center', justifyContent: 'center', fontSize: 16, height: 145}]}>\r\n            <Icon name='inbox' fill='rgba(255,255,255,0.3)' width={25} height={25} ></Icon>\r\n            <Text style={textStyle}> Nenhuma entrada encontrada. </Text>\r\n            <Text style={textStyle}> Pressione aqui para adicionar uma a este dia! </Text>\r\n        </Pressable>\r\n    );\r\n}\r\n\r\nfunction CardsLoadingMessage() {\r\n    return(\r\n        <View style={[styles.card, {alignItems: 'center', justifyContent: 'center', height: 145}]}>\r\n            <Icon name='sync-outline' fill='rgba(0,0,0,0.3)' width={25} height={25} ></Icon>\r\n        </View>\r\n    )\r\n}\r\n\r\nexport default class UserEntryCards extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            date: this.props.date,\r\n            userEntries: [],\r\n            isEntriesSyncing: false,\r\n            newPost: this.props.newPost,\r\n        };\r\n        this.syncUserEntries = this.syncUserEntries.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log('\"Subcomponent UserEntryCards did mount...\"')\r\n        this.syncUserEntries()\r\n        setInterval( () => { this.updateIfNewPost() }, 1000 * 2 )\r\n        // setInterval( () => { console.log('Default auto syncing started...'); this.syncUserEntries() }, 1000 * 10 )\r\n        \r\n    }\r\n\r\n    updateIfNewPost () {\r\n        if (this.props.newPost) {\r\n            console.log('JUST POSTED WARNING: POSTED. Selecting current date ...');\r\n            this.props.forgetNewPost();\r\n            this.syncUserEntries();\r\n        }\r\n    }\r\n\r\n    UserEntryCardsList() {\r\n        \r\n        const selDateEntries = this.state.userEntries.filter( (entry) => entry.date === this.props.date )\r\n\r\n        if (selDateEntries.length) {\r\n            return selDateEntries.map( entry => <EntryCard key={'entry-card-' + entry.startTime} entry={entry} />)\r\n        \r\n        } else if (this.state.isEntriesSyncing) {    \r\n            return <CardsLoadingMessage />\r\n\r\n        } else {\r\n            return <EmptyCard navigation={this.props.navigation} />\r\n        }\r\n    }\r\n    \r\n    async syncUserEntries() {\r\n\r\n        console.log('SYNC ENTRIES STATUS: Started...')\r\n        this.setState({ isEntriesSyncing: true });\r\n    \r\n        try {\r\n\r\n            var UsersResult = await fetch( corsURI + appServerURI + 'Users', { method: 'GET' });\r\n            const usersStatus =  'Status: ' + UsersResult.status + ', ' + UsersResult.statusText\r\n\r\n            if (UsersResult.ok) {\r\n                const users = await UsersResult.json();\r\n                const user = users.filter((user) => user.email === this.props.userInfo.email)[0]\r\n                console.log('fetch GET request for user entries successful.')\r\n                console.log(usersStatus)\r\n\r\n                this.setState({userEntries: user['entries'].reverse(), entriesSynced: true})  \r\n                console.log('SYNC ENTRIES STATUS: Successful.')\r\n\r\n            } else {\r\n                console.log( new Error('\"fetch\" GET request for user entries failed. Throwing error...') )\r\n                throw new Error(usersStatus)\r\n            }\r\n    \r\n        } catch (error) {\r\n                console.log('SYNC ENTRIES STATUS: Error captured. Printing error...')\r\n                console.log(error);\r\n\r\n        } finally {\r\n            this.setState({ isEntriesSyncing: false });\r\n            console.log('SYNC ENTRIES STATUS: Finished.')\r\n        }    \r\n    }\r\n\r\n    render() {\r\n        console.log('\"Rendering \"UserEntryCards\" subcomponent...\"')\r\n        return this.UserEntryCardsList()\r\n    }\r\n}","const dateRange = [\r\n    \"2021-01-01\",\r\n    \"2021-01-02\",\r\n    \"2021-01-03\",\r\n    \"2021-01-04\",\r\n    \"2021-01-05\",\r\n    \"2021-01-06\",\r\n    \"2021-01-07\",\r\n    \"2021-01-08\",\r\n    \"2021-01-09\",\r\n    \"2021-01-10\",\r\n    \"2021-01-11\",\r\n    \"2021-01-12\",\r\n    \"2021-01-13\",\r\n    \"2021-01-14\",\r\n    \"2021-01-15\",\r\n    \"2021-01-16\",\r\n    \"2021-01-17\",\r\n    \"2021-01-18\",\r\n    \"2021-01-19\",\r\n    \"2021-01-20\",\r\n    \"2021-01-21\",\r\n    \"2021-01-22\",\r\n    \"2021-01-23\",\r\n    \"2021-01-24\",\r\n    \"2021-01-25\",\r\n    \"2021-01-26\",\r\n    \"2021-01-27\",\r\n    \"2021-01-28\",\r\n    \"2021-01-29\",\r\n    \"2021-01-30\",\r\n    \"2021-01-31\",\r\n    \"2021-02-01\",\r\n    \"2021-02-02\",\r\n    \"2021-02-03\",\r\n    \"2021-02-04\",\r\n    \"2021-02-05\",\r\n    \"2021-02-06\",\r\n    \"2021-02-07\",\r\n    \"2021-02-08\",\r\n    \"2021-02-09\",\r\n    \"2021-02-10\",\r\n    \"2021-02-11\",\r\n    \"2021-02-12\",\r\n    \"2021-02-13\",\r\n    \"2021-02-14\",\r\n    \"2021-02-15\",\r\n    \"2021-02-16\",\r\n    \"2021-02-17\",\r\n    \"2021-02-18\",\r\n    \"2021-02-19\",\r\n    \"2021-02-20\",\r\n    \"2021-02-21\",\r\n    \"2021-02-22\",\r\n    \"2021-02-23\",\r\n    \"2021-02-24\",\r\n    \"2021-02-25\",\r\n    \"2021-02-26\",\r\n    \"2021-02-27\",\r\n    \"2021-02-28\",\r\n    \"2021-03-01\",\r\n    \"2021-03-02\",\r\n    \"2021-03-03\",\r\n    \"2021-03-04\",\r\n    \"2021-03-05\",\r\n    \"2021-03-06\",\r\n    \"2021-03-07\",\r\n    \"2021-03-08\",\r\n    \"2021-03-09\",\r\n    \"2021-03-10\",\r\n    \"2021-03-11\",\r\n    \"2021-03-12\",\r\n    \"2021-03-13\",\r\n    \"2021-03-14\",\r\n    \"2021-03-15\",\r\n    \"2021-03-16\",\r\n    \"2021-03-17\",\r\n    \"2021-03-18\",\r\n    \"2021-03-19\",\r\n    \"2021-03-20\",\r\n    \"2021-03-21\",\r\n    \"2021-03-22\",\r\n    \"2021-03-23\",\r\n    \"2021-03-24\",\r\n    \"2021-03-25\",\r\n    \"2021-03-26\",\r\n    \"2021-03-27\",\r\n    \"2021-03-28\",\r\n    \"2021-03-29\",\r\n    \"2021-03-30\",\r\n    \"2021-03-31\",\r\n    \"2021-04-01\",\r\n    \"2021-04-02\",\r\n    \"2021-04-03\",\r\n    \"2021-04-04\",\r\n    \"2021-04-05\",\r\n    \"2021-04-06\",\r\n    \"2021-04-07\",\r\n    \"2021-04-08\",\r\n    \"2021-04-09\",\r\n    \"2021-04-10\",\r\n    \"2021-04-11\",\r\n    \"2021-04-12\",\r\n    \"2021-04-13\",\r\n    \"2021-04-14\",\r\n    \"2021-04-15\",\r\n    \"2021-04-16\",\r\n    \"2021-04-17\",\r\n    \"2021-04-18\",\r\n    \"2021-04-19\",\r\n    \"2021-04-20\",\r\n    \"2021-04-21\",\r\n    \"2021-04-22\",\r\n    \"2021-04-23\",\r\n    \"2021-04-24\",\r\n    \"2021-04-25\",\r\n    \"2021-04-26\",\r\n    \"2021-04-27\",\r\n    \"2021-04-28\",\r\n    \"2021-04-29\",\r\n    \"2021-04-30\",\r\n    \"2021-05-01\",\r\n    \"2021-05-02\",\r\n    \"2021-05-03\",\r\n    \"2021-05-04\",\r\n    \"2021-05-05\",\r\n    \"2021-05-06\",\r\n    \"2021-05-07\",\r\n    \"2021-05-08\",\r\n    \"2021-05-09\",\r\n    \"2021-05-10\",\r\n    \"2021-05-11\",\r\n    \"2021-05-12\",\r\n    \"2021-05-13\",\r\n    \"2021-05-14\",\r\n    \"2021-05-15\",\r\n    \"2021-05-16\",\r\n    \"2021-05-17\",\r\n    \"2021-05-18\",\r\n    \"2021-05-19\",\r\n    \"2021-05-20\",\r\n    \"2021-05-21\",\r\n    \"2021-05-22\",\r\n    \"2021-05-23\",\r\n    \"2021-05-24\",\r\n    \"2021-05-25\",\r\n    \"2021-05-26\",\r\n    \"2021-05-27\",\r\n    \"2021-05-28\",\r\n    \"2021-05-29\",\r\n    \"2021-05-30\",\r\n    \"2021-05-31\",\r\n    \"2021-06-01\",\r\n    \"2021-06-02\",\r\n    \"2021-06-03\",\r\n    \"2021-06-04\",\r\n    \"2021-06-05\",\r\n    \"2021-06-06\",\r\n    \"2021-06-07\",\r\n    \"2021-06-08\",\r\n    \"2021-06-09\",\r\n    \"2021-06-10\",\r\n    \"2021-06-11\",\r\n    \"2021-06-12\",\r\n    \"2021-06-13\",\r\n    \"2021-06-14\",\r\n    \"2021-06-15\",\r\n    \"2021-06-16\",\r\n    \"2021-06-17\",\r\n    \"2021-06-18\",\r\n    \"2021-06-19\",\r\n    \"2021-06-20\",\r\n    \"2021-06-21\",\r\n    \"2021-06-22\",\r\n    \"2021-06-23\",\r\n    \"2021-06-24\",\r\n    \"2021-06-25\",\r\n    \"2021-06-26\",\r\n    \"2021-06-27\",\r\n    \"2021-06-28\",\r\n    \"2021-06-29\",\r\n    \"2021-06-30\",\r\n    \"2021-07-01\",\r\n    \"2021-07-02\",\r\n    \"2021-07-03\",\r\n    \"2021-07-04\",\r\n    \"2021-07-05\",\r\n    \"2021-07-06\",\r\n    \"2021-07-07\",\r\n    \"2021-07-08\",\r\n    \"2021-07-09\",\r\n    \"2021-07-10\",\r\n    \"2021-07-11\",\r\n    \"2021-07-12\",\r\n    \"2021-07-13\",\r\n    \"2021-07-14\",\r\n    \"2021-07-15\",\r\n    \"2021-07-16\",\r\n    \"2021-07-17\",\r\n    \"2021-07-18\",\r\n    \"2021-07-19\",\r\n    \"2021-07-20\",\r\n    \"2021-07-21\",\r\n    \"2021-07-22\",\r\n    \"2021-07-23\",\r\n    \"2021-07-24\",\r\n    \"2021-07-25\",\r\n    \"2021-07-26\",\r\n    \"2021-07-27\",\r\n    \"2021-07-28\",\r\n    \"2021-07-29\",\r\n    \"2021-07-30\",\r\n    \"2021-07-31\",\r\n    \"2021-08-01\",\r\n    \"2021-08-02\",\r\n    \"2021-08-03\",\r\n    \"2021-08-04\",\r\n    \"2021-08-05\",\r\n    \"2021-08-06\",\r\n    \"2021-08-07\",\r\n    \"2021-08-08\",\r\n    \"2021-08-09\",\r\n    \"2021-08-10\",\r\n    \"2021-08-11\",\r\n    \"2021-08-12\",\r\n    \"2021-08-13\",\r\n    \"2021-08-14\",\r\n    \"2021-08-15\",\r\n    \"2021-08-16\",\r\n    \"2021-08-17\",\r\n    \"2021-08-18\",\r\n    \"2021-08-19\",\r\n    \"2021-08-20\",\r\n    \"2021-08-21\",\r\n    \"2021-08-22\",\r\n    \"2021-08-23\",\r\n    \"2021-08-24\",\r\n    \"2021-08-25\",\r\n    \"2021-08-26\",\r\n    \"2021-08-27\",\r\n    \"2021-08-28\",\r\n    \"2021-08-29\",\r\n    \"2021-08-30\",\r\n    \"2021-08-31\",\r\n    \"2021-09-01\",\r\n    \"2021-09-02\",\r\n    \"2021-09-03\",\r\n    \"2021-09-04\",\r\n    \"2021-09-05\",\r\n    \"2021-09-06\",\r\n    \"2021-09-07\",\r\n    \"2021-09-08\",\r\n    \"2021-09-09\",\r\n    \"2021-09-10\",\r\n    \"2021-09-11\",\r\n    \"2021-09-12\",\r\n    \"2021-09-13\",\r\n    \"2021-09-14\",\r\n    \"2021-09-15\",\r\n    \"2021-09-16\",\r\n    \"2021-09-17\",\r\n    \"2021-09-18\",\r\n    \"2021-09-19\",\r\n    \"2021-09-20\",\r\n    \"2021-09-21\",\r\n    \"2021-09-22\",\r\n    \"2021-09-23\",\r\n    \"2021-09-24\",\r\n    \"2021-09-25\",\r\n    \"2021-09-26\",\r\n    \"2021-09-27\",\r\n    \"2021-09-28\",\r\n    \"2021-09-29\",\r\n    \"2021-09-30\",\r\n    \"2021-10-01\",\r\n    \"2021-10-02\",\r\n    \"2021-10-03\",\r\n    \"2021-10-04\",\r\n    \"2021-10-05\",\r\n    \"2021-10-06\",\r\n    \"2021-10-07\",\r\n    \"2021-10-08\",\r\n    \"2021-10-09\",\r\n    \"2021-10-10\",\r\n    \"2021-10-11\",\r\n    \"2021-10-12\",\r\n    \"2021-10-13\",\r\n    \"2021-10-14\",\r\n    \"2021-10-15\",\r\n    \"2021-10-16\",\r\n    \"2021-10-17\",\r\n    \"2021-10-18\",\r\n    \"2021-10-19\",\r\n    \"2021-10-20\",\r\n    \"2021-10-21\",\r\n    \"2021-10-22\",\r\n    \"2021-10-23\",\r\n    \"2021-10-24\",\r\n    \"2021-10-25\",\r\n    \"2021-10-26\",\r\n    \"2021-10-27\",\r\n    \"2021-10-28\",\r\n    \"2021-10-29\",\r\n    \"2021-10-30\",\r\n    \"2021-10-31\",\r\n    \"2021-11-01\",\r\n    \"2021-11-02\",\r\n    \"2021-11-03\",\r\n    \"2021-11-04\",\r\n    \"2021-11-05\",\r\n    \"2021-11-06\",\r\n    \"2021-11-07\",\r\n    \"2021-11-08\",\r\n    \"2021-11-09\",\r\n    \"2021-11-10\",\r\n    \"2021-11-11\",\r\n    \"2021-11-12\",\r\n    \"2021-11-13\",\r\n    \"2021-11-14\",\r\n    \"2021-11-15\",\r\n    \"2021-11-16\",\r\n    \"2021-11-17\",\r\n    \"2021-11-18\",\r\n    \"2021-11-19\",\r\n    \"2021-11-20\",\r\n    \"2021-11-21\",\r\n    \"2021-11-22\",\r\n    \"2021-11-23\",\r\n    \"2021-11-24\",\r\n    \"2021-11-25\",\r\n    \"2021-11-26\",\r\n    \"2021-11-27\",\r\n    \"2021-11-28\",\r\n    \"2021-11-29\",\r\n    \"2021-11-30\",\r\n    \"2021-12-01\",\r\n    \"2021-12-02\",\r\n    \"2021-12-03\",\r\n    \"2021-12-04\",\r\n    \"2021-12-05\",\r\n    \"2021-12-06\",\r\n    \"2021-12-07\",\r\n    \"2021-12-08\",\r\n    \"2021-12-09\",\r\n    \"2021-12-10\",\r\n    \"2021-12-11\",\r\n    \"2021-12-12\",\r\n    \"2021-12-13\",\r\n    \"2021-12-14\",\r\n    \"2021-12-15\",\r\n    \"2021-12-16\",\r\n    \"2021-12-17\",\r\n    \"2021-12-18\",\r\n    \"2021-12-19\",\r\n    \"2021-12-20\",\r\n    \"2021-12-21\",\r\n    \"2021-12-22\",\r\n    \"2021-12-23\",\r\n    \"2021-12-24\",\r\n    \"2021-12-25\",\r\n    \"2021-12-26\",\r\n    \"2021-12-27\",\r\n    \"2021-12-28\",\r\n    \"2021-12-29\",\r\n    \"2021-12-30\",\r\n    \"2021-12-31\",\r\n    \"2022-01-01\",\r\n    \"2022-01-02\",\r\n    \"2022-01-03\",\r\n    \"2022-01-04\",\r\n    \"2022-01-05\",\r\n    \"2022-01-06\",\r\n    \"2022-01-07\",\r\n    \"2022-01-08\",\r\n    \"2022-01-09\",\r\n    \"2022-01-10\",\r\n    \"2022-01-11\",\r\n    \"2022-01-12\",\r\n    \"2022-01-13\",\r\n    \"2022-01-14\",\r\n    \"2022-01-15\",\r\n    \"2022-01-16\",\r\n    \"2022-01-17\",\r\n    \"2022-01-18\",\r\n    \"2022-01-19\",\r\n    \"2022-01-20\",\r\n    \"2022-01-21\",\r\n    \"2022-01-22\",\r\n    \"2022-01-23\",\r\n    \"2022-01-24\",\r\n    \"2022-01-25\",\r\n    \"2022-01-26\",\r\n    \"2022-01-27\",\r\n    \"2022-01-28\",\r\n    \"2022-01-29\",\r\n    \"2022-01-30\",\r\n    \"2022-01-31\",\r\n    \"2022-02-01\",\r\n    \"2022-02-02\",\r\n    \"2022-02-03\",\r\n    \"2022-02-04\",\r\n    \"2022-02-05\",\r\n    \"2022-02-06\",\r\n    \"2022-02-07\",\r\n    \"2022-02-08\",\r\n    \"2022-02-09\",\r\n    \"2022-02-10\",\r\n    \"2022-02-11\",\r\n    \"2022-02-12\",\r\n    \"2022-02-13\",\r\n    \"2022-02-14\",\r\n    \"2022-02-15\",\r\n    \"2022-02-16\",\r\n    \"2022-02-17\",\r\n    \"2022-02-18\",\r\n    \"2022-02-19\",\r\n    \"2022-02-20\",\r\n    \"2022-02-21\",\r\n    \"2022-02-22\",\r\n    \"2022-02-23\",\r\n    \"2022-02-24\",\r\n    \"2022-02-25\",\r\n    \"2022-02-26\",\r\n    \"2022-02-27\",\r\n    \"2022-02-28\",\r\n    \"2022-03-01\",\r\n    \"2022-03-02\",\r\n    \"2022-03-03\",\r\n    \"2022-03-04\",\r\n    \"2022-03-05\",\r\n    \"2022-03-06\",\r\n    \"2022-03-07\",\r\n    \"2022-03-08\",\r\n    \"2022-03-09\",\r\n    \"2022-03-10\",\r\n    \"2022-03-11\",\r\n    \"2022-03-12\",\r\n    \"2022-03-13\",\r\n    \"2022-03-14\",\r\n    \"2022-03-15\",\r\n    \"2022-03-16\",\r\n    \"2022-03-17\",\r\n    \"2022-03-18\",\r\n    \"2022-03-19\",\r\n    \"2022-03-20\",\r\n    \"2022-03-21\",\r\n    \"2022-03-22\",\r\n    \"2022-03-23\",\r\n    \"2022-03-24\",\r\n    \"2022-03-25\",\r\n    \"2022-03-26\",\r\n    \"2022-03-27\",\r\n    \"2022-03-28\",\r\n    \"2022-03-29\",\r\n    \"2022-03-30\",\r\n    \"2022-03-31\",\r\n    \"2022-04-01\",\r\n    \"2022-04-02\",\r\n    \"2022-04-03\",\r\n    \"2022-04-04\",\r\n    \"2022-04-05\",\r\n    \"2022-04-06\",\r\n    \"2022-04-07\",\r\n    \"2022-04-08\",\r\n    \"2022-04-09\",\r\n    \"2022-04-10\",\r\n    \"2022-04-11\",\r\n    \"2022-04-12\",\r\n    \"2022-04-13\",\r\n    \"2022-04-14\",\r\n    \"2022-04-15\",\r\n    \"2022-04-16\",\r\n    \"2022-04-17\",\r\n    \"2022-04-18\",\r\n    \"2022-04-19\",\r\n    \"2022-04-20\",\r\n    \"2022-04-21\",\r\n    \"2022-04-22\",\r\n    \"2022-04-23\",\r\n    \"2022-04-24\",\r\n    \"2022-04-25\",\r\n    \"2022-04-26\",\r\n    \"2022-04-27\",\r\n    \"2022-04-28\",\r\n    \"2022-04-29\",\r\n    \"2022-04-30\",\r\n    \"2022-05-01\",\r\n    \"2022-05-02\",\r\n    \"2022-05-03\",\r\n    \"2022-05-04\",\r\n    \"2022-05-05\",\r\n    \"2022-05-06\",\r\n    \"2022-05-07\",\r\n    \"2022-05-08\",\r\n    \"2022-05-09\",\r\n    \"2022-05-10\",\r\n    \"2022-05-11\",\r\n    \"2022-05-12\",\r\n    \"2022-05-13\",\r\n    \"2022-05-14\",\r\n    \"2022-05-15\",\r\n    \"2022-05-16\",\r\n    \"2022-05-17\",\r\n    \"2022-05-18\",\r\n    \"2022-05-19\",\r\n    \"2022-05-20\",\r\n    \"2022-05-21\",\r\n    \"2022-05-22\",\r\n    \"2022-05-23\",\r\n    \"2022-05-24\",\r\n    \"2022-05-25\",\r\n    \"2022-05-26\",\r\n    \"2022-05-27\",\r\n    \"2022-05-28\",\r\n    \"2022-05-29\",\r\n    \"2022-05-30\",\r\n    \"2022-05-31\",\r\n    \"2022-06-01\",\r\n    \"2022-06-02\",\r\n    \"2022-06-03\",\r\n    \"2022-06-04\",\r\n    \"2022-06-05\",\r\n    \"2022-06-06\",\r\n    \"2022-06-07\",\r\n    \"2022-06-08\",\r\n    \"2022-06-09\",\r\n    \"2022-06-10\",\r\n    \"2022-06-11\",\r\n    \"2022-06-12\",\r\n    \"2022-06-13\",\r\n    \"2022-06-14\",\r\n    \"2022-06-15\",\r\n    \"2022-06-16\",\r\n    \"2022-06-17\",\r\n    \"2022-06-18\",\r\n    \"2022-06-19\",\r\n    \"2022-06-20\",\r\n    \"2022-06-21\",\r\n    \"2022-06-22\",\r\n    \"2022-06-23\",\r\n    \"2022-06-24\",\r\n    \"2022-06-25\",\r\n    \"2022-06-26\",\r\n    \"2022-06-27\",\r\n    \"2022-06-28\",\r\n    \"2022-06-29\",\r\n    \"2022-06-30\"\r\n]\r\nexport default dateRange;","// Module imports\r\nimport React, { Component } from 'react';\r\nimport { View, Text, ImageBackground, Pressable, ScrollView } from 'react-native';\r\nimport { Icon } from 'react-native-eva-icons'\r\n\r\n// Component imports\r\nimport UserEntryCards from './subcomponents/userEntryCards';\r\n\r\n// Local imports\r\nimport dateRange from '../shared/dateRange';\r\nimport styles from '../styles/entrancesStyles';\r\n\r\n// cors-midpoint uri (needed to avoid cors' allow-cross-origin error when fetching)\r\nconst corsURI = 'https://morning-journey-78874.herokuapp.com/';\r\nconst appServerURI = 'https://mood-tracker-server.herokuapp.com/'\r\n\r\n// Defining pertinent constants\r\nconst monthDict = {'Jan': '01', 'Feb': '02', 'Mar': '03', 'Apr': '04', 'May': '05', 'Jun': '06', 'Jul': '07', 'Ago': '08', 'Sep': '09', 'Oct': '10', 'Nov': '11', 'Dec': '12'}\r\nconst englishMonthSigs = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dec']\r\nconst portugueseMonthSigs = ['Jan', 'Fev', 'Mar', 'Abr', 'Mai', 'Jun', 'Jul', 'Ago', 'Set', 'Out', 'Nov', 'Dez']\r\nconst englishWeekDayMap = {'Mon': 'Seg', 'Tue': 'Ter', 'Wed': 'Qua', 'Thu': 'Qui', 'Fri': 'Sex', 'Sat': 'Sab', 'Sun': 'Dom'}\r\n\r\n// Defining pertinent functions\r\nfunction Today() {\r\n    const now = Date().toString().split(' ')\r\n    const today = [ now[3], monthDict[now[1]], now[2] ].join('-')\r\n    return today\r\n}\r\nfunction getNextDate(date, next='next') {\r\n    const nextDate = dateRange[dateRange.indexOf(date) + (next=='previous' ? -1 : 1)]\r\n    return nextDate\r\n}\r\nfunction getTime() {\r\n    //Wed,Jan,26,2022,15:12:37,GMT-0300,(Horário,Padrão,de,Brasília)\r\n    const now = Date().toString().split(' ')\r\n    const time = now[4]\r\n    // const time = new Date().toLocaleTimeString()\r\n    return time\r\n}\r\nfunction formatDate(selDate) {\r\n    \r\n    var ymd = selDate.split('-')\r\n    const yesterday = getNextDate(Today(), 'previous')\r\n    const englishWeekDay = new Date(ymd[0], ymd[1], ymd[2]).toString().split(' ')[0]\r\n    const weekDay = englishWeekDayMap[englishWeekDay]\r\n    var prefix = ''\r\n\r\n    if (selDate === Today()) prefix = 'Hoje, '\r\n    else if (selDate === yesterday) prefix = 'Ontem, '\r\n    else prefix = weekDay + ', '\r\n    \r\n    for (var i=0; i<12; i++) {\r\n        if (monthDict[ englishMonthSigs[i] ] == ymd[1]) {\r\n            return prefix + oneDigit(ymd[2]) + '° ' + portugueseMonthSigs[i]\r\n        }\r\n    }\r\n}\r\nfunction oneDigit(stringNumber) {\r\n    if (stringNumber[0] == '0') return stringNumber.slice(1, stringNumber.length)\r\n    else return stringNumber\r\n}\r\n\r\nexport default class EntrancesScreen extends Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            userEntries: [],\r\n            date: Today(),\r\n            time: getTime(),\r\n            selectedDate: Today(),\r\n            entriesLoading: false,\r\n            entriesSynced: false,\r\n        };\r\n        this.onNextButtonPress = this.onNextButtonPress.bind(this);\r\n        this.forgetNewPost = this.forgetNewPost.bind(this);         \r\n    }\r\n    \r\n    componentDidMount() {\r\n        console.log('\"Entries\" screen component did mount...')      \r\n    }\r\n\r\n    onNextButtonPress(next='next') { \r\n        function setSelectedDate() {\r\n            this.setState( {selectedDate: getNextDate(this.state.selectedDate, next)} ) \r\n        }\r\n        return setSelectedDate.bind(this);\r\n    }\r\n\r\n    forgetNewPost() {\r\n        function forgetNewPost() {\r\n            this.props.navigation.setParams({newPost: false});\r\n            this.setState({\r\n                selectedDate: Today(),\r\n            });\r\n        }\r\n        return forgetNewPost.bind(this);\r\n    }\r\n\r\n    render() {\r\n\r\n        console.log('Rendering \"Entries\" screen...')\r\n        const isToday = this.state.selectedDate === this.state.date\r\n\r\n        return(\r\n            <ImageBackground source={require('../assets/wallpaper.jpg')} style={[styles.mainView]}>\r\n                \r\n                <ScrollView style={styles.scrollView}>\r\n                        <View style={styles.section}>\r\n                            \r\n                            <View style={[styles.cardRow, {justifyContent: 'space-between'}]}>\r\n                                <Pressable onPress={ this.onNextButtonPress('previous') }>\r\n                                    <Icon name='arrow-back' width={35} height={35} fill='white' />\r\n                                </Pressable>\r\n                                <Text style={styles.sectionTitle}> { 'Suas entradas  •  ' + formatDate(this.state.selectedDate) } </Text>                                \r\n                                { !isToday ? (\r\n                                    <Pressable onPress={ this.onNextButtonPress('next') }>\r\n                                        <Icon name='arrow-forward' width={35} height={35} fill='white' />\r\n                                    </Pressable>   \r\n                                ) : (\r\n                                    <View style={{height: 35, width: 35}}></View>\r\n                                )}\r\n                            </View>\r\n\r\n                            <UserEntryCards\r\n                            navigation = {this.props.navigation}\r\n                            userInfo={this.props.route.params.userInfo}\r\n                            newPost={this.props.route.params.newPost}\r\n                            forgetNewPost={this.forgetNewPost()}\r\n                            date={this.state.selectedDate}\r\n                            />\r\n\r\n                        </View>\r\n                </ScrollView>\r\n\r\n                <Pressable onPress={() => { this.props.navigation.navigate( 'PostEntrance', {} )} }  style={[styles.postButton]}>\r\n                        <Icon name='plus-circle' width={72} height={72} fill='white' style={styles.postButtonLabel}/>\r\n                </Pressable>\r\n  \r\n            </ImageBackground>\r\n            )\r\n\r\n    }\r\n  }\r\n","import { StatusBar } from 'expo-status-bar';\r\n// import { Platform } from 'react-native';\r\n\r\nconst styles = {\r\n  mainView: {\r\n    flex: 1,                 \r\n    marginTop: StatusBar.currentHeight,\r\n  },\r\n  entrances: {\r\n    marginTop: StatusBar.currentHeight,\r\n    borderWidth: 0,\r\n    flex:1,\r\n    justifyContent: 'space-between',\r\n    alignItems: 'flex-start',\r\n  },\r\n  scrollView: {\r\n    // paddingHorizontal: Platform.OS != 'web' ? '5%' : '5%',\r\n    width: '100%',\r\n    alignSelf: 'center',\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    paddingBottom: '0%',\r\n    paddingHorizontal: '5%',\r\n    alignSelf: 'stretch',\r\n    borderColor: 'black',\r\n  },\r\n  section: {\r\n    width: 350,\r\n    paddingVertical: '16%',\r\n    borderBottomWidth: 1,\r\n    borderColor: 'rgba(155,155,155,0.3)',\r\n    alignSelf: 'center',\r\n  },\r\n  contentRow: {\r\n    flexDirection: 'column',\r\n    padding: 10,\r\n    marginTop: 22,\r\n    borderWidth: 1,\r\n    borderColor: 'rgba(155,155,155, 0.4)',\r\n    borderRadius: 30,\r\n    backgroundColor: 'rgba(255,255,255, 0.3)',\r\n\r\n  },\r\n  entryTitle: {\r\n    paddingVertical: 3,\r\n    paddingLeft: 4,\r\n    fontSize: 19,\r\n    color: 'white',\r\n  },\r\n  entryIcon: {\r\n    paddingRight: 0,\r\n    borderWidth: 1,\r\n  },\r\n  postButtonView: {\r\n    height: 60,\r\n    width: 60,\r\n    borderRadius: 30,\r\n    alignSelf: 'center',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    backgroundColor: 'white',\r\n  },\r\n  postButtonLabel: {\r\n    fontSize: 45,\r\n    fontWeight: 'bold',\r\n  },\r\n  moodButtonView: {\r\n    width: 65,\r\n    height: 65,\r\n    alignItems: 'center',\r\n    justifyContent: 'center'\r\n  },\r\n  moodButton: {\r\n      height: 53,\r\n      width: 53,\r\n      borderRadius: 30,\r\n      justifyContent: 'center',\r\n      marginColor: 'black',\r\n      marginWidth: 2,\r\n  },\r\n  date: {\r\n    position: 'relative',\r\n    left: '60%',\r\n    paddingVertical: 8,\r\n    paddingHorizontal: 10,\r\n    fontSize: 15,\r\n    alignSelf: 'center',\r\n    backgroundColor: 'white',\r\n    borderRadius: 20\r\n  },\r\n  jornalText: {\r\n    paddingVertical: 5,\r\n    paddingHorizontal: 10,\r\n    minHeight:170,\r\n    width: '100%',\r\n    borderRadius: 20,\r\n    color: 'white',\r\n    fontSize: 16,\r\n  },\r\n  saveButton: {\r\n    height: 50,\r\n    width: '100%',\r\n    borderTopLeftRadius: 30,\r\n    borderTopRightRadius: 30,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    backgroundColor: 'white'\r\n  },\r\n  card: {\r\n    marginTop: '5%',\r\n    paddingVertical: 5,\r\n    paddingHorizontal: 10,\r\n    borderRadius: 20,\r\n    backgroundColor: 'rgba(0,0,0,0.2)',\r\n  },\r\n  cardRow: {\r\n      flexDirection: 'row',\r\n      paddingVertical: 5,\r\n      alignItems: 'center',\r\n  },\r\n  moodBadge: {\r\n      backgroundColor: 'green',\r\n      borderRadius: 30,\r\n      paddingVertical: 6,\r\n      width: 130,\r\n      fontSize: 16,\r\n      textAlign: 'center',\r\n  },\r\n  emotionBadge: {\r\n      backgroundColor: 'rgba(1,1,1,0.5)',\r\n      borderRadius: 30,\r\n      paddingVertical: 7,\r\n      paddingHorizontal: 12.5,\r\n      marginRight: 6,\r\n      fontSize: 15,\r\n      textAlign: 'center',\r\n  },\r\n  entryCardEmotionBadge: {\r\n    fontFamily: 'sans-serif',\r\n    backgroundColor: 'aliceblue',\r\n    borderRadius: 30,\r\n    paddingVertical: 7,\r\n    paddingHorizontal: 12.5,\r\n    marginRight: 6,\r\n    fontSize: 15,\r\n    textAlign: 'center',\r\n},\r\n\r\n}\r\n\r\nexport default styles;","const GoogleMapsAPI = {\r\n    GoogleMapsJavascriptAPIkey: \"AIzaSyBVWbOwPAMRyz2bS6rYHrDftVeihQ8WMCo\",\r\n    GoogleMapsGeocodingAPIKey: \"AIzaSyB6O-DpvulBC0rom1mGy-mBcstIbPlDPHA\",\r\n}\r\n\r\nexport default GoogleMapsAPI","const OpenWeatherMapAPI = {\r\n    KEY: \"de9e6896f84109d7920528172207411a\",\r\n}\r\nexport default OpenWeatherMapAPI\r\n","import React, { Component } from 'react';\r\nimport { View, Text, ImageBackground, Pressable, ScrollView } from 'react-native';\r\nimport { TextInput} from 'react-native-gesture-handler';\r\nimport { Icon } from 'react-native-eva-icons'\r\n\r\nimport styles from '../styles/postEntryStyles'\r\n\r\n// Geolocation dependencies and APIs\r\nimport * as Location from 'expo-location';\r\nimport GoogleMapsAPI from './subcomponents/GoogleMapsAPI'\r\nLocation.setGoogleApiKey(GoogleMapsAPI.GoogleMapsGeocodingAPIKey)\r\n\r\n/// Weather API\r\nimport OpenWeatherMapAPI from './subcomponents/OpenWeatherMapAPI';\r\n\r\n// cors-midpoint uri (needed to avoid cors' allow-cross-origin error when fetching)\r\nconst corsURI = 'https://morning-journey-78874.herokuapp.com/'\r\nconst appServerURI = 'https://mood-tracker-server.herokuapp.com/'\r\n\r\n// Date() => wed jan 91 2022 07:46:57 ...\r\nconst now = new Date().toString().split(' ')\r\nconst datetime = now[2] + ' ' + now[1] + ' ' + now[3] + ' - ' + now[4].slice(0, 5)\r\n\r\n// Mood configs\r\nconst moodColors = ['#ff3333', '#0099cc', '#ffffff', '#ffff33', '#00b300']\r\nconst moods = ['Horrível', 'Mal', 'Regular', 'Bem', 'Ótimo']\r\n\r\n// Emotion configs\r\nconst emotionGroupsNames = [ 'Bem & Energizado', 'Bem & Calmo', 'Mal e Energizado', 'Mal & Calmo' ]\r\n\r\nconst goodEnergizedEmotions = ['Animação', 'Concentração', 'Desinibição', 'Motivação', 'Euforia']\r\nconst goodCalmEmotions = ['Alívio', 'Calma', 'Conforto', 'Despreocupação', 'Inspiração', 'Orgulho', 'Paz', 'Relaxamento', 'Satisfação', 'Segurança']\r\nconst badEnergizedEmotions = ['Agitação', 'Ansiedade', 'Tristeza', 'Decepção', 'Depressão', 'Desespero', 'Frustração', 'Insatisfação', 'Irritação', 'Medo', 'Paranoia', 'Preocupação', 'Impaciencia', 'Raiva', 'Revolta', 'Sobrecarregado(a)', 'Tensão', 'Nojo']\r\nconst badCalmEmotions = ['Timidez', 'Cansaço', 'Confusão', 'Desanimo', 'Vergonha', 'Insegurança', 'Apátia', 'Solidão', 'Tédio']\r\n\r\nconst basicEmotions = [ ...goodEnergizedEmotions, ...goodCalmEmotions, ...badEnergizedEmotions, ...badCalmEmotions ]\r\nconst emotionGroups = [ goodEnergizedEmotions, goodCalmEmotions, badEnergizedEmotions, badCalmEmotions ]\r\n\r\nvar isSelectedEmotions = {}\r\nfor ( let emotion of basicEmotions){\r\n    isSelectedEmotions[emotion] = false\r\n}\r\n\r\n// Date config\r\nconst monthSigs = ['Jan', 'Feb', 'Mar', 'Apr', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dec']\r\nconst months = ['01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12']\r\n\r\nconst monthNameMap = {\r\n    '01': 'Janeiro',\r\n    '02': 'Fevereiro',\r\n    '03': 'Março',\r\n    '04': 'Abril',\r\n    '05': 'Maio',\r\n    '06': 'Junho',\r\n    '07': 'Julho',\r\n    '08': 'Agosto',\r\n    '09': 'Setembro',\r\n    '10': 'Outubro',\r\n    '11': 'Novembro',\r\n    '12': 'Dezembro',\r\n}\r\n\r\n// Functions\r\n\r\nfunction convertMonthSig(monthSig) {\r\n    const thisMonth = months[monthSigs.indexOf(monthSig)]\r\n    return thisMonth\r\n}\r\n\r\nfunction Today() {\r\n    const now = Date().toString().split(' ')\r\n    const today = [ now[3], convertMonthSig(now[1]), now[2] ].join('-')\r\n    return today\r\n}\r\n\r\nfunction getTime() {\r\n    //Wed,Jan,26,2022,15:12:37,GMT-0300,(Horário,Padrão,de,Brasília)\r\n    const now = Date().toString().split(' ')\r\n    const time = now[4]\r\n    return time\r\n}\r\n\r\nfunction oneDigit(stringNumber) {\r\n    if (stringNumber[0] == '0') return stringNumber.slice(1, stringNumber.length)\r\n    else return stringNumber\r\n}\r\n\r\nfunction formatPostEntryDatetimeTitle(date, time) {\r\n    const ymd = date.split('-')\r\n    const m = monthNameMap[ ymd[1] ]\r\n    return oneDigit( ymd[2] ) + ' ' + m + ' ' + ymd[0] + ' - ' + time.slice(0,5)\r\n}\r\n\r\nfunction formattedAddress(addressObj) {\r\n    return addressObj.street + ', ' + addressObj.streetNumber + ' - ' + addressObj.district + ', ' + addressObj.subregion + '. ' + addressObj.region + '.'\r\n}\r\n\r\nexport default class PostEntranceScreen extends Component {\r\n  \r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n\r\n            date: Today(),\r\n            startTime: getTime(),\r\n            star: false,\r\n            selectedMood: '',\r\n            emotions: [],\r\n            jornalEntry: '',    \r\n            address: null,\r\n            weather: null,\r\n\r\n            selectedEntry: 'Avaliação',\r\n            isSelectedEmotions: isSelectedEmotions,\r\n            isLoading: false,\r\n\r\n            locationServiceEnabled: null,\r\n            userCoordinates: null,\r\n            userCurrentAddress: null,\r\n        };\r\n\r\n        this.onSaveButtonPress = this.onSaveButtonPress.bind(this);\r\n        this.EmotionButtons = this.EmotionButtons.bind(this);\r\n        this.MoodButtons = this.MoodButtons.bind(this);\r\n        this.postEntryHeader = this.postEntryHeader.bind(this);\r\n        this.onEmotionButtonPress = this.onEmotionButtonPress.bind(this);\r\n        this.onMoodButtonPress = this.onMoodButtonPress.bind(this);\r\n        this.inputSection = this.inputSection.bind(this);\r\n        this.setSelectedEntry = this.setSelectedEntry.bind(this);\r\n        this.InputCard = this.InputCard.bind(this);\r\n        this.JornalInput = this.JornalInput.bind(this);\r\n        this.postNewEntryAsync = this.postNewEntryAsync.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log('PostEntryScreen component did mount. Fetching user position and weather data...')\r\n        this.checkIfLocationEnabled();\r\n        this.getCurrentLocation();\r\n    }\r\n    \r\n    async fetchWeather() {\r\n        if (this.state.userCoordinates) {\r\n\r\n            try {\r\n                console.log('FETCH WEATHER STATUS: STARTED...!')\r\n                const coords = this.state.userCoordinates\r\n                const lat = coords.latitude\r\n                const lng = coords.longitude\r\n                \r\n                await fetch(\r\n                    `http://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lng}&APPID=${OpenWeatherMapAPI.KEY}&units=metric`\r\n                )\r\n                .then(res => {\r\n                    const resStatus = 'Status: ' + res.status + ', Status Text: ' + res.statusText\r\n                    if (!res.ok) \r\n                        throw new Error(resStatus)\r\n                    else {\r\n                        return res.json()\r\n                    }\r\n                })\r\n                .then(json => {\r\n                    console.log('FETCH WEATHER STATUS: SUCCESSFUL!')\r\n                    console.log('Fetch weather response:')\r\n                    console.log(json);\r\n                    this.setState({weather: json})\r\n                });\r\n          \r\n            } catch(error) {\r\n                console.log('FETCH WEATHER STATUS: ERROR! LOGGING ERROR...')\r\n                console.log(error)\r\n    \r\n            } finally {\r\n                console.log('FETCH WEATHER STATUS: FINISHED!')    \r\n            }\r\n\r\n        } else {\r\n            console.log('FETCH WEATHER STATUS: UNABLE TO START! USER POSITION NOT AVAILABLE.')\r\n        }\r\n\r\n    }\r\n\r\n    // Check if device has location services enabled\r\n    async checkIfLocationEnabled () {\r\n    \r\n        try{\r\n        console.log('GEOCODING PROCESS (CHECK): CHECKING IF USER HAS SERVICES ENABLED.' )\r\n        let enabled = await Location.hasServicesEnabledAsync();\r\n    \r\n        if (!enabled) {\r\n            console.log('GEOCODING PROCESS (CHECK): CHECKED! USER DOES NOT HAVE SERVICES ENABLED.' )\r\n            Alert.alert(\r\n            'Location Service not enabled',\r\n            'Please enable your location services to continue',\r\n            [{ text: 'OK' }],\r\n            { cancelable: false }\r\n        );\r\n        } else {\r\n            console.log('GEOCODING PROCESS (CHECK): CHECKED! USER HAS LOCATION SERVICES ENABLED.')\r\n            this.setState({LocationServiceEnabled: enabled});\r\n        }\r\n        } catch(error) {\r\n        console.log(\"GEOCODING PROCESS (CHECK): ERROR IN SERVICES PERMISSION CHECK! COULD'NT CHECK IF USER HAS SERVICES ENABLED.\")\r\n    \r\n        } finally {\r\n        console.log(\"GEOCODING PROCESS (CHECK): FINISHED!\")\r\n        }\r\n    };\r\n    \r\n    // Check for permission, get current user position and use reverse geocoding for user coordinates\r\n    async getCurrentLocation() {\r\n    \r\n        try {\r\n            console.log('GEOCODING PROCESS (PERMISSION): REQUEST PERMISSION ASYNC...')\r\n            let { status } = await Location.requestPermissionsAsync();\r\n            // let { status } = await Location.requestForegroundPermissionsAsync()\r\n        \r\n            if (status !== 'granted') {\r\n                console.log('GEOCODING PROCESS (PERMISSION): PERMISSION NOT GRANTED!')\r\n                Alert.alert(\r\n                    'Permission not granted',\r\n                    'Allow the app to use location service.',\r\n                    [{ text: 'OK' }],\r\n                    { cancelable: false }\r\n                );\r\n\r\n            } else {\r\n                console.log('GEOCODING PROCESS (PERMISSION): PERMISSION GRANTED!')\r\n            }\r\n        \r\n            console.log('GEOCODING PROCESS (REQUEST): GETTING CURRENT USER POSITION ASYNC...')\r\n            let { coords } = await Location.getCurrentPositionAsync();\r\n            \r\n            if (coords) {   \r\n                const { latitude, longitude } = coords;\r\n                this.setState({userCoordinates: coords})\r\n                console.log(`GEOCODING PROCESS (REQUEST): CURRENT USER POSITION FOUND... Latitude: ${latitude}, Logitude: ${longitude}`)\r\n                console.log('GEOCODING PROCESS (REVERSE GEOCODING): REVERSE GEOCODE ASYNC...')  \r\n                let response = await Location.reverseGeocodeAsync({ latitude, longitude });\r\n        \r\n                if (response) {\r\n                    this.setState({userCurrentAddress: response})\r\n                    console.log('GEOCODING PROCESS (REVERSE GEOCODING): REVERSE GEOCODE SUCCESSFUL! UPDATING STATE...')  \r\n\r\n                } else {\r\n                    console.log('GEOCODING PROCESS (REVERSE GEOCODING): REVERSE GEOCODE FAILED! LOGGING RESPONSE...')  \r\n                    console.log(response)\r\n                }\r\n        \r\n            } else {\r\n                console.log(`GEOCODING PROCESS (REVERSE GEOCODING): USER POSITION NOT FOUND! UNABLE TO PROCEED TO REVERSE GEOCODING...`)\r\n            }\r\n    \r\n        } catch (error) {\r\n            console.log('GEOCODING PROCESS: ERROR IN USER POSITION REQUEST! LOGGING ERROR...')\r\n            console.log(error)\r\n        \r\n        } finally {\r\n            console.log('GEOCODING PROCESS: USER POSITION REQUEST FINISHED. PROCEEDING TO FETCH WEATHER DATA...')\r\n            this.fetchWeather();\r\n        }\r\n    };\r\n\r\n    postEntryHeader() {\r\n        return(\r\n            <View style={[styles.cardRow, {justifyContent: 'space-between'}]}>\r\n                <Pressable onPress={() => {this.props.navigation.goBack()}}  style={styles.postButton}>\r\n                    <Icon name='arrow-back' fill='white' height={30} width={30}/>\r\n                </Pressable>\r\n                <View style={[styles.entryCardEmotionBadge, {flexDirection: 'row', alignItems: 'center'}]}>\r\n                    <Text> { formatPostEntryDatetimeTitle(this.state.date, this.state.startTime) } </Text>\r\n                    <Icon name='edit' fill='rgba(75,75,75,1)' height={20} width={20}/>\r\n                </View>\r\n                <Pressable onPress={() => {this.setState({star: !this.state.star})}}  style={styles.postButton}>\r\n                    <Icon name={this.state.star ? 'star' : 'star-outline'} fill='rgba(245,245,245,0.7)' height={30} width={30}/>\r\n                </Pressable>\r\n            </View>\r\n        )\r\n    }\r\n\r\n    onMoodButtonPress(item) {\r\n        function selectMood() {\r\n            if (this.state.selectedMood==item) {\r\n                this.setState({selectedMood: null})\r\n            } else {\r\n                this.setState({selectedMood: item})\r\n            }\r\n        }\r\n        selectMood = selectMood.bind(this);\r\n        return selectMood\r\n    }\r\n\r\n    MoodButtons() {\r\n        \r\n        return moods.map((item, index) => {\r\n\r\n            const selColor = moodColors[index]\r\n            const moodButtonViewStyle = {\r\n                width: 65,\r\n                height: 65,\r\n                alignItems: 'center',\r\n                justifyContent: 'center',\r\n                borderWidth: this.state.selectedMood==item ? 3 : 0,\r\n                borderRadius: 32.5,\r\n                borderColor: selColor,\r\n            }        \r\n\r\n            return(\r\n                <View key={'mood '+index} style={moodButtonViewStyle} >\r\n                    <Pressable\r\n                    title={item}\r\n                    onPress={this.onMoodButtonPress(item)}\r\n                    style={[\r\n                        styles.moodButton,\r\n                        this.state.selectedMood==item ? {\r\n                            fontWeight: 'bold',\r\n                            backgroundColor: selColor,\r\n                        } : {\r\n                            fontWeight: null,\r\n                            backgroundColor: selColor\r\n                        }\r\n                    ]}\r\n                    >\r\n                        <Text style={{textAlign: 'center', textAlignVertical: 'center'}}>{item}</Text>\r\n                    </Pressable>\r\n                </View>\r\n            )\r\n        })\r\n    }\r\n\r\n    onEmotionButtonPress(emotion) { \r\n        function selectEmotion () {\r\n            this.setState({\r\n                isSelectedEmotions: {\r\n                    ...this.state.isSelectedEmotions,\r\n                    [emotion]: !this.state.isSelectedEmotions[emotion]\r\n                }\r\n            })\r\n        }\r\n        selectEmotion = selectEmotion.bind(this);\r\n        return selectEmotion\r\n    }\r\n\r\n    EmotionButtons(emotions) {\r\n        return(\r\n            emotions.map( emotion => (\r\n                <Pressable\r\n                key={'emotion-' + emotion}\r\n                title={emotion}\r\n                style={ {paddingVertical: 5} }\r\n                onPress={this.onEmotionButtonPress(emotion)}\r\n                >\r\n                    <Text style={[styles.emotionBadge, {backgroundColor: this.state.isSelectedEmotions[emotion] ? 'lightblue' : 'white' }]}>{emotion}</Text>\r\n                </Pressable>\r\n            ))\r\n        )\r\n    }\r\n\r\n    JornalInput() {\r\n        return(\r\n            <TextInput multiline \r\n                placeholder='Today was...' \r\n                style={styles.jornalText}\r\n                onChangeText={text => this.setState({jornalEntry: text})}\r\n                value={this.state.jornalEntry}\r\n                >\r\n            </TextInput>\r\n        )\r\n    }\r\n\r\n    setSelectedEntry (entry) {\r\n        function setSelected() {\r\n            this.setState( {selectedEntry:  this.state.selectedEntry === entry ? null : entry  } )\r\n        }\r\n        setSelected = setSelected.bind(this);\r\n        return setSelected\r\n    }\r\n\r\n    inputSection(sectionName, inputStyle, inputs) {\r\n        if (this.state.selectedEntry === sectionName) {\r\n            if (sectionName == 'Emoções') {\r\n                return emotionGroups.map((emotions, index) => (\r\n                    <View key={'emotion-group-' + index} style={{width: '100%', alignItems: 'center'}}>\r\n                        <Text style={{fontSize: 15, color: 'white', paddingVertical: 11}}>{emotionGroupsNames[index]}</Text>\r\n                        <View key={index} style={[styles.cardRow, inputStyle]}>\r\n                            {inputs(emotions)}\r\n                        </View>\r\n                    </View>\r\n                ))\r\n            } else {\r\n                return(\r\n                    <View style={[styles.cardRow, inputStyle]}>\r\n                        {inputs}\r\n                    </View>\r\n                )    \r\n            }\r\n        } else {\r\n            return(\r\n                <></>\r\n            )\r\n        }\r\n    }\r\n\r\n    InputCard(sectionName, icon, inputStyle, inputs) {\r\n        return(\r\n            <View style={[styles.card]}>\r\n                <Pressable style={styles.cardRow}  onPress={this.setSelectedEntry(sectionName)}>\r\n                    <Icon name={icon} fill='rgba(255,255,255,0.75)' height={25} width={25} style={styles.entryIcon}/>\r\n                    <Text style={styles.entryTitle}> {sectionName} </Text>\r\n                </Pressable>\r\n\r\n                {this.inputSection(sectionName=sectionName, inputStyle=inputStyle, inputs=inputs)}  \r\n\r\n            </View>\r\n        )\r\n    }\r\n\r\n    onSaveButtonPress () {\r\n        if (!this.state.selectedMood) {\r\n            alert('Necessário adicionar uma avaliação.')\r\n\r\n        } else {\r\n            const newEntry = {\r\n                jornal: this.state.jornalEntry,\r\n                mood: this.state.selectedMood,\r\n                emotions: basicEmotions.filter( emotion => this.state.isSelectedEmotions[emotion] ) ,\r\n                address: formattedAddress(this.state.userCurrentAddress[1]),\r\n                date: Today(),\r\n                startTime: this.state.startTime,\r\n                endTime: getTime(),\r\n                star: this.state.star,\r\n            }\r\n            this.postNewEntryAsync(newEntry)\r\n        }\r\n    }\r\n\r\n    async postNewEntryAsync(newEntry) {\r\n        this.setState({ isLoading: true });\r\n        var info = this.props.route.params.userInfo;\r\n\r\n        try {\r\n            const postUserEntryOpts = { \r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify( newEntry ),\r\n            }\r\n            var postUserEntryResult = await fetch( corsURI + appServerURI + 'Users/' + info.username + '/entries', postUserEntryOpts);\r\n            // var postUserEntryResult = await fetch('http://localhost:3000/Users/' + info.username + '/entries', postUserEntryOpts);\r\n\r\n            if (postUserEntryResult.ok) {\r\n                console.log('fetch POST request successful')\r\n                console.log('Status: ' + postUserEntryResult.status + ', ' + postUserEntryResult.statusText)\r\n                this.props.navigation.navigate('Entrances', {newPost: true} )    \r\n\r\n            } else {\r\n                console.log('fetch POST request failed. Throwing error...')\r\n                throw new Error('Status: ' + postUserEntryResult.status + ', ' + postUserEntryResult.statusText)\r\n            }\r\n\r\n        } catch (error) {\r\n            console.log('Erro capturado:')\r\n            console.log(error);\r\n\r\n        } finally {\r\n            this.setState({ isLoading: false });\r\n    }\r\n}\r\n  \r\n    render() {\r\n        console.log('Rendering \"Post Entry\" screen...')\r\n\r\n        return(\r\n            <ImageBackground source={require('../assets/wallpaper.jpg')} style={styles.mainView}>\r\n\r\n                <ScrollView style={styles.scrollView}>\r\n                    <View style={styles.section}>\r\n                            {this.postEntryHeader()}\r\n                            {this.InputCard('Avaliação', 'smiling-face', {justifyContent: 'space-between'}, this.MoodButtons())}\r\n                            {this.InputCard('Emoções', 'checkmark-square-outline', {flexWrap: 'wrap', justifyContent: 'space-evenly'}, this.EmotionButtons)}\r\n                            {this.InputCard('Jornal', 'book', {flexDirection: 'column'}, this.JornalInput())}\r\n                    </View>\r\n                </ScrollView>  \r\n\r\n                <Pressable \r\n                onPress={this.onSaveButtonPress} \r\n                style={styles.saveButton}\r\n                >\r\n                    <Text style={{fontWeight:'bold', fontSize: 17}}>Salvar</Text>\r\n                </Pressable>\r\n    \r\n            </ImageBackground>\r\n        )    \r\n    }\r\n}","var styles = {\r\n    login: {\r\n        mainView: {\r\n            flex: 1,\r\n            justifyContent: 'center',\r\n            alignItems: 'center',\r\n            // paddingHorizontal: Platform.OS != 'web' ? '5%' : '5%',\r\n        },\r\n        titleView: {\r\n            flexDirection: 'row',\r\n            justifyContent: 'center',\r\n            alignItems: 'center',\r\n            minHeight: 60,\r\n        },\r\n        title: {\r\n            fontSize: 25,\r\n            fontWeight: 'bold',\r\n            color: 'white',\r\n            alignSelf: 'center',\r\n        },\r\n        titleIcon: {\r\n            paddingLeft: 6,\r\n            paddingTop: 3,\r\n        },\r\n        card: {\r\n            height: '55%',\r\n            minHeight: 390,\r\n            width: 350,\r\n            paddingHorizontal: 10,\r\n            paddingVertical: 10,\r\n            borderWidth: 1,\r\n            borderRadius: 10,\r\n            backgroundColor: 'azure',\r\n        },\r\n        cardHeader: {\r\n            height: '25%',\r\n            width: '100%',\r\n        },\r\n        cardTitle: {\r\n            position: 'relative',\r\n            top: '30%',\r\n            left: '5%',\r\n            fontSize: 24,\r\n            fontWeight: 'bold',\r\n            color: 'black',\r\n        },\r\n        cardSection: {\r\n            height: '25%',\r\n            justifyContent: 'space-evenly',\r\n            alignItems: 'center',\r\n        },\r\n        loadingIcon: {\r\n            alignSelf: 'center'\r\n        },\r\n        inputField: {\r\n            minHeight: 40,\r\n            width: '100%',\r\n            paddingLeft: 10,\r\n            fontSize: 14,\r\n            borderWidth: 1,\r\n            borderRadius: 5,\r\n            backgroundColor: 'white'\r\n        },\r\n        button: {\r\n            height: 40,\r\n            width: '100%',\r\n            textAlign: 'center',\r\n            justifyContent: 'center',\r\n            borderWidth: 1,\r\n            borderRadius: 5,\r\n            borderColor: 'white',\r\n            backgroundColor: 'lightblue',        \r\n        },\r\n        buttonLabel: {\r\n            fontSize: 15,\r\n            fontWeight: 'bold',\r\n            color: 'black',\r\n        },\r\n        text: {\r\n            fontSize: 15,\r\n            textAlign: 'center',\r\n        },\r\n        msgBox: {\r\n            width: 350,\r\n            height: 36,\r\n            justifyContent: 'center',\r\n            backgroundColor: 'rgb(30,30,30)',\r\n            borderWidth: 1,\r\n            borderColor: 'rgb(40,40,40)',\r\n        },\r\n        msg: {\r\n            textAlign: 'center',\r\n            color: 'white',\r\n        },\r\n    }\r\n};\r\nexport default styles;","import { Icon } from 'react-native-eva-icons'\r\n\r\nimport React, { Component } from 'react';\r\nimport { View, Text, ImageBackground, TextInput, Pressable } from 'react-native';\r\nimport styles from '../styles/loginStyles'\r\n\r\n// App server connection settings\r\nconst corsURI = 'https://morning-journey-78874.herokuapp.com/'\r\nconst appServerURI = 'https://mood-tracker-server.herokuapp.com/'\r\n\r\n// Email Validation settings\r\n\r\n// const Verifier = require('email-verifier')\r\nconst emailVerification_APIKEY = \"at_TPKXmSQnStekLzTbstLO9GyHvd7or\"\r\n// let verifier = new Verifier(emailVerification_APIKEY);\r\nconst emailVerification_APIURI = (emailAddress) => `https://emailverification.whoisxmlapi.com/api/v2?apiKey=${emailVerification_APIKEY}&emailAddress=${emailAddress}`\r\nconst falseParams = ['validateDNS', 'checkCatchAll', 'checkFree', 'checkDisposable']\r\nfunction appendValueToUri(uri, params, value) {\r\n  for (let param of params) {\r\n    uri += '&' + param + '=' + value\r\n  }\r\n  return uri\r\n}\r\n\r\nasync function validateEmail(email) {\r\n\r\n  console.log('EMAIL VERIFICATION STATUS: Fetching email verification api...')\r\n\r\n  try {\r\n\r\n    var uri = emailVerification_APIURI(email)\r\n    uri = appendValueToUri(uri, falseParams, '0')\r\n    var emailStatus = {ok: false, status: 'Email não verificado.'}\r\n    const apiResp = await fetch( uri , { method: 'GET' } )\r\n  \r\n    if (apiResp.ok) {\r\n  \r\n      console.log('EMAIL VERIFICATION STATUS: Api fetch request successful.')\r\n      const apiRespJson = await apiResp.json()\r\n  \r\n      if ( apiRespJson.formatCheck=='false' ) {\r\n        emailStatus.status = 'Email inválido.'\r\n      } else if ( apiRespJson.smtpCheck=='false' ) {\r\n        emailStatus.status = 'Email não existe.'\r\n      } else {\r\n        emailStatus = {ok: true, status: 'Email válido.'}\r\n      }\r\n      \r\n      return emailStatus\r\n  \r\n    } else {\r\n      console.log('EMAIL VERIFICATION STATUS: Api fetch request failed. Throwing error...')\r\n      throw new Error('Status: ' + apiResp.status + ', Status Text: ' + apiResp.statusText)\r\n    }  \r\n\r\n  } finally {\r\n    console.log('EMAIL VERIFICATION STATUS: Concluído')\r\n\r\n  }\r\n  // Use the email verification api using its module...\r\n  // verifier.verify(email, (err, data) => {\r\n  //   if (err) throw err;\r\n  //   console.log(data);\r\n  // });\r\n}\r\n\r\nfunction validatePassword(password) {\r\n  console.log('VALIDATING PASSWORD FOR SIGNUP...')\r\n\r\n  const hasMinLength = password.length > 6\r\n  var res\r\n  if (!hasMinLength) {\r\n    res = {ok: false, status: 'A senha deve ter no mínimo 6 caractéres.'}\r\n  } else {\r\n    res = {ok: true, status: 'Senha válida.'}\r\n  }\r\n  return res\r\n}\r\n\r\nclass LoginScreen extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      userInfo: {\r\n        password: '',\r\n        email: '',\r\n        username: '',\r\n      },\r\n      loginMsg: '',\r\n      isUserAuth: false,\r\n      isDataLoading: false,\r\n    }\r\n    this.onChangeText = this.onChangeText.bind(this);\r\n    this.submitButton = this.submitButton.bind(this);\r\n    this.loginMsg = this.loginMsg.bind(this);\r\n    this.setLoginMsg = this.setLoginMsg.bind(this);\r\n    this.onSignIn = this.onSignIn.bind(this);\r\n    this.onSignUp = this.onSignUp.bind(this);\r\n  }\r\n\r\n  LoginIcon() {  \r\n    if (this.state.isDataLoading) {\r\n      return <Icon name='loader-outline' animation='pulse' width={25} height={25}></Icon>\r\n    } else {\r\n      return <Icon name='log-in-outline' animation='pulse' width={25} height={25}></Icon>\r\n    }\r\n  }\r\n\r\n  setLoginMsg(msg) {\r\n    this.setState({loginMsg: msg})\r\n    setTimeout( () => this.setState({loginMsg: ''}) , 1000 * 5 )\r\n  }\r\n\r\n  loginMsg() {\r\n      return(\r\n        <View style={[styles.login.msgBox, this.state.loginMsg ? {} : {backgroundColor: 'transparent', borderColor: 'transparent'} ]}>\r\n          <Text style={styles.login.msg}>{this.state.loginMsg}</Text>\r\n        </View>\r\n      )\r\n  }\r\n\r\n  onChangeText(textField) {\r\n    function setField(text) {\r\n      this.setState( { userInfo: { ...this.state.userInfo, [textField] : text}} )\r\n    }\r\n    setField = setField.bind(this);\r\n    return setField\r\n  }\r\n\r\n  submitButton(sign) {\r\n    const signIn = sign == 'signin'\r\n    return(\r\n      <Pressable onPress={signIn ? this.onSignIn : this.onSignUp} style={[styles.login.button]}>\r\n        <Text style={styles.login.buttonLabel}>{ signIn ? 'Entrar' : 'Cadastrar' }</Text>\r\n      </Pressable>\r\n    )\r\n  }\r\n\r\n  encryptedPassword() {\r\n    var encPass = ''\r\n    for (var i=0; i<this.state.userInfo.password.length; i++) {\r\n      encPass += '*'\r\n    }\r\n    return encPass\r\n  }\r\n\r\n  LoginScreen = () => {\r\n    return(\r\n      <ImageBackground source={require('../assets/wallpaper.jpg')} style={[styles.login.mainView ,{justifyContent: 'space-evenly'}]}>\r\n        \r\n        <View style={styles.login.titleView}>\r\n          <Text style={styles.login.title}>Mood Tracker</Text>\r\n          <Icon name='clock-outline' width={25} height={25} fill='white' animation='pulse' style={styles.login.titleIcon} ></Icon>\r\n        </View>\r\n\r\n        <View style={styles.login.card}>\r\n          <View style={styles.login.cardHeader} >\r\n            <Text style={styles.login.cardTitle}>Entrar</Text>\r\n          </View>\r\n          <View style={styles.login.cardSection}>\r\n            <TextInput\r\n            placeholder='Email'\r\n            onChangeText={this.onChangeText('email')}\r\n            style={styles.login.inputField}\r\n            autoComplete='email'\r\n            importantForAutofill='yes'\r\n            >\r\n            </TextInput>\r\n            <TextInput\r\n            placeholder='Senha'\r\n            style={styles.login.inputField}\r\n            onChangeText={this.onChangeText('password')}\r\n            secureTextEntry={true}\r\n            autoComplete='password'\r\n            importantForAutofill='yes'\r\n            ></TextInput>\r\n          </View>\r\n          <View style={styles.login.cardSection}>\r\n            {this.submitButton('signin')}\r\n            {this.submitButton('signup')}\r\n          </View>\r\n          <View style={[styles.login.cardSection]}>\r\n            {this.LoginIcon()}\r\n          </View>\r\n        </View>\r\n\r\n        {this.loginMsg()}\r\n\r\n      </ImageBackground>\r\n    )\r\n  }\r\n\r\n  async onSignIn() {\r\n\r\n    console.log('SIGNIN STATUS: started...')\r\n    var info = this.state.userInfo;\r\n    this.setState({ isDataLoading: true });\r\n\r\n    try {\r\n\r\n      var UsersResult = await fetch(corsURI + appServerURI + 'Users', { method: 'GET' });\r\n      const UsersStatus = 'Status: ' + UsersResult.status + ', ' + UsersResult.statusText\r\n      if (UsersResult.ok) {\r\n        console.log('fetch GET request for users data at signin successful.');\r\n        console.log(UsersStatus)\r\n      } else {\r\n        console.log('fetch GET request for users data at signin failed. Throwing error...')\r\n        throw new Error(UsersStatus)\r\n      }\r\n\r\n      const Users = await UsersResult.json();\r\n      const user = Users.filter((user) => user.email === info.email)[0]\r\n      \r\n      if ( user ) {          \r\n        \r\n        if (user.password === info.password) {\r\n          const userInfo = { ...info, username: info.email.split('@')[0]}\r\n          this.setState( {isUserAuth: true, userInfo} )\r\n          const successMsg = 'Login realizado com sucesso!'\r\n          this.setLoginMsg(successMsg)\r\n          console.log('SIGNIN STATUS: Sucesso.')\r\n\r\n        } else {\r\n          const errMsg = 'Senha incorreta.'\r\n          this.setLoginMsg(errMsg)\r\n          console.log('SIGNIN STATUS: ' + errMsg);\r\n        }\r\n\r\n      } else {\r\n        const errMsg = 'Email não cadastrado!'\r\n        this.setLoginMsg(errMsg)\r\n        console.log('SIGNIN STATUS: ' + errMsg)\r\n      }\r\n\r\n    } catch (error) {\r\n      const errMsg = 'Erro no servidor! Tente novamente...'\r\n      this.setLoginMsg(errMsg)\r\n      console.log('Error catched in fetch GET request for users data at  signin. Printing Error...')\r\n      console.log('SIGNIN STATUS:' + 'Erro capturado. Imprimindo erro...')\r\n      console.log(error);\r\n\r\n    } finally {\r\n      this.setState({ isDataLoading: false });\r\n      console.log('SIGNIN STATUS: Concluido.')\r\n      if (this.state.isUserAuth) this.props.authUser(this.state.userInfo)        // Father class component method that authenticates the user and redirects to entrances screen.\r\n    }\r\n  }\r\n\r\n  async onSignUp() {\r\n\r\n    console.log('SIGNUP STATUS: started...')\r\n    var info = this.state.userInfo;\r\n    this.setState({ isDataLoading: true });\r\n    \r\n    try {\r\n\r\n      var postUserResult = {ok: false}\r\n\r\n      // Validating email and password\r\n      const emailValidation = await validateEmail(info.email)\r\n      console.log('SING UP STATUS: ' + emailValidation.status)\r\n      if (!emailValidation.ok) {\r\n          this.setLoginMsg(emailValidation.status)\r\n          return\r\n      }\r\n\r\n      // Checking if email is already registerd\r\n      var UsersResult = await fetch( corsURI + appServerURI + 'Users', { method: 'GET' } );  \r\n      const reqStatus = 'Status: ' + UsersResult.status + ', ' + UsersResult.statusText\r\n      if (UsersResult.ok) {\r\n        console.log('fetch GET request for users data at signup successful.')\r\n        console.log(reqStatus)\r\n      } else {\r\n        console.log('fetch GET request for users data at signup failed. Throwing error...')\r\n        throw new Error(reqStatus)\r\n      }\r\n\r\n      const Users = await UsersResult.json();\r\n      const User = Users.filter((user) => user.email === info.email)[0]\r\n      if ( !User ) {\r\n\r\n        // Validating Password\r\n        const passwordCheck = validatePassword(info.password)\r\n        if (!passwordCheck.ok) {\r\n          console.log('SING UP STATUS: ' + passwordCheck.status)\r\n          this.setLoginMsg(passwordCheck.status)\r\n          return\r\n      }\r\n\r\n        // Registering new user by posting user identification to database\r\n        info.username = info.email.split('@')[0]\r\n        const postUserOpts = { \r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify( { entries: [], ...info } )\r\n        }\r\n        \r\n        postUserResult = await fetch( corsURI + appServerURI +  'Users/' + info.username, postUserOpts );\r\n        const postUserStatus = 'Status: ' + postUserResult.status + ', ' + postUserResult.statusText\r\n\r\n        if (postUserResult.ok) {\r\n          const successMsg = 'Cadastro realizado com sucesso!'\r\n          this.setLoginMsg(successMsg)\r\n          console.log('fetch POST request for user data at signup successful.')\r\n          console.log(postUserStatus)\r\n          console.log('SING UP STATUS: ' + successMsg)\r\n\r\n        } else {\r\n          console.log('fetch POST request for user data at signup failed. Throwing error...')\r\n          throw new Error(postUserStatus)\r\n        }\r\n\r\n      } else {\r\n        const errMsg = 'Email já cadastrado.'\r\n        this.setLoginMsg(errMsg)\r\n        console.log('SING UP STATUS: ' + errMsg)\r\n      }\r\n\r\n    } catch (error) {\r\n      const errMsg = 'Erro no servidor, não foi possível realizar o cadastro. Por favor, tente novamente.'\r\n      this.setLoginMsg(errMsg)\r\n      console.log('SING UP STATUS: Erro capturado. Imprimindo erro...')\r\n      console.log(error);\r\n\r\n    } finally {\r\n      this.setState({ isDataLoading: false })\r\n      console.log('SING UP STATUS: Concluido.')\r\n      if (postUserResult.ok)  this.onSignIn()\r\n    }\r\n  }\r\n\r\n  render() {\r\n\r\n    console.log('Rendering \"LoginComponent\" screen...')\r\n    return this.LoginScreen()\r\n  \r\n  }\r\n}\r\n\r\nexport default LoginScreen;","import { Icon } from 'react-native-eva-icons'\n\nimport React, { Component, useState, useEffect } from 'react';\nimport { Text, ImageBackground} from 'react-native';\n\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\n//import { createDrawerNavigator } from '@react-navigation/drawer';\n\nimport EntrancesScreen from './components/EntrancesComponent';\nimport PostEntranceScreen from './components/PostEntryComponent';\nimport LoginScreen from './components/LoginComponent'\n\nconst Tab = createBottomTabNavigator();\nconst Stack = createNativeStackNavigator();\n\nconst HomeScreen = (props) => {\n\n  console.log('Returning \"HomeScreen\" Component...')\n  return(\n    <Stack.Navigator \n    initialRouteName='Entrances'\n    screenOptions={{\n      headerShown: false,\n    }}\n    >\n      <Stack.Screen\n      name=\"Entrances\"\n      component={EntrancesScreen}\n      options={{title: 'Suas entradas'}}\n      initialParams={{userInfo: props.userInfo}}\n      // initialParams={{userInfo: props.route.params.userInfo}}\n      />\n      <Stack.Screen\n      name=\"PostEntrance\"\n      component={PostEntranceScreen}\n      options={{title: 'Adicione uma  entrada'}}\n      initialParams={{userInfo: props.userInfo}}\n      // initialParams={{userInfo: props.route.params.userInfo}}\n      />\n    </Stack.Navigator>\n  )  \n}\n\nfunction SettingsScreen() {\n  return(\n    <ImageBackground source={require('./assets/wallpaper.jpg')} style={{width: '100%', height: '100%'}}>\n      <Text>Settings</Text>\n    </ImageBackground>\n  )\n}\n\n// const mainScreenOptions = ({ route }) => ({\n//   headerShown: false,\n//   tabBarActiveTintColor: 'tomato',\n//   tabBarInactiveTintColor: 'gray',\n//   tabBarHideOnKeyboard: true,\n//   tabBarIcon: ({ focused, color, size }) => {\n//     let iconName;\n//     if (route.name === 'Home') {\n//       iconName = focused\n//         ? 'home'\n//         : 'home-outline';\n//     } else if (route.name === 'Settings') {\n//       iconName = focused ? 'settings' : 'settings-outline';\n//     }\n//     // You can return any component that you like here!\n//     return <Icon name={iconName} width={size} height={size} fill='rgb(35,35,35)'></Icon>\n//   },\n// })\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isUserAuth: false,\n      userInfo: null,\n    };\n    this.authUser = this.authUser.bind(this);\n  }\n\n  authUser(userInfo) {\n    console.log('User authenticated. Navigating to \"Entries\" screen...')\n    this.setState( {isUserAuth: true, userInfo} )\n  }\n\n  render() {\n\n    if (!this.state.isUserAuth) {\n      return <LoginScreen authUser={this.authUser} />\n\n    } else {\n      return (\n\n        <NavigationContainer>\n          <HomeScreen userInfo={this.state.userInfo} />\n        </NavigationContainer>\n\n        // <NavigationContainer>\n        //   <Tab.Navigator\n        //     screenOptions={mainScreenOptions}\n        //   >\n        //     <Tab.Screen name=\"Home\" component={HomeScreen} initialParams={{userInfo: this.state.userInfo}}/>\n        //     <Tab.Screen name=\"Settings\" component={SettingsScreen} initialParams={{userInfo: this.state.userInfo}} />\n        //   </Tab.Navigator>    \n        // </NavigationContainer>\n\n      );  \n    }\n  }\n} \n\nexport default App;","import { registerRootComponent } from 'expo';\n\nimport App from './App';\n\n// registerRootComponent calls AppRegistry.registerComponent('main', () => App);\n// It also ensures that whether you load the app in Expo Go or in a native build,\n// the environment is set up appropriately\nregisterRootComponent(App);\n"],"sourceRoot":""}