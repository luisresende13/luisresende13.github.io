{"version":3,"sources":["assets/wallpaper.jpg","styles/entrancesStyles.js","components/subcomponents/userEntryCards.js","shared/dateRange.js","components/EntrancesComponent.js","styles/postEntryStyles.js","components/PostEntryComponent.js","styles/loginStyles.js","components/LoginComponent.js","App.js","index.js"],"names":["module","exports","styles","mainView","flex","marginTop","StatusBar","currentHeight","postButton","position","height","width","borderRadius","bottom","alignSelf","backgroundColor","justifyContent","postButtonLabel","scrollView","section","paddingVertical","borderBottomWidth","borderColor","sectionTitle","fontSize","color","fontWeight","card","paddingHorizontal","cardRow","flexDirection","alignItems","moodBadge","fontFamily","textAlign","emotionBadge","marginRight","textBadge","lineHeight","text","spaceBetween","icon","entryIcon","paddingRight","borderWidth","moodColors","MoodHeader","entry","View","style","Text","mood","star","name","fill","paddingLeft","paddingBottom","startTime","slice","Address","address","Emotions","emotions","length","flexWrap","map","emotion","index","Pressable","Jornal","jornal","EntryCard","_id","UserEntryCards","props","state","date","userEntries","entriesSyncing","newPost","syncUserEntries","bind","console","log","this","setInterval","updateIfNewPost","forgetNewPost","filter","a","async","setState","fetch","corsURI","method","UsersResult","usersStatus","status","statusText","ok","json","users","user","username","userInfo","reverse","entriesSynced","Error","UserEntryCardsList","Component","dateRange","monthDict","monthSigs","Today","now","Date","toString","split","join","getNextDate","next","nextDate","indexOf","formatDate","ymd","i","EntrancesScreen","time","selectedDate","entriesLoading","onNextButtonPress","setSelectedDate","selDate","yesterday","navigation","setParams","isToday","ImageBackground","source","require","ScrollView","onPress","selectedDateTitle","route","params","navigate","entrances","content","flexGrow","borderTopWidth","contentRow","padding","entryTitle","postButtonView","moodButtonView","moodButton","marginColor","marginWidth","moodButtonBorder","left","jornalText","minHeight","saveButton","borderTopLeftRadius","borderTopRightRadius","datetime","goodEnergizedEmotions","goodCalmEmotions","badEnergizedEmotions","badCalmEmotions","basicEmotions","emotionGroups","emotionGroupsNames","isSelectedEmotions","getTime","getToday","monthSig","PostEntranceScreen","moodButtons","colors","colorsSelected","moods","emotionButtons","selectedMood","jornalEntry","selectedEntry","isLoading","onSaveButtonPress","EmotionButtons","MoodButtons","postEntryHeader","onEmotionButtonPress","onMoodButtonPress","inputSection","setSelectedEntry","InputCard","JornalInput","postNewEntryAsync","styles2","goBack","item","selectMood","moodButtonViewStyle","selColor","title","textAlignVertical","selectEmotion","multiline","placeholder","onChangeText","value","setSelected","sectionName","inputStyle","inputs","newEntry","endTime","alert","info","postUserEntryOpts","headers","body","JSON","stringify","postUserEntryResult","login","titleView","titleIcon","paddingTop","cardHeader","cardTitle","top","cardSection","loadingIcon","inputField","button","buttonLabel","msgBox","msg","LoginScreen","password","email","loginMsg","isUserAuth","isDataLoading","submitButton","setLoginMsg","onSignIn","onSignUp","animation","setTimeout","textField","setField","sign","signIn","encPass","TextInput","autoComplete","importantForAutofill","secureTextEntry","UsersStatus","Users","authUser","reqStatus","User","postUserResult","postUserOpts","entries","postUserStatus","successMsg","errMsg","Tab","createBottomTabNavigator","Stack","createNativeStackNavigator","HomeScreen","Navigator","initialRouteName","screenOptions","headerShown","Screen","component","options","initialParams","SettingsScreen","mainScreenOptions","tabBarActiveTintColor","tabBarInactiveTintColor","tabBarHideOnKeyboard","tabBarIcon","iconName","focused","size","App","NavigationContainer","registerRootComponent"],"mappings":"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C,IAAK,IAAIwB,MAAM,mEACjB,IAAIA,MAAMX,GApB5B,0DAwBYd,QAAQC,IAAI,0DACZD,QAAQC,IAAR,MAzBZ,yBA4BQC,KAAKO,SAAS,CAAEb,gBAAgB,IAChCI,QAAQC,IAAI,kCA7BpB,sF,oBAiCA,WAEI,OADAD,QAAQC,IAAI,8CACLC,KAAKwB,yB,GApEwBC,aCqc7BC,EApiBG,CACd,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,c,+aCrhBJ,IAGMC,EAAY,CAAC,IAAO,KAAM,IAAO,KAAM,IAAO,KAAM,IAAO,KAAM,IAAO,KAAM,IAAO,KAAM,IAAO,KAAM,IAAO,KAAM,IAAO,KAAM,IAAO,KAAM,IAAO,KAAM,IAAO,MACnKC,EAAY,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAGhG,SAASC,IACL,IAAMC,EAAMC,OAAOC,WAAWC,MAAM,KAEpC,MADc,CAAEH,EAAI,GAAIH,EAAUG,EAAI,IAAKA,EAAI,IAAKI,KAAK,KAG7D,SAASC,EAAY3C,GAAoB,IAAd4C,EAAa,uDAAR,OACtBC,EAAWX,EAAUA,EAAUY,QAAQ9C,IAAe,YAAN4C,GAAoB,EAAI,IAC9E,OAAOC,EASX,SAASE,EAAW/C,GAGhB,IADA,IAAIgD,EAAMhD,EAAKyC,MAAM,KACZQ,EAAE,EAAGA,EAAE,GAAIA,IAChB,GAAId,EAAWC,EAAUa,KAAQD,EAAI,GACjC,OAAOA,EAAI,GAAK,KAAOZ,EAAUa,G,IAOxBC,E,gCAEjB,WAAYpD,GAAQ,IAAD,sBACf,cAAMA,IACDC,MAAQ,CACTE,YAAa,G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","file":"static/js/app.12677da0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/wallpaper.9987c866.jpg\";","import { StatusBar } from 'expo-status-bar';\r\n\r\n//import StatusBar from 'react-native'\r\n// import { Platform } from 'react-native';\r\n\r\n// import { Dimensions } from 'react-native';\r\n// var windowWidth = Dimensions.get('window').width;\r\n// var windowHeight = Dimensions.get('window').height;\r\n\r\n// import DeviceInfo from 'react-native-device-info';\r\n// import AsyncStorage from '@react-native-community/async-storage';\r\n\r\n// // how can i do some code that will gives me if its \"Handset\"=> Smartphone , \r\n// //if its \"unknown\"=> Laptop/Computer \r\n// //and it will be saved as well in my async-storage.\r\n\r\n// //this some example that i wanna get it works well coz now its not work good\r\n\r\n// const funct1=  (type) => {\r\n// let type = DeviceInfo.getDeviceType();\r\n\r\n// if type==='Handset'{\r\n//   AsyncStorage.setItem('PLATFORM-TYPE', 'Smartphone');\r\n// }\r\n// if type==='unknown'{\r\n//   AsyncStorage.setItem('PLATFORM-TYPE', 'Laptop/Computer');\r\n// }\r\n// };\r\n\r\nconst styles = {\r\n    mainView: {\r\n        flex: 1,                 \r\n        marginTop: StatusBar.currentHeight,\r\n    },\r\n    postButton: {\r\n        position: 'absolute',\r\n        height: 60,\r\n        width: 60,\r\n        borderRadius: 30,\r\n        bottom: '2%',\r\n        alignSelf: 'center',\r\n        backgroundColor: 'rgba(0,0,0,1)',\r\n        justifyContent: 'center',  \r\n    },\r\n    postButtonLabel: {\r\n        alignSelf: 'center',\r\n    },\r\n    scrollView: {\r\n        // paddingHorizontal: Platform.OS != 'web' ? '5%' : '5%',\r\n        width: '100%',\r\n        alignSelf: 'center',\r\n    },\r\n    section: {\r\n        width: 350,\r\n        paddingVertical: '16%',\r\n        borderBottomWidth: 1,\r\n        borderColor: 'rgba(155,155,155,0.3)',\r\n        alignSelf: 'center',\r\n\r\n    },\r\n    sectionTitle: {\r\n        paddingVertical: 7.5,\r\n        fontSize: 18,\r\n        color: 'white',\r\n        fontWeight: '400',\r\n    },\r\n    card: {\r\n        marginTop: '5%',\r\n        paddingVertical: 5,\r\n        paddingHorizontal: 10,\r\n        borderRadius: 20,\r\n        backgroundColor: 'rgba(0,0,0,0.2)',\r\n    },\r\n    cardRow: {\r\n        flexDirection: 'row',\r\n        paddingVertical: 5,\r\n        alignItems: 'center',\r\n    },\r\n    moodBadge: {\r\n        fontFamily: 'sans-serif',\r\n        backgroundColor: 'green',\r\n        borderRadius: 30,\r\n        paddingVertical: 6,\r\n        width: 130,\r\n        fontSize: 16,\r\n        textAlign: 'center',\r\n    },\r\n    emotionBadge: {\r\n        fontFamily: 'sans-serif',\r\n        backgroundColor: 'aliceblue',\r\n        borderRadius: 30,\r\n        paddingVertical: 7,\r\n        paddingHorizontal: 12.5,\r\n        marginRight: 6,\r\n        fontSize: 15,\r\n        textAlign: 'center',\r\n    },\r\n    textBadge: {\r\n        fontFamily: 'sans-serif',\r\n        backgroundColor: 'aliceblue',\r\n        borderRadius: 20,\r\n        paddingVertical: 4,\r\n        paddingHorizontal: 10,\r\n        width: '100%',\r\n        fontSize: 14,\r\n        lineHeight: 22,\r\n        textAlign: 'left',\r\n    },\r\n    text: {\r\n        fontFamily: 'sans-serif',\r\n        fontSize: 14,\r\n        color: 'white'\r\n    },\r\n    spaceBetween: {\r\n        justifyContent: 'space-between',\r\n    },\r\n    icon: {\r\n        paddingHorizontal: 12,\r\n        },\r\n    entryIcon: {\r\n        paddingRight: 0,\r\n        borderWidth: 1,\r\n        },\r\n    \r\n};\r\n\r\nexport default styles;","// Module import\r\nimport React, { Component } from 'react';\r\nimport { View, Text, Pressable} from 'react-native';\r\nimport { Icon } from 'react-native-eva-icons'\r\n\r\n// Local import\r\nimport styles from '../../styles/entrancesStyles'\r\n\r\n// cors-midpoint uri (needed to avoid cors' allow-cross-origin error when fetching)\r\nconst corsURI = 'https://morning-journey-78874.herokuapp.com/'\r\nconst appServerURI = 'https://mood-tracker-server.herokuapp.com/'\r\n\r\n// Defining mood colors schema\r\nconst moodColors = {'Horrível': '#ff3333', 'Mal': '#0099cc', 'Regular': '#ffffff', 'Bem': '#ffff33', 'Ótimo': '#00b300'};\r\nconst monthDict = {'Jan': '01', 'Feb': '02', 'Mar': '03', 'Apr': '04', 'May': '05', 'Jun': '06', 'Jul': '07', 'Ago': '08', 'Sep': '09', 'Oct': '10', 'Nov': '11', 'Dec': '12'}\r\n\r\n\r\n// Defining pertinent functions\r\n\r\n// function formatTime(time) {\r\n//     return time.slice()\r\n// }\r\n\r\nfunction MoodHeader({entry}) {\r\n    return(\r\n        <View style={[styles.cardRow, styles.spaceBetween]}>\r\n            <View style={{flexDirection: 'row', alignItems: 'center'}}>\r\n                <Text style={[styles.moodBadge, {backgroundColor: moodColors[entry.mood]}]}>{entry.mood}</Text>\r\n                { entry.star ? <Icon name='star' fill='gold' width={27} height={27} style={{paddingLeft: 15, paddingBottom: 2}} ></Icon> : <></> }\r\n            </View>\r\n            <View style={[styles.cardRow]}>\r\n                <Icon name='edit' height={18} width={18} fill='rgba(255,255,255,0.75)' style={{paddingRight: 8}} />\r\n                <Text style={styles.text}>{entry.startTime.slice(0,5)}</Text>\r\n            </View>\r\n        </View>\r\n\r\n    )\r\n}\r\n\r\nfunction Address ({entry}) {\r\n    if (entry.address) {\r\n        return(\r\n            <View style={styles.cardRow}>\r\n                <Icon name='pin' height={16} width={16} fill='rgba(255,255,255,0.75)' style={styles.icon} />\r\n                <Text style={styles.text}>{entry.address}</Text>\r\n            </View>        \r\n        )\r\n    } else {\r\n        return <></>\r\n    }\r\n}\r\n\r\nfunction Emotions ({entry}) {\r\n    if (entry.emotions.length>0) {\r\n        return (\r\n            <View style={[styles.cardRow, {flexWrap: 'wrap', justifyContent: 'flex-start'}]}>\r\n                { entry.emotions.map((emotion, index) => {\r\n                    return(\r\n                        <Pressable style={{paddingVertical: 5, paddingHorizontal: 2}}>\r\n                            <Text key={index} style={[styles.emotionBadge]}>{emotion}</Text>\r\n                        </Pressable>\r\n                    )\r\n                })}\r\n            </View>\r\n        )\r\n    } else {\r\n        return (\r\n            <></>\r\n        )\r\n    }\r\n}\r\n\r\nfunction Jornal ({entry}) {\r\n    if (entry.jornal) {\r\n        return(\r\n            <View style={styles.cardRow}>    \r\n                <Text style={styles.textBadge}>{entry.jornal}</Text>\r\n            </View>\r\n        )\r\n    } else {\r\n        return <></>\r\n    }\r\n}\r\n\r\nfunction EntryCard({ entry }) {\r\n    return (\r\n        <View key={entry._id} style={styles.card}>\r\n            <MoodHeader entry={entry} />\r\n            <Emotions entry={entry} />\r\n            <Address entry={entry} />\r\n            <Jornal entry={entry} />\r\n        </View>\r\n    );\r\n}\r\n\r\nexport default class UserEntryCards extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            date: this.props.date,\r\n            userEntries: [],\r\n            entriesSyncing: false,\r\n            newPost: this.props.newPost,\r\n        };\r\n        this.syncUserEntries = this.syncUserEntries.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log('\"Subcomponent UserEntryCards did mount...\"')\r\n        this.syncUserEntries()\r\n        setInterval( () => { console.log('Default auto syncing started...'); this.syncUserEntries() }, 1000 * 10 )\r\n        setInterval( () => { this.updateIfNewPost() }, 1000 * 1 )\r\n        \r\n    }\r\n\r\n    updateIfNewPost () {\r\n        if (this.props.newPost) {\r\n            console.log('JUST POSTED STATUS: True. Selecting current date ...');\r\n            this.props.forgetNewPost();\r\n            this.syncUserEntries();\r\n        }\r\n    }\r\n\r\n    UserEntryCardsList() {\r\n        return this.state.userEntries.filter( (entry) => entry.date === this.props.date ).map(entry => <EntryCard entry={entry} />)\r\n    }\r\n    \r\n    async syncUserEntries() {\r\n\r\n        console.log('SYNC ENTRIES STATUS: Started...')\r\n        this.setState({ entriesSyncing: true });\r\n    \r\n        try {\r\n\r\n            var UsersResult = await fetch( corsURI + appServerURI + 'Users', { method: 'GET' });\r\n            const usersStatus =  'Status: ' + UsersResult.status + ', ' + UsersResult.statusText\r\n\r\n            if (UsersResult.ok) {\r\n                const users = await UsersResult.json();\r\n                const user = users.filter((user) => user.username === this.props.userInfo.username)[0]\r\n                console.log('fetch GET request for user entries successful.')\r\n                console.log(usersStatus)\r\n                this.setState({userEntries: user['entries'].reverse(), entriesSynced: true})  \r\n                console.log('SYNC ENTRIES STATUS: Successful.')\r\n\r\n            } else {\r\n                console.log( new Error('\"fetch\" GET request for user entries failed. Throwing error...') )\r\n                throw new Error(usersStatus)\r\n            }\r\n    \r\n        } catch (error) {\r\n                console.log('SYNC ENTRIES STATUS: Error captured. Printing error...')\r\n                console.log(error);\r\n\r\n        } finally {\r\n            this.setState({ entriesSyncing: false });\r\n            console.log('SYNC ENTRIES STATUS: Finished.')\r\n        }    \r\n    }\r\n\r\n    render() {\r\n        console.log('\"Rendering UserEntryCards subcomponent...\"')\r\n        return this.UserEntryCardsList()\r\n    }\r\n}","const dateRange = [\r\n    \"2021-01-01\",\r\n    \"2021-01-02\",\r\n    \"2021-01-03\",\r\n    \"2021-01-04\",\r\n    \"2021-01-05\",\r\n    \"2021-01-06\",\r\n    \"2021-01-07\",\r\n    \"2021-01-08\",\r\n    \"2021-01-09\",\r\n    \"2021-01-10\",\r\n    \"2021-01-11\",\r\n    \"2021-01-12\",\r\n    \"2021-01-13\",\r\n    \"2021-01-14\",\r\n    \"2021-01-15\",\r\n    \"2021-01-16\",\r\n    \"2021-01-17\",\r\n    \"2021-01-18\",\r\n    \"2021-01-19\",\r\n    \"2021-01-20\",\r\n    \"2021-01-21\",\r\n    \"2021-01-22\",\r\n    \"2021-01-23\",\r\n    \"2021-01-24\",\r\n    \"2021-01-25\",\r\n    \"2021-01-26\",\r\n    \"2021-01-27\",\r\n    \"2021-01-28\",\r\n    \"2021-01-29\",\r\n    \"2021-01-30\",\r\n    \"2021-01-31\",\r\n    \"2021-02-01\",\r\n    \"2021-02-02\",\r\n    \"2021-02-03\",\r\n    \"2021-02-04\",\r\n    \"2021-02-05\",\r\n    \"2021-02-06\",\r\n    \"2021-02-07\",\r\n    \"2021-02-08\",\r\n    \"2021-02-09\",\r\n    \"2021-02-10\",\r\n    \"2021-02-11\",\r\n    \"2021-02-12\",\r\n    \"2021-02-13\",\r\n    \"2021-02-14\",\r\n    \"2021-02-15\",\r\n    \"2021-02-16\",\r\n    \"2021-02-17\",\r\n    \"2021-02-18\",\r\n    \"2021-02-19\",\r\n    \"2021-02-20\",\r\n    \"2021-02-21\",\r\n    \"2021-02-22\",\r\n    \"2021-02-23\",\r\n    \"2021-02-24\",\r\n    \"2021-02-25\",\r\n    \"2021-02-26\",\r\n    \"2021-02-27\",\r\n    \"2021-02-28\",\r\n    \"2021-03-01\",\r\n    \"2021-03-02\",\r\n    \"2021-03-03\",\r\n    \"2021-03-04\",\r\n    \"2021-03-05\",\r\n    \"2021-03-06\",\r\n    \"2021-03-07\",\r\n    \"2021-03-08\",\r\n    \"2021-03-09\",\r\n    \"2021-03-10\",\r\n    \"2021-03-11\",\r\n    \"2021-03-12\",\r\n    \"2021-03-13\",\r\n    \"2021-03-14\",\r\n    \"2021-03-15\",\r\n    \"2021-03-16\",\r\n    \"2021-03-17\",\r\n    \"2021-03-18\",\r\n    \"2021-03-19\",\r\n    \"2021-03-20\",\r\n    \"2021-03-21\",\r\n    \"2021-03-22\",\r\n    \"2021-03-23\",\r\n    \"2021-03-24\",\r\n    \"2021-03-25\",\r\n    \"2021-03-26\",\r\n    \"2021-03-27\",\r\n    \"2021-03-28\",\r\n    \"2021-03-29\",\r\n    \"2021-03-30\",\r\n    \"2021-03-31\",\r\n    \"2021-04-01\",\r\n    \"2021-04-02\",\r\n    \"2021-04-03\",\r\n    \"2021-04-04\",\r\n    \"2021-04-05\",\r\n    \"2021-04-06\",\r\n    \"2021-04-07\",\r\n    \"2021-04-08\",\r\n    \"2021-04-09\",\r\n    \"2021-04-10\",\r\n    \"2021-04-11\",\r\n    \"2021-04-12\",\r\n    \"2021-04-13\",\r\n    \"2021-04-14\",\r\n    \"2021-04-15\",\r\n    \"2021-04-16\",\r\n    \"2021-04-17\",\r\n    \"2021-04-18\",\r\n    \"2021-04-19\",\r\n    \"2021-04-20\",\r\n    \"2021-04-21\",\r\n    \"2021-04-22\",\r\n    \"2021-04-23\",\r\n    \"2021-04-24\",\r\n    \"2021-04-25\",\r\n    \"2021-04-26\",\r\n    \"2021-04-27\",\r\n    \"2021-04-28\",\r\n    \"2021-04-29\",\r\n    \"2021-04-30\",\r\n    \"2021-05-01\",\r\n    \"2021-05-02\",\r\n    \"2021-05-03\",\r\n    \"2021-05-04\",\r\n    \"2021-05-05\",\r\n    \"2021-05-06\",\r\n    \"2021-05-07\",\r\n    \"2021-05-08\",\r\n    \"2021-05-09\",\r\n    \"2021-05-10\",\r\n    \"2021-05-11\",\r\n    \"2021-05-12\",\r\n    \"2021-05-13\",\r\n    \"2021-05-14\",\r\n    \"2021-05-15\",\r\n    \"2021-05-16\",\r\n    \"2021-05-17\",\r\n    \"2021-05-18\",\r\n    \"2021-05-19\",\r\n    \"2021-05-20\",\r\n    \"2021-05-21\",\r\n    \"2021-05-22\",\r\n    \"2021-05-23\",\r\n    \"2021-05-24\",\r\n    \"2021-05-25\",\r\n    \"2021-05-26\",\r\n    \"2021-05-27\",\r\n    \"2021-05-28\",\r\n    \"2021-05-29\",\r\n    \"2021-05-30\",\r\n    \"2021-05-31\",\r\n    \"2021-06-01\",\r\n    \"2021-06-02\",\r\n    \"2021-06-03\",\r\n    \"2021-06-04\",\r\n    \"2021-06-05\",\r\n    \"2021-06-06\",\r\n    \"2021-06-07\",\r\n    \"2021-06-08\",\r\n    \"2021-06-09\",\r\n    \"2021-06-10\",\r\n    \"2021-06-11\",\r\n    \"2021-06-12\",\r\n    \"2021-06-13\",\r\n    \"2021-06-14\",\r\n    \"2021-06-15\",\r\n    \"2021-06-16\",\r\n    \"2021-06-17\",\r\n    \"2021-06-18\",\r\n    \"2021-06-19\",\r\n    \"2021-06-20\",\r\n    \"2021-06-21\",\r\n    \"2021-06-22\",\r\n    \"2021-06-23\",\r\n    \"2021-06-24\",\r\n    \"2021-06-25\",\r\n    \"2021-06-26\",\r\n    \"2021-06-27\",\r\n    \"2021-06-28\",\r\n    \"2021-06-29\",\r\n    \"2021-06-30\",\r\n    \"2021-07-01\",\r\n    \"2021-07-02\",\r\n    \"2021-07-03\",\r\n    \"2021-07-04\",\r\n    \"2021-07-05\",\r\n    \"2021-07-06\",\r\n    \"2021-07-07\",\r\n    \"2021-07-08\",\r\n    \"2021-07-09\",\r\n    \"2021-07-10\",\r\n    \"2021-07-11\",\r\n    \"2021-07-12\",\r\n    \"2021-07-13\",\r\n    \"2021-07-14\",\r\n    \"2021-07-15\",\r\n    \"2021-07-16\",\r\n    \"2021-07-17\",\r\n    \"2021-07-18\",\r\n    \"2021-07-19\",\r\n    \"2021-07-20\",\r\n    \"2021-07-21\",\r\n    \"2021-07-22\",\r\n    \"2021-07-23\",\r\n    \"2021-07-24\",\r\n    \"2021-07-25\",\r\n    \"2021-07-26\",\r\n    \"2021-07-27\",\r\n    \"2021-07-28\",\r\n    \"2021-07-29\",\r\n    \"2021-07-30\",\r\n    \"2021-07-31\",\r\n    \"2021-08-01\",\r\n    \"2021-08-02\",\r\n    \"2021-08-03\",\r\n    \"2021-08-04\",\r\n    \"2021-08-05\",\r\n    \"2021-08-06\",\r\n    \"2021-08-07\",\r\n    \"2021-08-08\",\r\n    \"2021-08-09\",\r\n    \"2021-08-10\",\r\n    \"2021-08-11\",\r\n    \"2021-08-12\",\r\n    \"2021-08-13\",\r\n    \"2021-08-14\",\r\n    \"2021-08-15\",\r\n    \"2021-08-16\",\r\n    \"2021-08-17\",\r\n    \"2021-08-18\",\r\n    \"2021-08-19\",\r\n    \"2021-08-20\",\r\n    \"2021-08-21\",\r\n    \"2021-08-22\",\r\n    \"2021-08-23\",\r\n    \"2021-08-24\",\r\n    \"2021-08-25\",\r\n    \"2021-08-26\",\r\n    \"2021-08-27\",\r\n    \"2021-08-28\",\r\n    \"2021-08-29\",\r\n    \"2021-08-30\",\r\n    \"2021-08-31\",\r\n    \"2021-09-01\",\r\n    \"2021-09-02\",\r\n    \"2021-09-03\",\r\n    \"2021-09-04\",\r\n    \"2021-09-05\",\r\n    \"2021-09-06\",\r\n    \"2021-09-07\",\r\n    \"2021-09-08\",\r\n    \"2021-09-09\",\r\n    \"2021-09-10\",\r\n    \"2021-09-11\",\r\n    \"2021-09-12\",\r\n    \"2021-09-13\",\r\n    \"2021-09-14\",\r\n    \"2021-09-15\",\r\n    \"2021-09-16\",\r\n    \"2021-09-17\",\r\n    \"2021-09-18\",\r\n    \"2021-09-19\",\r\n    \"2021-09-20\",\r\n    \"2021-09-21\",\r\n    \"2021-09-22\",\r\n    \"2021-09-23\",\r\n    \"2021-09-24\",\r\n    \"2021-09-25\",\r\n    \"2021-09-26\",\r\n    \"2021-09-27\",\r\n    \"2021-09-28\",\r\n    \"2021-09-29\",\r\n    \"2021-09-30\",\r\n    \"2021-10-01\",\r\n    \"2021-10-02\",\r\n    \"2021-10-03\",\r\n    \"2021-10-04\",\r\n    \"2021-10-05\",\r\n    \"2021-10-06\",\r\n    \"2021-10-07\",\r\n    \"2021-10-08\",\r\n    \"2021-10-09\",\r\n    \"2021-10-10\",\r\n    \"2021-10-11\",\r\n    \"2021-10-12\",\r\n    \"2021-10-13\",\r\n    \"2021-10-14\",\r\n    \"2021-10-15\",\r\n    \"2021-10-16\",\r\n    \"2021-10-17\",\r\n    \"2021-10-18\",\r\n    \"2021-10-19\",\r\n    \"2021-10-20\",\r\n    \"2021-10-21\",\r\n    \"2021-10-22\",\r\n    \"2021-10-23\",\r\n    \"2021-10-24\",\r\n    \"2021-10-25\",\r\n    \"2021-10-26\",\r\n    \"2021-10-27\",\r\n    \"2021-10-28\",\r\n    \"2021-10-29\",\r\n    \"2021-10-30\",\r\n    \"2021-10-31\",\r\n    \"2021-11-01\",\r\n    \"2021-11-02\",\r\n    \"2021-11-03\",\r\n    \"2021-11-04\",\r\n    \"2021-11-05\",\r\n    \"2021-11-06\",\r\n    \"2021-11-07\",\r\n    \"2021-11-08\",\r\n    \"2021-11-09\",\r\n    \"2021-11-10\",\r\n    \"2021-11-11\",\r\n    \"2021-11-12\",\r\n    \"2021-11-13\",\r\n    \"2021-11-14\",\r\n    \"2021-11-15\",\r\n    \"2021-11-16\",\r\n    \"2021-11-17\",\r\n    \"2021-11-18\",\r\n    \"2021-11-19\",\r\n    \"2021-11-20\",\r\n    \"2021-11-21\",\r\n    \"2021-11-22\",\r\n    \"2021-11-23\",\r\n    \"2021-11-24\",\r\n    \"2021-11-25\",\r\n    \"2021-11-26\",\r\n    \"2021-11-27\",\r\n    \"2021-11-28\",\r\n    \"2021-11-29\",\r\n    \"2021-11-30\",\r\n    \"2021-12-01\",\r\n    \"2021-12-02\",\r\n    \"2021-12-03\",\r\n    \"2021-12-04\",\r\n    \"2021-12-05\",\r\n    \"2021-12-06\",\r\n    \"2021-12-07\",\r\n    \"2021-12-08\",\r\n    \"2021-12-09\",\r\n    \"2021-12-10\",\r\n    \"2021-12-11\",\r\n    \"2021-12-12\",\r\n    \"2021-12-13\",\r\n    \"2021-12-14\",\r\n    \"2021-12-15\",\r\n    \"2021-12-16\",\r\n    \"2021-12-17\",\r\n    \"2021-12-18\",\r\n    \"2021-12-19\",\r\n    \"2021-12-20\",\r\n    \"2021-12-21\",\r\n    \"2021-12-22\",\r\n    \"2021-12-23\",\r\n    \"2021-12-24\",\r\n    \"2021-12-25\",\r\n    \"2021-12-26\",\r\n    \"2021-12-27\",\r\n    \"2021-12-28\",\r\n    \"2021-12-29\",\r\n    \"2021-12-30\",\r\n    \"2021-12-31\",\r\n    \"2022-01-01\",\r\n    \"2022-01-02\",\r\n    \"2022-01-03\",\r\n    \"2022-01-04\",\r\n    \"2022-01-05\",\r\n    \"2022-01-06\",\r\n    \"2022-01-07\",\r\n    \"2022-01-08\",\r\n    \"2022-01-09\",\r\n    \"2022-01-10\",\r\n    \"2022-01-11\",\r\n    \"2022-01-12\",\r\n    \"2022-01-13\",\r\n    \"2022-01-14\",\r\n    \"2022-01-15\",\r\n    \"2022-01-16\",\r\n    \"2022-01-17\",\r\n    \"2022-01-18\",\r\n    \"2022-01-19\",\r\n    \"2022-01-20\",\r\n    \"2022-01-21\",\r\n    \"2022-01-22\",\r\n    \"2022-01-23\",\r\n    \"2022-01-24\",\r\n    \"2022-01-25\",\r\n    \"2022-01-26\",\r\n    \"2022-01-27\",\r\n    \"2022-01-28\",\r\n    \"2022-01-29\",\r\n    \"2022-01-30\",\r\n    \"2022-01-31\",\r\n    \"2022-02-01\",\r\n    \"2022-02-02\",\r\n    \"2022-02-03\",\r\n    \"2022-02-04\",\r\n    \"2022-02-05\",\r\n    \"2022-02-06\",\r\n    \"2022-02-07\",\r\n    \"2022-02-08\",\r\n    \"2022-02-09\",\r\n    \"2022-02-10\",\r\n    \"2022-02-11\",\r\n    \"2022-02-12\",\r\n    \"2022-02-13\",\r\n    \"2022-02-14\",\r\n    \"2022-02-15\",\r\n    \"2022-02-16\",\r\n    \"2022-02-17\",\r\n    \"2022-02-18\",\r\n    \"2022-02-19\",\r\n    \"2022-02-20\",\r\n    \"2022-02-21\",\r\n    \"2022-02-22\",\r\n    \"2022-02-23\",\r\n    \"2022-02-24\",\r\n    \"2022-02-25\",\r\n    \"2022-02-26\",\r\n    \"2022-02-27\",\r\n    \"2022-02-28\",\r\n    \"2022-03-01\",\r\n    \"2022-03-02\",\r\n    \"2022-03-03\",\r\n    \"2022-03-04\",\r\n    \"2022-03-05\",\r\n    \"2022-03-06\",\r\n    \"2022-03-07\",\r\n    \"2022-03-08\",\r\n    \"2022-03-09\",\r\n    \"2022-03-10\",\r\n    \"2022-03-11\",\r\n    \"2022-03-12\",\r\n    \"2022-03-13\",\r\n    \"2022-03-14\",\r\n    \"2022-03-15\",\r\n    \"2022-03-16\",\r\n    \"2022-03-17\",\r\n    \"2022-03-18\",\r\n    \"2022-03-19\",\r\n    \"2022-03-20\",\r\n    \"2022-03-21\",\r\n    \"2022-03-22\",\r\n    \"2022-03-23\",\r\n    \"2022-03-24\",\r\n    \"2022-03-25\",\r\n    \"2022-03-26\",\r\n    \"2022-03-27\",\r\n    \"2022-03-28\",\r\n    \"2022-03-29\",\r\n    \"2022-03-30\",\r\n    \"2022-03-31\",\r\n    \"2022-04-01\",\r\n    \"2022-04-02\",\r\n    \"2022-04-03\",\r\n    \"2022-04-04\",\r\n    \"2022-04-05\",\r\n    \"2022-04-06\",\r\n    \"2022-04-07\",\r\n    \"2022-04-08\",\r\n    \"2022-04-09\",\r\n    \"2022-04-10\",\r\n    \"2022-04-11\",\r\n    \"2022-04-12\",\r\n    \"2022-04-13\",\r\n    \"2022-04-14\",\r\n    \"2022-04-15\",\r\n    \"2022-04-16\",\r\n    \"2022-04-17\",\r\n    \"2022-04-18\",\r\n    \"2022-04-19\",\r\n    \"2022-04-20\",\r\n    \"2022-04-21\",\r\n    \"2022-04-22\",\r\n    \"2022-04-23\",\r\n    \"2022-04-24\",\r\n    \"2022-04-25\",\r\n    \"2022-04-26\",\r\n    \"2022-04-27\",\r\n    \"2022-04-28\",\r\n    \"2022-04-29\",\r\n    \"2022-04-30\",\r\n    \"2022-05-01\",\r\n    \"2022-05-02\",\r\n    \"2022-05-03\",\r\n    \"2022-05-04\",\r\n    \"2022-05-05\",\r\n    \"2022-05-06\",\r\n    \"2022-05-07\",\r\n    \"2022-05-08\",\r\n    \"2022-05-09\",\r\n    \"2022-05-10\",\r\n    \"2022-05-11\",\r\n    \"2022-05-12\",\r\n    \"2022-05-13\",\r\n    \"2022-05-14\",\r\n    \"2022-05-15\",\r\n    \"2022-05-16\",\r\n    \"2022-05-17\",\r\n    \"2022-05-18\",\r\n    \"2022-05-19\",\r\n    \"2022-05-20\",\r\n    \"2022-05-21\",\r\n    \"2022-05-22\",\r\n    \"2022-05-23\",\r\n    \"2022-05-24\",\r\n    \"2022-05-25\",\r\n    \"2022-05-26\",\r\n    \"2022-05-27\",\r\n    \"2022-05-28\",\r\n    \"2022-05-29\",\r\n    \"2022-05-30\",\r\n    \"2022-05-31\",\r\n    \"2022-06-01\",\r\n    \"2022-06-02\",\r\n    \"2022-06-03\",\r\n    \"2022-06-04\",\r\n    \"2022-06-05\",\r\n    \"2022-06-06\",\r\n    \"2022-06-07\",\r\n    \"2022-06-08\",\r\n    \"2022-06-09\",\r\n    \"2022-06-10\",\r\n    \"2022-06-11\",\r\n    \"2022-06-12\",\r\n    \"2022-06-13\",\r\n    \"2022-06-14\",\r\n    \"2022-06-15\",\r\n    \"2022-06-16\",\r\n    \"2022-06-17\",\r\n    \"2022-06-18\",\r\n    \"2022-06-19\",\r\n    \"2022-06-20\",\r\n    \"2022-06-21\",\r\n    \"2022-06-22\",\r\n    \"2022-06-23\",\r\n    \"2022-06-24\",\r\n    \"2022-06-25\",\r\n    \"2022-06-26\",\r\n    \"2022-06-27\",\r\n    \"2022-06-28\",\r\n    \"2022-06-29\",\r\n    \"2022-06-30\"\r\n]\r\nexport default dateRange;","// Module imports\r\nimport React, { Component } from 'react';\r\nimport { View, Text, ImageBackground, Pressable, ScrollView } from 'react-native';\r\nimport { Icon } from 'react-native-eva-icons'\r\n\r\n// Component imports\r\nimport UserEntryCards from './subcomponents/userEntryCards';\r\n\r\n// Local imports\r\nimport dateRange from '../shared/dateRange';\r\nimport styles from '../styles/entrancesStyles';\r\n\r\n// cors-midpoint uri (needed to avoid cors' allow-cross-origin error when fetching)\r\nconst corsURI = 'https://morning-journey-78874.herokuapp.com/';\r\nconst appServerURI = 'https://mood-tracker-server.herokuapp.com/'\r\n// Defining pertinent constants\r\nconst monthDict = {'Jan': '01', 'Feb': '02', 'Mar': '03', 'Apr': '04', 'May': '05', 'Jun': '06', 'Jul': '07', 'Ago': '08', 'Sep': '09', 'Oct': '10', 'Nov': '11', 'Dec': '12'}\r\nconst monthSigs = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dec']\r\n\r\n// Defining pertinent functions\r\nfunction Today() {\r\n    const now = Date().toString().split(' ')\r\n    const today = [ now[3], monthDict[now[1]], now[2] ].join('-')\r\n    return today\r\n}\r\nfunction getNextDate(date, next='next') {\r\n    const nextDate = dateRange[dateRange.indexOf(date) + (next=='previous' ? -1 : 1)]\r\n    return nextDate\r\n}\r\nfunction getTime() {\r\n    //Wed,Jan,26,2022,15:12:37,GMT-0300,(Horário,Padrão,de,Brasília)\r\n    const now = Date().toString().split(' ')\r\n    const time = now[4]\r\n    // const time = new Date().toLocaleTimeString()\r\n    return time\r\n}\r\nfunction formatDate(date) {\r\n\r\n    var ymd = date.split('-')\r\n    for (var i=0; i<12; i++) {\r\n        if (monthDict[ monthSigs[i] ] == ymd[1]) {\r\n            return ymd[2] + ', ' + monthSigs[i]\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default class EntrancesScreen extends Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            userEntries: [],\r\n            date: Today(),\r\n            time: getTime(),\r\n            selectedDate: Today(),\r\n            entriesLoading: false,\r\n            entriesSynced: false,\r\n        };\r\n        this.onNextButtonPress = this.onNextButtonPress.bind(this);\r\n        this.forgetNewPost = this.forgetNewPost.bind(this);\r\n    }\r\n    \r\n    componentDidMount() {\r\n        console.log('\"Entries\" screen component did mount...')\r\n    }\r\n\r\n    onNextButtonPress(next='next') { \r\n        function setSelectedDate() {\r\n            this.setState( {selectedDate: getNextDate(this.state.selectedDate, next)} ) \r\n        }\r\n        return setSelectedDate.bind(this);\r\n    }\r\n\r\n    selectedDateTitle() {\r\n        const selDate = this.state.selectedDate\r\n        const yesterday = getNextDate(Today(), 'previous')\r\n        const dayBeforeYesterday = getNextDate(yesterday, 'previous')\r\n        return ( selDate === Today() ? 'Hoje  ' : ( selDate === yesterday ? 'Ontem  ' : '' ) )\r\n    }\r\n\r\n    forgetNewPost() {\r\n        function forgetNewPost() {\r\n            this.props.navigation.setParams({newPost: false});\r\n            this.setState({\r\n                selectedDate: Today(),\r\n            });\r\n        }\r\n        return forgetNewPost.bind(this);\r\n    }\r\n\r\n    render() {\r\n\r\n        console.log('Rendering \"Entries\" screen...')\r\n        const isToday = this.state.selectedDate === this.state.date\r\n\r\n        return(\r\n            <ImageBackground source={require('../assets/wallpaper.jpg')} style={[styles.mainView]}>\r\n                \r\n                <ScrollView style={styles.scrollView}>\r\n                        <View style={styles.section}>\r\n                            \r\n                            <View style={[styles.cardRow, {justifyContent: 'space-between'}]}>\r\n                                <Pressable onPress={ this.onNextButtonPress('previous') }>\r\n                                    <Icon name='arrow-back' width={35} height={35} fill='white' />\r\n                                </Pressable>\r\n                                <Text style={styles.sectionTitle}> { 'Suas entradas  •  ' + this.selectedDateTitle() + formatDate(this.state.selectedDate) } </Text>                                \r\n                                { !isToday ? (\r\n                                    <Pressable onPress={ this.onNextButtonPress() }>\r\n                                        <Icon name='arrow-forward' width={35} height={35} fill='white' />\r\n                                    </Pressable>   \r\n                                ) : (\r\n                                    <View></View>\r\n                                )}\r\n                            </View>\r\n\r\n                            <UserEntryCards \r\n                            userInfo={this.props.route.params.userInfo}\r\n                            newPost={this.props.route.params.newPost}\r\n                            forgetNewPost={this.forgetNewPost()}\r\n                            date={this.state.selectedDate}\r\n                            />\r\n\r\n                        </View>\r\n                </ScrollView>\r\n\r\n                <Pressable onPress={() => { this.props.navigation.navigate( 'PostEntrance', {} )} }  style={[styles.postButton]}>\r\n                        <Icon name='plus-circle' width={72} height={72} fill='white' style={styles.postButtonLabel}/>\r\n                </Pressable>\r\n  \r\n            </ImageBackground>\r\n            )\r\n\r\n    }\r\n  }\r\n","import { StatusBar } from 'expo-status-bar';\r\n// import { Platform } from 'react-native';\r\n\r\nconst styles = {\r\n  \r\n  entrances: {\r\n    marginTop: StatusBar.currentHeight,\r\n    borderWidth: 0,\r\n    flex:1,\r\n    justifyContent: 'space-between',\r\n    alignItems: 'flex-start',\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    paddingBottom: '0%',\r\n    paddingHorizontal: '5%',\r\n    alignSelf: 'stretch',\r\n    borderColor: 'black',\r\n  },\r\n  section: {\r\n    paddingVertical: '10%',\r\n    paddingHorizontal: '10%',\r\n    justifyContent: 'flex-start',\r\n    borderTopWidth: 1,\r\n    borderBottomWidth: 1,\r\n  },\r\n  contentRow: {\r\n    flexDirection: 'column',\r\n    padding: 10,\r\n    marginTop: 22,\r\n    borderWidth: 1,\r\n    borderColor: 'rgba(155,155,155, 0.4)',\r\n    borderRadius: 30,\r\n    backgroundColor: 'rgba(255,255,255, 0.3)',\r\n\r\n  },\r\n  entryTitle: {\r\n    // height: 25,\r\n    paddingVertical: 3,\r\n    paddingLeft: 4,\r\n    fontSize: 19,\r\n    color: 'white',\r\n    // borderWidth: 1,s\r\n  },\r\n  postButtonView: {\r\n    height: 60,\r\n    width: 60,\r\n    borderRadius: 30,\r\n    alignSelf: 'center',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    backgroundColor: 'white',\r\n  },\r\n  postButton: {\r\n  },\r\n  postButtonLabel: {\r\n    fontSize: 45,\r\n    fontWeight: 'bold',\r\n  },\r\n  moodButtonView: {\r\n    width: 65,\r\n    height: 65,\r\n    alignItems: 'center',\r\n    justifyContent: 'center'\r\n  },\r\n  moodButton: {\r\n      height: 53,\r\n      width: 53,\r\n      borderRadius: 30,\r\n      justifyContent: 'center',\r\n      marginColor: 'black',\r\n      marginWidth: 2,\r\n  },\r\n  moodButtonBorder: {\r\n\r\n  },\r\n  date: {\r\n    position: 'relative',\r\n    left: '60%',\r\n    paddingVertical: 8,\r\n    paddingHorizontal: 10,\r\n    fontSize: 15,\r\n    alignSelf: 'center',\r\n    backgroundColor: 'white',\r\n    borderRadius: 20\r\n  },\r\n  jornalText: {\r\n    paddingVertical: 5,\r\n    paddingHorizontal: 10,\r\n    minHeight:170,\r\n    width: '100%',\r\n    borderRadius: 20,\r\n    color: 'white',\r\n    fontSize: 16,\r\n  },\r\n  saveButton: {\r\n    height: 50,\r\n    width: '100%',\r\n    borderTopLeftRadius: 30,\r\n    borderTopRightRadius: 30,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    backgroundColor: 'white'\r\n  },\r\n  card: {\r\n    marginTop: '5%',\r\n    paddingVertical: 5,\r\n    paddingHorizontal: 10,\r\n    borderRadius: 20,\r\n    backgroundColor: 'rgba(255,255,255,0.3)',\r\n},\r\ncardRow: {\r\n    flexDirection: 'row',\r\n    paddingVertical: 5,\r\n    alignItems: 'center',\r\n},\r\nmoodBadge: {\r\n    backgroundColor: 'green',\r\n    borderRadius: 30,\r\n    paddingVertical: 6,\r\n    width: 130,\r\n    fontSize: 16,\r\n    textAlign: 'center',\r\n},\r\nemotionBadge: {\r\n    backgroundColor: 'rgba(1,1,1,0.5)',\r\n    borderRadius: 30,\r\n    paddingVertical: 7,\r\n    paddingHorizontal: 12.5,\r\n    marginRight: 6,\r\n    fontSize: 15,\r\n    textAlign: 'center',\r\n},\r\n\r\n}\r\n\r\nexport default styles;","import React, {useState, Component} from 'react';\r\nimport { View, Text, ImageBackground, Pressable, ScrollView } from 'react-native';\r\nimport { TextInput} from 'react-native-gesture-handler';\r\nimport { Icon } from 'react-native-eva-icons'\r\n\r\nimport styles from '../styles/postEntryStyles'\r\nimport styles2 from '../styles/entrancesStyles'\r\n\r\n// cors-midpoint uri (needed to avoid cors' allow-cross-origin error when fetching)\r\nconst corsURI = 'https://morning-journey-78874.herokuapp.com/'\r\nconst appServerURI = 'https://mood-tracker-server.herokuapp.com/'\r\n\r\nstyles.emotionBadge = {\r\n    backgroundColor: 'rgba(1,1,1,0.5)',\r\n    borderRadius: 30,\r\n    paddingVertical: 7,\r\n    paddingHorizontal: 12.5,\r\n    marginRight: 6,\r\n    // width: '100%', //must be removed, badge should have text width\r\n    fontSize: 15,\r\n    textAlign: 'center',\r\n}\r\n\r\nstyles.text = {fontSize: 14}\r\n\r\n\r\n// Date() => wed jan 91 2022 07:46:57 ...\r\nconst now = new Date().toString().split(' ')\r\nconst datetime = now[2] + ' ' + now[1] + ' ' + now[3] + ' - ' + now[4].slice(0, 5)\r\n\r\nconst goodEnergizedEmotions = ['Animação', 'Concentração', 'Desinibição', 'Motivação', 'Euforia']\r\nconst goodCalmEmotions = ['Alívio', 'Calma', 'Conforto', 'Despreocupação', 'Inspiração', 'Orgulho', 'Paz', 'Relaxamento', 'Satisfação', 'Segurança']\r\nconst badEnergizedEmotions = ['Agitação', 'Ansiosiedade', 'Tristeza', 'Decepção', 'Depressão', 'Desespero', 'Frustração', 'Insatisfação', 'Irritação', 'Medo', 'Paranoia', 'Preocupação', 'Impaciencia', 'Raiva', 'Revolta', 'Sobrecarregado(a)', 'Tensão', 'Nojo']\r\nconst badCalmEmotions = ['Timidez', 'Cansaço', 'Confusão', 'Desanimo', 'Vergonha', 'Insegurança', 'Apátia', 'Solidão', 'Tédio']\r\nconst basicEmotions = [ ...goodEnergizedEmotions, ...goodCalmEmotions, ...badEnergizedEmotions, ...badCalmEmotions]\r\nconst emotionGroups = [goodEnergizedEmotions, goodCalmEmotions, badEnergizedEmotions, badCalmEmotions]\r\nconst emotionGroupsNames = ['Bem & Energizado', 'Bem & Calmo', 'Mal e Energizado', 'Mal & Calmo']\r\nvar isSelectedEmotions = {}\r\nfor (var i=0; i<basicEmotions.length; i++){\r\nisSelectedEmotions[basicEmotions[i]] = false\r\n}\r\n// Array(basicEmotions.length).fill(false)\r\n\r\n\r\nfunction convertMonthSig(monthSig) {\r\n    const monthSigs = ['Jan', 'Feb', 'Mar', 'Apr', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dec']\r\n    const months = ['01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12']\r\n    const thisMonth = months[monthSigs.indexOf(monthSig)]\r\n    return thisMonth\r\n}\r\n\r\nfunction getTime() {\r\n    //Wed,Jan,26,2022,15:12:37,GMT-0300,(Horário,Padrão,de,Brasília)\r\n    const now = Date().toString().split(' ')\r\n    const time = now[4]\r\n    return time\r\n}\r\n\r\nfunction getToday() {\r\n    const now = Date().toString().split(' ')\r\n    const today = [ now[3], convertMonthSig(now[1]), now[2] ].join('-')\r\n    return today\r\n}\r\n\r\nfunction twoDigit(stringNumber) {\r\n    if (stringNumber.length == 1) {\r\n        return '0' + stringNumber\r\n    }\r\n}\r\n\r\nfunction FormattedTime() {\r\n    // const time = new Date().toString().split(' ')[4]\r\n    var newTime = getTime().slice(0,5)\r\n    var h = parseInt(newTime.slice(0,2))\r\n    var m = parseInt(newTime.slice(3,5))\r\n    var period = ''\r\n    if (h > 12) { h-=12; period = 'PM' } else period = 'AM';\r\n    return twoDigit(h.toString()) + ':' + twoDigit(m.toString()) + ' ' + period\r\n}\r\n\r\nexport default class PostEntranceScreen extends Component {\r\n  \r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            moodButtons: {\r\n            // colors: ['red', 'blue', 'bisque', 'khaki', 'forestgreen'],\r\n            colors: ['#ff3333', '#0099cc', '#ffffff', '#ffff33', '#00b300'],\r\n            colorsSelected: ['darkred', 'darkblue', 'grey', 'goldenrod', 'darkgreen'],\r\n            moods: ['Horrível', 'Mal', 'Regular', 'Bem', 'Ótimo'],  \r\n            },\r\n            emotionButtons: {\r\n                isSelectedEmotions: isSelectedEmotions,\r\n                basicEmotions: basicEmotions,\r\n                emotionGroups: emotionGroups,\r\n            },\r\n            star: false,\r\n            selectedMood: null,\r\n            jornalEntry: '',    \r\n            emotions: [],\r\n            address: '',\r\n\r\n            startTime: getTime(),\r\n            selectedEntry: 'Avaliação',\r\n            isLoading: false,\r\n        };\r\n\r\n        this.onSaveButtonPress = this.onSaveButtonPress.bind(this);\r\n        this.EmotionButtons = this.EmotionButtons.bind(this);\r\n        this.MoodButtons = this.MoodButtons.bind(this);\r\n        this.postEntryHeader = this.postEntryHeader.bind(this);\r\n        this.onEmotionButtonPress = this.onEmotionButtonPress.bind(this);\r\n        this.onMoodButtonPress = this.onMoodButtonPress.bind(this);\r\n        this.inputSection = this.inputSection.bind(this);\r\n        this.setSelectedEntry = this.setSelectedEntry.bind(this);\r\n        this.InputCard = this.InputCard.bind(this);\r\n        this.JornalInput = this.JornalInput.bind(this);\r\n        this.postNewEntryAsync = this.postNewEntryAsync.bind(this);\r\n    }\r\n\r\n    postEntryHeader() {\r\n        return(\r\n            <View style={[styles2.cardRow, {justifyContent: 'space-between'}]}>\r\n                <Pressable onPress={() => {this.props.navigation.goBack()}}  style={styles.postButton}>\r\n                    <Icon name='arrow-back' fill='white' height={30} width={30}/>\r\n                </Pressable>\r\n                <View style={[styles2.emotionBadge, {flexDirection: 'row'}]}>\r\n                    <Text > {datetime} </Text>\r\n                    <Icon name='edit' fill='rgba(75,75,75,1)' height={20} width={20}/>\r\n                </View>\r\n                <Pressable onPress={() => {this.setState({star: !this.state.star})}}  style={styles.postButton}>\r\n                    <Icon name={this.state.star ? 'star' : 'star-outline'} fill='rgba(245,245,245,0.7)' height={30} width={30}/>\r\n                </Pressable>\r\n            </View>\r\n        )\r\n    }\r\n\r\n    onMoodButtonPress(item) {\r\n        // alert(e)\r\n        function selectMood() {\r\n            if (this.state.selectedMood==item) {\r\n                this.setState({selectedMood: null})\r\n            } else {\r\n                this.setState({selectedMood: item})\r\n            }\r\n        }\r\n        selectMood = selectMood.bind(this);\r\n        return selectMood\r\n    }\r\n\r\n    MoodButtons() {\r\n\r\n        return this.state.moodButtons.moods.map((item, index) => {\r\n\r\n            const moodButtonViewStyle = {\r\n                width: 65,\r\n                height: 65,\r\n                alignItems: 'center',\r\n                justifyContent: 'center',\r\n                borderWidth: this.state.selectedMood==item ? 3 : 0,\r\n                borderRadius: 32.5,\r\n                borderColor: this.state.moodButtons.colors[index]\r\n            }        \r\n            const selColor = this.state.moodButtons.colors[index]\r\n\r\n            return(\r\n\r\n                <View key={'mood '+index} style={moodButtonViewStyle} >\r\n                    <Pressable\r\n                    title={item}\r\n                    onPress={this.onMoodButtonPress(item)}\r\n                    style={[\r\n                        styles.moodButton,\r\n                        this.state.selectedMood==item ? {\r\n                            fontWeight: 'bold',\r\n                            backgroundColor: selColor,\r\n                        } : {\r\n                            fontWeight: null,\r\n                            backgroundColor: selColor\r\n                        }\r\n                    ]}\r\n                    >\r\n                        <Text style={{textAlign: 'center', textAlignVertical: 'center'}}>{item}</Text>\r\n                    </Pressable>\r\n                </View>\r\n\r\n            )\r\n        })\r\n    }\r\n\r\n    onEmotionButtonPress(emotion) { \r\n        function selectEmotion () {\r\n            this.setState({\r\n                emotionButtons: {\r\n                    ...this.state.emotionButtons,\r\n                    isSelectedEmotions: {\r\n                        ...this.state.emotionButtons.isSelectedEmotions,\r\n                        [emotion]: !this.state.emotionButtons.isSelectedEmotions[emotion]\r\n                    }\r\n                }\r\n            })\r\n        }\r\n        selectEmotion = selectEmotion.bind(this);\r\n        return selectEmotion\r\n    }\r\n\r\n    EmotionButtons(emotions) {\r\n        return(\r\n            emotions.map( emotion => (\r\n                <Pressable\r\n                title={emotion}\r\n                style={ {paddingVertical: 5} }\r\n                onPress={this.onEmotionButtonPress(emotion)}\r\n                >\r\n                    <Text style={[styles.emotionBadge, {backgroundColor: this.state.emotionButtons.isSelectedEmotions[emotion] ? 'lightblue' : 'white' }]}>{emotion}</Text>\r\n                </Pressable>\r\n            ))\r\n        )\r\n    }\r\n\r\n    JornalInput() {\r\n        return(\r\n        <TextInput multiline \r\n            placeholder='Today was...' \r\n            style={styles.jornalText}\r\n            onChangeText={text => this.setState({jornalEntry: text})}\r\n            value={this.state.jornalEntry}\r\n            >\r\n        </TextInput>\r\n        )\r\n    }\r\n\r\n    setSelectedEntry (entry) {\r\n        function setSelected() {\r\n            this.setState( {selectedEntry:  this.state.selectedEntry === entry ? null : entry  } )\r\n        }\r\n        setSelected = setSelected.bind(this);\r\n        return setSelected\r\n    }\r\n\r\n    inputSection(sectionName, inputStyle, inputs) {\r\n        if (this.state.selectedEntry === sectionName) {\r\n\r\n            if (sectionName == 'Emoções') {\r\n                return this.state.emotionButtons.emotionGroups.map((emotions, index) => (\r\n                    <View style={{width: '100%', alignItems: 'center'}}>\r\n                        <Text style={{fontSize: 15, color: 'white', paddingVertical: 11}}>{emotionGroupsNames[index]}</Text>\r\n                        <View key={index} style={[styles2.cardRow, inputStyle]}>\r\n                            {inputs(emotions)}\r\n                        </View>\r\n                    </View>\r\n                ))\r\n            } else {\r\n                return(\r\n                    <View style={[styles2.cardRow, inputStyle]}>\r\n                        {inputs}\r\n                    </View>\r\n                )    \r\n            }\r\n        } else {\r\n            return(\r\n                <></>\r\n            )\r\n        }\r\n\r\n    }\r\n\r\n    InputCard(sectionName, icon, inputStyle, inputs) {\r\n        return(\r\n            <View style={[styles2.card]}>\r\n                <Pressable style={styles2.cardRow}  onPress={this.setSelectedEntry(sectionName)}>\r\n                    <Icon name={icon} fill='rgba(255,255,255,0.75)' height={25} width={25} style={styles2.entryIcon}/>\r\n                    <Text style={styles.entryTitle}> {sectionName} </Text>\r\n                </Pressable>\r\n\r\n                {this.inputSection(sectionName=sectionName, inputStyle=inputStyle, inputs=inputs)}  \r\n\r\n            </View>\r\n        )\r\n    }\r\n\r\n    onSaveButtonPress () {\r\n        if (!this.state.selectedMood) {\r\n            alert('Necessário adicionar uma avaliação.')\r\n\r\n        } else {\r\n            const newEntry = {\r\n                jornal: this.state.jornalEntry,\r\n                mood: this.state.selectedMood,\r\n                emotions: this.state.emotionButtons.basicEmotions.filter( emotion => this.state.emotionButtons.isSelectedEmotions[emotion] ) ,\r\n                address: this.state.address,\r\n                date: getToday(),\r\n                startTime: this.state.startTime,\r\n                endTime: getTime(),\r\n                star: this.state.star,\r\n            }\r\n            this.postNewEntryAsync(newEntry)\r\n        }\r\n    }\r\n\r\n    async postNewEntryAsync(newEntry) {\r\n        this.setState({ isLoading: true });\r\n        var info = this.props.route.params.userInfo;\r\n\r\n        try {\r\n            const postUserEntryOpts = { \r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify( newEntry ),\r\n            }\r\n            var postUserEntryResult = await fetch( corsURI + appServerURI + 'Users/' + info.username + '/entries', postUserEntryOpts);\r\n            // var postUserEntryResult = await fetch('http://localhost:3000/Users/'+info.username +'/entries', postUserEntryOpts);\r\n\r\n            if (postUserEntryResult.ok) {\r\n                console.log('fetch POST request successful')\r\n                console.log('Status: ' + postUserEntryResult.status + ', ' + postUserEntryResult.statusText)\r\n                this.props.navigation.navigate('Entrances', {newPost: true} )    \r\n\r\n            } else {\r\n                console.log('fetch POST request failed. Throwing error...')\r\n                throw new Error('Status: ' + postUserEntryResult.status + ', ' + postUserEntryResult.statusText)\r\n            }\r\n\r\n        } catch (error) {\r\n            // alert('Erro no servidor, não foi possível adicionar a entrada. Por favor, tente novamente.')\r\n            console.log('Erro capturado:')\r\n            console.log(error);\r\n\r\n        } finally {\r\n        this.setState({ isLoading: false });\r\n        }\r\n\r\n    }\r\n  \r\n    render() {\r\n        console.log('Rendering \"Post Entry\" screen...')\r\n\r\n        return(\r\n            <ImageBackground source={require('../assets/wallpaper.jpg')} style={styles2.mainView}>\r\n                <ScrollView style={styles2.scrollView}>\r\n                    <View style={styles2.section}>\r\n                            {this.postEntryHeader()}\r\n                            {this.InputCard('Avaliação', 'smiling-face', {justifyContent: 'space-between'}, this.MoodButtons())}\r\n                            {this.InputCard('Emoções', 'checkmark-square-outline', {flexWrap: 'wrap', justifyContent: 'space-evenly'}, this.EmotionButtons)}\r\n                            {this.InputCard('Jornal', 'book', {flexDirection: 'column'}, this.JornalInput())}\r\n                    </View>\r\n                </ScrollView>  \r\n\r\n                <Pressable \r\n                onPress={this.onSaveButtonPress} \r\n                style={styles.saveButton}\r\n                >\r\n                    <Text style={{fontWeight:'bold', fontSize: 17}}>Salvar</Text>\r\n                </Pressable>\r\n    \r\n            </ImageBackground>\r\n        )    \r\n    }\r\n}","var styles = {\r\n    login: {\r\n        mainView: {\r\n            flex: 1,\r\n            justifyContent: 'center',\r\n            alignItems: 'center',\r\n            // paddingHorizontal: Platform.OS != 'web' ? '5%' : '5%',\r\n        },\r\n        titleView: {\r\n            flexDirection: 'row',\r\n            justifyContent: 'center',\r\n            alignItems: 'center',\r\n            minHeight: 60,\r\n        },\r\n        title: {\r\n            fontSize: 25,\r\n            fontWeight: 'bold',\r\n            color: 'white',\r\n            alignSelf: 'center',\r\n        },\r\n        titleIcon: {\r\n            paddingLeft: 6,\r\n            paddingTop: 3,\r\n        },\r\n        card: {\r\n            height: '55%',\r\n            minHeight: 390,\r\n            width: 350,\r\n            paddingHorizontal: 10,\r\n            paddingVertical: 10,\r\n            borderWidth: 1,\r\n            borderRadius: 10,\r\n            backgroundColor: 'azure',\r\n        },\r\n        cardHeader: {\r\n            height: '25%',\r\n            width: '100%',\r\n        },\r\n        cardTitle: {\r\n            position: 'relative',\r\n            top: '30%',\r\n            left: '5%',\r\n            fontSize: 24,\r\n            fontWeight: 'bold',\r\n            color: 'black',\r\n        },\r\n        cardSection: {\r\n            height: '25%',\r\n            justifyContent: 'space-evenly',\r\n            alignItems: 'center',\r\n        },\r\n        loadingIcon: {\r\n            alignSelf: 'center'\r\n        },\r\n        inputField: {\r\n            minHeight: 40,\r\n            width: '100%',\r\n            paddingLeft: 10,\r\n            fontSize: 14,\r\n            borderWidth: 1,\r\n            borderRadius: 5,\r\n            backgroundColor: 'white'\r\n        },\r\n        button: {\r\n            height: 40,\r\n            width: '100%',\r\n            textAlign: 'center',\r\n            justifyContent: 'center',\r\n            borderWidth: 1,\r\n            borderRadius: 5,\r\n            borderColor: 'white',\r\n            backgroundColor: 'lightblue',        \r\n        },\r\n        buttonLabel: {\r\n            fontSize: 15,\r\n            fontWeight: 'bold',\r\n            color: 'black',\r\n        },\r\n        text: {\r\n            fontSize: 15,\r\n            textAlign: 'center',\r\n        },\r\n        msgBox: {\r\n            width: 350,\r\n            height: 36,\r\n            justifyContent: 'center',\r\n            backgroundColor: 'rgb(30,30,30)',\r\n            borderWidth: 1,\r\n            borderColor: 'rgb(40,40,40)',\r\n        },\r\n        msg: {\r\n            textAlign: 'center',\r\n            color: 'white',\r\n        },\r\n    }\r\n};\r\nexport default styles;","import { Icon } from 'react-native-eva-icons'\r\n\r\nimport React, { Component } from 'react';\r\nimport { View, Text, ImageBackground, TextInput, Pressable } from 'react-native';\r\nimport styles from '../styles/loginStyles'\r\n\r\nconst corsURI = 'https://morning-journey-78874.herokuapp.com/'\r\nconst appServerURI = 'https://mood-tracker-server.herokuapp.com/'\r\n\r\nclass LoginScreen extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      userInfo: {\r\n        password: '',\r\n        email: '',    \r\n        username: '',\r\n      },\r\n      loginMsg: '',\r\n      isUserAuth: false,\r\n      isDataLoading: false,\r\n    }\r\n    this.onChangeText = this.onChangeText.bind(this);\r\n    this.submitButton = this.submitButton.bind(this);\r\n    this.loginMsg = this.loginMsg.bind(this);\r\n    this.setLoginMsg = this.setLoginMsg.bind(this);\r\n    this.onSignIn = this.onSignIn.bind(this);\r\n    this.onSignUp = this.onSignUp.bind(this);\r\n  }\r\n\r\n  loadingIcon() {\r\n\r\n    if (this.state.isDataLoading) {\r\n      return  <Icon name='loader-outline' animation='pulse' width={25} height={25}></Icon>\r\n    } else {\r\n      return (\r\n        <>\r\n          <Icon name='log-in-outline' animation='pulse' width={25} height={25}></Icon>\r\n        </>\r\n      )\r\n    }\r\n  }\r\n\r\n  setLoginMsg(msg) {\r\n    this.setState({loginMsg: msg})\r\n    setTimeout( () => this.setState({loginMsg: ''}) , 1000 * 5 )\r\n  }\r\n\r\n  loginMsg() {\r\n      return(\r\n        <View style={[styles.login.msgBox, this.state.loginMsg ? {} : {backgroundColor: 'transparent', borderColor: 'transparent'} ]}>\r\n          <Text style={styles.login.msg}>{this.state.loginMsg}</Text>\r\n        </View>\r\n      )\r\n  }\r\n\r\n  onChangeText(textField) {\r\n    function setField(text) {\r\n      this.setState( { userInfo: { ...this.state.userInfo, [textField] : text}} )\r\n    }\r\n    setField = setField.bind(this);\r\n    return setField\r\n  }\r\n\r\n  submitButton(sign) {\r\n    const signIn = sign == 'signin'\r\n    return(\r\n      <Pressable onPress={signIn ? this.onSignIn : this.onSignUp} style={[styles.login.button]}>\r\n        <Text style={styles.login.buttonLabel}>{ signIn ? 'Entrar' : 'Cadastrar' }</Text>\r\n      </Pressable>\r\n    )\r\n  }\r\n\r\n  encryptedPassword() {\r\n    var encPass = ''\r\n    for (var i=0; i<this.state.userInfo.password.length; i++) {\r\n      encPass += '*'\r\n    }\r\n  return encPass\r\n}\r\n\r\n  LoginScreen() {\r\n    return(\r\n      <ImageBackground source={require('../assets/wallpaper.jpg')} style={[styles.login.mainView ,{justifyContent: 'space-evenly'}]}>\r\n        \r\n        <View style={styles.login.titleView}>\r\n          <Text style={styles.login.title}>Mood Tracker</Text>\r\n          <Icon name='clock-outline' width={25} height={25} fill='white' animation='pulse' style={styles.login.titleIcon} ></Icon>\r\n        </View>\r\n\r\n        <View style={styles.login.card}>\r\n          <View style={styles.login.cardHeader} >\r\n            <Text style={styles.login.cardTitle}>Entrar</Text>\r\n          </View>\r\n          <View style={styles.login.cardSection}>\r\n            <TextInput\r\n            placeholder='Email'\r\n            onChangeText={this.onChangeText('email')}\r\n            style={styles.login.inputField}\r\n            autoComplete='email'\r\n            importantForAutofill='yes'\r\n            >\r\n            </TextInput>\r\n            <TextInput\r\n            placeholder='Senha'\r\n            onChangeText={this.onChangeText('password')}\r\n            style={styles.login.inputField}\r\n            // value={this.encryptedPassword()}\r\n            secureTextEntry={true}\r\n            autoComplete='password'\r\n            importantForAutofill='yes'\r\n            ></TextInput>\r\n          </View>\r\n          <View style={styles.login.cardSection}>\r\n            {this.submitButton('signin')}\r\n            {this.submitButton('signup')}\r\n          </View>\r\n          <View style={[styles.login.cardSection]}>\r\n            {this.loadingIcon()}\r\n          </View>\r\n        </View>\r\n\r\n          {this.loginMsg()}\r\n\r\n      </ImageBackground>\r\n    )\r\n  }\r\n\r\n  async onSignIn() {\r\n\r\n    console.log('SIGNIN STATUS: started...')\r\n    var info = this.state.userInfo;\r\n    this.setState({ isDataLoading: true });\r\n\r\n    try {\r\n\r\n      var UsersResult = await fetch(corsURI + appServerURI + 'Users', { method: 'GET' });\r\n      const UsersStatus = 'Status: ' + UsersResult.status + ', ' + UsersResult.statusText\r\n      if (UsersResult.ok) {\r\n        console.log('fetch GET request for users data at signin successful.');\r\n        console.log(UsersStatus)\r\n      } else {\r\n        console.log('fetch GET request for users data at signin failed. Throwing error...')\r\n        throw new Error(UsersStatus)\r\n      }\r\n\r\n      const Users = await UsersResult.json();\r\n      const user = Users.filter((user) => user.email === info.email)[0]\r\n      \r\n      if ( user ) {          \r\n        \r\n        if (user.password === info.password) {\r\n          const userInfo = { ...info, username: info.email.split('@')[0]}\r\n          this.setState( {isUserAuth: true, userInfo} )\r\n          const successMsg = 'Login realizado com sucesso!'\r\n          this.setLoginMsg(successMsg)\r\n          console.log('SIGNIN STATUS: Sucesso.')\r\n\r\n        } else {\r\n          const errMsg = 'Senha incorreta.'\r\n          this.setLoginMsg(errMsg)\r\n          console.log('SIGNIN STATUS: ' + errMsg);\r\n        }\r\n\r\n      } else {\r\n        const errMsg = 'Email não cadastrado!'\r\n        this.setLoginMsg(errMsg)\r\n        console.log('SIGNIN STATUS: ' + errMsg)\r\n      }\r\n\r\n    } catch (error) {\r\n      const errMsg = 'Erro no servidor! Tente novamente...'\r\n      this.setLoginMsg(errMsg)\r\n      console.log('Error catched in fetch GET request for users data at  signin. Printing Error...')\r\n      console.log('SIGNIN STATUS:' + 'Erro capturado. Imprimindo erro...')\r\n      console.log(error);\r\n\r\n    } finally {\r\n      this.setState({ isDataLoading: false });\r\n      console.log('SIGNIN STATUS: Concluido.')\r\n      if (this.state.isUserAuth) this.props.authUser(this.state.userInfo)        // Father class component method that authenticates the user and redirects to entrances screen.\r\n    }\r\n  }\r\n\r\n  async onSignUp() {\r\n\r\n    console.log('SIGNUP STATUS: started...')\r\n    var info = this.state.userInfo;\r\n    this.setState({ isDataLoading: true });\r\n    \r\n    try {\r\n      var UsersResult = await fetch( corsURI + appServerURI + 'Users', { method: 'GET' } );\r\n      \r\n      const reqStatus = 'Status: ' + UsersResult.status + ', ' + UsersResult.statusText\r\n      if (UsersResult.ok) {\r\n        console.log('fetch GET request for users data at signup successful.')\r\n        console.log(reqStatus)\r\n      } else {\r\n        console.log('fetch GET request for users data at signup failed. Throwing error...')\r\n        throw new Error(reqStatus)\r\n      }\r\n\r\n      const Users = await UsersResult.json();\r\n      const User = Users.filter((user) => user.email === info.email)[0]\r\n      var postUserResult = {ok: false}\r\n      if ( !User ) {\r\n\r\n        info.username = info.email.split('@')[0]\r\n        const postUserOpts = { \r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify( { entries: [], ...info } )\r\n        }\r\n        \r\n        postUserResult = await fetch( corsURI + appServerURI +  'Users/' + info.username, postUserOpts );\r\n        const postUserStatus = 'Status: ' + postUserResult.status + ', ' + postUserResult.statusText\r\n\r\n        if (postUserResult.ok) {\r\n          const successMsg = 'Cadastro realizado com sucesso!'\r\n          this.setLoginMsg(successMsg)\r\n          console.log('fetch POST request for user data at signup successful.')\r\n          console.log(postUserStatus)\r\n          console.log('SING UP STATUS: ' + successMsg)\r\n\r\n        } else {\r\n          console.log('fetch POST request for user data at signup failed. Throwing error...')\r\n          throw new Error(postUserStatus)\r\n        }\r\n\r\n      } else { // ready to post user info and create new user account.\r\n        const errMsg = 'Email já cadastrado.'\r\n        this.setLoginMsg(errMsg)\r\n        console.log('SING UP STATUS: ' + errMsg)\r\n      }\r\n\r\n    } catch (error) {\r\n      const errMsg = 'Erro no servidor, não foi possível realizar o cadastro. Por favor, tente novamente.'\r\n      this.setLoginMsg(errMsg)\r\n      console.log('SING UP STATUS: Erro capturado. Imprimindo erro...')\r\n      console.log(error);\r\n\r\n    } finally {\r\n      this.setState({ isDataLoading: false })\r\n      console.log('SING UP STATUS: Concluido.')\r\n      if (postUserResult.ok)  this.onSignIn()\r\n    }\r\n  }\r\n\r\n  render() {\r\n\r\n    console.log('Rendering \"LoginComponent\" screen...')\r\n    return this.LoginScreen()\r\n  \r\n  }\r\n}\r\n\r\nexport default LoginScreen;","import { Icon } from 'react-native-eva-icons'\n\nimport React, { Component } from 'react';\nimport { Text, ImageBackground} from 'react-native';\n\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\n//import { createDrawerNavigator } from '@react-navigation/drawer';\n\nimport EntrancesScreen from './components/EntrancesComponent';\nimport PostEntranceScreen from './components/PostEntryComponent';\nimport LoginScreen from './components/LoginComponent'\n\nconst Tab = createBottomTabNavigator();\nconst Stack = createNativeStackNavigator();\n\nfunction HomeScreen(props) {\n  return(    \n    <Stack.Navigator \n    initialRouteName='Entrances'\n    screenOptions={{\n      headerShown: false,\n    }}\n    >\n      <Stack.Screen\n      name=\"Entrances\"\n      component={EntrancesScreen}\n      options={{title: 'Suas entradas'}}\n      initialParams={{userInfo: props.route.params.userInfo}}\n      />\n      <Stack.Screen\n      name=\"PostEntrance\"\n      component={PostEntranceScreen}\n      options={{title: 'Adicione uma  entrada'}}\n      initialParams={{userInfo: props.route.params.userInfo}}\n      />\n    </Stack.Navigator>\n  )\n}\n\nfunction SettingsScreen() {\n  return(\n    <ImageBackground source={require('./assets/wallpaper.jpg')} style={{width: '100%', height: '100%'}}>\n      <Text>Settings</Text>\n    </ImageBackground>\n  )\n}\n\nconst mainScreenOptions = ({ route }) => ({\n  headerShown: false,\n  tabBarActiveTintColor: 'tomato',\n  tabBarInactiveTintColor: 'gray',\n  tabBarHideOnKeyboard: true,\n  tabBarIcon: ({ focused, color, size }) => {\n    let iconName;\n    if (route.name === 'Home') {\n      iconName = focused\n        ? 'home'\n        : 'home-outline';\n    } else if (route.name === 'Settings') {\n      iconName = focused ? 'settings' : 'settings-outline';\n    }\n    // You can return any component that you like here!\n    return <Icon name={iconName} width={size} height={size} fill='rgb(35,35,35)'></Icon>\n  },\n})\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isUserAuth: false,\n      userInfo: null,\n    };\n    this.authUser = this.authUser.bind(this);\n  }\n\n  authUser(userInfo) {\n    console.log('User authenticated. Navigating to \"Entries\" screen...')\n    this.setState( {isUserAuth: true, userInfo} )\n  }\n\n  render() {\n\n    if (!this.state.isUserAuth) {\n      return <LoginScreen authUser={this.authUser} />\n    } else {\n      return (\n        <NavigationContainer>\n          <Tab.Navigator\n            screenOptions={mainScreenOptions}\n          >\n            <Tab.Screen name=\"Home\" component={HomeScreen} initialParams={{userInfo: this.state.userInfo}}/>\n            <Tab.Screen name=\"Settings\" component={SettingsScreen} initialParams={{userInfo: this.state.userInfo}} />\n          </Tab.Navigator>    \n        </NavigationContainer>\n      );  \n    }\n  }\n} \n\nexport default App;","import { registerRootComponent } from 'expo';\n\nimport App from './App';\n\n// registerRootComponent calls AppRegistry.registerComponent('main', () => App);\n// It also ensures that whether you load the app in Expo Go or in a native build,\n// the environment is set up appropriately\nregisterRootComponent(App);\n"],"sourceRoot":""}