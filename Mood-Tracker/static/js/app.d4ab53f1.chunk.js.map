{"version":3,"sources":["assets/wallpaper.jpg","styles/entrancesStyles.js","components/subcomponents/UserEntryCards.js","shared/dateRange.js","components/EntrancesComponent.js","styles/postEntryStyles.js","components/subcomponents/EditEmotions.js","components/subcomponents/GoogleMapsAPI.js","components/subcomponents/OpenWeatherMapAPI.js","components/PostEntryComponent.js","styles/loginStyles.js","components/LoginComponent.js","App.js","shared/emotionsConfig.js"],"names":["module","exports","styles","mainView","flex","postButton","position","height","width","borderRadius","bottom","alignSelf","backgroundColor","justifyContent","postButtonLabel","scrollView","section","paddingVertical","borderBottomWidth","borderColor","sectionTitle","fontSize","color","fontWeight","card","marginTop","paddingHorizontal","cardRow","flexDirection","alignItems","moodBadge","textAlign","emotionBadge","marginRight","textBadge","paddingTop","paddingBottom","lineHeight","textAlignVertical","text","spaceBetween","icon","entryIcon","paddingRight","borderWidth","editButtonsView","editButton","editButtonLabel","msgBox","msg","corsURI","Platform","OS","moodColors","monthDict","MoodHeader","entry","View","style","Text","mood","star","name","fill","weather","Image","source","uri","main","temp","toString","slice","startTime","Address","useState","isCollapsed","setIsCollapsed","address","numberOfLines","onPress","top","Emotions","emotions","length","flexWrap","PaddingBottom","map","emotion","index","Jornal","jornal","left","EmptyCard","props","today","date","now","Date","split","join","Today","navigateParams","user","parentState","currentEntry","type","syncUserData","setMainScreenState","getMainScreenState","textStyle","Pressable","parentProps","navigation","navigate","CardsLoadingMessage","UserEntryCards","state","EntryCard","bind","EditEntryButtons","editUserEntry","deleteUserEntry","console","log","this","selectedEntryId","_id","entryId","selDateEntries","entries","filter","reverse","isUserDataSyncing","onButtonPress","isButtonPressed","setIsButtonPressed","highlightButtonFor","label","isLoading","isDeleteLoading","buttonLabel","disabled","onPressIn","ActivityIndicator","selectedEntry","a","async","isDeleteEntryLoading","UsersResult","ok","status","fetch","username","method","usersStatus","statusText","Error","setAlertMsg","UserEntryCardsList","Component","dateRange","englishMonthSigs","portugueseMonthSigs","englishWeekDayMap","getNextDate","next","nextDate","indexOf","formatDate","selDate","ymd","yesterday","englishWeekDay","weekDay","prefix","i","oneDigit","stringNumber","EntrancesScreen","DateNavigationButton","buttonColor","onNextButtonPress","route","params","time","selectedDate","isUserDataSynced","alertMsg","locationPermission","setSelectedDate","setState","setTimeout","userDataSynced","json","users","email","ImageBackground","require","ScrollView","size","login","StatusBar","currentHeight","entrances","content","flexGrow","contentRow","padding","entryTitle","paddingLeft","postButtonView","moodButtonView","moodButton","jornalText","saveButton","borderTopLeftRadius","borderTopRightRadius","saveButtonLabel","marginVertical","marginHorizontal","entryCardEmotionBadge","datetimeTitle","capitalize","multipleWordString","words","trim","CapitalizedWords","forEach","element","push","toUpperCase","EditEmotions","showEditMenu","showExpandMenuButton","mode","newEmotionName","selectedEmotionType","selectedEmotionEnergy","initialEmotionLayout","EditEmotionsMenu","EditEmotionsSection","onSaveEmotionButtonPress","emotionLayoutMap","inputSectionStyle","marginBottom","tagStyle","createEmotionViewStyle","borderTopWidth","borderTopColor","isDeleteEmotionLoading","isSaveEmotionLoading","isPostEntryLoading","isUpdateUserDataLoading","isNewEmotionFormComplete","TextInput","placeholder","placeholderTextColor","onChangeText","value","typeSelected","setParentState","deleteEmotionMode","layout","isLayoutSelected","selectedEmotionLayout","onSaveEmotionLayoutButtonPress","hidden","anyOpen","marginLeft","Object","keys","isSelectedEmotions","includes","newEmotion","energy","postEmotionResult","postUserEntryOpts","headers","body","JSON","stringify","postEmotionStatus","updateUserData","isSaveEmotionLayoutLoading","postEmotionLayoutResult","postEmotionLayoutOpts","postEmotionLayoutStatus","GoogleMapsAPI","GoogleMapsJavascriptAPIkey","GoogleMapsGeocodingAPIKey","OpenWeatherMapAPI","KEY","Location","moods","moodColorsRGBA","moodIcons","emotionGroupsNames","emotionTypes","emotionEnergy","buildIsSelectedEmotions","monthSigs","months","monthNameMap","monthSig","getTime","formatPostEntryDatetimeTitle","m","PostEntranceScreen","endTime","createdAt","lastEdited","selectedMood","jornalEntry","location","isMoodUnmarked","isFetchingLocationOrWeather","userCoordinates","loginMsg","initializeEntry","onSaveButtonPress","setLoginMsg","EmotionButtons","MoodButtons","postEntryHeader","onEmotionButtonPress","onMoodButtonPress","inputCardBody","setSelectedEntry","InputCard","JornalInput","postNewEntryAsync","deleteEmotion","onEmotionButtonLongPress","goBack","item","alpha","selected","selColor","selectMood","objList","objKey","obj","sortedKeys","sort","newObjList","key","sortObjListByKey","title","onLongPress","suppressHighlighting","selectable","selectEmotion","multiline","scrollEnabled","sectionName","cardBodyStyle","cardBodyContent","userEmotionGroups","emotionLabels","mapEmotions","setSelected","checkIfLocationEnabled","getCurrentLocation","fetchWeather","currentEmotions","isSelectedEmotionsNew","oldEmotions","newEmotionsSelected","isDataLoading","newEntryPost","newEntry","editMode","postUserEntryResult","postUserEntryStatus","coords","lat","latitude","lng","longitude","then","res","resStatus","weatherInfo","coord","clouds","wind","visibility","response","addressObj","street","streetNumber","district","subregion","region","isoCountryCode","minHeight","titleView","titleIcon","cardHeader","cardTitle","cardSection","loadingIcon","inputField","button","defaultEmotions","falseParams","appendValueToUri","validateEmail","emailStatus","apiResp","apiRespJson","formatCheck","smtpCheck","LoginScreen","textContentType","autoComplete","importantForAutofill","secureTextEntry","submitButton","LoginIcon","userInfo","password","isUserAuth","onSignIn","onSignUp","animation","textField","setField","sign","signIn","errMsg","info","isInputEmpty","UsersStatus","Users","authUser","postUserResult","emailValidation","reqStatus","passwordCheck","postUserOpts","postUserStatus","successMsg","Stack","createNativeStackNavigator","HomeScreen","Navigator","initialRouteName","screenOptions","headerShown","Screen","component","options","initialParams","posted","App","NavigationContainer","emotionGroups"],"mappings":"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AW,YAAc5B,KAAK/B,MAAMU,YAAYsB,gBAAiB,CAAE4B,OAAQ,YAR9K,UAQQL,EARR,OAUcM,EAAe,UAAYN,EAAYE,OAAS,KAAOF,EAAYO,YAErEP,EAAYC,GAZxB,iBAcY3B,QAAQC,IAAI,mDACZD,QAAQC,IAAI+B,GACZhC,QAAQC,IAAI,yCAhBxB,8BAmBYD,QAAQC,IAAK,IAAIiC,MAAM,oEACjB,IAAIA,MAAMF,GApB5B,0DAwBYhC,QAAQC,IAAI,+DACZD,QAAQC,IAAR,MACAC,KAAK/B,MAAMgE,YAAY,8DA1BnC,yBA6BQjC,KAAK/B,MAAMc,mBAAmB,CAAEwC,sBAAsB,IACtDvB,KAAK/B,MAAMc,mBAAmB,CAAEkB,gBAAiB,OACjDH,QAAQC,IAA6D,sCACjEyB,EAAYC,IAAKzB,KAAK/B,MAAMa,eAhCxC,sF,oBAoCA,WAEI,OADAgB,QAAQC,IAAI,iDACLC,KAAKkC,yB,GAvJwBC,aC0Y7BC,EApiBG,CACd,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,c,+aCrhBJ,IAAM9G,EAAyB,OAAfC,IAASC,GAAc,+CAAiD,GAIlFE,EAAY,CAAC,IAAO,KAAM,IAAO,KAAM,IAAO,KAAM,IAAO,KAAM,IAAO,KAAM,IAAO,KAAM,IAAO,KAAM,IAAO,KAAM,IAAO,KAAM,IAAO,KAAM,IAAO,KAAM,IAAO,MACnK2G,EAAmB,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OACjGC,GAAsB,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OACpGC,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","file":"static/js/app.d4ab53f1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/wallpaper.9987c866.jpg\";","import { StatusBar } from 'expo-status-bar';\r\n\r\n//import StatusBar from 'react-native'\r\n// import { Platform } from 'react-native';\r\n\r\n// import { Dimensions } from 'react-native';\r\n// var windowWidth = Dimensions.get('window').width;\r\n// var windowHeight = Dimensions.get('window').height;\r\n\r\n// import DeviceInfo from 'react-native-device-info';\r\n// import AsyncStorage from '@react-native-community/async-storage';\r\n\r\n// // how can i do some code that will gives me if its \"Handset\"=> Smartphone , \r\n// //if its \"unknown\"=> Laptop/Computer \r\n// //and it will be saved as well in my async-storage.\r\n\r\n// //this some example that i wanna get it works well coz now its not work good\r\n\r\n// const funct1=  (type) => {\r\n// let type = DeviceInfo.getDeviceType();\r\n\r\n// if type==='Handset'{\r\n//   AsyncStorage.setItem('PLATFORM-TYPE', 'Smartphone');\r\n// }\r\n// if type==='unknown'{\r\n//   AsyncStorage.setItem('PLATFORM-TYPE', 'Laptop/Computer');\r\n// }\r\n// };\r\n\r\nconst styles = {\r\n    mainView: {\r\n        flex: 1,                 \r\n        // marginTop: StatusBar.currentHeight,\r\n    },\r\n    postButton: {\r\n        position: 'absolute',\r\n        height: 60,\r\n        width: 60,\r\n        borderRadius: 30,\r\n        bottom: '2%',\r\n        alignSelf: 'center',\r\n        backgroundColor: 'rgba(0,0,0,1)',\r\n        justifyContent: 'center',  \r\n    },\r\n    postButtonLabel: {\r\n        alignSelf: 'center',\r\n    },\r\n    scrollView: {\r\n        // paddingHorizontal: Platform.OS != 'web' ? '5%' : '5%',\r\n        flex: 1,\r\n    },\r\n    section: {\r\n        width: 350,\r\n        paddingVertical: '16%',\r\n        borderBottomWidth: 1,\r\n        borderColor: 'rgba(155,155,155,0.3)',\r\n        alignSelf: 'center',\r\n    },\r\n    sectionTitle: {\r\n        paddingVertical: 7.5,\r\n        fontSize: 18,\r\n        color: 'white',\r\n        fontWeight: '400',\r\n    },\r\n    card: {\r\n        marginTop: '5%',\r\n        paddingVertical: 5,\r\n        paddingHorizontal: 10,\r\n        borderRadius: 20,\r\n        backgroundColor: 'rgba(0,0,0,0.2)',\r\n    },\r\n    cardRow: {\r\n        flexDirection: 'row',\r\n        paddingVertical: 5,\r\n        alignItems: 'center',\r\n    },\r\n    moodBadge: {\r\n        // fontFamily: 'sans-serif',\r\n        backgroundColor: 'green',\r\n        borderRadius: 30,\r\n        paddingVertical: 6,\r\n        width: 130,\r\n        fontSize: 15,\r\n        textAlign: 'center',\r\n    },\r\n    emotionBadge: {\r\n        // fontFamily: 'sans-serif',\r\n        backgroundColor: 'aliceblue',\r\n        borderRadius: 18,\r\n        paddingVertical: 6,\r\n        paddingHorizontal: 12.5,\r\n        marginRight: 6,\r\n        fontSize: 14,\r\n        textAlign: 'center',\r\n    },\r\n    textBadge: {\r\n        backgroundColor: 'aliceblue',\r\n        borderRadius: 17,\r\n        paddingTop: 5,\r\n        paddingBottom: 8,\r\n        paddingHorizontal: 11,\r\n        width: '100%',\r\n        fontSize: 15,\r\n        lineHeight: 22,\r\n        textAlign: 'left',\r\n        textAlignVertical: 'top',\r\n},\r\n    text: {\r\n        // fontFamily: 'sans-serif',\r\n        fontSize: 14,\r\n        color: 'white'\r\n    },\r\n    spaceBetween: {\r\n        justifyContent: 'space-between',\r\n    },\r\n    icon: {\r\n        paddingHorizontal: 12,\r\n    },\r\n    entryIcon: {\r\n        paddingRight: 0,\r\n        borderWidth: 1,\r\n    },\r\n    editButtonsView: {\r\n        flexDirection: 'row',\r\n        height: 50,\r\n        paddingBottom: 5,\r\n        alignItems: 'flex-end',\r\n        justifyContent: 'space-between'\r\n    },\r\n    editButton: {\r\n        height: 34,\r\n        width: 102,\r\n        borderWidth: 1,\r\n        borderColor: 'aliceblue',\r\n        borderRadius: 17,\r\n        alignItems: 'center',\r\n        justifyContent: 'center'\r\n    },\r\n    editButtonLabel: {\r\n        fontSize: 15,\r\n        fontWeight: '400',\r\n        color: 'white',\r\n    },\r\n    msgBox: {\r\n        position: 'absolute',\r\n        alignSelf: 'center',\r\n        bottom: 110,\r\n        width: 300,\r\n        paddingVertical: 5,\r\n        paddingHorizontal: 3,\r\n        // height: 36,\r\n        justifyContent: 'center',\r\n        backgroundColor: 'rgb(30,30,30)',\r\n        borderWidth: 1,\r\n        borderColor: 'rgb(40,40,40)',\r\n        \r\n    },\r\n    msg: {\r\n        textAlign: 'center',\r\n        color: 'white',\r\n        // paddingHorizontal: 20,\r\n    },\r\n};\r\n\r\nexport default styles;","// Module import\r\nimport React, { Component, useState } from 'react';\r\nimport { Platform, View, Text, Pressable, Image, ActivityIndicator } from 'react-native';\r\nimport { Icon } from 'react-native-eva-icons'\r\n\r\n// Local import\r\nimport styles from '../../styles/entrancesStyles'\r\n\r\n// cors-midpoint uri (needed to avoid cors' allow-cross-origin error when fetching in web platforms)\r\nconst corsURI = Platform.OS == 'web' ? 'https://morning-journey-78874.herokuapp.com/' : ''\r\nconst appServerURI = 'https://mood-tracker-server.herokuapp.com/'\r\n\r\n// OpenWeatherMap API weather icons URI:\r\nfunction openWeatherMapIconsURI (icon) {\r\n    if (Platform.OS === 'android') {\r\n        return `http://openweathermap.org/img/wn/${icon}@2x.png`\r\n\r\n    } else if (Platform.OS === 'web') {\r\n        return `https://openweathermap.org/img/wn/${icon}@2x.png`\r\n    }\r\n}\r\n\r\n// Defining mood colors schema\r\n// const moodColors = ['#ff3333', '#0099cc', '#add8e6', '#ffff33', '#00cc00']\r\nconst moodColors = {'Horrível': '#ff3333', 'Mal': '#0099cc', 'Regular': '#add8e6', 'Bem': '#ffff33', 'Ótimo': '#00cc00'};\r\n\r\nconst monthDict = {'Jan': '01', 'Feb': '02', 'Mar': '03', 'Apr': '04', 'May': '05', 'Jun': '06', 'Jul': '07', 'Ago': '08', 'Sep': '09', 'Oct': '10', 'Nov': '11', 'Dec': '12'}\r\nfunction Today() {\r\n    const now = Date().toString().split(' ')\r\n    const today = [ now[3], monthDict[now[1]], now[2] ].join('-')\r\n    return today\r\n}\r\n\r\nfunction MoodHeader({entry}) {\r\n    return(\r\n        <View style={ [styles.cardRow, styles.spaceBetween] }>\r\n            <View style={ [{flexDirection: 'row', alignItems: 'center'} ] }>\r\n                <Text style={[styles.moodBadge, {backgroundColor: moodColors[entry.mood]}]}>{entry.mood}</Text>\r\n                    { entry.star ? (\r\n                    <View style={{height: 30, width: 42, alignItems: 'flex-end', justifyContent: 'center'}}>\r\n                        <Icon name='star' fill='gold' width={28} height={28} style={{}} />\r\n                    </View>\r\n                    ) : <></> }                    \r\n                    { entry.weather ? (\r\n                        <View style={{height: 30, width: 50, alignItems: 'flex-end', justifyContent: 'center'}}>\r\n                            <Image source={{uri: openWeatherMapIconsURI(entry.weather.weather.icon)}} style={{width: 40, height: 40}} />\r\n                        </View>\r\n                    ) : <></> }                    \r\n                    { entry.weather ? (\r\n                        <View style={{height: 30, width: 40, alignItems: 'flex-end', justifyContent: 'center'}}>\r\n                            <Text style={{fontSize: 14, fontWeight: '500', color:'#fffd'}}> { entry.weather.main.temp.toString().slice(0,2) + '°C' } </Text>\r\n                        </View>\r\n                    ) : <></> }                \r\n                \r\n            </View>\r\n            <View style={[styles.cardRow]}>\r\n                <Icon name='edit' height={18} width={18} fill='rgba(255,255,255,0.75)' style={{marginRight: 6}} />\r\n                <Text style={styles.text}>{entry.startTime.slice(0,5)}</Text>\r\n            </View>\r\n        </View>\r\n\r\n    )\r\n}\r\n\r\nfunction Address ({entry}) {\r\n    const [isCollapsed, setIsCollapsed] = useState( 1 );\r\n    if (entry.address) {\r\n        return(\r\n            <View style={styles.cardRow}>\r\n                <Text numberOfLines={ isCollapsed } onPress={ () => { setIsCollapsed( isCollapsed ? 0 : 1 ) }} style={styles.text}>\r\n                    <Icon name='pin' height={17} width={17} fill='rgba(255,255,255,0.75)' style={{position: 'relative', marginRight: 5, top: 2}} />\r\n                    {entry.address}\r\n                </Text>\r\n            </View>        \r\n        )\r\n    } else {\r\n        return <></>\r\n    }\r\n}\r\n\r\nfunction Emotions ({entry}) {\r\n    if (entry.emotions.length>0) {\r\n        return (\r\n            <View style={[styles.cardRow, {flexWrap: 'wrap', justifyContent: 'flex-start', paddingTop: 2, PaddingBottom: 0}]}>\r\n                { entry.emotions.map((emotion, index) => {\r\n                    if (emotion.name) {\r\n                        emotion = emotion.name\r\n                    }\r\n                    return(\r\n                        <View key={'emotion-' + emotion} style={{paddingVertical: 5, paddingHorizontal: 2}}>\r\n                            <Text style={[styles.emotionBadge]}>{emotion}</Text>\r\n                        </View>\r\n                    )\r\n                })}\r\n            </View>\r\n        )\r\n    } else {\r\n        return (\r\n            <></>\r\n        )\r\n    }\r\n}\r\n\r\nfunction Jornal({ entry }) {\r\n    if (entry.jornal) {\r\n        return(\r\n            <View style={styles.cardRow}>\r\n                <Text style={styles.textBadge}>\r\n                    <Icon name='book-open' height={20} width={20} fill='rgba(0,0,0,0.25)' style={{position: 'relative', top: 4, left: 1, marginRight: 6}} />\r\n                    {entry.jornal}\r\n                </Text>\r\n            </View>\r\n        )\r\n    } else {\r\n        return <></>\r\n    }\r\n}\r\n\r\nfunction EmptyCard(props) {\r\n    const today = props.date == Today()\r\n    const navigateParams = {\r\n        user: props.parentState.user,\r\n        currentEntry: {\r\n            type: today ? 'new' : 'custom-date',\r\n            date: props.parentState.date,\r\n            entry: null\r\n        },\r\n        syncUserData: props.syncUserData,\r\n        setMainScreenState: props.setMainScreenState,\r\n        getMainScreenState: props.getMainScreenState,\r\n\r\n    }\r\n    const textStyle = {fontSize: 16, color: 'white', marginTop: 7}\r\n    return (\r\n        <Pressable\r\n        onPress={ () => props.parentProps.navigation.navigate('PostEntrance', navigateParams) }\r\n        style={[styles.card, {alignItems: 'center', justifyContent: 'center', fontSize: 16, height: 145}]}\r\n        >\r\n            <Icon name='inbox' fill='rgba(255,255,255,0.3)' width={25} height={25} />\r\n            <Text style={textStyle}> Nenhuma entrada encontrada. </Text>\r\n            <Text style={textStyle}> Pressione aqui para adicionar uma a este dia! </Text>\r\n        </Pressable>\r\n    );\r\n}\r\n\r\nfunction CardsLoadingMessage() {\r\n    return(\r\n        <View style={[styles.card, {alignItems: 'center', justifyContent: 'center', height: 85}]}>\r\n            <Icon name='sync-outline' fill='rgba(255,255,255,1)' width={25} height={25} />\r\n            <Text style={{marginTop: 10, fontSize: 16, color: 'white'}}>Sincronizando entradas...</Text>\r\n        </View>\r\n    )\r\n}\r\n\r\nexport default class UserEntryCards extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n        \r\n        this.EntryCard = this.EntryCard.bind(this);\r\n        this.EditEntryButtons = this.EditEntryButtons.bind(this);\r\n        this.editUserEntry = this.editUserEntry.bind(this);\r\n        this.deleteUserEntry = this.deleteUserEntry.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log('Subcomponent \"UserEntryCards\" did mount...')\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        console.log('\"UserEntryCards\" sub-component will unmount...')\r\n      }\r\n    \r\n    EntryCard({ entry }) {\r\n        function onEntryCardPress() {\r\n            this.props.setMainScreenState({ selectedEntryId: this.props.parentState.selectedEntryId === entry._id ? null : entry._id })\r\n        }\r\n        return (\r\n        <Pressable onPress={onEntryCardPress.bind(this)} style={styles.card}>\r\n            <MoodHeader entry={entry} />\r\n            <Emotions entry={entry} />\r\n            <Address entry={entry} />\r\n            <Jornal entry={entry} />\r\n            <this.EditEntryButtons entryId={entry._id} />\r\n        </Pressable>\r\n        );\r\n    }    \r\n\r\n    UserEntryCardsList() {\r\n        const selDateEntries = this.props.parentState.user.entries.filter( (entry) => entry.date === this.props.parentState.date ).reverse()\r\n        if (selDateEntries.length) {\r\n            return(\r\n                <>\r\n                    { selDateEntries.map( entry => <this.EntryCard key={'entry-card-'+entry.startTime} entry={entry} />) }\r\n                    {/* { this.props.parentState.isUserDataSyncing ? <CardsLoadingMessage /> : null } */}\r\n                </>\r\n            )\r\n       \r\n        } else if (this.props.parentState.isUserDataSyncing ) {\r\n            return <CardsLoadingMessage />\r\n            \r\n        } else {\r\n            return <EmptyCard {...this.props} />\r\n        }\r\n    }\r\n\r\n    EditEntryButtons(props) {\r\n        const buttonLabels = ['Editar', 'Excluir']\r\n        const onButtonPress = { 'Editar': this.editUserEntry, 'Excluir': this.deleteUserEntry }\r\n\r\n        const [isButtonPressed, setIsButtonPressed] = useState({\r\n            'Editar': false,\r\n            'Excluir': false,\r\n        })\r\n\r\n        function highlightButtonFor(label) {\r\n            function highlightButton() {\r\n                setIsButtonPressed({ ...isButtonPressed, [label]: !isButtonPressed[label] })\r\n            }\r\n            return highlightButton.bind(this);\r\n        }\r\n\r\n        const isLoading = this.props.parentState.isDeleteLoading | this.props.parentState.isUserDataSyncing\r\n        const buttonLabel = (label) => <Text style={[styles.editButtonLabel, {color: label=='Excluir' ? 'red' : 'white' }]}>{label}</Text>\r\n        if (this.props.parentState.selectedEntryId == props.entryId) {\r\n            return(\r\n                <View style={styles.editButtonsView}>\r\n                    { buttonLabels.map( (label) => (\r\n                        <Pressable\r\n                        key={`edit-${label}-${props.entryId}`}\r\n                        style={[styles.editButton,  {backgroundColor: isButtonPressed[label] ? (label=='Excluir' ? '#0008' : '#fff5') : '#0000', borderColor: label=='Excluir' ? 'red' : 'white' }]}\r\n                        disabled={ isLoading }\r\n                        onPress={() => {highlightButtonFor(label)(); onButtonPress[label]() }}\r\n                        onPressIn={highlightButtonFor(label)}\r\n                        >\r\n                            { label=='Excluir' ? (\r\n                                this.props.parentState.isDeleteLoading ? <ActivityIndicator color='red' /> : buttonLabel(label)\r\n                                \r\n                            ) : buttonLabel(label) }\r\n                                                \r\n                        </Pressable>\r\n                    )) }\r\n            </View>\r\n            )\r\n        } else {\r\n            return null\r\n        }\r\n    }\r\n\r\n    editUserEntry() {\r\n        const selectedEntry = this.props.parentState.user.entries.filter( (entry) => entry._id == this.props.parentState.selectedEntryId )[0]\r\n        const navigateParams = {\r\n            user: this.props.parentState.user,\r\n            currentEntry: {\r\n                type: 'edit',\r\n                date: selectedEntry.date,\r\n                entry: selectedEntry\r\n            },\r\n            syncUserData: this.props.syncUserData,\r\n            setMainScreenState: this.props.setMainScreenState,\r\n            getMainScreenState: this.props.getMainScreenState,\r\n    \r\n        }\r\n        this.props.parentProps.navigation.navigate('PostEntrance', navigateParams)\r\n    }\r\n\r\n    async deleteUserEntry() {\r\n\r\n        console.log('DELETE USER ENTRY STATUS: Started...')\r\n        this.props.setMainScreenState({ isDeleteEntryLoading: true });\r\n        // prompt()\r\n\r\n        try {\r\n            var UsersResult = {ok: false, status: 999}\r\n            UsersResult = await fetch( corsURI + appServerURI + 'Users/' + this.props.parentState.user.username + '/entries/' + this.props.parentState.selectedEntryId, { method: 'DELETE' });\r\n            // var UsersResult = await fetch( 'https://localhost:3000/' + 'Users/' + this.props.parentState.user.username + '/entries/' + this.props.parentState.selectedEntryId, { method: 'DELETE' });\r\n            const usersStatus =  'Status ' + UsersResult.status + ', ' + UsersResult.statusText\r\n\r\n            if (UsersResult.ok) {\r\n                // const users = await UsersResult.json();\r\n                console.log('fetch DELETE request for user entry successful.')\r\n                console.log(usersStatus)\r\n                console.log('DELETE USER ENTRY STATUS: Successful.')\r\n\r\n            } else {\r\n                console.log( new Error('\"fetch\" DELETE request for user entry failed. Throwing error...') )\r\n                throw new Error(usersStatus)\r\n            }\r\n    \r\n        } catch (error) {\r\n                console.log('DELETE USER ENTRY STATUS: Error captured. Printing error...')\r\n                console.log(error);\r\n                this.props.setAlertMsg('Não foi possível deletar a entrada. Tente novamente.')\r\n\r\n        } finally {\r\n            this.props.setMainScreenState({ isDeleteEntryLoading: false });\r\n            this.props.setMainScreenState({ selectedEntryId: null })\r\n            console.log('DELETE USER ENTRY STATUS: FINISHED.' + UsersResult.ok ? 'Proceeding to sync user entries...' : 'Delete failed, skipping sync of user entries...')\r\n            if (UsersResult.ok) {this.props.syncUserData()}\r\n        }    \r\n    }\r\n\r\n    render() {\r\n        console.log('\"Rendering \"UserEntryCards\" sub-component...\"')\r\n        return this.UserEntryCardsList()\r\n    }\r\n}","const dateRange = [\r\n    \"2021-01-01\",\r\n    \"2021-01-02\",\r\n    \"2021-01-03\",\r\n    \"2021-01-04\",\r\n    \"2021-01-05\",\r\n    \"2021-01-06\",\r\n    \"2021-01-07\",\r\n    \"2021-01-08\",\r\n    \"2021-01-09\",\r\n    \"2021-01-10\",\r\n    \"2021-01-11\",\r\n    \"2021-01-12\",\r\n    \"2021-01-13\",\r\n    \"2021-01-14\",\r\n    \"2021-01-15\",\r\n    \"2021-01-16\",\r\n    \"2021-01-17\",\r\n    \"2021-01-18\",\r\n    \"2021-01-19\",\r\n    \"2021-01-20\",\r\n    \"2021-01-21\",\r\n    \"2021-01-22\",\r\n    \"2021-01-23\",\r\n    \"2021-01-24\",\r\n    \"2021-01-25\",\r\n    \"2021-01-26\",\r\n    \"2021-01-27\",\r\n    \"2021-01-28\",\r\n    \"2021-01-29\",\r\n    \"2021-01-30\",\r\n    \"2021-01-31\",\r\n    \"2021-02-01\",\r\n    \"2021-02-02\",\r\n    \"2021-02-03\",\r\n    \"2021-02-04\",\r\n    \"2021-02-05\",\r\n    \"2021-02-06\",\r\n    \"2021-02-07\",\r\n    \"2021-02-08\",\r\n    \"2021-02-09\",\r\n    \"2021-02-10\",\r\n    \"2021-02-11\",\r\n    \"2021-02-12\",\r\n    \"2021-02-13\",\r\n    \"2021-02-14\",\r\n    \"2021-02-15\",\r\n    \"2021-02-16\",\r\n    \"2021-02-17\",\r\n    \"2021-02-18\",\r\n    \"2021-02-19\",\r\n    \"2021-02-20\",\r\n    \"2021-02-21\",\r\n    \"2021-02-22\",\r\n    \"2021-02-23\",\r\n    \"2021-02-24\",\r\n    \"2021-02-25\",\r\n    \"2021-02-26\",\r\n    \"2021-02-27\",\r\n    \"2021-02-28\",\r\n    \"2021-03-01\",\r\n    \"2021-03-02\",\r\n    \"2021-03-03\",\r\n    \"2021-03-04\",\r\n    \"2021-03-05\",\r\n    \"2021-03-06\",\r\n    \"2021-03-07\",\r\n    \"2021-03-08\",\r\n    \"2021-03-09\",\r\n    \"2021-03-10\",\r\n    \"2021-03-11\",\r\n    \"2021-03-12\",\r\n    \"2021-03-13\",\r\n    \"2021-03-14\",\r\n    \"2021-03-15\",\r\n    \"2021-03-16\",\r\n    \"2021-03-17\",\r\n    \"2021-03-18\",\r\n    \"2021-03-19\",\r\n    \"2021-03-20\",\r\n    \"2021-03-21\",\r\n    \"2021-03-22\",\r\n    \"2021-03-23\",\r\n    \"2021-03-24\",\r\n    \"2021-03-25\",\r\n    \"2021-03-26\",\r\n    \"2021-03-27\",\r\n    \"2021-03-28\",\r\n    \"2021-03-29\",\r\n    \"2021-03-30\",\r\n    \"2021-03-31\",\r\n    \"2021-04-01\",\r\n    \"2021-04-02\",\r\n    \"2021-04-03\",\r\n    \"2021-04-04\",\r\n    \"2021-04-05\",\r\n    \"2021-04-06\",\r\n    \"2021-04-07\",\r\n    \"2021-04-08\",\r\n    \"2021-04-09\",\r\n    \"2021-04-10\",\r\n    \"2021-04-11\",\r\n    \"2021-04-12\",\r\n    \"2021-04-13\",\r\n    \"2021-04-14\",\r\n    \"2021-04-15\",\r\n    \"2021-04-16\",\r\n    \"2021-04-17\",\r\n    \"2021-04-18\",\r\n    \"2021-04-19\",\r\n    \"2021-04-20\",\r\n    \"2021-04-21\",\r\n    \"2021-04-22\",\r\n    \"2021-04-23\",\r\n    \"2021-04-24\",\r\n    \"2021-04-25\",\r\n    \"2021-04-26\",\r\n    \"2021-04-27\",\r\n    \"2021-04-28\",\r\n    \"2021-04-29\",\r\n    \"2021-04-30\",\r\n    \"2021-05-01\",\r\n    \"2021-05-02\",\r\n    \"2021-05-03\",\r\n    \"2021-05-04\",\r\n    \"2021-05-05\",\r\n    \"2021-05-06\",\r\n    \"2021-05-07\",\r\n    \"2021-05-08\",\r\n    \"2021-05-09\",\r\n    \"2021-05-10\",\r\n    \"2021-05-11\",\r\n    \"2021-05-12\",\r\n    \"2021-05-13\",\r\n    \"2021-05-14\",\r\n    \"2021-05-15\",\r\n    \"2021-05-16\",\r\n    \"2021-05-17\",\r\n    \"2021-05-18\",\r\n    \"2021-05-19\",\r\n    \"2021-05-20\",\r\n    \"2021-05-21\",\r\n    \"2021-05-22\",\r\n    \"2021-05-23\",\r\n    \"2021-05-24\",\r\n    \"2021-05-25\",\r\n    \"2021-05-26\",\r\n    \"2021-05-27\",\r\n    \"2021-05-28\",\r\n    \"2021-05-29\",\r\n    \"2021-05-30\",\r\n    \"2021-05-31\",\r\n    \"2021-06-01\",\r\n    \"2021-06-02\",\r\n    \"2021-06-03\",\r\n    \"2021-06-04\",\r\n    \"2021-06-05\",\r\n    \"2021-06-06\",\r\n    \"2021-06-07\",\r\n    \"2021-06-08\",\r\n    \"2021-06-09\",\r\n    \"2021-06-10\",\r\n    \"2021-06-11\",\r\n    \"2021-06-12\",\r\n    \"2021-06-13\",\r\n    \"2021-06-14\",\r\n    \"2021-06-15\",\r\n    \"2021-06-16\",\r\n    \"2021-06-17\",\r\n    \"2021-06-18\",\r\n    \"2021-06-19\",\r\n    \"2021-06-20\",\r\n    \"2021-06-21\",\r\n    \"2021-06-22\",\r\n    \"2021-06-23\",\r\n    \"2021-06-24\",\r\n    \"2021-06-25\",\r\n    \"2021-06-26\",\r\n    \"2021-06-27\",\r\n    \"2021-06-28\",\r\n    \"2021-06-29\",\r\n    \"2021-06-30\",\r\n    \"2021-07-01\",\r\n    \"2021-07-02\",\r\n    \"2021-07-03\",\r\n    \"2021-07-04\",\r\n    \"2021-07-05\",\r\n    \"2021-07-06\",\r\n    \"2021-07-07\",\r\n    \"2021-07-08\",\r\n    \"2021-07-09\",\r\n    \"2021-07-10\",\r\n    \"2021-07-11\",\r\n    \"2021-07-12\",\r\n    \"2021-07-13\",\r\n    \"2021-07-14\",\r\n    \"2021-07-15\",\r\n    \"2021-07-16\",\r\n    \"2021-07-17\",\r\n    \"2021-07-18\",\r\n    \"2021-07-19\",\r\n    \"2021-07-20\",\r\n    \"2021-07-21\",\r\n    \"2021-07-22\",\r\n    \"2021-07-23\",\r\n    \"2021-07-24\",\r\n    \"2021-07-25\",\r\n    \"2021-07-26\",\r\n    \"2021-07-27\",\r\n    \"2021-07-28\",\r\n    \"2021-07-29\",\r\n    \"2021-07-30\",\r\n    \"2021-07-31\",\r\n    \"2021-08-01\",\r\n    \"2021-08-02\",\r\n    \"2021-08-03\",\r\n    \"2021-08-04\",\r\n    \"2021-08-05\",\r\n    \"2021-08-06\",\r\n    \"2021-08-07\",\r\n    \"2021-08-08\",\r\n    \"2021-08-09\",\r\n    \"2021-08-10\",\r\n    \"2021-08-11\",\r\n    \"2021-08-12\",\r\n    \"2021-08-13\",\r\n    \"2021-08-14\",\r\n    \"2021-08-15\",\r\n    \"2021-08-16\",\r\n    \"2021-08-17\",\r\n    \"2021-08-18\",\r\n    \"2021-08-19\",\r\n    \"2021-08-20\",\r\n    \"2021-08-21\",\r\n    \"2021-08-22\",\r\n    \"2021-08-23\",\r\n    \"2021-08-24\",\r\n    \"2021-08-25\",\r\n    \"2021-08-26\",\r\n    \"2021-08-27\",\r\n    \"2021-08-28\",\r\n    \"2021-08-29\",\r\n    \"2021-08-30\",\r\n    \"2021-08-31\",\r\n    \"2021-09-01\",\r\n    \"2021-09-02\",\r\n    \"2021-09-03\",\r\n    \"2021-09-04\",\r\n    \"2021-09-05\",\r\n    \"2021-09-06\",\r\n    \"2021-09-07\",\r\n    \"2021-09-08\",\r\n    \"2021-09-09\",\r\n    \"2021-09-10\",\r\n    \"2021-09-11\",\r\n    \"2021-09-12\",\r\n    \"2021-09-13\",\r\n    \"2021-09-14\",\r\n    \"2021-09-15\",\r\n    \"2021-09-16\",\r\n    \"2021-09-17\",\r\n    \"2021-09-18\",\r\n    \"2021-09-19\",\r\n    \"2021-09-20\",\r\n    \"2021-09-21\",\r\n    \"2021-09-22\",\r\n    \"2021-09-23\",\r\n    \"2021-09-24\",\r\n    \"2021-09-25\",\r\n    \"2021-09-26\",\r\n    \"2021-09-27\",\r\n    \"2021-09-28\",\r\n    \"2021-09-29\",\r\n    \"2021-09-30\",\r\n    \"2021-10-01\",\r\n    \"2021-10-02\",\r\n    \"2021-10-03\",\r\n    \"2021-10-04\",\r\n    \"2021-10-05\",\r\n    \"2021-10-06\",\r\n    \"2021-10-07\",\r\n    \"2021-10-08\",\r\n    \"2021-10-09\",\r\n    \"2021-10-10\",\r\n    \"2021-10-11\",\r\n    \"2021-10-12\",\r\n    \"2021-10-13\",\r\n    \"2021-10-14\",\r\n    \"2021-10-15\",\r\n    \"2021-10-16\",\r\n    \"2021-10-17\",\r\n    \"2021-10-18\",\r\n    \"2021-10-19\",\r\n    \"2021-10-20\",\r\n    \"2021-10-21\",\r\n    \"2021-10-22\",\r\n    \"2021-10-23\",\r\n    \"2021-10-24\",\r\n    \"2021-10-25\",\r\n    \"2021-10-26\",\r\n    \"2021-10-27\",\r\n    \"2021-10-28\",\r\n    \"2021-10-29\",\r\n    \"2021-10-30\",\r\n    \"2021-10-31\",\r\n    \"2021-11-01\",\r\n    \"2021-11-02\",\r\n    \"2021-11-03\",\r\n    \"2021-11-04\",\r\n    \"2021-11-05\",\r\n    \"2021-11-06\",\r\n    \"2021-11-07\",\r\n    \"2021-11-08\",\r\n    \"2021-11-09\",\r\n    \"2021-11-10\",\r\n    \"2021-11-11\",\r\n    \"2021-11-12\",\r\n    \"2021-11-13\",\r\n    \"2021-11-14\",\r\n    \"2021-11-15\",\r\n    \"2021-11-16\",\r\n    \"2021-11-17\",\r\n    \"2021-11-18\",\r\n    \"2021-11-19\",\r\n    \"2021-11-20\",\r\n    \"2021-11-21\",\r\n    \"2021-11-22\",\r\n    \"2021-11-23\",\r\n    \"2021-11-24\",\r\n    \"2021-11-25\",\r\n    \"2021-11-26\",\r\n    \"2021-11-27\",\r\n    \"2021-11-28\",\r\n    \"2021-11-29\",\r\n    \"2021-11-30\",\r\n    \"2021-12-01\",\r\n    \"2021-12-02\",\r\n    \"2021-12-03\",\r\n    \"2021-12-04\",\r\n    \"2021-12-05\",\r\n    \"2021-12-06\",\r\n    \"2021-12-07\",\r\n    \"2021-12-08\",\r\n    \"2021-12-09\",\r\n    \"2021-12-10\",\r\n    \"2021-12-11\",\r\n    \"2021-12-12\",\r\n    \"2021-12-13\",\r\n    \"2021-12-14\",\r\n    \"2021-12-15\",\r\n    \"2021-12-16\",\r\n    \"2021-12-17\",\r\n    \"2021-12-18\",\r\n    \"2021-12-19\",\r\n    \"2021-12-20\",\r\n    \"2021-12-21\",\r\n    \"2021-12-22\",\r\n    \"2021-12-23\",\r\n    \"2021-12-24\",\r\n    \"2021-12-25\",\r\n    \"2021-12-26\",\r\n    \"2021-12-27\",\r\n    \"2021-12-28\",\r\n    \"2021-12-29\",\r\n    \"2021-12-30\",\r\n    \"2021-12-31\",\r\n    \"2022-01-01\",\r\n    \"2022-01-02\",\r\n    \"2022-01-03\",\r\n    \"2022-01-04\",\r\n    \"2022-01-05\",\r\n    \"2022-01-06\",\r\n    \"2022-01-07\",\r\n    \"2022-01-08\",\r\n    \"2022-01-09\",\r\n    \"2022-01-10\",\r\n    \"2022-01-11\",\r\n    \"2022-01-12\",\r\n    \"2022-01-13\",\r\n    \"2022-01-14\",\r\n    \"2022-01-15\",\r\n    \"2022-01-16\",\r\n    \"2022-01-17\",\r\n    \"2022-01-18\",\r\n    \"2022-01-19\",\r\n    \"2022-01-20\",\r\n    \"2022-01-21\",\r\n    \"2022-01-22\",\r\n    \"2022-01-23\",\r\n    \"2022-01-24\",\r\n    \"2022-01-25\",\r\n    \"2022-01-26\",\r\n    \"2022-01-27\",\r\n    \"2022-01-28\",\r\n    \"2022-01-29\",\r\n    \"2022-01-30\",\r\n    \"2022-01-31\",\r\n    \"2022-02-01\",\r\n    \"2022-02-02\",\r\n    \"2022-02-03\",\r\n    \"2022-02-04\",\r\n    \"2022-02-05\",\r\n    \"2022-02-06\",\r\n    \"2022-02-07\",\r\n    \"2022-02-08\",\r\n    \"2022-02-09\",\r\n    \"2022-02-10\",\r\n    \"2022-02-11\",\r\n    \"2022-02-12\",\r\n    \"2022-02-13\",\r\n    \"2022-02-14\",\r\n    \"2022-02-15\",\r\n    \"2022-02-16\",\r\n    \"2022-02-17\",\r\n    \"2022-02-18\",\r\n    \"2022-02-19\",\r\n    \"2022-02-20\",\r\n    \"2022-02-21\",\r\n    \"2022-02-22\",\r\n    \"2022-02-23\",\r\n    \"2022-02-24\",\r\n    \"2022-02-25\",\r\n    \"2022-02-26\",\r\n    \"2022-02-27\",\r\n    \"2022-02-28\",\r\n    \"2022-03-01\",\r\n    \"2022-03-02\",\r\n    \"2022-03-03\",\r\n    \"2022-03-04\",\r\n    \"2022-03-05\",\r\n    \"2022-03-06\",\r\n    \"2022-03-07\",\r\n    \"2022-03-08\",\r\n    \"2022-03-09\",\r\n    \"2022-03-10\",\r\n    \"2022-03-11\",\r\n    \"2022-03-12\",\r\n    \"2022-03-13\",\r\n    \"2022-03-14\",\r\n    \"2022-03-15\",\r\n    \"2022-03-16\",\r\n    \"2022-03-17\",\r\n    \"2022-03-18\",\r\n    \"2022-03-19\",\r\n    \"2022-03-20\",\r\n    \"2022-03-21\",\r\n    \"2022-03-22\",\r\n    \"2022-03-23\",\r\n    \"2022-03-24\",\r\n    \"2022-03-25\",\r\n    \"2022-03-26\",\r\n    \"2022-03-27\",\r\n    \"2022-03-28\",\r\n    \"2022-03-29\",\r\n    \"2022-03-30\",\r\n    \"2022-03-31\",\r\n    \"2022-04-01\",\r\n    \"2022-04-02\",\r\n    \"2022-04-03\",\r\n    \"2022-04-04\",\r\n    \"2022-04-05\",\r\n    \"2022-04-06\",\r\n    \"2022-04-07\",\r\n    \"2022-04-08\",\r\n    \"2022-04-09\",\r\n    \"2022-04-10\",\r\n    \"2022-04-11\",\r\n    \"2022-04-12\",\r\n    \"2022-04-13\",\r\n    \"2022-04-14\",\r\n    \"2022-04-15\",\r\n    \"2022-04-16\",\r\n    \"2022-04-17\",\r\n    \"2022-04-18\",\r\n    \"2022-04-19\",\r\n    \"2022-04-20\",\r\n    \"2022-04-21\",\r\n    \"2022-04-22\",\r\n    \"2022-04-23\",\r\n    \"2022-04-24\",\r\n    \"2022-04-25\",\r\n    \"2022-04-26\",\r\n    \"2022-04-27\",\r\n    \"2022-04-28\",\r\n    \"2022-04-29\",\r\n    \"2022-04-30\",\r\n    \"2022-05-01\",\r\n    \"2022-05-02\",\r\n    \"2022-05-03\",\r\n    \"2022-05-04\",\r\n    \"2022-05-05\",\r\n    \"2022-05-06\",\r\n    \"2022-05-07\",\r\n    \"2022-05-08\",\r\n    \"2022-05-09\",\r\n    \"2022-05-10\",\r\n    \"2022-05-11\",\r\n    \"2022-05-12\",\r\n    \"2022-05-13\",\r\n    \"2022-05-14\",\r\n    \"2022-05-15\",\r\n    \"2022-05-16\",\r\n    \"2022-05-17\",\r\n    \"2022-05-18\",\r\n    \"2022-05-19\",\r\n    \"2022-05-20\",\r\n    \"2022-05-21\",\r\n    \"2022-05-22\",\r\n    \"2022-05-23\",\r\n    \"2022-05-24\",\r\n    \"2022-05-25\",\r\n    \"2022-05-26\",\r\n    \"2022-05-27\",\r\n    \"2022-05-28\",\r\n    \"2022-05-29\",\r\n    \"2022-05-30\",\r\n    \"2022-05-31\",\r\n    \"2022-06-01\",\r\n    \"2022-06-02\",\r\n    \"2022-06-03\",\r\n    \"2022-06-04\",\r\n    \"2022-06-05\",\r\n    \"2022-06-06\",\r\n    \"2022-06-07\",\r\n    \"2022-06-08\",\r\n    \"2022-06-09\",\r\n    \"2022-06-10\",\r\n    \"2022-06-11\",\r\n    \"2022-06-12\",\r\n    \"2022-06-13\",\r\n    \"2022-06-14\",\r\n    \"2022-06-15\",\r\n    \"2022-06-16\",\r\n    \"2022-06-17\",\r\n    \"2022-06-18\",\r\n    \"2022-06-19\",\r\n    \"2022-06-20\",\r\n    \"2022-06-21\",\r\n    \"2022-06-22\",\r\n    \"2022-06-23\",\r\n    \"2022-06-24\",\r\n    \"2022-06-25\",\r\n    \"2022-06-26\",\r\n    \"2022-06-27\",\r\n    \"2022-06-28\",\r\n    \"2022-06-29\",\r\n    \"2022-06-30\"\r\n]\r\nexport default dateRange;","// Module imports\r\nimport React, { Component } from 'react';\r\nimport { View, Text, ImageBackground, Pressable, ScrollView, ActivityIndicator, Platform } from 'react-native';\r\nimport { Icon } from 'react-native-eva-icons'\r\n\r\n// Component imports\r\nimport UserEntryCards from './subcomponents/UserEntryCards';\r\n\r\n// Local imports\r\nimport dateRange from '../shared/dateRange';\r\nimport styles from '../styles/entrancesStyles';\r\n\r\n// cors-midpoint uri (needed to avoid cors' allow-cross-origin error when fetching in web platforms)\r\nconst corsURI = Platform.OS == 'web' ? 'https://morning-journey-78874.herokuapp.com/' : ''\r\nconst appServerURI = 'https://mood-tracker-server.herokuapp.com/'\r\n\r\n// Defining pertinent constants\r\nconst monthDict = {'Jan': '01', 'Feb': '02', 'Mar': '03', 'Apr': '04', 'May': '05', 'Jun': '06', 'Jul': '07', 'Ago': '08', 'Sep': '09', 'Oct': '10', 'Nov': '11', 'Dec': '12'}\r\nconst englishMonthSigs = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dec']\r\nconst portugueseMonthSigs = ['Jan', 'Fev', 'Mar', 'Abr', 'Mai', 'Jun', 'Jul', 'Ago', 'Set', 'Out', 'Nov', 'Dez']\r\nconst englishWeekDayMap = {'Mon': 'Seg', 'Tue': 'Ter', 'Wed': 'Qua', 'Thu': 'Qui', 'Fri': 'Sex', 'Sat': 'Sab', 'Sun': 'Dom'}\r\n\r\n// Defining pertinent functions\r\nfunction Today() {\r\n    const now = Date().toString().split(' ')\r\n    const today = [ now[3], monthDict[now[1]], now[2] ].join('-')\r\n    return today\r\n}\r\nfunction getNextDate(date, next='next') {\r\n    const nextDate = dateRange[dateRange.indexOf(date) + (next=='previous' ? -1 : 1)]\r\n    return nextDate\r\n}\r\nfunction getTime() {\r\n    //Wed,Jan,26,2022,15:12:37,GMT-0300,(Horário,Padrão,de,Brasília)\r\n    const now = Date().toString().split(' ')\r\n    const time = now[4]\r\n    return time\r\n}\r\nfunction formatDate(selDate) {\r\n    \r\n    var ymd = selDate.split('-')\r\n    const yesterday = getNextDate(Today(), 'previous')\r\n    const englishWeekDay = new Date(ymd[0], ymd[1], ymd[2]).toString().split(' ')[0]\r\n    const weekDay = englishWeekDayMap[englishWeekDay]\r\n    var prefix = ''\r\n\r\n    if (selDate === Today()) prefix = 'Hoje, '\r\n    else if (selDate === yesterday) prefix = 'Ontem, '\r\n    else prefix = weekDay + ', '\r\n    \r\n    for (var i=0; i<12; i++) {\r\n        if (monthDict[ englishMonthSigs[i] ] == ymd[1]) {\r\n            return prefix + oneDigit(ymd[2]) + '° ' + portugueseMonthSigs[i]\r\n        }\r\n    }\r\n}\r\nfunction oneDigit(stringNumber) {\r\n    if (stringNumber[0] == '0') return stringNumber.slice(1, stringNumber.length)\r\n    else return stringNumber\r\n}\r\n\r\nexport default class EntrancesScreen extends Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            \r\n            user: this.props.route.params.user,\r\n            date: Today(),\r\n            time: getTime(),\r\n            selectedDate: Today(),\r\n            isUserDataSynced: false,\r\n            isUserDataSyncing: false,\r\n            isDeleteEntryLoading: false,\r\n            alertMsg: '',\r\n            locationPermission: null,\r\n        };\r\n        this.onNextButtonPress = this.onNextButtonPress.bind(this);\r\n        this.setAlertMsg = this. setAlertMsg.bind(this);\r\n        this.syncUserData = this.syncUserData.bind(this);\r\n        this.getMainScreenState = this.getMainScreenState.bind(this);\r\n    }\r\n    \r\n    componentDidMount() {\r\n        console.log('\"Entries\" screen component did mount...')\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        console.log('\"EntriesScreen\" component will unmount...')\r\n    }\r\n\r\n    getMainScreenState() {\r\n        return this.state\r\n    }\r\n\r\n    onNextButtonPress(next='next') {\r\n        function setSelectedDate() {\r\n            this.setState({\r\n                selectedEntryId: null,\r\n                selectedDate: getNextDate(this.state.selectedDate, next),\r\n            })\r\n        }\r\n        return setSelectedDate.bind(this);\r\n    }\r\n\r\n    setAlertMsg(msg) {\r\n        this.setState({alertMsg: msg})\r\n        setTimeout( () => this.setState({alertMsg: ''}) , 1000 * 5 )\r\n    }\r\n    \r\n    alertMsg() {\r\n        return(\r\n            <View style={[styles.msgBox, this.state.alertMsg ? {} : {height: 0, backgroundColor: 'transparent', borderColor: 'transparent'} ]}>\r\n                <Text style={styles.msg}>{this.state.alertMsg}</Text>\r\n            </View>\r\n        )\r\n    }\r\n\r\n    DateNavigationButton = ({next, today}) => {\r\n        const buttonColor = next=='next' ? (today ? 'rgba(255,255,255,0.1)' : 'white') : 'white'\r\n        return(\r\n            <Pressable onPress={ this.onNextButtonPress(next) } disabled={ next=='next' & today }>\r\n                <Icon name={ next=='next' ? 'arrow-forward' : 'arrow-back'} width={35} height={35} fill={buttonColor} />\r\n            </Pressable>\r\n        )\r\n    }\r\n\r\n    async syncUserData() {\r\n\r\n        console.log('SYNC ENTRIES STATUS: Started...')\r\n        this.setState({ isUserDataSyncing: true, userDataSynced: false });\r\n    \r\n        try {\r\n\r\n            var UsersResult = await fetch( corsURI + appServerURI + 'Users', { method: 'GET' });\r\n            const usersStatus =  'Status: ' + UsersResult.status + ', ' + UsersResult.statusText\r\n\r\n            if (UsersResult.ok) {\r\n                const users = await UsersResult.json();\r\n                const user = users.filter((user) => user.email === this.state.user.email)[0]\r\n                console.log('fetch GET request for user entries successful.')\r\n                console.log(usersStatus)\r\n\r\n                this.setState({user: user, userDataSynced: true})\r\n                console.log('SYNC ENTRIES STATUS: Successful.')\r\n\r\n            } else {\r\n                console.log( new Error('\"fetch\" GET request for user entries failed. Throwing error...') )\r\n                throw new Error(usersStatus)\r\n            }\r\n    \r\n        } catch (error) {\r\n                console.log('SYNC ENTRIES STATUS: Error captured. Printing error...')\r\n                console.log(error);\r\n                this.setAlertMsg('Não foi possível sincronizar as entradas. Por favor, aguarde..')\r\n\r\n        } finally {\r\n            this.setState({ isUserDataSyncing: false });\r\n            console.log('SYNC ENTRIES STATUS: Finished.')\r\n        }    \r\n    }\r\n\r\n    render() {\r\n        console.log('Rendering \"EntriesScreen\" component...')\r\n\r\n        const today = this.state.selectedDate === Today()\r\n        const navigateParams = {\r\n            user: this.state.user,\r\n            currentEntry: {type: 'new', date: Today(), entry: null},\r\n            syncUserData: this.syncUserData,\r\n            setMainScreenState: this.setState.bind(this),\r\n            getMainScreenState: this.getMainScreenState,\r\n        }\r\n        const isLoading = this.state.isUserDataSyncing | this.state.isDeleteEntryLoading\r\n        return(\r\n            <ImageBackground source={require('../assets/wallpaper.jpg')} style={[styles.mainView]}>\r\n                \r\n                <ScrollView style={styles.scrollView}>\r\n                    <View style={styles.section}>\r\n                        <View style={[styles.cardRow, {justifyContent: 'space-between'}]}>\r\n                            <this.DateNavigationButton icon='arrow-back' next='previous' />\r\n                            <Text style={styles.sectionTitle}> {'Suas entradas  •  ' + formatDate(this.state.selectedDate)} </Text>                                \r\n                            <this.DateNavigationButton icon='arrow-forward' next='next' today={today} />\r\n                        </View>\r\n                        <UserEntryCards\r\n                        parentState={{\r\n                            date: this.state.selectedDate,\r\n                            selectedEntryId: this.state.selectedEntryId,\r\n                            user: this.state.user,\r\n                            isUserDataSynced: this.state.isUserDataSynced,\r\n                            isUserDataSyncing: this.state.isUserDataSyncing,\r\n                            isDeleteEntryLoading: this.state.isDeleteEntryLoading,\r\n                        }}\r\n                        parentProps={{\r\n                            navigation: this.props.navigation\r\n                        }}\r\n                        syncUserData={this.syncUserData}\r\n                        setMainScreenState ={this.setState.bind(this)}\r\n                        getMainScreenState={this.getMainScreenState}\r\n                        setAlertMsg = {this.setAlertMsg}\r\n                        />\r\n                    </View>\r\n                </ScrollView>\r\n\r\n                <Pressable\r\n                onPress={() => {this.props.navigation.navigate( 'PostEntrance', navigateParams )}}\r\n                style={[styles.postButton, {backgroundColor: isLoading ? 'white' : 'black'}]}\r\n                disabled={isLoading}\r\n                >\r\n                { this.state.isUserDataSyncing ? (\r\n                        <ActivityIndicator color='black' size={'large'} />\r\n                ) : (\r\n                    this.state.isDeleteEntryLoading ? (\r\n                        <ActivityIndicator color='red' size={'large'} />\r\n                    ) : (\r\n                        <Icon name='plus-circle' width={72} height={72} fill='white' style={styles.postButtonLabel}/>\r\n                    )\r\n                )}\r\n                </Pressable>\r\n\r\n                {this.alertMsg()}\r\n  \r\n            </ImageBackground>\r\n            )\r\n    }\r\n  }\r\n","import { StatusBar } from 'expo-status-bar';\r\n// import { Platform } from 'react-native';\r\n\r\nconst styles = {\r\n  login: {\r\n    msgBox: {\r\n      position: 'absolute',\r\n      bottom: '10%',\r\n      width: 300,\r\n      paddingHorizontal: 3,\r\n      paddingVertical: 5,\r\n      alignSelf: 'center',\r\n      // width: 350,\r\n      // height: 36,\r\n      justifyContent: 'center',\r\n      backgroundColor: 'rgb(30,30,30)',\r\n      borderWidth: 1,\r\n      borderColor: 'rgb(40,40,40)',\r\n    },\r\n    msg: {\r\n        textAlign: 'center',\r\n        color: 'white',\r\n        // paddingHorizontal: 15,\r\n    },\r\n  },\r\n  mainView: {\r\n    flex: 1,                 \r\n    marginTop: StatusBar.currentHeight,\r\n  },\r\n  entrances: {\r\n    marginTop: StatusBar.currentHeight,\r\n    borderWidth: 0,\r\n    flex:1,\r\n    justifyContent: 'space-between',\r\n    alignItems: 'flex-start',\r\n  },\r\n  scrollView: {\r\n    // paddingHorizontal: Platform.OS != 'web' ? '5%' : '5%',\r\n    width: '100%',\r\n    alignSelf: 'center',\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    paddingBottom: '0%',\r\n    paddingHorizontal: '5%',\r\n    alignSelf: 'stretch',\r\n    borderColor: 'black',\r\n  },\r\n  section: {\r\n    width: 350,\r\n    paddingVertical: '16%',\r\n    borderBottomWidth: 1,\r\n    borderColor: 'rgba(155,155,155,0.3)',\r\n    alignSelf: 'center',\r\n  },\r\n  contentRow: {\r\n    flexDirection: 'column',\r\n    padding: 10,\r\n    marginTop: 22,\r\n    borderWidth: 1,\r\n    borderColor: 'rgba(155,155,155, 0.4)',\r\n    borderRadius: 30,\r\n    backgroundColor: 'rgba(255,255,255, 0.3)',\r\n\r\n  },\r\n  entryTitle: {\r\n    paddingVertical: 3,\r\n    paddingLeft: 4,\r\n    fontSize: 19,\r\n    color: 'white',\r\n  },\r\n  entryIcon: {\r\n    paddingRight: 0,\r\n  },\r\n  postButtonView: {\r\n    height: 60,\r\n    width: 60,\r\n    borderRadius: 30,\r\n    alignSelf: 'center',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    backgroundColor: 'white',\r\n  },\r\n  postButtonLabel: {\r\n    fontSize: 45,\r\n    fontWeight: 'bold',\r\n  },\r\n  moodButtonView: {\r\n    width: 65,\r\n    height: 65,\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    borderWidth: 1,\r\n  },\r\n  moodButton: {\r\n    width: 65,\r\n    height: 65,\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n  date: {\r\n    position: 'relative',\r\n    left: '60%',\r\n    paddingVertical: 8,\r\n    paddingHorizontal: 10,\r\n    fontSize: 15,\r\n    alignSelf: 'center',\r\n    backgroundColor: 'white',\r\n    borderRadius: 20\r\n  },\r\n  jornalText: {\r\n    paddingVertical: 5,\r\n    paddingHorizontal: 12,\r\n    flex: 1,\r\n    textAlignVertical: 'top',\r\n    width: '100%',\r\n    borderRadius: 20,\r\n    color: 'white',\r\n    fontSize: 16,\r\n  },\r\n  saveButton: {\r\n    height: 50,\r\n    width: '100%',\r\n    borderTopLeftRadius: 30,\r\n    borderTopRightRadius: 30,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    backgroundColor: 'white'\r\n  },\r\n  saveButtonLabel: {\r\n    fontWeight:'bold',\r\n    fontSize: 19\r\n  },\r\n  card: {\r\n    marginTop: '5%',\r\n    paddingVertical: 5,\r\n    paddingHorizontal: 10,\r\n    borderRadius: 20,\r\n    backgroundColor: 'rgba(0,0,0,0.2)',\r\n  },\r\n  cardRow: {\r\n      flexDirection: 'row',\r\n      paddingVertical: 5,\r\n      alignItems: 'center',\r\n  },\r\n  moodBadge: {\r\n      backgroundColor: 'green',\r\n      borderRadius: 30,\r\n      paddingVertical: 6,\r\n      width: 130,\r\n      fontSize: 16,\r\n      textAlign: 'center',\r\n  },\r\n  emotionBadge: {\r\n      backgroundColor: 'rgba(1,1,1,0.5)',\r\n      borderRadius: 30,\r\n      paddingVertical: 6,\r\n      paddingHorizontal: 12.5,\r\n      fontSize: 15,\r\n      textAlign: 'center',\r\n      marginVertical: 5,\r\n      marginHorizontal: 5\r\n  },\r\n  entryCardEmotionBadge: {\r\n    backgroundColor: 'aliceblue',\r\n    borderRadius: 30,\r\n    paddingVertical: 7,\r\n    paddingHorizontal: 12.5,\r\n    marginRight: 6,\r\n    fontSize: 15,\r\n    textAlign: 'center',\r\n  },\r\n  datetimeTitle: {\r\n    fontSize: 16,\r\n    marginRight: 3,\r\n  },\r\n  editButtonsView: {\r\n    flexDirection: 'row',\r\n    height: 55,\r\n    paddingVertical: 5,\r\n    alignItems: 'flex-end',\r\n    justifyContent: 'space-between'\r\n  },\r\n  editButton: {\r\n    height: 34,\r\n    width: 102,\r\n    borderWidth: 1,\r\n    borderColor: 'aliceblue',\r\n    borderRadius: 17,\r\n    alignItems: 'center',\r\n    justifyContent: 'center'\r\n  },\r\n  editButtonLabel: {\r\n      fontSize: 15,\r\n      fontWeight: '400',\r\n      color: 'white',\r\n  },\r\n}\r\n\r\nexport default styles;","import React, { Component, useState } from 'react';\r\nimport { View, Text,  Pressable, TextInput, ActivityIndicator, Platform } from 'react-native';\r\nimport { Icon } from 'react-native-eva-icons'\r\nimport VectorIcon from 'react-native-vector-icons/MaterialCommunityIcons';\r\nimport styles from '../../styles/postEntryStyles'\r\n\r\n// cors-midpoint uri (needed to avoid cors' allow-cross-origin error when fetching in web platforms)\r\nconst corsURI = Platform.OS == 'web' ? 'https://morning-journey-78874.herokuapp.com/' : ''\r\nconst appServerURI = 'https://mood-tracker-server.herokuapp.com/'\r\n\r\nfunction capitalize(multipleWordString) {\r\n    var words = multipleWordString.trim().split(' ');\r\n    var CapitalizedWords = [];\r\n    words.forEach(element => {\r\n    CapitalizedWords.push(element[0].toUpperCase() + element.slice(1, element.length));\r\n    });\r\n    return CapitalizedWords.join(' ');\r\n}\r\n\r\nexport default class EditEmotions extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            showEditMenu: false,\r\n            showExpandMenuButton: true,\r\n            mode: 'hidden',\r\n            newEmotionName: '',\r\n            selectedEmotionType: null,\r\n            selectedEmotionEnergy: null,\r\n            initialEmotionLayout: null,\r\n        }\r\n        this.EditEmotionsMenu = this.EditEmotionsMenu.bind(this);\r\n        this.EditEmotionsSection = this.EditEmotionsSection.bind(this);\r\n        this.onSaveEmotionButtonPress = this.onSaveEmotionButtonPress.bind(this);\r\n    }\r\n\r\n    EditEmotionsSection() {\r\n\r\n        const emotionTypes = ['Positiva', 'Negativa']\r\n        const emotionEnergy = ['Calmo(a)', 'Energizado(a)']\r\n        const emotionLayoutMap = {\r\n            'Positiva ou Negativa': 'type',\r\n            'Calmo(a) ou Energizado(a)': 'energy',\r\n            'Grade': 'grid',\r\n            'Espalhado': 'spread'\r\n        }\r\n\r\n        const inputSectionStyle = {marginTop: 0, marginTop: 0   , alignItems: 'center'}\r\n        const textStyle = {color: 'white', fontSize: 16, alignSelf: 'center', marginBottom: 8}\r\n        const inputStyle = {width: '70%', height: 35, borderRadius: 16.5, color: 'white', backgroundColor: 'rgba(0,0,0,0.7)', fontSize: 15, textAlign: 'center' }\r\n        const tagStyle = {width: '45%', height: 28, borderRadius: 13.5,  marginBottom: 7, color: 'white', alignItems: 'center', justifyContent: 'center'}\r\n        const createEmotionViewStyle = {height: 420, marginTop: 10, paddingTop: 10, justifyContent: 'space-evenly', borderTopWidth: 1, borderTopColor: 'rgba(255,255,255,0.2)'}\r\n\r\n        const [isButtonPressed, setIsButtonPressed] = useState({\r\n            'Salvar': false,\r\n            'Voltar': false,\r\n            'Terminar': false,\r\n            'Salvar-Layout': false,\r\n            'Voltar-Layout': false\r\n        })\r\n        function highlightButtonFor(label) {\r\n            function highlightButton() {\r\n                setIsButtonPressed({ ...isButtonPressed, [label]: !isButtonPressed[label] })\r\n            }\r\n            return highlightButton.bind(this);\r\n        }\r\n\r\n        const isLoading = (\r\n            this.props.isDeleteEmotionLoading |\r\n            this.props.isSaveEmotionLoading |\r\n            this.props.isPostEntryLoading |\r\n            this.props.isUserDataSyncing |\r\n            this.props.isUpdateUserDataLoading\r\n        )\r\n\r\n        const isNewEmotionFormComplete = !this.state.newEmotionName | !this.state.selectedEmotionType | !this.state.selectedEmotionEnergy\r\n\r\n        switch (this.state.mode) {\r\n\r\n            case 'hidden':\r\n                return null\r\n\r\n            case 'create':\r\n                return(\r\n                    <View style={createEmotionViewStyle}>\r\n                        <Text style={{color: 'white', fontSize: 22, alignSelf: 'center'}}>Criar emoção</Text>\r\n                        <View style={inputSectionStyle}>\r\n                            <Text style={textStyle}>Nome</Text>\r\n                            <TextInput\r\n                            placeholder='Nome da emoção...'\r\n                            placeholderTextColor={'rgba(255,255,255,0.4)'}\r\n                            style={inputStyle}\r\n                            onChangeText={text => this.setState({newEmotionName: text})}\r\n                            value={this.state.newEmotionName}\r\n                            />\r\n                        </View>\r\n                        <View style={inputSectionStyle}>\r\n                            <Text style={textStyle}>Tipo</Text>\r\n                            { emotionTypes.map((type) => {\r\n                                const typeSelected = this.state.selectedEmotionType === type\r\n                                return(\r\n                                    <Pressable\r\n                                    key={'emotion-'+type}\r\n                                    onPress={() => this.setState({selectedEmotionType: typeSelected ? null : type })}\r\n                                    style={[tagStyle, {backgroundColor: typeSelected ? 'rgba(0,0,0,0.8)' : 'rgba(0,0,0,0.3)'}]}>\r\n                                        <Text style={[{fontSize: 15, color: 'white'}]}>{type}</Text>\r\n                                    </Pressable>\r\n                                )\r\n                            }) }\r\n                        </View>\r\n                        <View style={inputSectionStyle}>\r\n                            <Text style={textStyle}>Energia</Text>\r\n                            { emotionEnergy.map((type) => {\r\n                                const typeSelected = this.state.selectedEmotionEnergy === type\r\n                                return(\r\n                                    <Pressable\r\n                                    key={'emotion-'+type}\r\n                                    onPress={() => this.setState({selectedEmotionEnergy: typeSelected ? null : type })}\r\n                                    style={[tagStyle, {backgroundColor: typeSelected ? 'rgba(0,0,0,0.8)' : 'rgba(0,0,0,0.3)'}]}>\r\n                                        <Text style={[{fontSize: 15, color: 'white'}]}>{type}</Text>\r\n                                    </Pressable>\r\n                                )\r\n                            }) }\r\n                        </View>\r\n                        <View style={[inputSectionStyle, {flexDirection: 'row', justifyContent: 'space-evenly'}]}>\r\n                            <Pressable\r\n                            onPress={() => {\r\n                                highlightButtonFor('Salvar')()\r\n                                this.onSaveEmotionButtonPress()\r\n                                setIsButtonPressed({'Salvar': false})\r\n                            }}\r\n                            onPressIn={highlightButtonFor('Salvar')}\r\n                            disabled={isLoading | isNewEmotionFormComplete}\r\n                            style={[styles.editButton, {\r\n                                alignSelf: 'center',\r\n                                backgroundColor: isButtonPressed['Salvar'] ? '#fff5' : '#fff0',\r\n                                borderColor: isLoading | isNewEmotionFormComplete ? '#fff5' : '#ffff',\r\n                                }]}>\r\n                                <Text style={[styles.editButtonLabel, {color: isLoading | isNewEmotionFormComplete ? '#fff5' : '#ffff'}]}>Salvar</Text>\r\n                            </Pressable>\r\n                            <Pressable\r\n                            onPress={() => {\r\n                                highlightButtonFor('Voltar')()\r\n                                this.setState({showEditMenu: true, showExpandMenuButton: true, mode: 'hidden'})\r\n                                setIsButtonPressed({'Voltar': false})\r\n                            }}\r\n                            onPressIn={highlightButtonFor('Voltar')}\r\n                            disabled={isLoading}\r\n                            style={[styles.editButton, {\r\n                                alignSelf: 'center',\r\n                                borderColor: isLoading ? '#fff5' : '#ffff',\r\n                                backgroundColor: isButtonPressed['Voltar'] ? '#fff5' : '#fff0'\r\n                                }]}>\r\n                                <Text style={[styles.editButtonLabel, {color: isLoading ? '#fff5' : '#ffff'}]}>Voltar</Text>\r\n                            </Pressable>\r\n                        </View>\r\n                    </View>\r\n                )\r\n\r\n            case 'delete':\r\n                return(\r\n                    <View style={[createEmotionViewStyle, {height: 180}]}>\r\n                        <Text style={{color: 'white', fontSize: 22, alignSelf: 'center'}}>Excluir emoções</Text>\r\n                        <Text style={{color: 'white', fontSize: 16, textAlign: 'center'}}>Pressione e segure para excluir uma emoção.</Text>\r\n                        <View style={[styles.cardRow, {justifyContent: 'space-evenly'}]}>\r\n                            <Pressable\r\n                            onPress={() => {\r\n                                highlightButtonFor('Terminar')();\r\n                                this.props.setParentState({deleteEmotionMode: false});\r\n                                this.setState({showEditMenu: true, showExpandMenuButton: true, mode: 'hidden'});\r\n                                setIsButtonPressed({'Terminar': false})\r\n                            }}\r\n                            onPressIn={highlightButtonFor('Terminar')}\r\n                            disabled={isLoading}\r\n                            style={[styles.editButton, {\r\n                                alignSelf: 'center',\r\n                                borderColor: isLoading ? '#fff5' : '#ffff',\r\n                                backgroundColor: isButtonPressed['Terminar'] ? '#fff5' : '#fff0'\r\n                            }]}\r\n                            >\r\n                                <Text style={[styles.editButtonLabel, {color: isLoading ? '#fff5' : '#ffff'}]}>Terminar</Text>\r\n                            </Pressable>\r\n                        </View>\r\n                    </View>\r\n                )\r\n\r\n            case 'layout':\r\n                return(\r\n                    <View style={[createEmotionViewStyle, {height: 320}]}>\r\n                        <View style={inputSectionStyle}>\r\n                            <Text style={{color: 'white', fontSize: 22, alignSelf: 'center', paddingBottom: 25}}>Escolha o layout</Text>\r\n                            { ['Positiva ou Negativa', 'Calmo(a) ou Energizado(a)', 'Grade', 'Espalhado'].map((layout) => {\r\n                                const isLayoutSelected = this.props.selectedEmotionLayout === emotionLayoutMap[layout]\r\n                                return(\r\n                                    <Pressable\r\n                                    key={'emotion-'+layout}\r\n                                    onPress={() => this.props.setParentState({selectedEmotionLayout: emotionLayoutMap[layout] })}\r\n                                    style={[tagStyle, {width: 230, height: 30, borderRadius: 15, marginBottom: 10, backgroundColor: isLayoutSelected ? 'rgba(0,0,0,0.8)' : 'rgba(0,0,0,0.3)'}]}>\r\n                                        <Text style={[{fontSize: 15, color: 'white'}]}>{layout}</Text>\r\n                                    </Pressable>\r\n                                )\r\n                            }) }\r\n                        </View>\r\n                        <View style={[inputSectionStyle, {flexDirection: 'row', justifyContent: 'space-evenly'}]}>\r\n                            <Pressable\r\n                            onPress={() => {\r\n                                highlightButtonFor('Salvar-Layout')()\r\n                                this.onSaveEmotionLayoutButtonPress()\r\n                                setIsButtonPressed({'Salvar-Layout': false})\r\n                            }}\r\n                            onPressIn={highlightButtonFor('Salvar-Layout')}\r\n                            disabled={ isLoading }\r\n                            style={[styles.editButton, {\r\n                                alignSelf: 'center',\r\n                                backgroundColor: isButtonPressed['Salvar-Layout'] ? '#fff5' : '#fff0',\r\n                                borderColor: isLoading ? '#fff5' : '#ffff',\r\n                                }]}>\r\n                                <Text style={[styles.editButtonLabel, {color: isLoading ? '#fff5' : '#ffff'}]}>Salvar</Text>\r\n                            </Pressable>\r\n                            <Pressable\r\n                            onPress={() => {\r\n                                highlightButtonFor('Voltar-Layout')()\r\n                                this.props.setParentState({selectedEmotionLayout: this.state.initialEmotionLayout})\r\n                                this.setState({showEditMenu: true, showExpandMenuButton: true, mode: 'hidden', initialEmotionLayout: null})\r\n                                setIsButtonPressed({'Voltar-Layout': false})\r\n                            }}\r\n                            onPressIn={highlightButtonFor('Voltar-Layout')}\r\n                            disabled={isLoading}\r\n                            style={[styles.editButton, {\r\n                                alignSelf: 'center',\r\n                                borderColor: isLoading ? '#fff5' : '#ffff',\r\n                                backgroundColor: isButtonPressed['Voltar-Layout'] ? '#fff5' : '#fff0'\r\n                                }]}>\r\n                                <Text style={[styles.editButtonLabel, {color: isLoading ? '#fff5' : '#ffff'}]}>Voltar</Text>\r\n                            </Pressable>\r\n                        </View>\r\n                    </View>\r\n                )\r\n\r\n            default:\r\n                return null\r\n\r\n        }\r\n\r\n    }\r\n\r\n    EditEmotionsMenu() {\r\n\r\n        const buttonLabels = ['Criar', 'Excluir', 'Layout']\r\n        const onButtonPress = { \r\n            'Criar': () => this.setState({showEditMenu: false, showExpandMenuButton: false, mode: 'create'}),\r\n            'Excluir': () => {\r\n                this.props.setParentState({deleteEmotionMode: !this.props.deleteEmotionMode})\r\n                this.setState({showEditMenu: false , showExpandMenuButton: false, mode: 'delete'})\r\n            },\r\n            'Layout': () => this.setState({showEditMenu: false, showExpandMenuButton: false, mode: 'layout', initialEmotionLayout: this.props.selectedEmotionLayout})\r\n        }\r\n        const [isButtonPressed, setIsButtonPressed] = useState({\r\n            'Criar': false,\r\n            'Excluir': false,\r\n            'Layout': false,\r\n        })\r\n        function highlightButtonFor(label) {\r\n            function highlightButton() {\r\n                setIsButtonPressed({ ...isButtonPressed, [label]: !isButtonPressed[label] })\r\n            }\r\n            return highlightButton.bind(this);\r\n        }\r\n\r\n        const showEditMenu =  this.state.showEditMenu\r\n        const showExpandMenuButton = this.state.showExpandMenuButton\r\n        const hidden = this.state.mode == 'hidden'\r\n        const anyOpen = showEditMenu || !hidden\r\n\r\n        const isLoading = (\r\n            this.props.isPostEntryLoading |\r\n            this.props.isUserDataSyncing |\r\n            this.props.isUpdateUserDataLoading |\r\n            this.props.isDeleteEmotionLoading |\r\n            this.props.isSaveEmotionLoading\r\n        )\r\n\r\n        return(\r\n            <>\r\n                { showExpandMenuButton ? (\r\n                    <View style={[styles.cardRow, {height: 50, marginTop: 10, paddingTop: 10, justifyContent: showEditMenu ? 'space-between' : 'center', borderTopWidth: 1, borderTopColor: 'rgba(255,255,255,0.2)'}]}>\r\n                        { showEditMenu ? ( \r\n                            buttonLabels.map((label) => (\r\n                                <Pressable\r\n                                key={`emotion-${label}`}\r\n                                style={[styles.editButton,  {\r\n                                    backgroundColor: isButtonPressed[label] ? '#fff5' : '#0000',\r\n                                    borderColor: isLoading ? '#fff5' : '#ffff',\r\n                                    width: 75\r\n                                }]}\r\n                                disabled={ isLoading }\r\n                                onPress={() => {\r\n                                    highlightButtonFor(label)(); onButtonPress[label]()\r\n                                    setIsButtonPressed({ [label]: false })\r\n                                } }\r\n                                onPressIn={highlightButtonFor(label)}\r\n                                >\r\n                                    <Text style={[styles.editButtonLabel, {color: isLoading ? '#fff5' : '#ffff'}]}>{label}</Text>                    \r\n                                </Pressable>\r\n                            ))\r\n                        ) : null }\r\n                        <Pressable\r\n                        onPress={() => this.setState({ showEditMenu:  !showEditMenu })}\r\n                        // disabled={isLoading}\r\n                        style={{flexDirection: 'row', alignItems: 'center', justifyContent: 'center', paddingVertical: 5, width: 75}}>\r\n                            <Icon name={ !showEditMenu ? 'more-horizontal-outline' : 'arrow-back-outline' } fill='white' width={20} height={20} />\r\n                            <Text style={{color: 'white', fontSize: 15, marginLeft: 0}}> {anyOpen ? 'menos' : 'mais'}</Text>\r\n                        </Pressable>\r\n                    </View> \r\n                ) :  null  }\r\n            </>\r\n\r\n        )\r\n    }\r\n\r\n    async onSaveEmotionButtonPress() {\r\n\r\n        const newEmotionAlreadyExists = Object.keys(this.props.isSelectedEmotions).includes(capitalize(this.state.newEmotionName))\r\n        if (newEmotionAlreadyExists) {\r\n            this.props.setAlertMsg('Essa emoção já foi criada, escolha outro nome para continuar.')\r\n            return\r\n        }\r\n\r\n        try {\r\n            this.props.setParentState({ isSaveEmotionLoading: true });\r\n            var user = this.props.route.params.user;\r\n            const newEmotion = {\r\n                name: capitalize(this.state.newEmotionName),\r\n                type: this.state.selectedEmotionType,\r\n                energy: this.state.selectedEmotionEnergy,\r\n            }\r\n\r\n            console.log('POST EMOTION STATUS: Started...')\r\n            var postEmotionResult = {ok: false, status: '999', statusText: 'Post not fetched yet.'}\r\n            const postUserEntryOpts = { \r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify( newEmotion ),\r\n            }\r\n            // var postUserEntryResult = await fetch('http://localhost:3000/Users/' + info.username + '/emotions', postUserEntryOpts);\r\n            postEmotionResult = await fetch( corsURI + appServerURI + 'Users/' + user.username + '/emotions', postUserEntryOpts);\r\n            const postEmotionStatus = 'Status: ' + postEmotionResult.status + ', ' + postEmotionResult.statusText\r\n\r\n            if (postEmotionResult.ok) {\r\n                console.log('POST EMOTION STATUS: Successful.')\r\n                console.log(postEmotionStatus)\r\n                this.setState({\r\n                    showEditMenu: true,\r\n                    showExpandMenuButton: true,\r\n                    mode: 'hidden',\r\n                    newEmotionName: '',\r\n                    selectedEmotionType: null,\r\n                    selectedEmotionEnergy: null,        \r\n                })\r\n                    \r\n            } else {\r\n                console.log('POST EMOTION STATUS: Failed. Throwing error...')\r\n                throw new Error(postEmotionStatus)\r\n            }\r\n\r\n        } catch (error) {\r\n            this.props.setAlertMsg('Erro no servidor. Tente novamente...')\r\n            console.log('Erro capturado:')\r\n            console.log(error);\r\n\r\n        } finally {\r\n            console.log('POST EMOTION STATUS: Finished.')\r\n            this.props.setParentState({ isSaveEmotionLoading: false });\r\n            if (postEmotionResult.ok) {\r\n                this.props.setParentState({ isUserDataSyncing: true });\r\n                await this.props.route.params.syncUserData();\r\n                this.props.setParentState({ isUserDataSyncing: false, isUpdateUserDataLoading: true });\r\n                this.props.updateUserData();\r\n                this.props.setParentState({ isUpdateUserDataLoading: false });\r\n            }\r\n        } \r\n    }\r\n    \r\n    async onSaveEmotionLayoutButtonPress() {\r\n\r\n        try {\r\n            this.props.setParentState({ isSaveEmotionLayoutLoading: true });\r\n            var user = this.props.route.params.user;\r\n            \r\n            console.log('POST EMOTION LAYOUT STATUS: Started...')\r\n            var postEmotionLayoutResult = {ok: false, status: '999', statusText: 'Post not fetched yet.'}\r\n            const postEmotionLayoutOpts = { \r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify( {layout: this.props.selectedEmotionLayout} ),\r\n            }\r\n            postEmotionLayoutResult = await fetch( corsURI + appServerURI + 'Users/' + user.username + '/layout', postEmotionLayoutOpts);\r\n            // var postUserEntryResult = await fetch('http://localhost:3000/Users/' + info.username + '/emotions', postEmotionLayoutOpts);\r\n            const postEmotionLayoutStatus = 'Status: ' + postEmotionLayoutResult.status + ', ' + postEmotionLayoutResult.statusText\r\n\r\n            if (postEmotionLayoutResult.ok) {\r\n                console.log('POST EMOTION LAYOUT STATUS: Successful.')\r\n                console.log(postEmotionLayoutStatus)\r\n                this.setState({\r\n                    showEditMenu: true,\r\n                    showExpandMenuButton: true,\r\n                    mode: 'hidden',\r\n                    initialEmotionLayout: null,\r\n                })\r\n                    \r\n            } else {\r\n                console.log('POST EMOTION LAYOUT STATUS: Failed. Throwing error...')\r\n                throw new Error(postEmotionLayoutStatus)\r\n            }\r\n\r\n        } catch (error) {\r\n            this.props.setAlertMsg('Erro no servidor. Tente novamente...')\r\n            console.log('Erro capturado:')\r\n            console.log(error);\r\n\r\n        } finally {\r\n            console.log('POST EMOTION LAYOUT STATUS: Finished.')\r\n            this.props.setParentState({ isSaveEmotionLayoutLoading: false });\r\n            if (postEmotionLayoutResult.ok) {\r\n                this.props.setParentState({ isUserDataSyncing: true });\r\n                await this.props.route.params.syncUserData();\r\n                this.props.setParentState({ isUserDataSyncing: false, isUpdateUserDataLoading: true });\r\n                this.props.updateUserData();\r\n                this.props.setParentState({ isUpdateUserDataLoading: false });\r\n            }\r\n        } \r\n    }\r\n\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                <this.EditEmotionsSection />\r\n                <this.EditEmotionsMenu />\r\n            </>\r\n        )\r\n    }\r\n\r\n}","const GoogleMapsAPI = {\r\n    GoogleMapsJavascriptAPIkey: \"AIzaSyBVWbOwPAMRyz2bS6rYHrDftVeihQ8WMCo\",\r\n    GoogleMapsGeocodingAPIKey: \"AIzaSyB6O-DpvulBC0rom1mGy-mBcstIbPlDPHA\",\r\n}\r\n\r\nexport default GoogleMapsAPI","const OpenWeatherMapAPI = {\r\n    KEY: \"de9e6896f84109d7920528172207411a\",\r\n}\r\nexport default OpenWeatherMapAPI\r\n","import React, { Component } from 'react';\r\nimport { View, Text, ImageBackground, Pressable, ScrollView, Platform, TextInput, ActivityIndicator } from 'react-native';\r\n\r\nimport { Icon } from 'react-native-eva-icons'\r\nimport VectorIcon from 'react-native-vector-icons/MaterialCommunityIcons';\r\nimport EditEmotions from './subcomponents/EditEmotions'\r\nimport styles from '../styles/postEntryStyles'\r\n\r\n// Geocoding and weather dependencies and APIs\r\nimport * as Location from 'expo-location';\r\nimport GoogleMapsAPI from './subcomponents/GoogleMapsAPI'\r\nLocation.setGoogleApiKey(GoogleMapsAPI.GoogleMapsGeocodingAPIKey)\r\nimport OpenWeatherMapAPI from './subcomponents/OpenWeatherMapAPI';\r\n\r\n// cors-midpoint uri (needed to avoid cors' allow-cross-origin error when fetching in web platforms)\r\nconst corsURI = Platform.OS == 'web' ? 'https://morning-journey-78874.herokuapp.com/' : ''\r\nconst appServerURI = 'https://mood-tracker-server.herokuapp.com/'\r\n\r\n// Date() => wed jan 91 2022 07:46:57 ...\r\nconst now = new Date().toString().split(' ')\r\nconst datetime = now[2] + ' ' + now[1] + ' ' + now[3] + ' - ' + now[4].slice(0, 5)\r\n\r\n// Mood configs\r\nconst moods = ['Horrível', 'Mal', 'Regular', 'Bem', 'Ótimo']\r\nconst moodColorsHEX = ['#ff3333', '#0099cc', '#add8e6', '#ffff33', '#00cc00']\r\nconst moodColorsRGBA = ['rgba(255, 51, 51, 1)', 'rgba(0, 153, 204, 1)', 'rgba(173, 216, 230, 1)', 'rgba(255, 255, 51, 1)', 'rgba(0, 204, 0, 1)']\r\nconst moodColorsTransp = (alpha) => [`rgba(255, 51, 51, ${alpha})`, `rgba(0, 153, 204, ${alpha})`, `rgba(173, 216, 230, ${alpha})`, `rgba(255, 255, 51, ${alpha})`, `rgba(0, 204, 0, ${alpha})`]\r\nconst moodIcons = ['emoticon-dead', 'emoticon-sad', 'emoticon-neutral', 'emoticon-happy', 'emoticon-excited']\r\n\r\n// Emotion configs\r\nconst emotionGroupsNames = [ 'Bem & Calmo(a)', 'Bem & Energizado(a)', 'Mal & Calmo(a)', 'Mal & Energizado(a)' ]\r\nconst emotionTypes = ['Positiva', 'Negativa']\r\nconst emotionEnergy = ['Calmo(a)', 'Energizado(a)']\r\n\r\nfunction buildIsSelectedEmotions(emotions) {\r\n    var isSelectedEmotions = {}\r\n    for ( let emotion of emotions) {\r\n        isSelectedEmotions[emotion.name] = false\r\n    }\r\n    return isSelectedEmotions\r\n}\r\n\r\n// Date config\r\nconst monthSigs = ['Jan', 'Feb', 'Mar', 'Apr', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dec']\r\nconst months = ['01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12']\r\n\r\nconst monthNameMap = {\r\n    '01': 'Janeiro',\r\n    '02': 'Fevereiro',\r\n    '03': 'Março',\r\n    '04': 'Abril',\r\n    '05': 'Maio',\r\n    '06': 'Junho',\r\n    '07': 'Julho',\r\n    '08': 'Agosto',\r\n    '09': 'Setembro',\r\n    '10': 'Outubro',\r\n    '11': 'Novembro',\r\n    '12': 'Dezembro',\r\n}\r\n\r\n// Functions\r\n\r\nfunction convertMonthSig(monthSig) {\r\n    const thisMonth = months[monthSigs.indexOf(monthSig)]\r\n    return thisMonth\r\n}\r\n\r\nfunction Today() {\r\n    const now = Date().toString().split(' ')\r\n    const today = [ now[3], convertMonthSig(now[1]), now[2] ].join('-')\r\n    return today\r\n}\r\n\r\nfunction getTime() {\r\n    //Wed,Jan,26,2022,15:12:37,GMT-0300,(Horário,Padrão,de,Brasília)\r\n    const now = Date().toString().split(' ')\r\n    const time = now[4]\r\n    return time\r\n}\r\n\r\nfunction oneDigit(stringNumber) {\r\n    if (stringNumber[0] == '0') return stringNumber.slice(1, stringNumber.length)\r\n    else return stringNumber\r\n}\r\n\r\nfunction formatPostEntryDatetimeTitle(date, time) {\r\n    const ymd = date.split('-')\r\n    const m = monthNameMap[ ymd[1] ]\r\n    return oneDigit( ymd[2] ) + ' ' + m + ' ' + ymd[0] + (time ? ' - ' : '') + time.slice(0,5)\r\n}\r\n\r\nfunction formattedAddress(addressObj) {\r\n    return addressObj.street + ', ' + addressObj.streetNumber + ' - ' + addressObj.district + ', ' + addressObj.subregion + '. ' + addressObj.region + ', ' + addressObj.isoCountryCode + '.'\r\n}\r\n\r\nfunction mapEmotions(emotions, layout='grid') {\r\n    var userEmotionGroups = layout=='grid' ? [[],[],[],[]] : ( layout=='spread' ? [[]] : [[],[]] )\r\n    var emotionLabels = layout=='grid' ? emotionGroupsNames : ( layout=='type' ? emotionTypes : (layout=='spread' ? [''] : emotionEnergy ) )\r\n    for (let emotion of emotions) {\r\n        if (layout=='grid') {\r\n            if (emotion.type=='Positiva') {\r\n                if (emotion.energy=='Calmo(a)')\r\n                    userEmotionGroups[0] = [ ...userEmotionGroups[0], emotion]\r\n                else if (emotion.energy=='Energizado(a)')\r\n                    userEmotionGroups[1] = [ ...userEmotionGroups[1], emotion]\r\n            } else if (emotion.type=='Negativa') {\r\n                if (emotion.energy=='Calmo(a)')\r\n                    userEmotionGroups[2] = [ ...userEmotionGroups[2], emotion]\r\n                else if (emotion.energy=='Energizado(a)')\r\n                    userEmotionGroups[3] = [ ...userEmotionGroups[3], emotion]\r\n            }\r\n        } else if (layout=='type') {\r\n            if (emotion.type=='Positiva')\r\n                userEmotionGroups[0] = [ ...userEmotionGroups[0], emotion]\r\n            else if (emotion.type=='Negativa')\r\n                userEmotionGroups[1] = [ ...userEmotionGroups[1], emotion]\r\n        } else if (layout=='energy') {\r\n            if (emotion.energy=='Calmo(a)')\r\n                userEmotionGroups[0] = [ ...userEmotionGroups[0], emotion]\r\n            else if (emotion.energy=='Energizado(a)')\r\n                userEmotionGroups[1] = [ ...userEmotionGroups[1], emotion]\r\n        } else if (layout=='spread') {\r\n            userEmotionGroups[0] = [ ...userEmotionGroups[0], emotion]\r\n        }\r\n    }\r\n    return [userEmotionGroups, emotionLabels]\r\n}\r\n\r\nfunction sortObjListByKey(objList, objKey) {\r\n    const keys = objList.map(obj => obj[objKey])\r\n    const sortedKeys = [...keys].sort()\r\n    var newObjList = []\r\n    sortedKeys.forEach(key => {\r\n        newObjList.push( objList[keys.indexOf(key)] )\r\n    })\r\n    return newObjList\r\n}\r\n\r\nexport default class PostEntranceScreen extends Component {\r\n  \r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            user: this.props.route.params.user,\r\n\r\n            date: '',\r\n            startTime: '',\r\n            endTime: '',\r\n            createdAt: '',\r\n            lastEdited: [],\r\n\r\n            star: false,\r\n            selectedMood: '',\r\n            emotions: [],\r\n            jornalEntry: '',    \r\n            address: '',\r\n            location: null,\r\n            weather: null,\r\n\r\n            selectedEntry: 'Avaliação',\r\n            isMoodUnmarked: true,\r\n            isSelectedEmotions: buildIsSelectedEmotions(this.props.route.params.user.emotions),\r\n            selectedEmotionLayout: this.props.route.params.user.layout,\r\n            isFetchingLocationOrWeather: false,\r\n            isPostEntryLoading: false,\r\n            isDeleteEmotionLoading: false,\r\n            isSaveEmotionLoading: false,\r\n            deleteEmotionMode: false,\r\n            isUpdateUserDataLoading: false,\r\n            isUserDataSyncing:  false,\r\n\r\n            userCoordinates: null,\r\n            loginMsg: '',\r\n        };\r\n\r\n        this.initializeEntry = this.initializeEntry.bind(this);\r\n        this.onSaveButtonPress = this.onSaveButtonPress.bind(this);\r\n        this.saveButton = this.saveButton.bind(this);\r\n        this.setLoginMsg = this.setLoginMsg.bind(this);\r\n        this.EmotionButtons = this.EmotionButtons.bind(this);\r\n        this.MoodButtons = this.MoodButtons.bind(this);\r\n        this.postEntryHeader = this.postEntryHeader.bind(this);\r\n        this.onEmotionButtonPress = this.onEmotionButtonPress.bind(this);\r\n        this.onMoodButtonPress = this.onMoodButtonPress.bind(this);\r\n        this.inputCardBody = this.inputCardBody.bind(this);\r\n        this.setSelectedEntry = this.setSelectedEntry.bind(this);\r\n        this.InputCard = this.InputCard.bind(this);\r\n        this.JornalInput = this.JornalInput.bind(this);\r\n        this.postNewEntryAsync = this.postNewEntryAsync.bind(this);\r\n        this.updateUserData = this.updateUserData.bind(this);\r\n        this.deleteEmotion = this.deleteEmotion.bind(this);\r\n        this.onEmotionButtonLongPress = this.onEmotionButtonLongPress.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log('\"PostEntry\" component did mount.')\r\n        this.initializeEntry()\r\n    }\r\n\r\n    postEntryHeader() {\r\n        return(\r\n            <View style={[styles.cardRow, {justifyContent: 'space-between'}]}>\r\n                <Pressable onPress={() => {this.props.navigation.goBack()}}  style={styles.postButton}>\r\n                    <Icon name='arrow-back' fill='white' height={30} width={30}/>\r\n                </Pressable>\r\n                <View style={[styles.entryCardEmotionBadge, {flexDirection: 'row', alignItems: 'center'}]}>\r\n                    <Text style={styles.datetimeTitle}> { formatPostEntryDatetimeTitle(this.props.route.params.currentEntry.date, this.state.startTime) } </Text>\r\n                    <Icon name='edit' fill='rgba(75,75,75,1)' height={20} width={20}/>\r\n                </View>\r\n                <Pressable onPress={() => {this.setState({star: !this.state.star})}}  style={styles.postButton}>\r\n                    <Icon name={this.state.star ? 'star' : 'star-outline'} fill='rgba(245,245,245,0.7)' height={30} width={30}/>\r\n                </Pressable>\r\n            </View>\r\n        )\r\n    }\r\n\r\n    MoodButtons() {\r\n        return moods.map((item, index) => {\r\n            const selected = this.state.selectedMood == item\r\n            const isMoodUnmarked = this.state.isMoodUnmarked\r\n            const selColor = moodColorsRGBA[index]\r\n            return(\r\n                <View key={'mood '+index} style={styles.moodButton}>\r\n                    <VectorIcon\r\n                    name={moodIcons[index]}\r\n                    size={isMoodUnmarked ? 52 : (selected ? 57 : 50) }\r\n                    color={ isMoodUnmarked ? selColor : (selected ? selColor : moodColorsTransp(0.5)[index]) }\r\n                    onPress={this.onMoodButtonPress(item)}\r\n                    />\r\n                </View>\r\n            )\r\n        })\r\n    }\r\n\r\n    onMoodButtonPress(item) {\r\n        function selectMood() {\r\n            if (this.state.selectedMood==item) {\r\n                this.setState({selectedMood: null, isMoodUnmarked: true})\r\n            } else {\r\n                this.setState({selectedMood: item, isMoodUnmarked: false})\r\n            }\r\n        }\r\n        selectMood = selectMood.bind(this);\r\n        return selectMood\r\n    }\r\n\r\n    EmotionButtons(emotions) {\r\n        return(\r\n            sortObjListByKey(emotions, 'name').map( emotion => (\r\n                <Pressable\r\n                key={'emotion-' + emotion.name}\r\n                title={emotion.name}\r\n                onPress={this.onEmotionButtonPress(emotion.name)}\r\n                onLongPress={this.onEmotionButtonLongPress(emotion.name)}\r\n                suppressHighlighting={true}\r\n                selectable={false}\r\n                >\r\n                    <Text onLongPress={null} style={[styles.emotionBadge, {backgroundColor: this.state.isSelectedEmotions[emotion.name] ? 'lightblue' : 'aliceblue' }]}>{emotion.name}</Text>\r\n                </Pressable>\r\n            ))\r\n        )\r\n    }\r\n\r\n    onEmotionButtonPress(emotion) {\r\n        function selectEmotion () {\r\n            this.setState({\r\n                isSelectedEmotions: {\r\n                    ...this.state.isSelectedEmotions,\r\n                    [emotion]: !this.state.isSelectedEmotions[emotion]\r\n                }\r\n            })    \r\n        }\r\n        selectEmotion = selectEmotion.bind(this);\r\n        return selectEmotion\r\n    }\r\n\r\n    onEmotionButtonLongPress(emotion) { \r\n        function selectEmotion () {\r\n            if (this.state.deleteEmotionMode) {\r\n                this.deleteEmotion(emotion)\r\n            }\r\n        }\r\n        selectEmotion = selectEmotion.bind(this);\r\n        return selectEmotion\r\n    }\r\n\r\n    JornalInput() {\r\n        return(\r\n            <TextInput\r\n            multiline\r\n            scrollEnabled\r\n            placeholder='Escreva aqui...'\r\n            placeholderTextColor='rgba(255,255,255,0.6)'\r\n            onChangeText={text => this.setState({jornalEntry: text})}\r\n            value={this.state.jornalEntry}\r\n            style={styles.jornalText}\r\n            >\r\n            </TextInput>\r\n        )\r\n    }\r\n\r\n    inputCardBody(sectionName, cardBodyStyle, cardBodyContent) {\r\n        if (this.state.selectedEntry === sectionName) {\r\n            if (sectionName == 'Emoções') {\r\n                const [userEmotionGroups, emotionLabels] = mapEmotions(this.state.user.emotions, this.state.selectedEmotionLayout)\r\n                return(\r\n                    <>\r\n                        { userEmotionGroups.map((emotions, index) => (\r\n                            <View key={'emotion-group-' + index} style={{width: '100%', alignItems: 'center', marginVertical: 10}}>\r\n                                { emotionLabels[index] ? <Text style={{fontSize: 15, color: 'white', marginVertical: 8}}>{emotionLabels[index]}</Text> : null }\r\n                                <View key={index} style={[styles.cardRow, cardBodyStyle]}>\r\n                                    {cardBodyContent(emotions)}\r\n                                </View>\r\n                            </View>\r\n                        )) }\r\n                        <EditEmotions\r\n                        {...this.props}\r\n                        {...this.state}\r\n                        setParentState={this.setState.bind(this)}\r\n                        updateUserData={this.updateUserData}\r\n                        setAlertMsg={this.setLoginMsg}\r\n                        />\r\n                    </>\r\n\r\n                )\r\n            } else {\r\n                return(\r\n                    <View style={[styles.cardRow, cardBodyStyle]}>\r\n                        {cardBodyContent}\r\n                    </View>\r\n                )    \r\n            }\r\n        } else {\r\n            return(\r\n                <></>\r\n            )\r\n        }\r\n    }\r\n\r\n    InputCard(sectionName, icon, cardBodyStyle, cardBodyContent) {\r\n        return(\r\n            <View style={[styles.card]} >\r\n                <Pressable style={styles.cardRow} onPress={this.setSelectedEntry(sectionName)} >\r\n                    <Icon name={icon} fill='rgba(255,255,255,0.75)' height={28} width={28} style={styles.entryIcon} />\r\n                    <Text style={styles.entryTitle}> {sectionName} </Text>\r\n                </Pressable>    \r\n                {this.inputCardBody(sectionName, cardBodyStyle, cardBodyContent)}  \r\n            </View>   \r\n        )\r\n    }\r\n\r\n    setSelectedEntry (entry) {\r\n        function setSelected() {\r\n            this.setState( {selectedEntry:  this.state.selectedEntry === entry ? null : entry  } )\r\n        }\r\n        setSelected = setSelected.bind(this);\r\n        return setSelected\r\n    }\r\n\r\n    loginMsg() {\r\n        return(\r\n          <View style={[styles.login.msgBox, this.state.loginMsg ? {} : {height: 0, backgroundColor: 'transparent', borderColor: 'transparent'} ]}>\r\n            <Text style={styles.login.msg}>{this.state.loginMsg}</Text>\r\n          </View>\r\n        )\r\n    }\r\n\r\n    setLoginMsg(msg) {\r\n        this.setState({loginMsg: msg})\r\n        setTimeout( () => this.setState({loginMsg: ''}) , 1000 * 5 )\r\n    }    \r\n\r\n    async initializeEntry() {\r\n        const currentEntry = this.props.route.params.currentEntry\r\n        const user = this.state.user\r\n        switch (currentEntry.type) {\r\n            case 'new':\r\n                console.log('POST ENTRY STATUS: INITIATING BLANK NEW ENTRY! FETCHING LOCATION AND WEATHER DATA...')\r\n                this.setState({\r\n                    date: currentEntry.date,\r\n                    startTime: getTime(),\r\n                    endTime: '',\r\n                    isFetchingLocationOrWeather: true\r\n                })\r\n                await this.checkIfLocationEnabled();\r\n                await this.getCurrentLocation();                    \r\n                await this.fetchWeather()\r\n                this.setState({isFetchingLocationOrWeather: false})\r\n            break;\r\n        \r\n            case 'custom-date':\r\n                console.log('POST ENTRY STATUS: INITIALIZING CUSTOM DATE ENTRY! SETTING DATE TO: ' + currentEntry.date)\r\n                this.setState({\r\n                    date: currentEntry.date,\r\n                    startTime: '',\r\n                    endTime: '',\r\n                })\r\n                break\r\n\r\n            case 'edit':\r\n                const entry = currentEntry.entry\r\n                const currentEmotions = entry.emotions.map(emotion => emotion.name)\r\n                var isSelectedEmotionsNew = {}\r\n                for ( let emotion of user.emotions ) {\r\n                    isSelectedEmotionsNew[emotion.name] = currentEmotions.includes(emotion.name)\r\n                }\r\n\r\n                this.setState({\r\n                    date: entry.date,\r\n                    startTime: entry.startTime,\r\n                    endTime: entry.endTime,\r\n                    createdAt: entry.createdAt,\r\n                    lastEdited: entry.lastEdited,\r\n                    star: entry.star,\r\n                    selectedMood: entry.mood,\r\n                    isSelectedEmotions: isSelectedEmotionsNew,\r\n                    jornalEntry: entry.jornal,\r\n                    address: entry.address,\r\n                    location: entry.location,\r\n                    weather: entry.weather,\r\n                    isMoodUnmarked: false,\r\n                })\r\n                break\r\n    \r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    updateUserData() {\r\n        console.log('UPDATING USER DATA IN \"PostEntryComponent\"...')\r\n        this.setState({isUpdateUserDataLoading: true})\r\n        const user = this.props.route.params.getMainScreenState().user\r\n\r\n        const oldEmotions = Object.keys(this.state.isSelectedEmotions)\r\n        const currentEmotions = user.emotions.map(emotion => emotion.name)\r\n        const newEmotions = currentEmotions.filter(emotion => oldEmotions.includes(emotion))\r\n\r\n        const newEmotionsSelected = buildIsSelectedEmotions(newEmotions)\r\n        oldEmotions.forEach(emotion => { \r\n            if (currentEmotions.includes(emotion)) \r\n                newEmotionsSelected[emotion] = this.state.isSelectedEmotions[emotion]\r\n        })\r\n\r\n        this.setState({\r\n            user: user,\r\n            isSelectedEmotions: newEmotionsSelected,\r\n            isUpdateUserDataLoading: false\r\n        })\r\n    }\r\n\r\n    saveButton() {\r\n        const isDataLoading = (\r\n            this.state.isFetchingLocationOrWeather |\r\n            this.state.isPostEntryLoading |\r\n            this.state.isSaveEmotionLoading |\r\n            this.state.isDeleteEmotionLoading |\r\n            this.state.isUserDataSyncing |\r\n            this.state.isUpdateUserDataLoading\r\n        )\r\n        var color;\r\n        switch (true) {\r\n            case this.state.isFetchingLocationOrWeather:\r\n                color = 'brown'\r\n                break;\r\n        \r\n            case this.state.isPostEntryLoading:\r\n                color = 'black'\r\n                break;\r\n            case this.state.isSaveEmotionLoading:\r\n                color = 'green'\r\n                break;\r\n            case this.state.isDeleteEmotionLoading:\r\n                color = 'red'\r\n                break;\r\n            case this.state.isUserDataSyncing:\r\n                color = 'blue'\r\n                break;\r\n            case this.state.isUpdateUserDataLoading:\r\n                color = 'green'\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        return(\r\n            <Pressable\r\n            onPress={this.onSaveButtonPress}\r\n            disabled={isDataLoading}\r\n            style={styles.saveButton}\r\n            >\r\n                { isDataLoading ? (\r\n                    <ActivityIndicator size='small' color={color} />\r\n                ) : (\r\n                    <Text style={styles.saveButtonLabel}> Salvar </Text>\r\n                ) }\r\n            </Pressable>\r\n        )\r\n    }\r\n\r\n    onSaveButtonPress() {\r\n        if (!this.state.selectedMood) {\r\n            this.setLoginMsg('Adicione uma avaliação para continuar.')\r\n            this.setState({selectedEntry: 'Avaliação'})\r\n            return\r\n        }\r\n        const currentEntry = this.props.route.params.currentEntry\r\n        var lastEdited = getTime()\r\n        var createdAt, endTime\r\n        switch (currentEntry.type) {\r\n            case 'new':\r\n                endTime = lastEdited\r\n                createdAt = lastEdited\r\n                break;\r\n            case 'custom-date':\r\n                endTime = this.state.endTime // Returns empty string ''.\r\n                createdAt = lastEdited\r\n                break\r\n            case 'edit':\r\n                endTime = this.state.endTime\r\n                createdAt = this.state.createdAt\r\n                break\r\n            default:\r\n                break;\r\n        }\r\n        const newEntryPost = {\r\n            date: this.state.date,\r\n            startTime: this.state.startTime,\r\n            endTime: endTime,\r\n            createdAt: createdAt,\r\n            lastEdited: [ ...this.state.lastEdited, {date: Today(), time: lastEdited}],\r\n            star: this.state.star,\r\n            mood: this.state.selectedMood,\r\n            emotions: this.state.user.emotions.filter( emotion => this.state.isSelectedEmotions[emotion.name] ),\r\n            jornal: this.state.jornalEntry,\r\n            address: this.state.address,\r\n            location: this.state.location,\r\n            weather: this.state.weather,\r\n        }\r\n        this.postNewEntryAsync(newEntryPost)\r\n    }\r\n    \r\n    async postNewEntryAsync(newEntry) {\r\n        this.setState({ isPostEntryLoading: true });\r\n        var user = this.props.route.params.user;\r\n        const currentEntry = this.props.route.params.currentEntry\r\n        const editMode = currentEntry.type === 'edit';\r\n        try {\r\n            console.log('POST ENTRY STATUS: Started...')\r\n            var postUserEntryResult = {ok: false, status: '999', statusText: 'Post not fetched yet.'}\r\n            const postUserEntryOpts = { \r\n                method: editMode? 'PUT' : 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify( newEntry ),\r\n            }\r\n            // var postUserEntryResult = await fetch('http://localhost:3000/Users/' + info.username + '/entries', postUserEntryOpts);\r\n            postUserEntryResult = await fetch( corsURI + appServerURI + 'Users/' + user.username + '/entries' + (editMode ? '/'+currentEntry.entry._id : ''), postUserEntryOpts);\r\n            const postUserEntryStatus = 'Status: ' + postUserEntryResult.status + ', ' + postUserEntryResult.statusText\r\n\r\n            if (postUserEntryResult.ok) {\r\n                console.log('POST ENTRY STATUS: Successful.')\r\n                console.log(postUserEntryStatus)\r\n                    \r\n            } else {\r\n                console.log('POST ENTRY STATUS: Failed. Throwing error...')\r\n                throw new Error(postUserEntryStatus)\r\n            }\r\n\r\n        } catch (error) {\r\n            this.setLoginMsg('Erro no servidor. Tente novamente...')\r\n            console.log('Erro capturado:')\r\n            console.log(error);\r\n\r\n        } finally {\r\n            console.log('POST ENTRY STATUS: Finished.')\r\n            this.setState({ isPostEntryLoading: false });\r\n            if (postUserEntryResult.ok) {\r\n                console.log('proceding to SYNC USER DATA IN RESPONSE TO SUCCESSFUL USER ENTRY POST... ')\r\n                this.props.route.params.syncUserData()\r\n                this.props.route.params.setMainScreenState({\r\n                    selectedEntryId: null,\r\n                    selectedDate: currentEntry.type == 'new' ? Today() : this.props.route.params.getMainScreenState().selectedDate,\r\n                })\r\n                this.props.navigation.navigate('Entrances', {} )\r\n            }\r\n        }\r\n    }\r\n\r\n    async deleteEmotion(emotion) {\r\n        this.setState({ isDeleteEmotionLoading: true });\r\n        var user = this.state.user;\r\n        try {\r\n            console.log('DELETE EMOTION STATUS: Started...')\r\n            var postEmotionResult = {ok: false, status: '999', statusText: 'Post not fetched yet.'}\r\n            const postUserEntryOpts = { \r\n                method: 'DELETE',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n            }\r\n            // var postUserEntryResult = await fetch('http://localhost:3000/Users/' + info.username + '/emotions', postUserEntryOpts);\r\n            postEmotionResult = await fetch( corsURI + appServerURI + 'Users/' + user.username + '/emotions/' + emotion, postUserEntryOpts);\r\n            const postEmotionStatus = 'Status: ' + postEmotionResult.status + ', ' + postEmotionResult.statusText\r\n\r\n            if (postEmotionResult.ok) {\r\n                console.log('DELETE EMOTION STATUS: Successful.')\r\n                console.log(postEmotionStatus)\r\n                    \r\n            } else {\r\n                console.log('DELETE EMOTION STATUS: Failed. Throwing error...')\r\n                throw new Error(postEmotionStatus)\r\n            }\r\n\r\n        } catch (error) {\r\n            this.setLoginMsg('Erro no servidor. Tente novamente...')\r\n            console.log('Erro capturado:')\r\n            console.log(error);\r\n\r\n        } finally {\r\n            console.log('DELETE EMOTION STATUS: Finished.')\r\n            this.setState({ isDeleteEmotionLoading: false });\r\n            if (postEmotionResult.ok) {\r\n                this.setState({isUserDataSyncing: true})\r\n                await this.props.route.params.syncUserData();\r\n                this.setState({isUserDataSyncing: false})\r\n                this.updateUserData();\r\n            }\r\n        }\r\n \r\n    }\r\n\r\n    async fetchWeather() {\r\n\r\n        try {\r\n            if (this.state.userCoordinates) {\r\n\r\n                console.log('FETCH WEATHER STATUS: STARTED...!')\r\n                const coords = this.state.userCoordinates\r\n                const lat = coords.latitude\r\n                const lng = coords.longitude\r\n                \r\n                await fetch(\r\n                    `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lng}&APPID=${OpenWeatherMapAPI.KEY}&units=metric`\r\n                )\r\n                .then(res => {\r\n                    const resStatus = 'Status: ' + res.status + ', Status Text: ' + res.statusText\r\n                    if (!res.ok) \r\n                        throw new Error(resStatus)\r\n                    else {\r\n                        return res.json()\r\n                    }\r\n                })\r\n                .then(weather => {\r\n                    console.log('FETCH WEATHER STATUS: SUCCESSFUL!')\r\n                    // console.log(weather);\r\n\r\n                    const weatherInfo = {\r\n                        coords: weather.coord,\r\n                        name: weather.name,\r\n                        weather: weather.weather[0],\r\n                        main: weather.main,\r\n                        clouds: weather.clouds,\r\n                        wind: weather.wind,\r\n                        visibility: weather.visibility,\r\n                    }\r\n\r\n                    this.setState({weather: weatherInfo})\r\n                });\r\n        \r\n            } else {\r\n            // this.setLoginMsg('Não foi possível obter as condições do tempo. Tente reabrir essa tela...')\r\n            console.log('FETCH WEATHER STATUS: UNABLE TO START! USER POSITION NOT AVAILABLE.')\r\n            }\r\n\r\n        } catch (error) {\r\n            this.setLoginMsg('Não foi possível obter as condições do tempo. Tente reabrir essa tela...')\r\n            console.log('FETCH WEATHER STATUS: ERROR! LOGGING ERROR...')\r\n            console.log(error)\r\n\r\n        } finally {\r\n            console.log('FETCH WEATHER STATUS: FINISHED!')    \r\n        }\r\n    }\r\n\r\n    // Check if device has location services enabled\r\n    async checkIfLocationEnabled () {\r\n\r\n        try{\r\n            console.log('GEOCODING PROCESS (CHECK): CHECKING IF USER HAS SERVICES ENABLED.' )\r\n            let enabled = await Location.hasServicesEnabledAsync();            \r\n\r\n            if (!enabled) {\r\n                console.log('GEOCODING PROCESS (CHECK): CHECKED! USER DOES NOT HAVE SERVICES ENABLED.' )\r\n                this.setLoginMsg('Não foi possível obter sua localização. Habilite o serviço de localização para associar um endereço a essa entrada...')\r\n            } else {\r\n                console.log('GEOCODING PROCESS (CHECK): CHECKED! USER HAS SERVICES ENABLED.')\r\n            }\r\n\r\n        } catch(error) {\r\n            this.setLoginMsg('Não foi possível conferir se o serviço de localização está ativado. Tente reabrir essa tela...')\r\n            console.log(\"GEOCODING PROCESS (CHECK): ERROR IN SERVICES PERMISSION CHECK! COULD'NT CHECK IF USER HAS SERVICES ENABLED.\")\r\n        \r\n        } finally {\r\n            console.log(\"GEOCODING PROCESS (CHECK): FINISHED!\")\r\n        }\r\n    };\r\n\r\n    // Check for permission, get current user position and use reverse geocoding for user coordinates\r\n    async getCurrentLocation() {\r\n\r\n        try {\r\n\r\n            if (this.props.route.params.getMainScreenState().locationPermission === 'granted') {\r\n                console.log('GEOCODING PROCESS (PERMISSION): PERMISSION ALREADY GRANTED. SKIPPING REQUEST...')\r\n            } else {\r\n                console.log('GEOCODING PROCESS (PERMISSION): REQUESTING PERMISSION ASYNC...')\r\n                let { status } = await Location.requestForegroundPermissionsAsync()\r\n                // let { status } = await Location.requestBackgroundPermissionsAsync()        \r\n                this.props.route.params.setMainScreenState({locationPermission: status})\r\n    \r\n                if (status !== 'granted') {\r\n                    console.log('GEOCODING PROCESS (PERMISSION): PERMISSION NOT GRANTED!')\r\n                    this.setLoginMsg('Permissão de localização não concedida. Permita que o app use os serviços de localização para associar um endereço a essa entrada...')\r\n                    return \r\n    \r\n                } else {\r\n                    console.log('GEOCODING PROCESS (PERMISSION): PERMISSION GRANTED!')\r\n                }\r\n            }\r\n\r\n            console.log('GEOCODING PROCESS (REQUEST): GETTING CURRENT USER POSITION ASYNC...')\r\n            let { coords } = await Location.getCurrentPositionAsync();\r\n            \r\n            if (coords) {   \r\n                const { latitude, longitude } = coords;\r\n                this.setState({userCoordinates: coords})\r\n                console.log(`GEOCODING PROCESS (REQUEST): CURRENT USER POSITION FOUND... Latitude: ${latitude}, Logitude: ${longitude}`)\r\n                console.log('GEOCODING PROCESS (REVERSE GEOCODING): REVERSE GEOCODE ASYNC...')  \r\n                let response = await Location.reverseGeocodeAsync({ latitude, longitude });\r\n        \r\n                if (response) {\r\n                    this.setState({ address: formattedAddress(response[0]), location: { position: coords, address: response[0] } })\r\n                    console.log('GEOCODING PROCESS (REVERSE GEOCODING): REVERSE GEOCODE SUCCESSFUL! UPDATING STATE...')  \r\n\r\n                } else {\r\n                    console.log('GEOCODING PROCESS (REVERSE GEOCODING): REVERSE GEOCODE FAILED! LOGGING RESPONSE...')  \r\n                    console.log(response)\r\n                }\r\n        \r\n            } else {\r\n                console.log(`GEOCODING PROCESS (REVERSE GEOCODING): USER POSITION NOT FOUND! UNABLE TO PROCEED TO REVERSE GEOCODING...`)\r\n            }\r\n\r\n        } catch (error) {\r\n            this.setLoginMsg('Não foi possível obter a localização atual. Tente reabrir essa tela...')\r\n            console.log('GEOCODING PROCESS: ERROR IN USER POSITION REQUEST! LOGGING ERROR...')\r\n            console.log(error)\r\n        \r\n        } finally {\r\n            console.log('GEOCODING PROCESS: USER POSITION REQUEST FINISHED. PROCEEDING TO FETCH WEATHER DATA...')\r\n        }\r\n    };\r\n\r\n    render() {\r\n        console.log('Rendering \"PostEntry\" component...')\r\n        return(\r\n            <ImageBackground source={require('../assets/wallpaper.jpg')} style={styles.mainView}>\r\n\r\n                <ScrollView style={styles.scrollView}>\r\n                    <View style={styles.section}>\r\n                            {this.postEntryHeader()}\r\n                            {this.InputCard('Avaliação', 'smiling-face', {justifyContent: 'space-between'}, this.MoodButtons())}\r\n                            {this.InputCard('Emoções', 'checkmark-square-outline', {flexWrap: 'wrap', justifyContent: 'center'}, this.EmotionButtons)}\r\n                            {this.InputCard('Jornal', 'book', {flexDirection: 'column', minHeight: 130}, this.JornalInput())}\r\n                    </View>\r\n                </ScrollView>  \r\n\r\n                <this.saveButton />\r\n\r\n                {this.loginMsg()}\r\n\r\n            </ImageBackground>\r\n        )    \r\n    }\r\n}","var styles = {\r\n    login: {\r\n        mainView: {\r\n            flex: 1,\r\n            justifyContent: 'center',\r\n            alignItems: 'center',\r\n            // paddingHorizontal: Platform.OS != 'web' ? '5%' : '5%',\r\n        },\r\n        titleView: {\r\n            flexDirection: 'row',\r\n            justifyContent: 'center',\r\n            alignItems: 'center',\r\n            minHeight: 60,\r\n        },\r\n        title: {\r\n            fontSize: 30,\r\n            fontWeight: 'bold',\r\n            color: 'white',\r\n            alignSelf: 'center',\r\n        },\r\n        titleIcon: {\r\n            width: 30,\r\n            height: 30,\r\n            marginLeft: 6,\r\n            paddingTop: 3,\r\n        },\r\n        card: {\r\n            height: '55%',\r\n            minHeight: 390,\r\n            width: 350,\r\n            paddingHorizontal: 10,\r\n            paddingVertical: 10,\r\n            borderWidth: 1,\r\n            borderRadius: 10,\r\n            backgroundColor: 'azure',\r\n        },\r\n        cardHeader: {\r\n            height: '25%',\r\n            width: '100%',\r\n        },\r\n        cardTitle: {\r\n            position: 'relative',\r\n            top: '30%',\r\n            left: '5%',\r\n            fontSize: 24,\r\n            fontWeight: 'bold',\r\n            color: 'black',\r\n        },\r\n        cardSection: {\r\n            height: '25%',\r\n            justifyContent: 'space-evenly',\r\n            alignItems: 'center',\r\n        },\r\n        loadingIcon: {\r\n            alignSelf: 'center'\r\n        },\r\n        inputField: {\r\n            minHeight: 40,\r\n            width: '100%',\r\n            paddingLeft: 10,\r\n            fontSize: 14,\r\n            borderWidth: 1,\r\n            borderRadius: 5,\r\n            backgroundColor: 'white'\r\n        },\r\n        button: {\r\n            height: 40,\r\n            width: '100%',\r\n            textAlign: 'center',\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n            borderWidth: 1,\r\n            borderRadius: 5,\r\n            borderColor: 'white',\r\n            backgroundColor: 'lightblue',        \r\n        },\r\n        buttonLabel: {\r\n            fontSize: 15,\r\n            fontWeight: 'bold',\r\n            color: 'black',\r\n        },\r\n        text: {\r\n            fontSize: 15,\r\n            textAlign: 'center',\r\n        },\r\n        msgBox: {\r\n            width: 300,\r\n            paddingVertical: 5,\r\n            paddingHorizontal: 3,\r\n            justifyContent: 'center',\r\n            backgroundColor: 'rgb(30,30,30)',\r\n            borderWidth: 1,\r\n            borderColor: 'rgb(40,40,40)',\r\n            \r\n        },\r\n        msg: {\r\n            textAlign: 'center',\r\n            color: 'white',\r\n            // paddingHorizontal: 20,\r\n        },\r\n    }\r\n};\r\nexport default styles;","// import Icon from 'react-native-vector-icons/FontAwesome';\r\n// import { Ionicons } from '@expo/vector-icons';\r\nimport { Icon } from 'react-native-eva-icons'\r\n// import { WiDaySunny } from \"weather-icons-react\";\r\n\r\nimport React, { Component } from 'react';\r\nimport { View, Text, ImageBackground, TextInput, Pressable, Platform, ActivityIndicator } from 'react-native';\r\nconst defaultEmotions = require('../shared/emotionsConfig')\r\nimport styles from '../styles/loginStyles'\r\n\r\n// App server connection settings\r\nconst corsURI = Platform.OS == 'web' ? 'https://morning-journey-78874.herokuapp.com/' : ''\r\nconst appServerURI = 'https://mood-tracker-server.herokuapp.com/'\r\n\r\n// Email Validation settings\r\n\r\n// const Verifier = require('email-verifier')\r\nconst emailVerification_APIKEY = \"at_TPKXmSQnStekLzTbstLO9GyHvd7or\"\r\n// let verifier = new Verifier(emailVerification_APIKEY);\r\nconst emailVerification_APIURI = (emailAddress) => `https://emailverification.whoisxmlapi.com/api/v2?apiKey=${emailVerification_APIKEY}&emailAddress=${emailAddress}`\r\nconst falseParams = ['validateDNS', 'checkCatchAll', 'checkFree', 'checkDisposable']\r\nfunction appendValueToUri(uri, params, value) {\r\n  for (let param of params) {\r\n    uri += '&' + param + '=' + value\r\n  }\r\n  return uri\r\n}\r\n\r\nasync function validateEmail(email) {\r\n\r\n  console.log('EMAIL VERIFICATION STATUS: Fetching email verification api...')\r\n\r\n  try {\r\n\r\n    var uri = emailVerification_APIURI(email)\r\n    uri = appendValueToUri(uri, falseParams, '0')\r\n    var emailStatus = {ok: false, status: 'Email não verificado.'}\r\n    const apiResp = await fetch( uri , { method: 'GET' } )\r\n  \r\n    if (apiResp.ok) {\r\n  \r\n      console.log('EMAIL VERIFICATION STATUS: Api fetch request successful.')\r\n      const apiRespJson = await apiResp.json()\r\n  \r\n      if ( apiRespJson.formatCheck=='false' ) {\r\n        emailStatus.status = 'Email inválido.'\r\n      } else if ( apiRespJson.smtpCheck=='false' ) {\r\n        emailStatus.status = 'Email não existe.'\r\n      } else {\r\n        emailStatus = {ok: true, status: 'Email válido.'}\r\n      }\r\n      \r\n      return emailStatus\r\n  \r\n    } else {\r\n      console.log('EMAIL VERIFICATION STATUS: Api fetch request failed. Throwing error...')\r\n      throw new Error('Status: ' + apiResp.status + ', Status Text: ' + apiResp.statusText)\r\n    }  \r\n\r\n  } finally {\r\n    console.log('EMAIL VERIFICATION STATUS: Concluído')\r\n\r\n  }\r\n  // Use the email verification api using its module...\r\n  // verifier.verify(email, (err, data) => {\r\n  //   if (err) throw err;\r\n  //   console.log(data);\r\n  // });\r\n}\r\n\r\nfunction validatePassword(password) {\r\n  console.log('VALIDATING PASSWORD FOR SIGNUP...')\r\n\r\n  const hasMinLength = password.length > 6\r\n  var res\r\n  if (!hasMinLength) {\r\n    res = {ok: false, status: 'A senha deve ter no mínimo 6 caractéres.'}\r\n  } else {\r\n    res = {ok: true, status: 'Senha válida.'}\r\n  }\r\n  return res\r\n}\r\n\r\nclass LoginScreen extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      userInfo: {\r\n        password: '',\r\n        email: '',\r\n        username: '',\r\n      },\r\n      loginMsg: '',\r\n      isUserAuth: false,\r\n      isDataLoading: false,\r\n    }\r\n    this.onChangeText = this.onChangeText.bind(this);\r\n    this.submitButton = this.submitButton.bind(this);\r\n    this.loginMsg = this.loginMsg.bind(this);\r\n    this.setLoginMsg = this.setLoginMsg.bind(this);\r\n    this.onSignIn = this.onSignIn.bind(this);\r\n    this.onSignUp = this.onSignUp.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    console.log('\"LoginScreen\" component did mount...')\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    console.log('\"LoginScreen\" component will unmount...')\r\n  }\r\n\r\n  LoginIcon() {  \r\n    if (this.state.isDataLoading) {\r\n      return <ActivityIndicator color='#000000' />\r\n    } else {\r\n      return <Icon name='log-in-outline' animation='pulse' fill='#000' width={30} height={30} />\r\n    }\r\n  }\r\n\r\n  setLoginMsg(msg) {\r\n    this.setState({loginMsg: msg})\r\n    setTimeout( () => this.setState({loginMsg: ''}) , 1000 * 5 )\r\n  }\r\n\r\n  loginMsg() {\r\n      return(\r\n        <View style={[styles.login.msgBox, this.state.loginMsg ? {} : {backgroundColor: 'transparent', borderColor: 'transparent'} ]}>\r\n          <Text style={styles.login.msg}>{this.state.loginMsg}</Text>\r\n        </View>\r\n      )\r\n  }\r\n\r\n  onChangeText(textField) {\r\n    function setField(text) {\r\n      this.setState( { userInfo: { ...this.state.userInfo, [textField] : text}} )\r\n    }\r\n    setField = setField.bind(this);\r\n    return setField\r\n  }\r\n\r\n  submitButton(sign) {\r\n    const signIn = sign == 'signin'\r\n    return(\r\n      <Pressable\r\n      disabled={this.state.isDataLoading}\r\n      onPress={signIn ? this.onSignIn : this.onSignUp}\r\n      style={[styles.login.button]}\r\n      >\r\n        <Text style={styles.login.buttonLabel}>{ signIn ? 'Entrar' : 'Cadastrar' }</Text>\r\n      </Pressable>\r\n    )\r\n  }\r\n\r\n  LoginScreen = () => {\r\n    return(\r\n      <ImageBackground source={require('../assets/wallpaper.jpg')} style={[styles.login.mainView ,{justifyContent: 'space-evenly'}]}>\r\n        \r\n        <View style={styles.login.titleView}>\r\n          <Text style={styles.login.title}>Mood Tracker</Text>\r\n        </View>\r\n\r\n        <View style={styles.login.card}>\r\n          <View style={styles.login.cardHeader} >\r\n            <Text style={styles.login.cardTitle}>Entrar</Text>\r\n          </View>\r\n          <View style={styles.login.cardSection}>\r\n            <TextInput\r\n            placeholder='Email'\r\n            textContentType='emailAddress'\r\n            style={styles.login.inputField}\r\n            onChangeText={this.onChangeText('email')}\r\n            autoComplete='email'\r\n            importantForAutofill='yes'\r\n            >\r\n            </TextInput>\r\n            <TextInput\r\n            placeholder='Senha'\r\n            textContentType='password'\r\n            secureTextEntry={true}\r\n            style={styles.login.inputField}\r\n            onChangeText={this.onChangeText('password')}\r\n            autoComplete='password'\r\n            importantForAutofill='yes'\r\n            >\r\n            </TextInput>\r\n          </View>\r\n          <View style={styles.login.cardSection}>\r\n            {this.submitButton('signin')}\r\n            {this.submitButton('signup')}\r\n          </View>\r\n          <View style={[styles.login.cardSection]}>\r\n            {this.LoginIcon()}\r\n          </View>\r\n        </View>\r\n\r\n        {this.loginMsg()}\r\n\r\n      </ImageBackground>\r\n    )\r\n  }\r\n\r\n  isInputEmpty() {\r\n    if (!this.state.userInfo.email) {\r\n      const errMsg = 'Insira um endereço de email.'\r\n      this.setLoginMsg(errMsg)\r\n      console.log('SIGNIN STATUS: ' + errMsg)\r\n      return true\r\n    } else if (!this.state.userInfo.password) {\r\n      const errMsg = 'Insira uma senha.'\r\n      this.setLoginMsg(errMsg)\r\n      console.log('SIGNIN STATUS: ' + errMsg)\r\n      return true\r\n    } else return false\r\n  }\r\n\r\n  async onSignIn() {\r\n\r\n    console.log('SIGNIN STATUS: Started...')\r\n    var info = this.state.userInfo;\r\n    info.email = info.email.trim()\r\n    this.setState({ isDataLoading: true });\r\n\r\n    try {\r\n\r\n      if (this.isInputEmpty()) return\r\n\r\n      var UsersResult = await fetch( corsURI + appServerURI + 'Users', { method: 'GET' });\r\n      const UsersStatus = 'Status: ' + UsersResult.status + ', ' + 'Status Text: ' + UsersResult.statusText\r\n      if (UsersResult.ok) {\r\n        console.log('fetch GET request for users data at signin successful.');\r\n        console.log(UsersStatus)\r\n      } else {\r\n        console.log('fetch GET request for users data at signin failed. Printing fetch response...')\r\n        console.log(JSON.stringify(UsersResult))\r\n        console.log('Throwing error...')\r\n        throw new Error(UsersStatus)\r\n      }\r\n\r\n      const Users = await UsersResult.json();\r\n      const user = Users.filter((user) => user.email === info.email)[0]\r\n      \r\n      if ( user ) {          \r\n        \r\n        if (user.password === info.password) {\r\n          this.setState( {isUserAuth: true, userInfo: user} )\r\n          const successMsg = 'Login realizado com sucesso!'\r\n          this.setLoginMsg(successMsg)\r\n          console.log('SIGNIN STATUS: Sucesso.')\r\n\r\n        } else {\r\n          const errMsg = 'Senha incorreta.'\r\n          this.setLoginMsg(errMsg)\r\n          console.log('SIGNIN STATUS: ' + errMsg);\r\n        }\r\n\r\n      } else {\r\n        const errMsg = 'Email não cadastrado!'\r\n        this.setLoginMsg(errMsg)\r\n        console.log('SIGNIN STATUS: ' + errMsg)\r\n      }\r\n\r\n    } catch (error) {\r\n      const errMsg = 'Erro no servidor! Tente novamente...'\r\n      this.setLoginMsg(errMsg)\r\n      console.log('Error catched in fetch GET request for users data at signin. Printing Error...')\r\n      console.log('SIGNIN STATUS:' + 'Erro capturado. Imprimindo erro...')\r\n      console.log(error);\r\n\r\n    } finally {\r\n      this.setState({ isDataLoading: false });\r\n      console.log('SIGNIN STATUS: Concluido.')\r\n      if (this.state.isUserAuth) this.props.authUser(this.state.userInfo)        // Father class component method that authenticates the user and redirects to entrances screen.\r\n    }\r\n  }\r\n\r\n  async onSignUp() {\r\n\r\n    console.log('SIGNUP STATUS: started...')\r\n    var info = this.state.userInfo;\r\n    info.email = info.email.trim()\r\n    this.setState({ isDataLoading: true });\r\n    \r\n    try {\r\n\r\n      var postUserResult = {ok: false}\r\n      if (this.isInputEmpty()) return\r\n\r\n      // Validating email and password\r\n      const emailValidation = await validateEmail(info.email)\r\n      console.log('SING UP STATUS: ' + emailValidation.status)\r\n      if (!emailValidation.ok) {\r\n          this.setLoginMsg(emailValidation.status)\r\n          return\r\n      }\r\n\r\n      // Checking if email is already registerd\r\n      var UsersResult = await fetch( corsURI + appServerURI + 'Users', { method: 'GET' } );  \r\n      const reqStatus = 'Status: ' + UsersResult.status + ', ' + UsersResult.statusText\r\n      if (UsersResult.ok) {\r\n        console.log('fetch GET request for users data at signup successful.')\r\n        console.log(reqStatus)\r\n      } else {\r\n        console.log('fetch GET request for users data at signup failed. Throwing error...')\r\n        throw new Error(reqStatus)\r\n      }\r\n\r\n      const Users = await UsersResult.json();\r\n      const User = Users.filter((user) => user.email === info.email)[0]\r\n      if ( !User ) {\r\n\r\n        // Validating Password\r\n        const passwordCheck = validatePassword(info.password)\r\n        if (!passwordCheck.ok) {\r\n          console.log('SING UP STATUS: ' + passwordCheck.status)\r\n          this.setLoginMsg(passwordCheck.status)\r\n          return\r\n      }\r\n\r\n        // Registering new user by posting user identification to database\r\n        info.username = info.email.split('@')[0]\r\n        const postUserOpts = {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify( { ...info, emotions: defaultEmotions, entries: [], layout: 'grid' } )\r\n        }\r\n\r\n        postUserResult = await fetch( corsURI + appServerURI +  'Users/' + info.username, postUserOpts );\r\n        const postUserStatus = 'Status: ' + postUserResult.status + ', ' + postUserResult.statusText\r\n\r\n        if (postUserResult.ok) {\r\n          const successMsg = 'Cadastro realizado com sucesso!'\r\n          this.setLoginMsg(successMsg)\r\n          console.log('fetch POST request for user data at signup successful.')\r\n          console.log(postUserStatus)\r\n          console.log('SING UP STATUS: ' + successMsg)\r\n\r\n        } else {\r\n          console.log('fetch POST request for user data at signup failed. Throwing error...')\r\n          throw new Error(postUserStatus)\r\n        }\r\n\r\n      } else {\r\n        const errMsg = 'Email já cadastrado.'\r\n        this.setLoginMsg(errMsg)\r\n        console.log('SING UP STATUS: ' + errMsg)\r\n      }\r\n\r\n    } catch (error) {\r\n      const errMsg = 'Erro no servidor, tente novamente...'\r\n      this.setLoginMsg(errMsg)\r\n      console.log('SING UP STATUS: Erro capturado. Imprimindo erro...')\r\n      console.log(error);\r\n\r\n    } finally {\r\n      this.setState({ isDataLoading: false })\r\n      console.log('SING UP STATUS: Concluido.')\r\n      if (postUserResult.ok)  this.onSignIn()\r\n    }\r\n  }\r\n\r\n  render() {\r\n\r\n    console.log('Rendering \"LoginScreen\" component...')\r\n    return this.LoginScreen()\r\n  \r\n  }\r\n}\r\n\r\nexport default LoginScreen;","import React, { Component } from 'react';\nimport { Text, ImageBackground} from 'react-native';\n\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\n// import { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\n//import { createDrawerNavigator } from '@react-navigation/drawer';\n\nimport EntrancesScreen from './components/EntrancesComponent';\nimport PostEntranceScreen from './components/PostEntryComponent';\nimport LoginScreen from './components/LoginComponent'\n\nconst Stack = createNativeStackNavigator();\n// const Tab = createBottomTabNavigator();\n\nconst HomeScreen = (props) => {\n\n    console.log('Returning \"HomeScreen\" component...')\n  return(\n    <Stack.Navigator \n    initialRouteName='Entrances'\n    screenOptions={{\n      headerShown: false,\n    }}\n    >\n      <Stack.Screen\n      name=\"Entrances\"\n      component={EntrancesScreen}\n      options={{title: 'Suas entradas'}}\n      initialParams={{user: props.user, posted: {status: false, date: null, entry: null}}}\n      // initialParams={{userInfo: props.route.params.userInfo}}\n      />\n      <Stack.Screen\n      name=\"PostEntrance\"\n      component={PostEntranceScreen}\n      options={{title: 'Adicione uma  entrada'}}\n      initialParams={{user: props.user}}\n      // initialParams={{userInfo: props.route.params.userInfo}}\n      />\n    </Stack.Navigator>\n  )  \n}\n\n// function SettingsScreen() {\n//   return(\n//     <ImageBackground source={require('./assets/wallpaper.jpg')} style={{width: '100%', height: '100%'}}>\n//       <Text>Settings</Text>\n//     </ImageBackground>\n//   )\n// }\n\n// const mainScreenOptions = ({ route }) => ({\n//   headerShown: false,\n//   tabBarActiveTintColor: 'tomato',\n//   tabBarInactiveTintColor: 'gray',\n//   tabBarHideOnKeyboard: true,\n//   tabBarIcon: ({ focused, color, size }) => {\n//     let iconName;\n//     if (route.name === 'Home') {\n//       iconName = focused\n//         ? 'home'\n//         : 'home-outline';\n//     } else if (route.name === 'Settings') {\n//       iconName = focused ? 'settings' : 'settings-outline';\n//     }\n//     // You can return any component that you like here!\n//     return <Icon name={iconName} width={size} height={size} fill='rgb(35,35,35)'></Icon>\n//   },\n// })\n\nexport default class App extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isUserAuth: false,\n      user: null,\n    };\n    this.authUser = this.authUser.bind(this);\n  }\n\n  authUser(user) {\n    console.log('User authenticated. Navigating to \"HomeScreen\"...')\n    this.setState( {isUserAuth: true, user} )\n  }\n\n  render() {\n\n    if (!this.state.isUserAuth) {\n      return <LoginScreen authUser={this.authUser} />\n\n    } else {\n      return (\n\n        <NavigationContainer>\n          <HomeScreen user={this.state.user} />\n        </NavigationContainer>\n\n        // <NavigationContainer>\n        //   <Tab.Navigator\n        //     screenOptions={mainScreenOptions}\n        //   >\n        //     <Tab.Screen name=\"Home\" component={HomeScreen} initialParams={{userInfo: this.state.userInfo}}/>\n        //     <Tab.Screen name=\"Settings\" component={SettingsScreen} initialParams={{userInfo: this.state.userInfo}} />\n        //   </Tab.Navigator>    \n        // </NavigationContainer>\n\n      );  \n    }\n  }\n}","// Emotion configs\r\nconst emotionGroupsNames = [ 'Bem & Calmo', 'Bem & Energizado', 'Mal & Calmo', 'Mal & Energizado' ]\r\nconst goodEnergizedEmotions = ['Animação', 'Concentração', 'Desinibição', 'Motivação', 'Euforia']\r\nconst goodCalmEmotions = ['Alívio', 'Calma', 'Conforto', 'Despreocupação', 'Inspiração', 'Orgulho', 'Paz', 'Relaxamento', 'Satisfação', 'Segurança', 'Criatividade']\r\nconst badEnergizedEmotions = ['Inquietação', 'Ansiedade', 'Desespero', 'Frustração', 'Insatisfação', 'Irritação', 'Medo', 'Vergonha', 'Preocupação', 'Impaciência', 'Sobrecarregado(a)', 'Tensão']\r\nconst badCalmEmotions = ['Depressão', 'Timidez', 'Cansaço', 'Tristeza','Confusão', 'Desanimo', 'Insegurança', 'Solidão', 'Tédio']\r\n// const badEnergizedEmotions = ['Agitação', 'Ansiedade', 'Tristeza', 'Decepção', 'Depressão', 'Desespero', 'Frustração', 'Insatisfação', 'Irritação', 'Medo', 'Paranoia', 'Preocupação', 'Impaciencia', 'Raiva', 'Revolta', 'Sobrecarregado(a)', 'Tensão', 'Nojo']\r\n\r\nconst emotionGroups = [ goodCalmEmotions.sort(), goodEnergizedEmotions.sort(), badCalmEmotions.sort(), badEnergizedEmotions.sort() ]\r\nconst basicEmotions = [ ...emotionGroups[0], ...emotionGroups[1], ...emotionGroups[2], ...emotionGroups[3] ]\r\n\r\nconst emotionTypes = ['Positiva', 'Negativa']\r\nconst emotionEnergy = ['Calmo(a)', 'Energizado(a)']\r\n\r\nvar defaultEmotions = []\r\nvar type, energy\r\n\r\nfor (let emotion of basicEmotions) {\r\n    type = emotionGroups[0].includes(emotion) || emotionGroups[1].includes(emotion) ? emotionTypes[0] : emotionTypes[1]\r\n    energy = emotionGroups[0].includes(emotion) || emotionGroups[2].includes(emotion) ? emotionEnergy[0] : emotionEnergy[1]\r\n    defaultEmotions.push({name: emotion, type: type, energy: energy})\r\n}\r\n\r\n// console.log(defaultEmotions);\r\n\r\nmodule.exports = defaultEmotions;"],"sourceRoot":""}