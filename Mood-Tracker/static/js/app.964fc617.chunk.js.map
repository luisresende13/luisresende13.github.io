{"version":3,"sources":["assets/wallpaper.jpg","styles/entrancesStyles.js","components/subcomponents/UserEntryCards.js","shared/dateRange.js","components/EntrancesComponent.js","styles/postEntryStyles.js","components/subcomponents/GoogleMapsAPI.js","components/subcomponents/OpenWeatherMapAPI.js","components/PostEntryComponent.js","styles/loginStyles.js","components/LoginComponent.js","App.js"],"names":["module","exports","styles","mainView","flex","postButton","position","height","width","borderRadius","bottom","alignSelf","backgroundColor","justifyContent","postButtonLabel","scrollView","borderWidth","section","paddingVertical","borderBottomWidth","borderColor","sectionTitle","fontSize","color","fontWeight","card","marginTop","paddingHorizontal","cardRow","flexDirection","alignItems","moodBadge","textAlign","emotionBadge","marginRight","textBadge","paddingTop","paddingBottom","lineHeight","textAlignVertical","text","spaceBetween","icon","entryIcon","paddingRight","editButtonsView","editButton","editButtonLabel","msgBox","msg","corsURI","Platform","OS","appServerURI","moodColors","monthDict","MoodHeader","entry","View","style","Text","mood","star","name","fill","weather","Image","source","uri","main","temp","toString","slice","startTime","Address","useState","isCollapsed","setIsCollapsed","address","numberOfLines","onPress","top","Emotions","emotions","length","flexWrap","PaddingBottom","map","emotion","index","Jornal","jornal","left","EmptyCard","props","today","date","now","Date","split","join","Today","navigateParams","currentEntry","type","textStyle","Pressable","navigation","navigate","CardsLoadingMessage","UserEntryCards","state","userEntries","isEntriesSyncing","isLoading","EntryCard","bind","EditEntryButtons","editUserEntry","deleteUserEntry","syncUserEntries","console","log","this","setInterval","updateIfPosted","posted","status","forgetPosted","setSelectedEntryId","selectedEntryId","_id","entryId","selDateEntries","filter","onButtonPress","isButtonPressed","setIsButtonPressed","label","disabled","onPressIn","onPressOut","selectedEntry","a","async","setState","UsersResult","ok","fetch","userInfo","username","method","usersStatus","statusText","Error","setAlertMsg","json","users","user","email","reverse","entriesSynced","UserEntryCardsList","Component","dateRange","englishMonthSigs","portugueseMonthSigs","englishWeekDayMap","getNextDate","next","nextDate","indexOf","formatDate","selDate","ymd","yesterday","englishWeekDay","weekDay","prefix","i","oneDigit","stringNumber","EntrancesScreen","DateNavigationButton","buttonColor","onNextButtonPress","time","selectedDate","entriesLoading","alertMsg","setParams","id","setSelectedDate","route","params","setTimeout","ImageBackground","require","ScrollView","login","StatusBar","currentHeight","entrances","content","flexGrow","contentRow","padding","entryTitle","paddingLeft","postButtonView","moodButtonView","moodButton","jornalText","saveButton","borderTopLeftRadius","borderTopRightRadius","saveButtonLabel","marginVertical","marginHorizontal","entryCardEmotionBadge","datetimeTitle","GoogleMapsAPI","GoogleMapsJavascriptAPIkey","GoogleMapsGeocodingAPIKey","OpenWeatherMapAPI","KEY","Location","moods","moodColorsRGBA","moodIcons","emotionGroupsNames","emotionGroups","sort","basicEmotions","isSelectedEmotions","monthSigs","months","monthNameMap","monthSig","getTime","formatPostEntryDatetimeTitle","m","PostEntranceScreen","endTime","createdAt","lastEdited","selectedMood","jornalEntry","location","isMoodUnmarked","isFetchingLocationOrWeather","locationServiceEnabled","userCoordinates","loginMsg","initializeEntry","onSaveButtonPress","EmotionButtons","MoodButtons","postEntryHeader","onEmotionButtonPress","onMoodButtonPress","inputCardBody","setSelectedEntry","InputCard","JornalInput","postNewEntryAsync","goBack","item","alpha","selected","selColor","size","selectMood","title","selectEmotion","TextInput","multiline","scrollEnabled","placeholder","placeholderTextColor","onChangeText","value","sectionName","cardBodyStyle","cardBodyContent","setSelected","checkIfLocationEnabled","getCurrentLocation","isSelectedEmotionsNew","isDataLoading","ActivityIndicator","newEntryPost","JSON","stringify","error","setLoginMsg","newEntry","info","editMode","postUserEntryResult","postUserEntryOpts","headers","body","postUserEntryStatus","coords","lat","latitude","lng","longitude","then","res","resStatus","weatherInfo","coord","clouds","wind","visibility","enabled","LocationServiceEnabled","alert","response","addressObj","street","streetNumber","district","subregion","region","isoCountryCode","fetchWeather","minHeight","titleView","titleIcon","marginLeft","cardHeader","cardTitle","cardSection","loadingIcon","inputField","button","buttonLabel","falseParams","appendValueToUri","validateEmail","emailStatus","apiResp","apiRespJson","formatCheck","smtpCheck","LoginScreen","textContentType","autoComplete","importantForAutofill","secureTextEntry","submitButton","LoginIcon","password","isUserAuth","onSignIn","onSignUp","animation","textField","setField","sign","signIn","errMsg","isInputEmpty","UsersStatus","Users","authUser","postUserResult","emailValidation","reqStatus","passwordCheck","postUserOpts","entries","postUserStatus","successMsg","Stack","createNativeStackNavigator","HomeScreen","Navigator","initialRouteName","screenOptions","headerShown","Screen","component","options","initialParams","App","NavigationContainer"],"mappings":"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aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,c,+aCjhBJ,IAAM7G,EAAY,CAAC,IAAO,KAAM,IAAO,KAAM,IAAO,KAAM,IAAO,KAAM,IAAO,KAAM,IAAO,KAAM,IAAO,KAAM,IAAO,KAAM,IAAO,KAAM,IAAO,KAAM,IAAO,KAAM,IAAO,MACnK8G,EAAmB,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OACjGC,EAAsB,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OACpGC,GAAoB,CAAC,IAAO,MAAO,IAAO,MAAO,IAAO,MAAO,IAAO,MAAO,IAAO,MAAO,IAAO,MAAO,IAAO,OAGtH,SAASlE,KACL,IAAMJ,EAAMC,OAAO3B,WAAW4B,MAAM,KAEpC,MADc,CAAEF,EAAI,GAAI1C,EAAU0C,EAAI,IAAKA,EAAI,IAAKG,KAAK,KAG7D,SAASoE,GAAYxE,GAAoB,IAAdyE,EAAa,uDAAR,OACtBC,EAAWN,EAAUA,EAAUO,QAAQ3E,IAAe,YAANyE,GAAoB,EAAI,IAC9E,OAAOC,EASX,SAASE,GAAWC,GAEhB,IAAIC,EAAMD,EAAQ1E,MAAM,KAClB4E,EAAYP,GAAYnE,KAAS,YACjC2E,EAAiB,IAAI9E,KAAK4E,EAAI,GAAIA,EAAI,GAAIA,EAAI,IAAIvG,WAAW4B,MAAM,KAAK,GACxE8E,EAAUV,GAAkBS,GAC9BE,EAAS,GAEYA,EAArBL,IAAYxE,KAAkB,SACzBwE,IAAYE,EAAoB,UAC3BE,EAAU,KAExB,IAAK,IAAIE,EAAE,EAAGA,EAAE,GAAIA,IAChB,GAAI5H,EAAW8G,EAAiBc,KAAQL,EAAI,GACxC,OAAOI,EAASE,GAASN,EAAI,IAAM,QAAOR,EAAoBa,GAI1E,SAASC,GAASC,GACd,MAAuB,KAAnBA,EAAa,GAAkBA,EAAa7G,MAAM,EAAG6G,EAAajG,QAC1DiG,E,IAGKC,G,gCAEjB,WAAYxF,GAAQ,IAAD,sBACf,cAAMA,IAwDVyF,qBAAuB,YAAoB,IAAlBd,EAAiB,EAAjBA,KAAM1E,EAAW,EAAXA,MACrByF,EAAoB,QAANf,GAAgB1E,EAAQ,wBAAqC,QACjF,OACI,cAACW,EAAA,EAAD,CAAW1B,QAAU,EAAKyG,kBAAkBhB,GAAQ9B,SAAiB,QAAN8B,EAAe1E,EAA9E,SACI,cAAC,OAAD,CAAMhC,KAAa,QAAN0G,EAAe,gBAAkB,aAAcjK,MAAO,GAAID,OAAQ,GAAIyD,KAAMwH,OA3DjG,EAAKzE,MAAQ,CACTC,YAAa,GACbhB,KAAMK,KACNqF,KAnCIxF,OAAO3B,WAAW4B,MAAM,KACnB,GAmCTwF,aAActF,KACduF,gBAAgB,EAChB3B,eAAe,EACf4B,SAAU,IAEd,EAAKJ,kBAAoB,EAAKA,kBAAkBrE,KAAvB,QACzB,EAAKY,aAAe,EAAKA,aAAaZ,KAAlB,QACpB,EAAKuC,YAAc,EAAMA,YAAYvC,KAAlB,QACnB,EAAKa,mBAAqB,EAAKA,mBAAmBb,KAAxB,QAdX,E,6CAiBnB,WACIK,QAAQC,IAAI,2CACZC,KAAK7B,MAAMa,WAAWmF,UAAU,CAAChE,OAAQ,CAACC,QAAQ,EAAOtE,MAAO,U,gCAGpE,SAAmBsI,GACfpE,KAAKsB,SAAS,CAACf,gBAAiB6D,M,+BAGpC,WAAgC,IAAdtB,EAAa,uDAAR,OACnB,SAASuB,IACLrE,KAAKsB,SAAS,CACVf,gBAAiB,KACjByD,aAAcnB,GAAY7C,KAAKZ,MAAM4E,aAAclB,KAG3D,OAAOuB,EAAgB5E,KAAKO,Q,0BAGhC,WACIA,KAAKsB,SAAS,CACVf,gBAAiB,KACjByD,aAA2D,OAA7ChE,KAAK7B,MAAMmG,MAAMC,OAAOpE,OAAOrE,MAAM+C,KAAgBH,KAAUsB,KAAKZ,MAAM4E,eAE5FhE,KAAK7B,MAAMa,WAAWmF,UAAU,CAAChE,OAAQ,CAACC,QAAQ,EAAOtE,MAAO,U,yBAGpE,SAAYR,GAAM,IAAD,OACb0E,KAAKsB,SAAS,CAAC4C,SAAU5I,IACzBkJ,YAAY,kBAAM,EAAKlD,SAAS,CAAC4C,SAAU,OAAO,O,sBAGtD,WACI,OACI,cAACnI,EAAA,EAAD,CAAMC,MAAO,CAACzD,EAAO8C,OAAQ2E,KAAKZ,MAAM8E,SAAW,GAAK,CAACjL,gBAAiB,cAAeQ,YAAa,gBAAtG,SACI,cAACwC,EAAA,EAAD,CAAMD,MAAOzD,EAAO+C,IAApB,SAA0B0E,KAAKZ,MAAM8E,e,oBAcjD,WAAU,IAAD,OAEC9F,EAAQ4B,KAAKZ,MAAM4E,eAAiBtF,KAC1C,OACI,eAAC+F,EAAA,EAAD,CAAiBjI,OAAQkI,EAAQ,KAA4B1I,MAAO,CAACzD,EAAOC,UAA5E,UAEI,cAACmM,EAAA,EAAD,CAAY3I,MAAOzD,EAAOa,WAA1B,SACI,eAAC2C,EAAA,EAAD,CAAMC,MAAOzD,EAAOe,QAApB,UACI,eAACyC,EAAA,EAAD,CAAMC,MAAO,CAACzD,EAAO0B,QAAS,CAACf,eAAgB,kBAA/C,UACI,mBAAM0K,qBAAN,CAA2B7I,KAAK,aAAa+H,KAAK,aAClD,eAAC7G,EAAA,EAAD,CAAMD,MAAOzD,EAAOmB,aAApB,cAAoC,0BAAuBuJ,GAAWjD,KAAKZ,MAAM4E,cAAjF,OACA,mBAAMJ,qBAAN,CAA2B7I,KAAK,gBAAgB+H,KAAK,OAAO1E,MAAOA,OAEvE,cAAC,EAAD,CACAC,KAAM2B,KAAKZ,MAAM4E,aACjBzD,gBAAiBP,KAAKZ,MAAMmB,gBAC5BmB,SAAU1B,KAAK7B,MAAMmG,MAAMC,OAAO7C,SAClCvB,OAAQH,KAAK7B,MAAMmG,MAAMC,OAAOpE,OAChCG,mBAAoBN,KAAKM,mBACzBD,aAAcL,KAAKK,aACnB2B,YAAehC,KAAKgC,YACpBhD,WAAcgB,KAAK7B,MAAMa,kBAKjC,cAACD,EAAA,EAAD,CAAW1B,QAAS,WAAO,EAAKc,MAAMa,WAAWC,SAAU,eAAgB,CAACL,aAAc,CAACC,KAAM,MAAOR,KAAMK,KAAS5C,MAAO,SAAYE,MAAO,CAACzD,EAAOG,YAAzJ,SACI,cAAC,OAAD,CAAM0D,KAAK,cAAcvD,MAAO,GAAID,OAAQ,GAAIyD,KAAK,QAAQL,MAAOzD,EAAOY,oBAG9E6G,KAAKkE,kB,GAlGuB1B,a,gDCkH9BjK,GA7KA,CACbqM,MAAO,CACLvJ,OAAQ,CACN1C,SAAU,WACVI,OAAQ,MACRF,MAAO,IACPG,UAAW,SAEXJ,OAAQ,GACRM,eAAgB,SAChBD,gBAAiB,gBACjBI,YAAa,EACbI,YAAa,iBAEf6B,IAAK,CACDjB,UAAW,SACXT,MAAO,UAIbpB,SAAU,CACRC,KAAM,EACNsB,UAAW8K,IAAUC,eAEvBC,UAAW,CACThL,UAAW8K,IAAUC,cACrBzL,YAAa,EACbZ,KAAK,EACLS,eAAgB,gBAChBiB,WAAY,cAEdf,WAAY,CAEVP,MAAO,OACPG,UAAW,UAEbgM,QAAS,CACPC,SAAU,EACVvK,cAAe,KACfV,kBAAmB,KACnBhB,UAAW,UACXS,YAAa,SAEfH,QAAS,CACPT,MAAO,IACPU,gBAAiB,MACjBC,kBAAmB,EACnBC,YAAa,wBACbT,UAAW,UAEbkM,WAAY,CACVhL,cAAe,SACfiL,QAAS,GACTpL,UAAW,GACXV,YAAa,EACbI,YAAa,yBACbX,aAAc,GACdG,gBAAiB,0BAGnBmM,WAAY,CACV7L,gBAAiB,EACjB8L,YAAa,EACb1L,SAAU,GACVC,MAAO,SAEToB,UAAW,CACTC,aAAc,GAEhBqK,eAAgB,CACd1M,OAAQ,GACRC,MAAO,GACPC,aAAc,GACdE,UAAW,SACXE,eAAgB,SAChBiB,WAAY,SACZlB,gBAAiB,SAEnBE,gBAAiB,CACfQ,SAAU,GACVE,WAAY,QAEd0L,eAAgB,CACd1M,MAAO,GACPD,OAAQ,GACRuB,WAAY,SACZjB,eAAgB,SAChBG,YAAa,GAEfmM,WAAY,CACV3M,MAAO,GACPD,OAAQ,GACRuB,WAAY,SACZjB,eAAgB,UAElBmF,KAAM,CACJ1F,SAAU,WACVsF,KAAM,MACN1E,gBAAiB,EACjBS,kBAAmB,GACnBL,SAAU,GACVX,UAAW,SACXC,gBAAiB,QACjBH,aAAc,IAEhB2M,WAAY,CACVlM,gBAAiB,EACjBS,kBAAmB,GACnBvB,KAAM,EACNmC,kBAAmB,MACnB/B,MAAO,OACPC,aAAc,GACdc,MAAO,QACPD,SAAU,IAEZ+L,WAAY,CACV9M,OAAQ,GACRC,MAAO,OACP8M,oBAAqB,GACrBC,qBAAsB,GACtB1M,eAAgB,SAChBiB,WAAY,SACZlB,gBAAiB,SAEnB4M,gBAAiB,CACfhM,WAAW,OACXF,SAAU,IAEZG,KAAM,CACJC,UAAW,KACXR,gBAAiB,EACjBS,kBAAmB,GACnBlB,aAAc,GACdG,gBAAiB,mBAEnBgB,QAAS,CACLC,cAAe,MACfX,gBAAiB,EACjBY,WAAY,UAEhBC,UAAW,CACPnB,gBAAiB,QACjBH,aAAc,GACdS,gBAAiB,EACjBV,MAAO,IACPc,SAAU,GACVU,UAAW,UAEfC,aAAc,CACVrB,gBAAiB,kBACjBH,aAAc,GACdS,gBAAiB,EACjBS,kBAAmB,KACnBL,SAAU,GACVU,UAAW,SACXyL,eAAgB,EAChBC,iBAAkB,GAEtBC,sBAAuB,CACrB/M,gBAAiB,YACjBH,aAAc,GACdS,gBAAiB,EACjBS,kBAAmB,KACnBO,YAAa,EACbZ,SAAU,GACVU,UAAW,UAEb4L,cAAe,CACbtM,SAAU,GACVY,YAAa,I,mBCvKF2L,GALO,CAClBC,2BAA4B,0CAC5BC,0BAA2B,2CCChBC,GAHW,CACtBC,IAAK,oC,+zDCUTC,KAAyBL,GAAcE,2BA8BvC,IA1BA,IA0BA,GA1BM7K,GAAyB,OAAfC,IAASC,GAAc,+CAAiD,GAIlF6C,IAAM,IAAIC,MAAO3B,WAAW4B,MAAM,KAIlCgI,IAHWlI,GAAI,GAAWA,GAAI,GAAWA,GAAI,GAAaA,GAAI,GAAGzB,MAAM,EAAG,GAGlE,CAAC,cAAY,MAAO,UAAW,MAAO,aAE9C4J,GAAiB,CAAC,uBAAwB,uBAAwB,yBAA0B,wBAAyB,sBAErHC,GAAY,CAAC,gBAAiB,eAAgB,mBAAoB,iBAAkB,oBAGpFC,GAAqB,CAAE,cAAe,mBAAoB,cAAe,oBAOzEC,GAAgB,CALG,CAAC,YAAU,QAAS,WAAY,uBAAkB,mBAAc,UAAW,MAAO,cAAe,mBAAc,eAAa,gBAK5GC,OANX,CAAC,iBAAY,qBAAgB,oBAAe,kBAAa,WAMhBA,OAH/C,CAAC,eAAa,UAAW,aAAW,WAAW,cAAY,WAAY,iBAAe,aAAW,YAG1BA,OAJlE,CAAC,oBAAe,YAAa,YAAa,mBAAc,qBAAgB,kBAAa,OAAQ,WAAY,oBAAe,iBAAe,oBAAqB,aAI7DA,QACtHC,GAAa,eAAQF,GAAc,IAAtB,KAA6BA,GAAc,IAA3C,KAAkDA,GAAc,IAAhE,KAAuEA,GAAc,KAEpGG,GAAqB,GACzB,MAAqBD,MAArB,eAAmC,CAAC,IAA1BjJ,GAAyB,SAC/BkJ,GAAmBlJ,KAAW,EAIlC,IAAMmJ,GAAY,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OACnFC,GAAS,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAE5EC,GAAe,CACjB,KAAM,UACN,KAAM,YACN,KAAM,WACN,KAAM,QACN,KAAM,OACN,KAAM,QACN,KAAM,QACN,KAAM,SACN,KAAM,WACN,GAAM,UACN,GAAM,WACN,GAAM,YAUV,SAASxI,KACL,IANqByI,EAMf7I,EAAMC,OAAO3B,WAAW4B,MAAM,KAEpC,MADc,CAAEF,EAAI,IAPC6I,EAOmB7I,EAAI,GAN1B2I,GAAOD,GAAUhE,QAAQmE,KAMM7I,EAAI,IAAKG,KAAK,KAInE,SAAS2I,KAIL,OAFY7I,OAAO3B,WAAW4B,MAAM,KACnB,GASrB,SAAS6I,GAA6BhJ,EAAM0F,GACxC,IANcL,EAMRP,EAAM9E,EAAKG,MAAM,KACjB8I,EAAIJ,GAAc/D,EAAI,IAC5B,OAPuB,MADTO,EAQGP,EAAI,IAPJ,GAAkBO,EAAa7G,MAAM,EAAG6G,EAAajG,QAC1DiG,GAMgB,IAAM4D,EAAI,IAAMnE,EAAI,IAAMY,EAAO,MAAQ,IAAMA,EAAKlH,MAAM,EAAE,G,IAOvE0K,G,iCAEjB,WAAYpJ,GAAQ,IAAD,sBACf,cAAMA,IAEDiB,MAAQ,CAETf,KAAM,GACNvB,UAAW,GACX0K,QAAS,GACTC,UAAW,GACXC,WAAY,GAEZvL,MAAM,EACNwL,aAAc,GACdnK,SAAU,GACVoK,YAAa,GACbzK,QAAS,GACT0K,SAAU,KACVvL,QAAS,KAET6E,cAAe,kBACf2G,gBAAgB,EAChBf,mBAAoBA,GACpBxH,WAAW,EACXwI,6BAA6B,EAE7BC,uBAAwB,KACxBC,gBAAiB,KAEjBC,SAAU,IAGd,EAAKC,gBAAkB,EAAKA,gBAAgB1I,KAArB,QACvB,EAAK2I,kBAAoB,EAAKA,kBAAkB3I,KAAvB,QACzB,EAAKiG,WAAa,EAAKA,WAAWjG,KAAhB,QAClB,EAAK4I,eAAiB,EAAKA,eAAe5I,KAApB,QACtB,EAAK6I,YAAc,EAAKA,YAAY7I,KAAjB,QACnB,EAAK8I,gBAAkB,EAAKA,gBAAgB9I,KAArB,QACvB,EAAK+I,qBAAuB,EAAKA,qBAAqB/I,KAA1B,QAC5B,EAAKgJ,kBAAoB,EAAKA,kBAAkBhJ,KAAvB,QACzB,EAAKiJ,cAAgB,EAAKA,cAAcjJ,KAAnB,QACrB,EAAKkJ,iBAAmB,EAAKA,iBAAiBlJ,KAAtB,QACxB,EAAKmJ,UAAY,EAAKA,UAAUnJ,KAAf,QACjB,EAAKoJ,YAAc,EAAKA,YAAYpJ,KAAjB,QACnB,EAAKqJ,kBAAoB,EAAKA,kBAAkBrJ,KAAvB,QA3CV,E,6CA8CnB,WACIK,QAAQC,IAAI,mCACZC,KAAKmI,oB,6BAGT,WAAmB,IAAD,OACd,OACI,eAACpM,EAAA,EAAD,CAAMC,MAAO,CAACzD,GAAO0B,QAAS,CAACf,eAAgB,kBAA/C,UACI,cAAC6F,EAAA,EAAD,CAAW1B,QAAS,WAAO,EAAKc,MAAMa,WAAW+J,UAAY/M,MAAOzD,GAAOG,WAA3E,SACI,cAAC,OAAD,CAAM0D,KAAK,aAAaC,KAAK,QAAQzD,OAAQ,GAAIC,MAAO,OAE5D,eAACkD,EAAA,EAAD,CAAMC,MAAO,CAACzD,GAAOyN,sBAAuB,CAAC9L,cAAe,MAAOC,WAAY,WAA/E,UACI,eAAC8B,EAAA,EAAD,CAAMD,MAAOzD,GAAO0N,cAApB,cAAsCoB,GAA6BrH,KAAK7B,MAAMmG,MAAMC,OAAO3F,aAAaP,KAAM2B,KAAKZ,MAAMtC,WAAzH,OACA,cAAC,OAAD,CAAMV,KAAK,OAAOC,KAAK,mBAAmBzD,OAAQ,GAAIC,MAAO,QAEjE,cAACkG,EAAA,EAAD,CAAW1B,QAAS,WAAO,EAAKiE,SAAS,CAACnF,MAAO,EAAKiD,MAAMjD,QAAUH,MAAOzD,GAAOG,WAApF,SACI,cAAC,OAAD,CAAM0D,KAAM4D,KAAKZ,MAAMjD,KAAO,OAAS,eAAgBE,KAAK,wBAAwBzD,OAAQ,GAAIC,MAAO,Y,yBAMvH,WAAe,IAAD,OACV,OAAO2N,GAAM5I,KAAI,SAACoL,EAAMlL,GACpB,IAjJcmL,EAiJRC,EAAW,EAAK9J,MAAMuI,cAAgBqB,EACtClB,EAAiB,EAAK1I,MAAM0I,eAC5BqB,EAAW1C,GAAe3I,GAChC,OACI,cAAC/B,EAAA,EAAD,CAA0BC,MAAOzD,GAAOiN,WAAxC,SACI,cAAC,KAAD,CACApJ,KAAMsK,GAAU5I,GAChBsL,KAAMtB,EAAiB,GAAMoB,EAAW,GAAK,GAC7CtP,MAAQkO,GAA6BoB,EAAZC,GAzJnBF,EAyJsE,GAzJ5D,CAAC,qBAAqBA,EAAtB,yBAAqDA,EAArD,2BAAsFA,EAAtF,0BAAsHA,EAAtH,uBAAmJA,EAAnJ,MAyJiEnL,GACjFT,QAAS,EAAKoL,kBAAkBO,MALzB,QAAQlL,Q,+BAY/B,SAAkBkL,GACd,SAASK,IACDrJ,KAAKZ,MAAMuI,cAAcqB,EACzBhJ,KAAKsB,SAAS,CAACqG,aAAc,KAAMG,gBAAgB,IAEnD9H,KAAKsB,SAAS,CAACqG,aAAcqB,EAAMlB,gBAAgB,IAI3D,OADAuB,EAAaA,EAAW5J,KAAKO,Q,4BAIjC,SAAexC,GAAW,IAAD,OACrB,OACIA,EAASI,KAAK,SAAAC,GAAO,OACjB,cAACkB,EAAA,EAAD,CAEAuK,MAAOzL,EACPR,QAAS,EAAKmL,qBAAqB3K,GAHnC,SAKI,cAAC5B,EAAA,EAAD,CAAMD,MAAO,CAACzD,GAAO+B,aAAc,CAACrB,gBAAiB,EAAKmG,MAAM2H,mBAAmBlJ,GAAW,YAAc,cAA5G,SAA6HA,KAJ5H,WAAaA,Q,kCAU9B,SAAqBA,GACjB,SAAS0L,IACLvJ,KAAKsB,SAAS,CACVyF,mBAAmB,SACZ/G,KAAKZ,MAAM2H,oBADA,UAEblJ,GAAWmC,KAAKZ,MAAM2H,mBAAmBlJ,OAKtD,OADA0L,EAAgBA,EAAc9J,KAAKO,Q,yBAIvC,WAAe,IAAD,OACV,OACI,cAACwJ,GAAA,EAAD,CACAC,WAAS,EACTC,eAAa,EACbC,YAAY,kBACZC,qBAAqB,wBACrBC,aAAc,SAAAhP,GAAI,OAAI,EAAKyG,SAAS,CAACsG,YAAa/M,KAClDiP,MAAO9J,KAAKZ,MAAMwI,YAClB5L,MAAOzD,GAAOkN,e,2BAMtB,SAAcsE,EAAaC,EAAeC,GACtC,OAAIjK,KAAKZ,MAAM+B,gBAAkB4I,EACV,iBAAfA,EACOnD,GAAchJ,KAAI,SAACJ,EAAUM,GAAX,OACrB,eAAC/B,EAAA,EAAD,CAAqCC,MAAO,CAACnD,MAAO,OAAQsB,WAAY,SAAU2L,eAAgB,IAAlG,UACI,cAAC7J,EAAA,EAAD,CAAMD,MAAO,CAACrC,SAAU,GAAIC,MAAO,QAASkM,eAAgB,GAA5D,SAAiEa,GAAmB7I,KACpF,cAAC/B,EAAA,EAAD,CAAkBC,MAAO,CAACzD,GAAO0B,QAAS+P,GAA1C,SACKC,EAAgBzM,IADVM,KAFJ,iBAAmBA,MAS9B,cAAC/B,EAAA,EAAD,CAAMC,MAAO,CAACzD,GAAO0B,QAAS+P,GAA9B,SACKC,IAMT,+B,uBAKZ,SAAUF,EAAahP,EAAMiP,EAAeC,GACxC,MAAoB,WAAhBF,EAEI,eAAChL,EAAA,EAAD,CAAW/C,MAAO,CAACzD,GAAOuB,MAAOuD,QAAS2C,KAAK2I,iBAAiBoB,GAAhE,UACI,eAAChO,EAAA,EAAD,CAAMC,MAAOzD,GAAO0B,QAApB,UACI,cAAC,OAAD,CAAMmC,KAAMrB,EAAMsB,KAAK,yBAAyBzD,OAAQ,GAAIC,MAAO,GAAImD,MAAOzD,GAAOyC,YACrF,eAACiB,EAAA,EAAD,CAAMD,MAAOzD,GAAO6M,WAApB,cAAkC2E,EAAlC,UAEH/J,KAAK0I,cAAcqB,EAAaC,EAAeC,MAKpD,eAAClO,EAAA,EAAD,CAAMC,MAAO,CAACzD,GAAOuB,MAArB,UACI,eAACiF,EAAA,EAAD,CAAW/C,MAAOzD,GAAO0B,QAASoD,QAAS2C,KAAK2I,iBAAiBoB,GAAjE,UACI,cAAC,OAAD,CAAM3N,KAAMrB,EAAMsB,KAAK,yBAAyBzD,OAAQ,GAAIC,MAAO,GAAImD,MAAOzD,GAAOyC,YACrF,eAACiB,EAAA,EAAD,CAAMD,MAAOzD,GAAO6M,WAApB,cAAkC2E,EAAlC,UAEH/J,KAAK0I,cAAcqB,EAAaC,EAAeC,Q,8BAMhE,SAAkBnO,GACd,SAASoO,IACLlK,KAAKsB,SAAU,CAACH,cAAgBnB,KAAKZ,MAAM+B,gBAAkBrF,EAAQ,KAAOA,IAGhF,OADAoO,EAAcA,EAAYzK,KAAKO,Q,sBAInC,WACI,OACE,cAACjE,EAAA,EAAD,CAAMC,MAAO,CAACzD,GAAOqM,MAAMvJ,OAAQ2E,KAAKZ,MAAM8I,SAAW,GAAK,CAACjP,gBAAiB,cAAeQ,YAAa,gBAA5G,SACE,cAACwC,EAAA,EAAD,CAAMD,MAAOzD,GAAOqM,MAAMtJ,IAA1B,SAAgC0E,KAAKZ,MAAM8I,e,yBAKnD,SAAY5M,GAAM,IAAD,OACb0E,KAAKsB,SAAS,CAAC4G,SAAU5M,IACzBkJ,YAAY,kBAAM,EAAKlD,SAAS,CAAC4G,SAAU,OAAO,O,6BAGtD,WACI,IAAMtJ,EAAeoB,KAAK7B,MAAMmG,MAAMC,OAAO3F,aAC7C,OAAQA,EAAaC,MACjB,IAAK,MACDiB,QAAQC,IAAI,wFACZC,KAAKsB,SAAS,CACVjD,KAAMO,EAAaP,KACnBvB,UAAWsK,KACXI,QAAS,GACTO,6BAA6B,IAEjC/H,KAAKmK,yBACLnK,KAAKoK,qBACL,MAEJ,IAAK,cACDtK,QAAQC,IAAI,uEAAyEnB,EAAaP,MAClG2B,KAAKsB,SAAS,CACVjD,KAAMO,EAAaP,KACnBvB,UAAW,GACX0K,QAAS,KAEb,MAEJ,IAAK,OAGD,IAFA,IAEA,EAFM1L,EAAQ8C,EAAa9C,MACvBuO,EAAwB,GAC5B,KAAqBvD,MAArB,aAAqC,CAAC,IAA5BjJ,EAA2B,QACjCwM,EAAsBxM,IAA+C,GAApC/B,EAAM0B,SAASwF,QAAQnF,GAE5DmC,KAAKsB,SAAS,CACVjD,KAAMvC,EAAMuC,KACZvB,UAAWhB,EAAMgB,UACjB0K,QAAS1L,EAAM0L,QACfC,UAAW3L,EAAM2L,UACjBC,WAAY5L,EAAM4L,WAClBvL,KAAML,EAAMK,KACZwL,aAAc7L,EAAMI,KACpB6K,mBAAoBsD,EACpBzC,YAAa9L,EAAMkC,OACnBb,QAASrB,EAAMqB,QACf0K,SAAU/L,EAAM+L,SAChBvL,QAASR,EAAMQ,QACfwL,gBAAgB,O,wBAShC,WACI,IAAMwC,EAAgBtK,KAAKZ,MAAM2I,4BAA8B/H,KAAKZ,MAAMG,UAC1E,OACI,cAACR,EAAA,EAAD,CACA1B,QAAS2C,KAAKoI,kBACdpH,SAAUsJ,EACVtO,MAAOzD,GAAOmN,WAHd,SAKM4E,EACE,cAACC,GAAA,EAAD,CAAmBnB,KAAK,QAAQxP,MAAM,YAEtC,cAACqC,EAAA,EAAD,CAAMD,MAAOzD,GAAOsN,gBAApB,0B,+BAMhB,WAAqB,IAAD,OAChB,GAAK7F,KAAKZ,MAAMuI,aAKZ,IACI,IACIF,EAAWD,EADT5I,EAAeoB,KAAK7B,MAAMmG,MAAMC,OAAO3F,aAEzC8I,EAAaN,KACjB,OAAQxI,EAAaC,MACjB,IAAK,MACD2I,EAAUE,EACVD,EAAYC,EACZ,MAEJ,IAAK,cACDF,EAAUxH,KAAKZ,MAAMoI,QACrBC,EAAYC,EACZ,MAEJ,IAAK,OACDF,EAAUxH,KAAKZ,MAAMoI,QACrBC,EAAYzH,KAAKZ,MAAMqI,UAO/B,IAAM+C,EAAe,CACjBnM,KAAM2B,KAAKZ,MAAMf,KACjBvB,UAAWkD,KAAKZ,MAAMtC,UACtB0K,QAASA,EACTC,UAAWA,EACXC,WAAW,GAAD,YAAO1H,KAAKZ,MAAMsI,YAAlB,CAA8B,CAACrJ,KAAMK,KAASqF,KAAM2D,KAC9DvL,KAAM6D,KAAKZ,MAAMjD,KACjBD,KAAM8D,KAAKZ,MAAMuI,aACjBnK,SAAUsJ,GAAcnG,QAAQ,SAAA9C,GAAO,OAAI,EAAKuB,MAAM2H,mBAAmBlJ,MACzEG,OAAQgC,KAAKZ,MAAMwI,YACnBzK,QAAS6C,KAAKZ,MAAMjC,QACpB0K,SAAU7H,KAAKZ,MAAMyI,SACrBvL,QAAS0D,KAAKZ,MAAM9C,SAGxBwD,QAAQC,IAAR,+CAA2DnB,EAAaC,KAAxE,WAAuF4L,KAAKC,UAAUF,IACtGxK,KAAK8I,kBAAkB0B,GAEzB,MAAOG,GAEL3K,KAAK4K,YAAY,+DACjB9K,QAAQC,IAAI,8DACZD,QAAQC,IAAI4K,QAlDhB3K,KAAK4K,YAAY,gDACjB5K,KAAKsB,SAAS,CAACH,cAAe,sB,+BAsDtC,SAAwB0J,GAAxB,yBAAAzJ,EAAAC,OAAA,uDACIrB,KAAKsB,SAAS,CAAE/B,WAAW,IACvBuL,EAAO9K,KAAK7B,MAAMmG,MAAMC,OAAO7C,SAC7B9C,EAAeoB,KAAK7B,MAAMmG,MAAMC,OAAO3F,aACvCmM,EAAiC,SAAtBnM,EAAaC,KAJlC,SAMQiB,QAAQC,IAAI,iCACRiL,EAAsB,CAACxJ,IAAI,EAAOpB,OAAQ,MAAO0B,WAAY,yBAC3DmJ,EAAoB,CACtBrJ,OAAQmJ,EAAU,MAAQ,OAC1BG,QAAS,CACL,eAAgB,oBAEpBC,KAAMV,KAAKC,UAAWG,IAblC,YAAAzJ,EAAA,MAgBoCK,MAAOlG,sDAAoCuP,EAAKnJ,SAAW,YAAcoJ,EAAW,IAAInM,EAAa9C,MAAM0E,IAAM,IAAKyK,IAhB1J,WAgBQD,EAhBR,OAiBcI,EAAsB,WAAaJ,EAAoB5K,OAAS,KAAO4K,EAAoBlJ,YAE7FkJ,EAAoBxJ,GAnBhC,iBAoBY1B,QAAQC,IAAI,kCACZD,QAAQC,IAAIqL,GArBxB,8BAwBYtL,QAAQC,IAAI,gDACN,IAAIgC,MAAMqJ,GAzB5B,0DA6BQtL,QAAQC,IAAI,mBACZD,QAAQC,IAAR,MA9BR,yBAiCQD,QAAQC,IAAI,gCACZC,KAAKsB,SAAS,CAAE/B,WAAW,IACvByL,EAAoBxJ,IAAIxB,KAAK7B,MAAMa,WAAWC,SAAS,YAAa,CAACkB,OAAQ,CAACC,QAAQ,EAAMtE,MAAO8C,KAnC/G,sF,0BAuCA,qCAAAwC,EAAAC,OAAA,6DAGYrB,KAAKZ,MAAM6I,gBAHvB,wBAKYnI,QAAQC,IAAI,qCACNsL,EAASrL,KAAKZ,MAAM6I,gBACpBqD,EAAMD,EAAOE,SACbC,EAAMH,EAAOI,UAR/B,WAAArK,EAAA,MAUkBK,MAAM,uDAC+C6J,EADhD,QAC2DE,EAD3D,UACwEnF,GAAkBC,IAD1F,iBAGVoF,MAAK,SAAAC,GACF,IAAMC,EAAY,WAAaD,EAAIvL,OAAS,kBAAoBuL,EAAI7J,WACpE,GAAK6J,EAAInK,GAGL,OAAOmK,EAAI1J,OAFX,MAAM,IAAIF,MAAM6J,MAKvBF,MAAK,SAAApP,GACFwD,QAAQC,IAAI,qCAGZ,IAAM8L,EAAc,CAChBR,OAAQ/O,EAAQwP,MAChB1P,KAAME,EAAQF,KACdE,QAASA,EAAQA,QAAQ,GACzBI,KAAMJ,EAAQI,KACdqP,OAAQzP,EAAQyP,OAChBC,KAAM1P,EAAQ0P,KACdC,WAAY3P,EAAQ2P,YAGxB,EAAK3K,SAAS,CAAChF,QAASuP,QAnCxC,+BAuCY/L,QAAQC,IAAI,uEAvCxB,0DA2CQD,QAAQC,IAAI,iDACZD,QAAQC,IAAR,MA5CR,yBA+CQD,QAAQC,IAAI,mCACZC,KAAKsB,SAAS,CAACyG,6BAA6B,IAhDpD,sF,oCAqDA,0BAAA3G,EAAAC,OAAA,mDAEUrB,KAAKZ,MAAM4I,uBAFrB,iCAIYlI,QAAQC,IAAI,qEAJxB,WAAAqB,EAAA,MAKgCmF,QALhC,QAKgB2F,EALhB,SAWgBpM,QAAQC,IAAI,kEACZC,KAAKsB,SAAS,CAAC6K,uBAAwBD,MAJvCpM,QAAQC,IAAI,4EACZqM,MAAM,wEATtB,gDAgBYtM,QAAQC,IAAI,+GAhBxB,yBAmBYD,QAAQC,IAAI,wCAnBxB,6CAuBYD,QAAQC,IAAI,2EAvBxB,wE,gCA6BA,oCAAAqB,EAAAC,OAAA,gEAGQvB,QAAQC,IAAI,+DAHpB,WAAAqB,EAAA,MAI+BmF,QAJ/B,uBAOuB,YAPvB,EAIcnG,QAIFN,QAAQC,IAAI,2DACZqM,MAAM,mEAGNtM,QAAQC,IAAI,uDAGhBD,QAAQC,IAAI,uEAfpB,YAAAqB,EAAA,MAgB+BmF,QAhB/B,sBAgBc8E,EAhBd,EAgBcA,QAhBd,wBAmBoBE,EAAwBF,EAAxBE,SAAUE,EAAcJ,EAAdI,UAClBzL,KAAKsB,SAAS,CAAC2G,gBAAiBoD,IAChCvL,QAAQC,IAAR,yEAAqFwL,EAArF,eAA4GE,GAC5G3L,QAAQC,IAAI,mEAtBxB,YAAAqB,EAAA,MAuBiCmF,KAA6B,CAAEgF,WAAUE,eAvB1E,SAuBgBY,EAvBhB,SA0BgBrM,KAAKsB,SAAS,CAAEnE,SAzeVmP,EAyeoCD,EAAS,GAxe5DC,EAAWC,OAAS,KAAOD,EAAWE,aAAe,MAAQF,EAAWG,SAAW,KAAOH,EAAWI,UAAY,KAAOJ,EAAWK,OAAS,KAAOL,EAAWM,eAAiB,KAwe9G/E,SAAU,CAAElP,SAAU0S,EAAQlO,QAASkP,EAAS,MACxGvM,QAAQC,IAAI,0FAGZD,QAAQC,IAAI,sFACZD,QAAQC,IAAIsM,IA/B5B,wBAmCYvM,QAAQC,IAAR,6GAnCZ,0DAuCQD,QAAQC,IAAI,uEACZD,QAAQC,IAAR,MAxCR,yBA2CQD,QAAQC,IAAI,0FACZC,KAAK6M,eA5Cb,+CA/cJ,IAA0BP,IA+ctB,oC,oBAgDA,WAEI,OACI,eAAC7H,EAAA,EAAD,CAAiBjI,OAAQkI,EAAQ,KAA4B1I,MAAOzD,GAAOC,SAA3E,UAEI,cAACmM,EAAA,EAAD,CAAY3I,MAAOzD,GAAOa,WAA1B,SACI,eAAC2C,EAAA,EAAD,CAAMC,MAAOzD,GAAOe,QAApB,UACS0G,KAAKuI,kBACLvI,KAAK4I,UAAU,kBAAa,eAAgB,CAAC1P,eAAgB,iBAAkB8G,KAAKsI,eACpFtI,KAAK4I,UAAU,gBAAW,2BAA4B,CAAClL,SAAU,OAAQxE,eAAgB,UAAW8G,KAAKqI,gBACzGrI,KAAK4I,UAAU,SAAU,OAAQ,CAAC1O,cAAe,SAAU4S,UAAW,KAAM9M,KAAK6I,oBAI9F,mBAAMnD,WAAN,IAEC1F,KAAKkI,kB,GA3gB0B1F,aCCjCjK,GApGF,CACTqM,MAAO,CACHpM,SAAU,CACNC,KAAM,EACNS,eAAgB,SAChBiB,WAAY,UAGhB4S,UAAW,CACP7S,cAAe,MACfhB,eAAgB,SAChBiB,WAAY,SACZ2S,UAAW,IAEfxD,MAAO,CACH3P,SAAU,GACVE,WAAY,OACZD,MAAO,QACPZ,UAAW,UAEfgU,UAAW,CACPnU,MAAO,GACPD,OAAQ,GACRqU,WAAY,EACZxS,WAAY,GAEhBX,KAAM,CACFlB,OAAQ,MACRkU,UAAW,IACXjU,MAAO,IACPmB,kBAAmB,GACnBT,gBAAiB,GACjBF,YAAa,EACbP,aAAc,GACdG,gBAAiB,SAErBiU,WAAY,CACRtU,OAAQ,MACRC,MAAO,QAEXsU,UAAW,CACPxU,SAAU,WACV2E,IAAK,MACLW,KAAM,KACNtE,SAAU,GACVE,WAAY,OACZD,MAAO,SAEXwT,YAAa,CACTxU,OAAQ,MACRM,eAAgB,eAChBiB,WAAY,UAEhBkT,YAAa,CACTrU,UAAW,UAEfsU,WAAY,CACRR,UAAW,GACXjU,MAAO,OACPwM,YAAa,GACb1L,SAAU,GACVN,YAAa,EACbP,aAAc,EACdG,gBAAiB,SAErBsU,OAAQ,CACJ3U,OAAQ,GACRC,MAAO,OACPwB,UAAW,SACXF,WAAY,SACZjB,eAAgB,SAChBG,YAAa,EACbP,aAAc,EACdW,YAAa,QACbR,gBAAiB,aAErBuU,YAAa,CACT7T,SAAU,GACVE,WAAY,OACZD,MAAO,SAEXiB,KAAM,CACFlB,SAAU,GACVU,UAAW,UAEfgB,OAAQ,CACJxC,MAAO,IACPD,OAAQ,GACRM,eAAgB,SAChBD,gBAAiB,gBACjBI,YAAa,EACbI,YAAa,iBAEjB6B,IAAK,CACDjB,UAAW,SACXT,MAAO,W,+zDCrFnB,IAAM2B,GAAyB,OAAfC,IAASC,GAAc,+CAAiD,GASlFgS,GAAc,CAAC,cAAe,gBAAiB,YAAa,mBAClE,SAASC,GAAiBjR,EAAK8H,EAAQuF,GACrC,eAAkBvF,KAAlB,aAA0B,CACxB9H,GAAO,IADiB,QACH,IAAMqN,EAE7B,OAAOrN,EAGT,SAAekR,GAAcvL,GAA7B,qBAAAhB,EAAAC,OAAA,uDAEEvB,QAAQC,IAAI,iEAFd,SAOItD,EAAMiR,GADFjR,EAfyB,yGAeM2F,EACPqL,GAAa,KACrCG,EAAc,CAACpM,IAAI,EAAOpB,OAAQ,4BAR1C,WAAAgB,EAAA,MAS0BK,MAAOhF,EAAM,CAAEmF,OAAQ,SATjD,YASUiM,EATV,QAWgBrM,GAXhB,wBAaM1B,QAAQC,IAAI,4DAblB,YAAAqB,EAAA,MAcgCyM,EAAQ5L,QAdxC,cAgBoC,UAFxB6L,EAdZ,QAgBuBC,YACfH,EAAYxN,OAAS,qBACY,SAAvB0N,EAAYE,UACtBJ,EAAYxN,OAAS,uBAErBwN,EAAc,CAACpM,IAAI,EAAMpB,OAAQ,oBArBzC,kBAwBawN,GAxBb,cA2BM9N,QAAQC,IAAI,0EACN,IAAIgC,MAAM,WAAa8L,EAAQzN,OAAS,kBAAoByN,EAAQ/L,YA5BhF,yBAgCIhC,QAAQC,IAAI,2CAhChB,kF,IA4UekO,G,iCAnRb,WAAY9P,GAAQ,IAAD,sBACjB,cAAMA,IA0DR8P,YAAc,WACZ,OACE,eAACxJ,EAAA,EAAD,CAAiBjI,OAAQkI,EAAQ,KAA4B1I,MAAO,CAACzD,GAAOqM,MAAMpM,SAAU,CAACU,eAAgB,iBAA7G,UAEE,cAAC6C,EAAA,EAAD,CAAMC,MAAOzD,GAAOqM,MAAMmI,UAA1B,SACE,cAAC9Q,EAAA,EAAD,CAAMD,MAAOzD,GAAOqM,MAAM0E,MAA1B,4BAGF,eAACvN,EAAA,EAAD,CAAMC,MAAOzD,GAAOqM,MAAM9K,KAA1B,UACE,cAACiC,EAAA,EAAD,CAAMC,MAAOzD,GAAOqM,MAAMsI,WAA1B,SACE,cAACjR,EAAA,EAAD,CAAMD,MAAOzD,GAAOqM,MAAMuI,UAA1B,sBAEF,eAACpR,EAAA,EAAD,CAAMC,MAAOzD,GAAOqM,MAAMwI,YAA1B,UACE,cAAC5D,GAAA,EAAD,CACAG,YAAY,QACZuE,gBAAgB,eAChBlS,MAAOzD,GAAOqM,MAAM0I,WACpBzD,aAAc,EAAKA,aAAa,SAChCsE,aAAa,QACbC,qBAAqB,QAGrB,cAAC5E,GAAA,EAAD,CACAG,YAAY,QACZuE,gBAAgB,WAChBG,iBAAiB,EACjBrS,MAAOzD,GAAOqM,MAAM0I,WACpBzD,aAAc,EAAKA,aAAa,YAChCsE,aAAa,WACbC,qBAAqB,WAIvB,eAACrS,EAAA,EAAD,CAAMC,MAAOzD,GAAOqM,MAAMwI,YAA1B,UACG,EAAKkB,aAAa,UAClB,EAAKA,aAAa,aAErB,cAACvS,EAAA,EAAD,CAAMC,MAAO,CAACzD,GAAOqM,MAAMwI,aAA3B,SACG,EAAKmB,iBAIT,EAAKrG,eAlGV,EAAK9I,MAAQ,CACXsC,SAAU,CACR8M,SAAU,GACVpM,MAAO,GACPT,SAAU,IAEZuG,SAAU,GACVuG,YAAY,EACZnE,eAAe,GAEjB,EAAKT,aAAe,EAAKA,aAAapK,KAAlB,QACpB,EAAK6O,aAAe,EAAKA,aAAa7O,KAAlB,QACpB,EAAKyI,SAAW,EAAKA,SAASzI,KAAd,QAChB,EAAKmL,YAAc,EAAKA,YAAYnL,KAAjB,QACnB,EAAKiP,SAAW,EAAKA,SAASjP,KAAd,QAChB,EAAKkP,SAAW,EAAKA,SAASlP,KAAd,QAlBC,E,qCAqBnB,WACE,OAAIO,KAAKZ,MAAMkL,cACN,cAACC,GAAA,EAAD,CAAmB3Q,MAAM,YAEzB,cAAC,OAAD,CAAMwC,KAAK,iBAAiBwS,UAAU,QAAQvS,KAAK,OAAOxD,MAAO,GAAID,OAAQ,O,yBAIxF,SAAY0C,GAAM,IAAD,OACf0E,KAAKsB,SAAS,CAAC4G,SAAU5M,IACzBkJ,YAAY,kBAAM,EAAKlD,SAAS,CAAC4G,SAAU,OAAO,O,sBAGpD,WACI,OACE,cAACnM,EAAA,EAAD,CAAMC,MAAO,CAACzD,GAAOqM,MAAMvJ,OAAQ2E,KAAKZ,MAAM8I,SAAW,GAAK,CAACjP,gBAAiB,cAAeQ,YAAa,gBAA5G,SACE,cAACwC,EAAA,EAAD,CAAMD,MAAOzD,GAAOqM,MAAMtJ,IAA1B,SAAgC0E,KAAKZ,MAAM8I,e,0BAKnD,SAAa2G,GACX,SAASC,EAASjU,GAChBmF,KAAKsB,SAAU,CAAEI,SAAS,SAAM1B,KAAKZ,MAAMsC,UAAlB,UAA6BmN,EAAahU,MAGrE,OADAiU,EAAWA,EAASrP,KAAKO,Q,0BAI3B,SAAa+O,GACX,IAAMC,EAAiB,UAARD,EACf,OACE,cAAChQ,EAAA,EAAD,CAAWiC,SAAUhB,KAAKZ,MAAMkL,cAAejN,QAAS2R,EAAShP,KAAK0O,SAAW1O,KAAK2O,SAAU3S,MAAO,CAACzD,GAAOqM,MAAM2I,QAArH,SACE,cAACtR,EAAA,EAAD,CAAMD,MAAOzD,GAAOqM,MAAM4I,YAA1B,SAAyCwB,EAAS,SAAW,kB,0BAqDnE,WACE,GAAKhP,KAAKZ,MAAMsC,SAASU,MAKlB,IAAKpC,KAAKZ,MAAMsC,SAAS8M,SAKzB,OAAO,EADZ,OAFAxO,KAAK4K,YADU,qBAEf9K,QAAQC,IAAI,qCACL,EARP,IAAMkP,EAAS,kCAGf,OAFAjP,KAAK4K,YAAYqE,GACjBnP,QAAQC,IAAI,kBAAoBkP,IACzB,I,sBASX,oCAAA7N,EAAAC,OAAA,mDAEEvB,QAAQC,IAAI,6BACR+K,EAAO9K,KAAKZ,MAAMsC,SACtB1B,KAAKsB,SAAS,CAAEgJ,eAAe,IAJjC,UAQQtK,KAAKkP,eARb,mEAAA9N,EAAA,MAU4BK,MAAOlG,qDAAkC,CAAEqG,OAAQ,SAV/E,UAUQL,EAVR,OAWU4N,EAAc,WAAa5N,EAAYnB,OAAzB,kBAA2DmB,EAAYO,YACvFP,EAAYC,GAZpB,iBAaM1B,QAAQC,IAAI,0DACZD,QAAQC,IAAIoP,GAdlB,8BAgBMrP,QAAQC,IAAI,iFACZD,QAAQC,IAAI0K,KAAKC,UAAUnJ,IAC3BzB,QAAQC,IAAI,qBACN,IAAIgC,MAAMoN,GAnBtB,2BAAA/N,EAAA,MAsBwBG,EAAYU,QAtBpC,QAsBUmN,EAtBV,QAuBUjN,EAAOiN,EAAMzO,QAAO,SAACwB,GAAD,OAAUA,EAAKC,QAAU0I,EAAK1I,SAAO,IAIzDD,EAAKqM,WAAa1D,EAAK0D,UACnB9M,EAD6B,SACboJ,GADa,IACPnJ,SAAUmJ,EAAK1I,MAAM5D,MAAM,KAAK,KAC5DwB,KAAKsB,SAAU,CAACmN,YAAY,EAAM/M,aACf,+BACnB1B,KAAK4K,YADc,gCAEnB9K,QAAQC,IAAI,6BAGG,mBACfC,KAAK4K,YADU,oBAEf9K,QAAQC,IAAI,qCAIC,2BACfC,KAAK4K,YADU,4BAEf9K,QAAQC,IAAI,4CA3ClB,kDA+CmB,uCACfC,KAAK4K,YADU,wCAEf9K,QAAQC,IAAI,kFACZD,QAAQC,IAAI,oDACZD,QAAQC,IAAR,MAnDJ,yBAsDIC,KAAKsB,SAAS,CAAEgJ,eAAe,IAC/BxK,QAAQC,IAAI,6BACRC,KAAKZ,MAAMqP,YAAYzO,KAAK7B,MAAMkR,SAASrP,KAAKZ,MAAMsC,UAxD9D,sF,sBA4DA,8CAAAN,EAAAC,OAAA,mDAEEvB,QAAQC,IAAI,6BACR+K,EAAO9K,KAAKZ,MAAMsC,SACtB1B,KAAKsB,SAAS,CAAEgJ,eAAe,IAJjC,SAQQgF,EAAiB,CAAC9N,IAAI,IACtBxB,KAAKkP,eATb,mEAAA9N,EAAA,MAYkCuM,GAAc7C,EAAK1I,QAZrD,UAYUmN,EAZV,OAaIzP,QAAQC,IAAI,mBAAqBwP,EAAgBnP,QAC5CmP,EAAgB/N,GAdzB,wBAeQxB,KAAK4K,YAAY2E,EAAgBnP,QAfzC,8CAAAgB,EAAA,MAoB4BK,MAAOlG,qDAAkC,CAAEqG,OAAQ,SApB/E,WAoBQL,EApBR,OAqBUiO,EAAY,WAAajO,EAAYnB,OAAS,KAAOmB,EAAYO,YACnEP,EAAYC,GAtBpB,iBAuBM1B,QAAQC,IAAI,0DACZD,QAAQC,IAAIyP,GAxBlB,8BA0BM1P,QAAQC,IAAI,wEACN,IAAIgC,MAAMyN,GA3BtB,2BAAApO,EAAA,MA8BwBG,EAAYU,QA9BpC,WA8BUmN,EA9BV,OA+BiBA,EAAMzO,QAAO,SAACwB,GAAD,OAAUA,EAAKC,QAAU0I,EAAK1I,SAAO,GA/BnE,oBApMwBoM,EAuOqB1D,EAAK0D,SAtOlD1O,QAAQC,IAAI,sCAsOA0P,EApOSjB,EAAS/Q,OAAS,EAK/B,CAAC+D,IAAI,EAAMpB,OAAQ,oBAFnB,CAACoB,IAAI,EAAOpB,OAAQ,mDAkOHoB,GApCzB,wBAqCQ1B,QAAQC,IAAI,mBAAqB0P,EAAcrP,QAC/CJ,KAAK4K,YAAY6E,EAAcrP,QAtCvC,kCA2CM0K,EAAKnJ,SAAWmJ,EAAK1I,MAAM5D,MAAM,KAAK,GAChCkR,EAAe,CACnB9N,OAAQ,OACRsJ,QAAS,CACP,eAAgB,oBAElBC,KAAMV,KAAKC,UAAL,IAAkBiF,QAAS,IAAO7E,KAjDhD,YAAA1J,EAAA,MAoD6BK,MAAOlG,sDAAqCuP,EAAKnJ,SAAU+N,IApDxF,WAoDMJ,EApDN,OAqDYM,EAAiB,WAAaN,EAAelP,OAAS,KAAOkP,EAAexN,YAE9EwN,EAAe9N,GAvDzB,iBAwDcqO,EAAa,kCACnB7P,KAAK4K,YAAYiF,GACjB/P,QAAQC,IAAI,0DACZD,QAAQC,IAAI6P,GACZ9P,QAAQC,IAAI,mBAAqB8P,GA5DzC,8BA+DQ/P,QAAQC,IAAI,wEACN,IAAIgC,MAAM6N,GAhExB,gCAoEYX,EAAS,0BACfjP,KAAK4K,YAAYqE,GACjBnP,QAAQC,IAAI,mBAAqBkP,GAtEvC,0DA0EmB,uCACfjP,KAAK4K,YADU,wCAEf9K,QAAQC,IAAI,sDACZD,QAAQC,IAAR,MA7EJ,yBAgFIC,KAAKsB,SAAS,CAAEgJ,eAAe,IAC/BxK,QAAQC,IAAI,8BACRuP,EAAe9N,IAAKxB,KAAK0O,WAlFjC,+CApMF,IAA0BF,IAoMxB,oC,oBAsFA,WAGE,OAAOxO,KAAKiO,kB,GAhRUzL,a,gbCtE1B,IAAMsN,GAAQC,cAGRC,GAAa,SAAC7R,GAGlB,OACE,eAAC2R,GAAMG,UAAP,CACAC,iBAAiB,YACjBC,cAAe,CACbC,aAAa,GAHf,UAME,cAACN,GAAMO,OAAP,CACAjU,KAAK,YACLkU,UAAW3M,GACX4M,QAAS,CAACjH,MAAO,iBACjBkH,cAAe,CAAC9O,SAAUvD,EAAMuD,YAGhC,cAACoO,GAAMO,OAAP,CACAjU,KAAK,eACLkU,UAAW/I,GACXgJ,QAAS,CAACjH,MAAO,yBACjBkH,cAAe,CAAC9O,SAAUvD,EAAMuD,gBAkCjB+O,G,iCAEnB,WAAYtS,GAAQ,IAAD,sBACjB,cAAMA,IAEDiB,MAAQ,CACXqP,YAAY,EACZ/M,SAAU,MAEZ,EAAK2N,SAAW,EAAKA,SAAS5P,KAAd,QAPC,E,oCAUnB,SAASiC,GACP5B,QAAQC,IAAI,qDACZC,KAAKsB,SAAU,CAACmN,YAAY,EAAM/M,e,oBAGpC,WAEE,OAAK1B,KAAKZ,MAAMqP,WAMZ,cAACiC,EAAA,EAAD,UACE,cAAC,GAAD,CAAYhP,SAAU1B,KAAKZ,MAAMsC,aAN9B,cAAC,GAAD,CAAa2N,SAAUrP,KAAKqP,e,GApBR7M,c","file":"static/js/app.964fc617.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/wallpaper.9987c866.jpg\";","import { StatusBar } from 'expo-status-bar';\r\n\r\n//import StatusBar from 'react-native'\r\n// import { Platform } from 'react-native';\r\n\r\n// import { Dimensions } from 'react-native';\r\n// var windowWidth = Dimensions.get('window').width;\r\n// var windowHeight = Dimensions.get('window').height;\r\n\r\n// import DeviceInfo from 'react-native-device-info';\r\n// import AsyncStorage from '@react-native-community/async-storage';\r\n\r\n// // how can i do some code that will gives me if its \"Handset\"=> Smartphone , \r\n// //if its \"unknown\"=> Laptop/Computer \r\n// //and it will be saved as well in my async-storage.\r\n\r\n// //this some example that i wanna get it works well coz now its not work good\r\n\r\n// const funct1=  (type) => {\r\n// let type = DeviceInfo.getDeviceType();\r\n\r\n// if type==='Handset'{\r\n//   AsyncStorage.setItem('PLATFORM-TYPE', 'Smartphone');\r\n// }\r\n// if type==='unknown'{\r\n//   AsyncStorage.setItem('PLATFORM-TYPE', 'Laptop/Computer');\r\n// }\r\n// };\r\n\r\nconst styles = {\r\n    mainView: {\r\n        flex: 1,                 \r\n        // marginTop: StatusBar.currentHeight,\r\n    },\r\n    postButton: {\r\n        position: 'absolute',\r\n        height: 60,\r\n        width: 60,\r\n        borderRadius: 30,\r\n        bottom: '2%',\r\n        alignSelf: 'center',\r\n        backgroundColor: 'rgba(0,0,0,1)',\r\n        justifyContent: 'center',  \r\n    },\r\n    postButtonLabel: {\r\n        alignSelf: 'center',\r\n    },\r\n    scrollView: {\r\n        // paddingHorizontal: Platform.OS != 'web' ? '5%' : '5%',\r\n        flex: 1,\r\n        // height: '100%',\r\n        // width: '100%',\r\n        borderWidth: 1\r\n        // alignSelf: 'center',\r\n    },\r\n    section: {\r\n        width: 350,\r\n        paddingVertical: '16%',\r\n        borderBottomWidth: 1,\r\n        borderColor: 'rgba(155,155,155,0.3)',\r\n        alignSelf: 'center',\r\n    },\r\n    sectionTitle: {\r\n        paddingVertical: 7.5,\r\n        fontSize: 18,\r\n        color: 'white',\r\n        fontWeight: '400',\r\n    },\r\n    card: {\r\n        marginTop: '5%',\r\n        paddingVertical: 5,\r\n        paddingHorizontal: 10,\r\n        borderRadius: 20,\r\n        backgroundColor: 'rgba(0,0,0,0.2)',\r\n    },\r\n    cardRow: {\r\n        flexDirection: 'row',\r\n        paddingVertical: 5,\r\n        alignItems: 'center',\r\n    },\r\n    moodBadge: {\r\n        // fontFamily: 'sans-serif',\r\n        backgroundColor: 'green',\r\n        borderRadius: 30,\r\n        paddingVertical: 6,\r\n        width: 130,\r\n        fontSize: 15,\r\n        textAlign: 'center',\r\n    },\r\n    emotionBadge: {\r\n        // fontFamily: 'sans-serif',\r\n        backgroundColor: 'aliceblue',\r\n        borderRadius: 18,\r\n        paddingVertical: 6,\r\n        paddingHorizontal: 12.5,\r\n        marginRight: 6,\r\n        fontSize: 14,\r\n        textAlign: 'center',\r\n    },\r\n    textBadge: {\r\n        backgroundColor: 'aliceblue',\r\n        borderRadius: 17,\r\n        paddingTop: 5,\r\n        paddingBottom: 8,\r\n        paddingHorizontal: 11,\r\n        width: '100%',\r\n        fontSize: 15,\r\n        lineHeight: 22,\r\n        textAlign: 'left',\r\n        textAlignVertical: 'top',\r\n},\r\n    text: {\r\n        // fontFamily: 'sans-serif',\r\n        fontSize: 14,\r\n        color: 'white'\r\n    },\r\n    spaceBetween: {\r\n        justifyContent: 'space-between',\r\n    },\r\n    icon: {\r\n        paddingHorizontal: 12,\r\n    },\r\n    entryIcon: {\r\n        paddingRight: 0,\r\n        borderWidth: 1,\r\n    },\r\n    editButtonsView: {\r\n        flexDirection: 'row',\r\n        height: 50,\r\n        paddingBottom: 5,\r\n        alignItems: 'flex-end',\r\n        justifyContent: 'space-between'\r\n    },\r\n    editButton: {\r\n        height: 34,\r\n        width: 102,\r\n        borderWidth: 1,\r\n        borderColor: 'aliceblue',\r\n        borderRadius: 19,\r\n        alignItems: 'center',\r\n        justifyContent: 'center'\r\n    },\r\n    editButtonLabel: {\r\n        fontSize: 15,\r\n        fontWeight: '400',\r\n        color: 'white',\r\n    },\r\n    msgBox: {\r\n        position: 'absolute',\r\n        alignSelf: 'center',\r\n        bottom: 110,\r\n        width: 300,\r\n        height: 36,\r\n        justifyContent: 'center',\r\n        backgroundColor: 'rgb(30,30,30)',\r\n        borderWidth: 1,\r\n        borderColor: 'rgb(40,40,40)',\r\n        \r\n    },\r\n    msg: {\r\n        textAlign: 'center',\r\n        color: 'white',\r\n        // paddingHorizontal: 20,\r\n    },\r\n};\r\n\r\nexport default styles;","// Module import\r\nimport React, { Component, useState } from 'react';\r\nimport { Platform, View, Text, Pressable, Image } from 'react-native';\r\nimport { Icon } from 'react-native-eva-icons'\r\n\r\n// Local import\r\nimport styles from '../../styles/entrancesStyles'\r\n\r\n// cors-midpoint uri (needed to avoid cors' allow-cross-origin error when fetching in web platforms)\r\nconst corsURI = Platform.OS == 'web' ? 'https://morning-journey-78874.herokuapp.com/' : ''\r\nconst appServerURI = 'https://mood-tracker-server.herokuapp.com/'\r\n\r\n// OpenWeatherMap API weather icons URI:\r\nfunction openWeatherMapIconsURI (icon) {\r\n    if (Platform.OS === 'android') {\r\n        return `http://openweathermap.org/img/wn/${icon}@2x.png`\r\n\r\n    } else if (Platform.OS === 'web') {\r\n        return `https://openweathermap.org/img/wn/${icon}@2x.png`\r\n    }\r\n}\r\n\r\n// Defining mood colors schema\r\n// const moodColors = ['#ff3333', '#0099cc', '#add8e6', '#ffff33', '#00cc00']\r\nconst moodColors = {'Horrível': '#ff3333', 'Mal': '#0099cc', 'Regular': '#add8e6', 'Bem': '#ffff33', 'Ótimo': '#00cc00'};\r\n\r\nconst monthDict = {'Jan': '01', 'Feb': '02', 'Mar': '03', 'Apr': '04', 'May': '05', 'Jun': '06', 'Jul': '07', 'Ago': '08', 'Sep': '09', 'Oct': '10', 'Nov': '11', 'Dec': '12'}\r\nfunction Today() {\r\n    const now = Date().toString().split(' ')\r\n    const today = [ now[3], monthDict[now[1]], now[2] ].join('-')\r\n    return today\r\n}\r\n\r\nfunction MoodHeader({entry}) {\r\n    return(\r\n        <View style={ [styles.cardRow, styles.spaceBetween] }>\r\n            <View style={ [{flexDirection: 'row', alignItems: 'center'} ] }>\r\n                <Text style={[styles.moodBadge, {backgroundColor: moodColors[entry.mood]}]}>{entry.mood}</Text>\r\n                    { entry.star ? (\r\n                    <View style={{height: 30, width: 42, alignItems: 'flex-end', justifyContent: 'center'}}>\r\n                        <Icon name='star' fill='gold' width={28} height={28} style={{}} />\r\n                    </View>\r\n                    ) : <></> }                    \r\n                    { entry.weather ? (\r\n                        <View style={{height: 30, width: 50, alignItems: 'flex-end', justifyContent: 'center'}}>\r\n                            <Image source={{uri: openWeatherMapIconsURI(entry.weather.weather.icon)}} style={{width: 40, height: 40}} />\r\n                        </View>\r\n                    ) : <></> }                    \r\n                    { entry.weather ? (\r\n                        <View style={{height: 30, width: 40, alignItems: 'flex-end', justifyContent: 'center'}}>\r\n                            <Text style={{fontSize: 14, fontWeight: '500', color:'#fffd'}}> { entry.weather.main.temp.toString().slice(0,2) + '°C' } </Text>\r\n                        </View>\r\n                    ) : <></> }                \r\n                \r\n            </View>\r\n            <View style={[styles.cardRow]}>\r\n                <Icon name='edit' height={18} width={18} fill='rgba(255,255,255,0.75)' style={{marginRight: 6}} />\r\n                <Text style={styles.text}>{entry.startTime.slice(0,5)}</Text>\r\n            </View>\r\n        </View>\r\n\r\n    )\r\n}\r\n\r\nfunction Address ({entry}) {\r\n\r\n    const [isCollapsed, setIsCollapsed] = useState( 1 );\r\n    if (entry.address) {\r\n        return(\r\n            <View style={styles.cardRow}>\r\n                <Text numberOfLines={ isCollapsed } onPress={ () => { setIsCollapsed( isCollapsed ? 0 : 1 ) }} style={styles.text}>\r\n                    <Icon name='pin' height={17} width={17} fill='rgba(255,255,255,0.75)' style={{position: 'relative', marginRight: 5, top: 2}} />\r\n                    {entry.address}\r\n                </Text>\r\n            </View>        \r\n        )\r\n    } else {\r\n        return <></>\r\n    }\r\n}\r\n\r\nfunction Emotions ({entry}) {\r\n    if (entry.emotions.length>0) {\r\n        return (\r\n            <View style={[styles.cardRow, {flexWrap: 'wrap', justifyContent: 'flex-start', paddingTop: 2, PaddingBottom: 0}]}>\r\n                { entry.emotions.map((emotion, index) => {\r\n                    return(\r\n                        <View key={'emotion-' + emotion} style={{paddingVertical: 5, paddingHorizontal: 2}}>\r\n                            <Text style={[styles.emotionBadge]}>{emotion}</Text>\r\n                        </View>\r\n                    )\r\n                })}\r\n            </View>\r\n        )\r\n    } else {\r\n        return (\r\n            <></>\r\n        )\r\n    }\r\n}\r\n\r\nfunction Jornal({ entry }) {\r\n    if (entry.jornal) {\r\n        return(\r\n            <View style={styles.cardRow}>\r\n                <Text style={styles.textBadge}>\r\n                    <Icon name='book-open' height={20} width={20} fill='rgba(0,0,0,0.25)' style={{position: 'relative', top: 4, left: 1, marginRight: 6}} />\r\n                    {entry.jornal}\r\n                </Text>\r\n            </View>\r\n        )\r\n    } else {\r\n        return <></>\r\n    }\r\n}\r\n\r\nfunction EmptyCard(props) {\r\n    const today = props.date == Today()\r\n    const navigateParams = {\r\n        currentEntry: {\r\n            type: today ? 'new' : 'custom-date',\r\n            date: props.date,\r\n            entry: null\r\n        }\r\n    }\r\n    const textStyle = {fontSize: 16, color: 'white', marginTop: 7}\r\n    return (\r\n        <Pressable\r\n        onPress={ () => props.navigation.navigate('PostEntrance', navigateParams) }\r\n        // disabled={!today}\r\n        style={[styles.card, {alignItems: 'center', justifyContent: 'center', fontSize: 16, height: today ? 145 : 117}]}\r\n        >\r\n            <Icon name='inbox' fill='rgba(255,255,255,0.3)' width={25} height={25} />\r\n            <Text style={textStyle}> Nenhuma entrada encontrada. </Text>\r\n            { today ? <Text style={textStyle}> Pressione aqui para adicionar uma a este dia! </Text> : null }\r\n        </Pressable>\r\n    );\r\n}\r\n\r\nfunction CardsLoadingMessage() {\r\n    return(\r\n        <View style={[styles.card, {alignItems: 'center', justifyContent: 'center', height: 145}]}>\r\n            <Icon name='sync-outline' fill='rgba(0,0,0,0.3)' width={25} height={25} />\r\n        </View>\r\n    )\r\n}\r\n\r\nexport default class UserEntryCards extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            userEntries: [],\r\n            isEntriesSyncing: false,\r\n            isLoading: false,\r\n        };\r\n        this.EntryCard = this.EntryCard.bind(this);\r\n        // this.onEntryCardPress = this.onEntryCardPress.bind(this);\r\n        this.EditEntryButtons = this.EditEntryButtons.bind(this);\r\n        this.editUserEntry = this.editUserEntry.bind(this);\r\n        this.deleteUserEntry = this.deleteUserEntry.bind(this);\r\n        this.syncUserEntries = this.syncUserEntries.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log('Subcomponent \"UserEntryCards\" did mount...')\r\n        this.syncUserEntries()\r\n        setInterval( () => { this.updateIfPosted() }, 1000 * 3 )\r\n        // setInterval( () => { console.log('Default auto syncing started...'); this.syncUserEntries() }, 1000 * 10 )\r\n        \r\n    }\r\n\r\n    updateIfPosted () {\r\n        if (this.props.posted.status) {\r\n            console.log('JUST POSTED STATUS: POSTED. Redirecting date and syncing entries ...');\r\n            this.props.forgetPosted();\r\n            this.syncUserEntries();\r\n            }\r\n    }\r\n\r\n    EntryCard({ entry }) {\r\n        function onEntryCardPress() {\r\n            this.props.setSelectedEntryId(this.props.selectedEntryId === entry._id ? null : entry._id)\r\n        }\r\n        return (\r\n        <Pressable onPress={onEntryCardPress.bind(this)} style={styles.card}>\r\n            <MoodHeader entry={entry} />\r\n            <Emotions entry={entry} />\r\n            <Address entry={entry} />\r\n            <Jornal entry={entry} />\r\n            <this.EditEntryButtons entryId={entry._id} />\r\n        </Pressable>\r\n        );\r\n    }    \r\n\r\n    UserEntryCardsList() {\r\n        const selDateEntries = this.state.userEntries.filter( (entry) => entry.date === this.props.date )\r\n\r\n        if (selDateEntries.length) {\r\n            return selDateEntries.map( entry => <this.EntryCard key={'entry-card-'+entry.startTime} entry={entry} />)\r\n        \r\n        } else if (this.state.isEntriesSyncing) {    \r\n            return <CardsLoadingMessage />\r\n\r\n        } else {\r\n            return <EmptyCard navigation={this.props.navigation} date={this.props.date} />\r\n        }\r\n    }\r\n\r\n    EditEntryButtons(props) {\r\n        const buttonLabels = ['Editar', 'Excluir']\r\n        const onButtonPress = { 'Editar': this.editUserEntry, 'Excluir': this.deleteUserEntry }\r\n\r\n        const [isButtonPressed, setIsButtonPressed] = useState({\r\n            'Editar': false,\r\n            'Excluir': false,\r\n        })\r\n\r\n        if (this.props.selectedEntryId == props.entryId) {\r\n            return(\r\n                <View style={styles.editButtonsView}>\r\n                    { buttonLabels.map( (label) => (\r\n                        <Pressable\r\n                        key={`èdit-${label}-${props.entryId}`}\r\n                        style={[styles.editButton,  {backgroundColor: isButtonPressed[label] ? (label=='Excluir' ? '#000f' : '#fff2') : '#0000', borderColor: label=='Excluir' ? 'red' : 'white' }]}\r\n                        disabled={ this.state.isLoading | this.state.isEntriesSyncing }\r\n                        onPress={ onButtonPress[label] }\r\n                        onPressIn={() => setIsButtonPressed({ ...isButtonPressed, [label]: !isButtonPressed[label] })}\r\n                        onPressOut={() => setIsButtonPressed({ ...isButtonPressed, [label]: !isButtonPressed[label] })}\r\n                        >\r\n                            <Text style={[styles.editButtonLabel, {color: label=='Excluir' ? 'red' : 'white' }]}>{label}</Text>                    \r\n                        </Pressable>\r\n                    )) }\r\n            </View>\r\n            )\r\n        } else {\r\n            return null\r\n        }\r\n    }\r\n\r\n    editUserEntry() {\r\n        const selectedEntry = this.state.userEntries.filter( (entry) => entry._id == this.props.selectedEntryId )[0]\r\n        // this.setState({selectedEntryId: null})\r\n        this.props.navigation.navigate('PostEntrance', { currentEntry: {type: 'edit', date: selectedEntry.date, entry: selectedEntry} })\r\n    }\r\n\r\n    async deleteUserEntry() {\r\n\r\n        console.log('DELETE USER ENTRY STATUS: Started...')\r\n        this.setState({ isLoading: true });\r\n        // prompt()\r\n\r\n        try {\r\n            var UsersResult = {ok: false, status: 999}\r\n            UsersResult = await fetch( corsURI + appServerURI + 'Users/' + this.props.userInfo.username + '/entries/' + this.props.selectedEntryId, { method: 'DELETE' });\r\n            // var UsersResult = await fetch( 'https://localhost:3000/' + 'Users/' + this.props.userInfo.username + '/entries/' + this.props.selectedEntryId, { method: 'DELETE' });\r\n            const usersStatus =  'Status ' + UsersResult.status + ', ' + UsersResult.statusText\r\n\r\n            if (UsersResult.ok) {\r\n                // const users = await UsersResult.json();\r\n                console.log('fetch DELETE request for user entry successful.')\r\n                console.log(usersStatus)\r\n                console.log('DELETE USER ENTRY STATUS: Successful.')\r\n\r\n            } else {\r\n                console.log( new Error('\"fetch\" DELETE request for user entry failed. Throwing error...') )\r\n                throw new Error(usersStatus)\r\n            }\r\n    \r\n        } catch (error) {\r\n                console.log('DELETE USER ENTRY STATUS: Error captured. Printing error...')\r\n                console.log(error);\r\n                this.props.setAlertMsg('Não foi possível deletar a entrada. Tente novamente.')\r\n\r\n        } finally {\r\n            this.setState({ isLoading: false});\r\n            this.props.setSelectedEntryId(null)\r\n            console.log('DELETE USER ENTRY STATUS: FINISHED.' + UsersResult.ok ? 'Proceeding to sync user entries...' : 'Delete failed, skipping sync of user entries...')\r\n            if (UsersResult.ok) {this.syncUserEntries()}\r\n        }    \r\n    }\r\n\r\n    async syncUserEntries() {\r\n\r\n        console.log('SYNC ENTRIES STATUS: Started...')\r\n        this.setState({ isEntriesSyncing: true });\r\n    \r\n        try {\r\n\r\n            var UsersResult = await fetch( corsURI + appServerURI + 'Users', { method: 'GET' });\r\n            const usersStatus =  'Status: ' + UsersResult.status + ', ' + UsersResult.statusText\r\n\r\n            if (UsersResult.ok) {\r\n                const users = await UsersResult.json();\r\n                const user = users.filter((user) => user.email === this.props.userInfo.email)[0]\r\n                console.log('fetch GET request for user entries successful.')\r\n                console.log(usersStatus)\r\n\r\n                this.setState({userEntries: user['entries'].reverse(), entriesSynced: true})  \r\n                console.log('SYNC ENTRIES STATUS: Successful.')\r\n\r\n            } else {\r\n                console.log( new Error('\"fetch\" GET request for user entries failed. Throwing error...') )\r\n                throw new Error(usersStatus)\r\n            }\r\n    \r\n        } catch (error) {\r\n                console.log('SYNC ENTRIES STATUS: Error captured. Printing error...')\r\n                console.log(error);\r\n                this.props.setAlertMsg('Não foi possível sincronizar as entradas. Por favor, aguarde..')\r\n\r\n        } finally {\r\n            this.setState({ isEntriesSyncing: false });\r\n            console.log('SYNC ENTRIES STATUS: Finished.')\r\n        }    \r\n    }\r\n\r\n    render() {\r\n        // console.log('\"Rendering \"UserEntryCards\" subcomponent...\"')\r\n        return this.UserEntryCardsList()\r\n    }\r\n}","const dateRange = [\r\n    \"2021-01-01\",\r\n    \"2021-01-02\",\r\n    \"2021-01-03\",\r\n    \"2021-01-04\",\r\n    \"2021-01-05\",\r\n    \"2021-01-06\",\r\n    \"2021-01-07\",\r\n    \"2021-01-08\",\r\n    \"2021-01-09\",\r\n    \"2021-01-10\",\r\n    \"2021-01-11\",\r\n    \"2021-01-12\",\r\n    \"2021-01-13\",\r\n    \"2021-01-14\",\r\n    \"2021-01-15\",\r\n    \"2021-01-16\",\r\n    \"2021-01-17\",\r\n    \"2021-01-18\",\r\n    \"2021-01-19\",\r\n    \"2021-01-20\",\r\n    \"2021-01-21\",\r\n    \"2021-01-22\",\r\n    \"2021-01-23\",\r\n    \"2021-01-24\",\r\n    \"2021-01-25\",\r\n    \"2021-01-26\",\r\n    \"2021-01-27\",\r\n    \"2021-01-28\",\r\n    \"2021-01-29\",\r\n    \"2021-01-30\",\r\n    \"2021-01-31\",\r\n    \"2021-02-01\",\r\n    \"2021-02-02\",\r\n    \"2021-02-03\",\r\n    \"2021-02-04\",\r\n    \"2021-02-05\",\r\n    \"2021-02-06\",\r\n    \"2021-02-07\",\r\n    \"2021-02-08\",\r\n    \"2021-02-09\",\r\n    \"2021-02-10\",\r\n    \"2021-02-11\",\r\n    \"2021-02-12\",\r\n    \"2021-02-13\",\r\n    \"2021-02-14\",\r\n    \"2021-02-15\",\r\n    \"2021-02-16\",\r\n    \"2021-02-17\",\r\n    \"2021-02-18\",\r\n    \"2021-02-19\",\r\n    \"2021-02-20\",\r\n    \"2021-02-21\",\r\n    \"2021-02-22\",\r\n    \"2021-02-23\",\r\n    \"2021-02-24\",\r\n    \"2021-02-25\",\r\n    \"2021-02-26\",\r\n    \"2021-02-27\",\r\n    \"2021-02-28\",\r\n    \"2021-03-01\",\r\n    \"2021-03-02\",\r\n    \"2021-03-03\",\r\n    \"2021-03-04\",\r\n    \"2021-03-05\",\r\n    \"2021-03-06\",\r\n    \"2021-03-07\",\r\n    \"2021-03-08\",\r\n    \"2021-03-09\",\r\n    \"2021-03-10\",\r\n    \"2021-03-11\",\r\n    \"2021-03-12\",\r\n    \"2021-03-13\",\r\n    \"2021-03-14\",\r\n    \"2021-03-15\",\r\n    \"2021-03-16\",\r\n    \"2021-03-17\",\r\n    \"2021-03-18\",\r\n    \"2021-03-19\",\r\n    \"2021-03-20\",\r\n    \"2021-03-21\",\r\n    \"2021-03-22\",\r\n    \"2021-03-23\",\r\n    \"2021-03-24\",\r\n    \"2021-03-25\",\r\n    \"2021-03-26\",\r\n    \"2021-03-27\",\r\n    \"2021-03-28\",\r\n    \"2021-03-29\",\r\n    \"2021-03-30\",\r\n    \"2021-03-31\",\r\n    \"2021-04-01\",\r\n    \"2021-04-02\",\r\n    \"2021-04-03\",\r\n    \"2021-04-04\",\r\n    \"2021-04-05\",\r\n    \"2021-04-06\",\r\n    \"2021-04-07\",\r\n    \"2021-04-08\",\r\n    \"2021-04-09\",\r\n    \"2021-04-10\",\r\n    \"2021-04-11\",\r\n    \"2021-04-12\",\r\n    \"2021-04-13\",\r\n    \"2021-04-14\",\r\n    \"2021-04-15\",\r\n    \"2021-04-16\",\r\n    \"2021-04-17\",\r\n    \"2021-04-18\",\r\n    \"2021-04-19\",\r\n    \"2021-04-20\",\r\n    \"2021-04-21\",\r\n    \"2021-04-22\",\r\n    \"2021-04-23\",\r\n    \"2021-04-24\",\r\n    \"2021-04-25\",\r\n    \"2021-04-26\",\r\n    \"2021-04-27\",\r\n    \"2021-04-28\",\r\n    \"2021-04-29\",\r\n    \"2021-04-30\",\r\n    \"2021-05-01\",\r\n    \"2021-05-02\",\r\n    \"2021-05-03\",\r\n    \"2021-05-04\",\r\n    \"2021-05-05\",\r\n    \"2021-05-06\",\r\n    \"2021-05-07\",\r\n    \"2021-05-08\",\r\n    \"2021-05-09\",\r\n    \"2021-05-10\",\r\n    \"2021-05-11\",\r\n    \"2021-05-12\",\r\n    \"2021-05-13\",\r\n    \"2021-05-14\",\r\n    \"2021-05-15\",\r\n    \"2021-05-16\",\r\n    \"2021-05-17\",\r\n    \"2021-05-18\",\r\n    \"2021-05-19\",\r\n    \"2021-05-20\",\r\n    \"2021-05-21\",\r\n    \"2021-05-22\",\r\n    \"2021-05-23\",\r\n    \"2021-05-24\",\r\n    \"2021-05-25\",\r\n    \"2021-05-26\",\r\n    \"2021-05-27\",\r\n    \"2021-05-28\",\r\n    \"2021-05-29\",\r\n    \"2021-05-30\",\r\n    \"2021-05-31\",\r\n    \"2021-06-01\",\r\n    \"2021-06-02\",\r\n    \"2021-06-03\",\r\n    \"2021-06-04\",\r\n    \"2021-06-05\",\r\n    \"2021-06-06\",\r\n    \"2021-06-07\",\r\n    \"2021-06-08\",\r\n    \"2021-06-09\",\r\n    \"2021-06-10\",\r\n    \"2021-06-11\",\r\n    \"2021-06-12\",\r\n    \"2021-06-13\",\r\n    \"2021-06-14\",\r\n    \"2021-06-15\",\r\n    \"2021-06-16\",\r\n    \"2021-06-17\",\r\n    \"2021-06-18\",\r\n    \"2021-06-19\",\r\n    \"2021-06-20\",\r\n    \"2021-06-21\",\r\n    \"2021-06-22\",\r\n    \"2021-06-23\",\r\n    \"2021-06-24\",\r\n    \"2021-06-25\",\r\n    \"2021-06-26\",\r\n    \"2021-06-27\",\r\n    \"2021-06-28\",\r\n    \"2021-06-29\",\r\n    \"2021-06-30\",\r\n    \"2021-07-01\",\r\n    \"2021-07-02\",\r\n    \"2021-07-03\",\r\n    \"2021-07-04\",\r\n    \"2021-07-05\",\r\n    \"2021-07-06\",\r\n    \"2021-07-07\",\r\n    \"2021-07-08\",\r\n    \"2021-07-09\",\r\n    \"2021-07-10\",\r\n    \"2021-07-11\",\r\n    \"2021-07-12\",\r\n    \"2021-07-13\",\r\n    \"2021-07-14\",\r\n    \"2021-07-15\",\r\n    \"2021-07-16\",\r\n    \"2021-07-17\",\r\n    \"2021-07-18\",\r\n    \"2021-07-19\",\r\n    \"2021-07-20\",\r\n    \"2021-07-21\",\r\n    \"2021-07-22\",\r\n    \"2021-07-23\",\r\n    \"2021-07-24\",\r\n    \"2021-07-25\",\r\n    \"2021-07-26\",\r\n    \"2021-07-27\",\r\n    \"2021-07-28\",\r\n    \"2021-07-29\",\r\n    \"2021-07-30\",\r\n    \"2021-07-31\",\r\n    \"2021-08-01\",\r\n    \"2021-08-02\",\r\n    \"2021-08-03\",\r\n    \"2021-08-04\",\r\n    \"2021-08-05\",\r\n    \"2021-08-06\",\r\n    \"2021-08-07\",\r\n    \"2021-08-08\",\r\n    \"2021-08-09\",\r\n    \"2021-08-10\",\r\n    \"2021-08-11\",\r\n    \"2021-08-12\",\r\n    \"2021-08-13\",\r\n    \"2021-08-14\",\r\n    \"2021-08-15\",\r\n    \"2021-08-16\",\r\n    \"2021-08-17\",\r\n    \"2021-08-18\",\r\n    \"2021-08-19\",\r\n    \"2021-08-20\",\r\n    \"2021-08-21\",\r\n    \"2021-08-22\",\r\n    \"2021-08-23\",\r\n    \"2021-08-24\",\r\n    \"2021-08-25\",\r\n    \"2021-08-26\",\r\n    \"2021-08-27\",\r\n    \"2021-08-28\",\r\n    \"2021-08-29\",\r\n    \"2021-08-30\",\r\n    \"2021-08-31\",\r\n    \"2021-09-01\",\r\n    \"2021-09-02\",\r\n    \"2021-09-03\",\r\n    \"2021-09-04\",\r\n    \"2021-09-05\",\r\n    \"2021-09-06\",\r\n    \"2021-09-07\",\r\n    \"2021-09-08\",\r\n    \"2021-09-09\",\r\n    \"2021-09-10\",\r\n    \"2021-09-11\",\r\n    \"2021-09-12\",\r\n    \"2021-09-13\",\r\n    \"2021-09-14\",\r\n    \"2021-09-15\",\r\n    \"2021-09-16\",\r\n    \"2021-09-17\",\r\n    \"2021-09-18\",\r\n    \"2021-09-19\",\r\n    \"2021-09-20\",\r\n    \"2021-09-21\",\r\n    \"2021-09-22\",\r\n    \"2021-09-23\",\r\n    \"2021-09-24\",\r\n    \"2021-09-25\",\r\n    \"2021-09-26\",\r\n    \"2021-09-27\",\r\n    \"2021-09-28\",\r\n    \"2021-09-29\",\r\n    \"2021-09-30\",\r\n    \"2021-10-01\",\r\n    \"2021-10-02\",\r\n    \"2021-10-03\",\r\n    \"2021-10-04\",\r\n    \"2021-10-05\",\r\n    \"2021-10-06\",\r\n    \"2021-10-07\",\r\n    \"2021-10-08\",\r\n    \"2021-10-09\",\r\n    \"2021-10-10\",\r\n    \"2021-10-11\",\r\n    \"2021-10-12\",\r\n    \"2021-10-13\",\r\n    \"2021-10-14\",\r\n    \"2021-10-15\",\r\n    \"2021-10-16\",\r\n    \"2021-10-17\",\r\n    \"2021-10-18\",\r\n    \"2021-10-19\",\r\n    \"2021-10-20\",\r\n    \"2021-10-21\",\r\n    \"2021-10-22\",\r\n    \"2021-10-23\",\r\n    \"2021-10-24\",\r\n    \"2021-10-25\",\r\n    \"2021-10-26\",\r\n    \"2021-10-27\",\r\n    \"2021-10-28\",\r\n    \"2021-10-29\",\r\n    \"2021-10-30\",\r\n    \"2021-10-31\",\r\n    \"2021-11-01\",\r\n    \"2021-11-02\",\r\n    \"2021-11-03\",\r\n    \"2021-11-04\",\r\n    \"2021-11-05\",\r\n    \"2021-11-06\",\r\n    \"2021-11-07\",\r\n    \"2021-11-08\",\r\n    \"2021-11-09\",\r\n    \"2021-11-10\",\r\n    \"2021-11-11\",\r\n    \"2021-11-12\",\r\n    \"2021-11-13\",\r\n    \"2021-11-14\",\r\n    \"2021-11-15\",\r\n    \"2021-11-16\",\r\n    \"2021-11-17\",\r\n    \"2021-11-18\",\r\n    \"2021-11-19\",\r\n    \"2021-11-20\",\r\n    \"2021-11-21\",\r\n    \"2021-11-22\",\r\n    \"2021-11-23\",\r\n    \"2021-11-24\",\r\n    \"2021-11-25\",\r\n    \"2021-11-26\",\r\n    \"2021-11-27\",\r\n    \"2021-11-28\",\r\n    \"2021-11-29\",\r\n    \"2021-11-30\",\r\n    \"2021-12-01\",\r\n    \"2021-12-02\",\r\n    \"2021-12-03\",\r\n    \"2021-12-04\",\r\n    \"2021-12-05\",\r\n    \"2021-12-06\",\r\n    \"2021-12-07\",\r\n    \"2021-12-08\",\r\n    \"2021-12-09\",\r\n    \"2021-12-10\",\r\n    \"2021-12-11\",\r\n    \"2021-12-12\",\r\n    \"2021-12-13\",\r\n    \"2021-12-14\",\r\n    \"2021-12-15\",\r\n    \"2021-12-16\",\r\n    \"2021-12-17\",\r\n    \"2021-12-18\",\r\n    \"2021-12-19\",\r\n    \"2021-12-20\",\r\n    \"2021-12-21\",\r\n    \"2021-12-22\",\r\n    \"2021-12-23\",\r\n    \"2021-12-24\",\r\n    \"2021-12-25\",\r\n    \"2021-12-26\",\r\n    \"2021-12-27\",\r\n    \"2021-12-28\",\r\n    \"2021-12-29\",\r\n    \"2021-12-30\",\r\n    \"2021-12-31\",\r\n    \"2022-01-01\",\r\n    \"2022-01-02\",\r\n    \"2022-01-03\",\r\n    \"2022-01-04\",\r\n    \"2022-01-05\",\r\n    \"2022-01-06\",\r\n    \"2022-01-07\",\r\n    \"2022-01-08\",\r\n    \"2022-01-09\",\r\n    \"2022-01-10\",\r\n    \"2022-01-11\",\r\n    \"2022-01-12\",\r\n    \"2022-01-13\",\r\n    \"2022-01-14\",\r\n    \"2022-01-15\",\r\n    \"2022-01-16\",\r\n    \"2022-01-17\",\r\n    \"2022-01-18\",\r\n    \"2022-01-19\",\r\n    \"2022-01-20\",\r\n    \"2022-01-21\",\r\n    \"2022-01-22\",\r\n    \"2022-01-23\",\r\n    \"2022-01-24\",\r\n    \"2022-01-25\",\r\n    \"2022-01-26\",\r\n    \"2022-01-27\",\r\n    \"2022-01-28\",\r\n    \"2022-01-29\",\r\n    \"2022-01-30\",\r\n    \"2022-01-31\",\r\n    \"2022-02-01\",\r\n    \"2022-02-02\",\r\n    \"2022-02-03\",\r\n    \"2022-02-04\",\r\n    \"2022-02-05\",\r\n    \"2022-02-06\",\r\n    \"2022-02-07\",\r\n    \"2022-02-08\",\r\n    \"2022-02-09\",\r\n    \"2022-02-10\",\r\n    \"2022-02-11\",\r\n    \"2022-02-12\",\r\n    \"2022-02-13\",\r\n    \"2022-02-14\",\r\n    \"2022-02-15\",\r\n    \"2022-02-16\",\r\n    \"2022-02-17\",\r\n    \"2022-02-18\",\r\n    \"2022-02-19\",\r\n    \"2022-02-20\",\r\n    \"2022-02-21\",\r\n    \"2022-02-22\",\r\n    \"2022-02-23\",\r\n    \"2022-02-24\",\r\n    \"2022-02-25\",\r\n    \"2022-02-26\",\r\n    \"2022-02-27\",\r\n    \"2022-02-28\",\r\n    \"2022-03-01\",\r\n    \"2022-03-02\",\r\n    \"2022-03-03\",\r\n    \"2022-03-04\",\r\n    \"2022-03-05\",\r\n    \"2022-03-06\",\r\n    \"2022-03-07\",\r\n    \"2022-03-08\",\r\n    \"2022-03-09\",\r\n    \"2022-03-10\",\r\n    \"2022-03-11\",\r\n    \"2022-03-12\",\r\n    \"2022-03-13\",\r\n    \"2022-03-14\",\r\n    \"2022-03-15\",\r\n    \"2022-03-16\",\r\n    \"2022-03-17\",\r\n    \"2022-03-18\",\r\n    \"2022-03-19\",\r\n    \"2022-03-20\",\r\n    \"2022-03-21\",\r\n    \"2022-03-22\",\r\n    \"2022-03-23\",\r\n    \"2022-03-24\",\r\n    \"2022-03-25\",\r\n    \"2022-03-26\",\r\n    \"2022-03-27\",\r\n    \"2022-03-28\",\r\n    \"2022-03-29\",\r\n    \"2022-03-30\",\r\n    \"2022-03-31\",\r\n    \"2022-04-01\",\r\n    \"2022-04-02\",\r\n    \"2022-04-03\",\r\n    \"2022-04-04\",\r\n    \"2022-04-05\",\r\n    \"2022-04-06\",\r\n    \"2022-04-07\",\r\n    \"2022-04-08\",\r\n    \"2022-04-09\",\r\n    \"2022-04-10\",\r\n    \"2022-04-11\",\r\n    \"2022-04-12\",\r\n    \"2022-04-13\",\r\n    \"2022-04-14\",\r\n    \"2022-04-15\",\r\n    \"2022-04-16\",\r\n    \"2022-04-17\",\r\n    \"2022-04-18\",\r\n    \"2022-04-19\",\r\n    \"2022-04-20\",\r\n    \"2022-04-21\",\r\n    \"2022-04-22\",\r\n    \"2022-04-23\",\r\n    \"2022-04-24\",\r\n    \"2022-04-25\",\r\n    \"2022-04-26\",\r\n    \"2022-04-27\",\r\n    \"2022-04-28\",\r\n    \"2022-04-29\",\r\n    \"2022-04-30\",\r\n    \"2022-05-01\",\r\n    \"2022-05-02\",\r\n    \"2022-05-03\",\r\n    \"2022-05-04\",\r\n    \"2022-05-05\",\r\n    \"2022-05-06\",\r\n    \"2022-05-07\",\r\n    \"2022-05-08\",\r\n    \"2022-05-09\",\r\n    \"2022-05-10\",\r\n    \"2022-05-11\",\r\n    \"2022-05-12\",\r\n    \"2022-05-13\",\r\n    \"2022-05-14\",\r\n    \"2022-05-15\",\r\n    \"2022-05-16\",\r\n    \"2022-05-17\",\r\n    \"2022-05-18\",\r\n    \"2022-05-19\",\r\n    \"2022-05-20\",\r\n    \"2022-05-21\",\r\n    \"2022-05-22\",\r\n    \"2022-05-23\",\r\n    \"2022-05-24\",\r\n    \"2022-05-25\",\r\n    \"2022-05-26\",\r\n    \"2022-05-27\",\r\n    \"2022-05-28\",\r\n    \"2022-05-29\",\r\n    \"2022-05-30\",\r\n    \"2022-05-31\",\r\n    \"2022-06-01\",\r\n    \"2022-06-02\",\r\n    \"2022-06-03\",\r\n    \"2022-06-04\",\r\n    \"2022-06-05\",\r\n    \"2022-06-06\",\r\n    \"2022-06-07\",\r\n    \"2022-06-08\",\r\n    \"2022-06-09\",\r\n    \"2022-06-10\",\r\n    \"2022-06-11\",\r\n    \"2022-06-12\",\r\n    \"2022-06-13\",\r\n    \"2022-06-14\",\r\n    \"2022-06-15\",\r\n    \"2022-06-16\",\r\n    \"2022-06-17\",\r\n    \"2022-06-18\",\r\n    \"2022-06-19\",\r\n    \"2022-06-20\",\r\n    \"2022-06-21\",\r\n    \"2022-06-22\",\r\n    \"2022-06-23\",\r\n    \"2022-06-24\",\r\n    \"2022-06-25\",\r\n    \"2022-06-26\",\r\n    \"2022-06-27\",\r\n    \"2022-06-28\",\r\n    \"2022-06-29\",\r\n    \"2022-06-30\"\r\n]\r\nexport default dateRange;","// Module imports\r\nimport React, { Component } from 'react';\r\nimport { View, Text, ImageBackground, Pressable, ScrollView } from 'react-native';\r\nimport { Icon } from 'react-native-eva-icons'\r\n\r\n// Component imports\r\nimport UserEntryCards from './subcomponents/UserEntryCards';\r\n\r\n// Local imports\r\nimport dateRange from '../shared/dateRange';\r\nimport styles from '../styles/entrancesStyles';\r\n\r\n// cors-midpoint uri (needed to avoid cors' allow-cross-origin error when fetching)\r\n// const corsURI = 'https://morning-journey-78874.herokuapp.com/';\r\n// const appServerURI = 'https://mood-tracker-server.herokuapp.com/'\r\n\r\n// Defining pertinent constants\r\nconst monthDict = {'Jan': '01', 'Feb': '02', 'Mar': '03', 'Apr': '04', 'May': '05', 'Jun': '06', 'Jul': '07', 'Ago': '08', 'Sep': '09', 'Oct': '10', 'Nov': '11', 'Dec': '12'}\r\nconst englishMonthSigs = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dec']\r\nconst portugueseMonthSigs = ['Jan', 'Fev', 'Mar', 'Abr', 'Mai', 'Jun', 'Jul', 'Ago', 'Set', 'Out', 'Nov', 'Dez']\r\nconst englishWeekDayMap = {'Mon': 'Seg', 'Tue': 'Ter', 'Wed': 'Qua', 'Thu': 'Qui', 'Fri': 'Sex', 'Sat': 'Sab', 'Sun': 'Dom'}\r\n\r\n// Defining pertinent functions\r\nfunction Today() {\r\n    const now = Date().toString().split(' ')\r\n    const today = [ now[3], monthDict[now[1]], now[2] ].join('-')\r\n    return today\r\n}\r\nfunction getNextDate(date, next='next') {\r\n    const nextDate = dateRange[dateRange.indexOf(date) + (next=='previous' ? -1 : 1)]\r\n    return nextDate\r\n}\r\nfunction getTime() {\r\n    //Wed,Jan,26,2022,15:12:37,GMT-0300,(Horário,Padrão,de,Brasília)\r\n    const now = Date().toString().split(' ')\r\n    const time = now[4]\r\n    // const time = new Date().toLocaleTimeString()\r\n    return time\r\n}\r\nfunction formatDate(selDate) {\r\n    \r\n    var ymd = selDate.split('-')\r\n    const yesterday = getNextDate(Today(), 'previous')\r\n    const englishWeekDay = new Date(ymd[0], ymd[1], ymd[2]).toString().split(' ')[0]\r\n    const weekDay = englishWeekDayMap[englishWeekDay]\r\n    var prefix = ''\r\n\r\n    if (selDate === Today()) prefix = 'Hoje, '\r\n    else if (selDate === yesterday) prefix = 'Ontem, '\r\n    else prefix = weekDay + ', '\r\n    \r\n    for (var i=0; i<12; i++) {\r\n        if (monthDict[ englishMonthSigs[i] ] == ymd[1]) {\r\n            return prefix + oneDigit(ymd[2]) + '° ' + portugueseMonthSigs[i]\r\n        }\r\n    }\r\n}\r\nfunction oneDigit(stringNumber) {\r\n    if (stringNumber[0] == '0') return stringNumber.slice(1, stringNumber.length)\r\n    else return stringNumber\r\n}\r\n\r\nexport default class EntrancesScreen extends Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            userEntries: [],\r\n            date: Today(),\r\n            time: getTime(),\r\n            selectedDate: Today(),\r\n            entriesLoading: false,\r\n            entriesSynced: false,\r\n            alertMsg: '',\r\n        };\r\n        this.onNextButtonPress = this.onNextButtonPress.bind(this);\r\n        this.forgetPosted = this.forgetPosted.bind(this);\r\n        this.setAlertMsg = this. setAlertMsg.bind(this);\r\n        this.setSelectedEntryId = this.setSelectedEntryId.bind(this);\r\n    }\r\n    \r\n    componentDidMount() {\r\n        console.log('\"Entries\" screen component did mount...')      \r\n        this.props.navigation.setParams({posted: {status: false, entry: null}});\r\n    }\r\n\r\n    setSelectedEntryId(id) {\r\n        this.setState({selectedEntryId: id})\r\n    }\r\n\r\n    onNextButtonPress(next='next') {\r\n        function setSelectedDate() {\r\n            this.setState({\r\n                selectedEntryId: null,\r\n                selectedDate: getNextDate(this.state.selectedDate, next),\r\n            })\r\n        }\r\n        return setSelectedDate.bind(this);\r\n    }\r\n\r\n    forgetPosted() {\r\n        this.setState({\r\n            selectedEntryId: null,\r\n            selectedDate: this.props.route.params.posted.entry.type == 'new' ? Today() : this.state.selectedDate,\r\n        });\r\n        this.props.navigation.setParams({posted: {status: false, entry: null}});\r\n    }\r\n\r\n    setAlertMsg(msg) {\r\n        this.setState({alertMsg: msg})\r\n        setTimeout( () => this.setState({alertMsg: ''}) , 1000 * 5 )\r\n    }\r\n    \r\n    alertMsg() {\r\n        return(\r\n            <View style={[styles.msgBox, this.state.alertMsg ? {} : {backgroundColor: 'transparent', borderColor: 'transparent'} ]}>\r\n                <Text style={styles.msg}>{this.state.alertMsg}</Text>\r\n            </View>\r\n        )\r\n    }\r\n\r\n    DateNavigationButton = ({next, today}) => {\r\n        const buttonColor = next=='next' ? (today ? 'rgba(255,255,255,0.1)' : 'white') : 'white'\r\n        return(\r\n            <Pressable onPress={ this.onNextButtonPress(next) } disabled={ next=='next' & today }>\r\n                <Icon name={ next=='next' ? 'arrow-forward' : 'arrow-back'} width={35} height={35} fill={buttonColor} />\r\n            </Pressable>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        // console.log('Rendering \"Entries\" screen...')\r\n        const today = this.state.selectedDate === Today()\r\n        return(\r\n            <ImageBackground source={require('../assets/wallpaper.jpg')} style={[styles.mainView]}>\r\n                \r\n                <ScrollView style={styles.scrollView}>\r\n                    <View style={styles.section}>\r\n                        <View style={[styles.cardRow, {justifyContent: 'space-between'}]}>\r\n                            <this.DateNavigationButton icon='arrow-back' next='previous' />\r\n                            <Text style={styles.sectionTitle}> {'Suas entradas  •  ' + formatDate(this.state.selectedDate)} </Text>                                \r\n                            <this.DateNavigationButton icon='arrow-forward' next='next' today={today} />\r\n                        </View>\r\n                        <UserEntryCards\r\n                        date={this.state.selectedDate}\r\n                        selectedEntryId={this.state.selectedEntryId}\r\n                        userInfo={this.props.route.params.userInfo}\r\n                        posted={this.props.route.params.posted}\r\n                        setSelectedEntryId={this.setSelectedEntryId}\r\n                        forgetPosted={this.forgetPosted}\r\n                        setAlertMsg = {this.setAlertMsg}\r\n                        navigation = {this.props.navigation}\r\n                        />\r\n                    </View>\r\n                </ScrollView>\r\n\r\n                <Pressable onPress={() => {this.props.navigation.navigate( 'PostEntrance', {currentEntry: {type: 'new', date: Today(), entry: null}} )}}  style={[styles.postButton]}>\r\n                    <Icon name='plus-circle' width={72} height={72} fill='white' style={styles.postButtonLabel}/>\r\n                </Pressable>\r\n\r\n                {this.alertMsg()}\r\n  \r\n            </ImageBackground>\r\n            )\r\n\r\n    }\r\n  }\r\n","import { StatusBar } from 'expo-status-bar';\r\n// import { Platform } from 'react-native';\r\n\r\nconst styles = {\r\n  login: {\r\n    msgBox: {\r\n      position: 'absolute',\r\n      bottom: '10%',\r\n      width: 300,\r\n      alignSelf: 'center',\r\n      // width: 350,\r\n      height: 36,\r\n      justifyContent: 'center',\r\n      backgroundColor: 'rgb(30,30,30)',\r\n      borderWidth: 1,\r\n      borderColor: 'rgb(40,40,40)',\r\n    },\r\n    msg: {\r\n        textAlign: 'center',\r\n        color: 'white',\r\n        // paddingHorizontal: 15,\r\n    },\r\n  },\r\n  mainView: {\r\n    flex: 1,                 \r\n    marginTop: StatusBar.currentHeight,\r\n  },\r\n  entrances: {\r\n    marginTop: StatusBar.currentHeight,\r\n    borderWidth: 0,\r\n    flex:1,\r\n    justifyContent: 'space-between',\r\n    alignItems: 'flex-start',\r\n  },\r\n  scrollView: {\r\n    // paddingHorizontal: Platform.OS != 'web' ? '5%' : '5%',\r\n    width: '100%',\r\n    alignSelf: 'center',\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    paddingBottom: '0%',\r\n    paddingHorizontal: '5%',\r\n    alignSelf: 'stretch',\r\n    borderColor: 'black',\r\n  },\r\n  section: {\r\n    width: 350,\r\n    paddingVertical: '16%',\r\n    borderBottomWidth: 1,\r\n    borderColor: 'rgba(155,155,155,0.3)',\r\n    alignSelf: 'center',\r\n  },\r\n  contentRow: {\r\n    flexDirection: 'column',\r\n    padding: 10,\r\n    marginTop: 22,\r\n    borderWidth: 1,\r\n    borderColor: 'rgba(155,155,155, 0.4)',\r\n    borderRadius: 30,\r\n    backgroundColor: 'rgba(255,255,255, 0.3)',\r\n\r\n  },\r\n  entryTitle: {\r\n    paddingVertical: 3,\r\n    paddingLeft: 4,\r\n    fontSize: 19,\r\n    color: 'white',\r\n  },\r\n  entryIcon: {\r\n    paddingRight: 0,\r\n  },\r\n  postButtonView: {\r\n    height: 60,\r\n    width: 60,\r\n    borderRadius: 30,\r\n    alignSelf: 'center',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    backgroundColor: 'white',\r\n  },\r\n  postButtonLabel: {\r\n    fontSize: 45,\r\n    fontWeight: 'bold',\r\n  },\r\n  moodButtonView: {\r\n    width: 65,\r\n    height: 65,\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    borderWidth: 1,\r\n  },\r\n  moodButton: {\r\n    width: 65,\r\n    height: 65,\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n  date: {\r\n    position: 'relative',\r\n    left: '60%',\r\n    paddingVertical: 8,\r\n    paddingHorizontal: 10,\r\n    fontSize: 15,\r\n    alignSelf: 'center',\r\n    backgroundColor: 'white',\r\n    borderRadius: 20\r\n  },\r\n  jornalText: {\r\n    paddingVertical: 5,\r\n    paddingHorizontal: 12,\r\n    flex: 1,\r\n    textAlignVertical: 'top',\r\n    width: '100%',\r\n    borderRadius: 20,\r\n    color: 'white',\r\n    fontSize: 16,\r\n  },\r\n  saveButton: {\r\n    height: 50,\r\n    width: '100%',\r\n    borderTopLeftRadius: 30,\r\n    borderTopRightRadius: 30,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    backgroundColor: 'white'\r\n  },\r\n  saveButtonLabel: {\r\n    fontWeight:'bold',\r\n    fontSize: 19\r\n  },\r\n  card: {\r\n    marginTop: '5%',\r\n    paddingVertical: 5,\r\n    paddingHorizontal: 10,\r\n    borderRadius: 20,\r\n    backgroundColor: 'rgba(0,0,0,0.2)',\r\n  },\r\n  cardRow: {\r\n      flexDirection: 'row',\r\n      paddingVertical: 5,\r\n      alignItems: 'center',\r\n  },\r\n  moodBadge: {\r\n      backgroundColor: 'green',\r\n      borderRadius: 30,\r\n      paddingVertical: 6,\r\n      width: 130,\r\n      fontSize: 16,\r\n      textAlign: 'center',\r\n  },\r\n  emotionBadge: {\r\n      backgroundColor: 'rgba(1,1,1,0.5)',\r\n      borderRadius: 30,\r\n      paddingVertical: 6,\r\n      paddingHorizontal: 12.5,\r\n      fontSize: 15,\r\n      textAlign: 'center',\r\n      marginVertical: 5,\r\n      marginHorizontal: 5\r\n  },\r\n  entryCardEmotionBadge: {\r\n    backgroundColor: 'aliceblue',\r\n    borderRadius: 30,\r\n    paddingVertical: 7,\r\n    paddingHorizontal: 12.5,\r\n    marginRight: 6,\r\n    fontSize: 15,\r\n    textAlign: 'center',\r\n  },\r\n  datetimeTitle: {\r\n    fontSize: 16,\r\n    marginRight: 3,\r\n  },\r\n}\r\n\r\nexport default styles;","const GoogleMapsAPI = {\r\n    GoogleMapsJavascriptAPIkey: \"AIzaSyBVWbOwPAMRyz2bS6rYHrDftVeihQ8WMCo\",\r\n    GoogleMapsGeocodingAPIKey: \"AIzaSyB6O-DpvulBC0rom1mGy-mBcstIbPlDPHA\",\r\n}\r\n\r\nexport default GoogleMapsAPI","const OpenWeatherMapAPI = {\r\n    KEY: \"de9e6896f84109d7920528172207411a\",\r\n}\r\nexport default OpenWeatherMapAPI\r\n","import React, { Component } from 'react';\r\nimport { View, Text, ImageBackground, Pressable, ScrollView, Platform, TextInput, ActivityIndicator } from 'react-native';\r\n\r\nimport { Icon } from 'react-native-eva-icons'\r\nimport VectorIcon from 'react-native-vector-icons/MaterialCommunityIcons';\r\n\r\nimport styles from '../styles/postEntryStyles'\r\n\r\n// Geocoding and weather dependencies and APIs\r\nimport * as Location from 'expo-location';\r\nimport GoogleMapsAPI from './subcomponents/GoogleMapsAPI'\r\nLocation.setGoogleApiKey(GoogleMapsAPI.GoogleMapsGeocodingAPIKey)\r\nimport OpenWeatherMapAPI from './subcomponents/OpenWeatherMapAPI';\r\n\r\n// cors-midpoint uri (needed to avoid cors' allow-cross-origin error when fetching in web platforms)\r\nconst corsURI = Platform.OS == 'web' ? 'https://morning-journey-78874.herokuapp.com/' : ''\r\nconst appServerURI = 'https://mood-tracker-server.herokuapp.com/'\r\n\r\n// Date() => wed jan 91 2022 07:46:57 ...\r\nconst now = new Date().toString().split(' ')\r\nconst datetime = now[2] + ' ' + now[1] + ' ' + now[3] + ' - ' + now[4].slice(0, 5)\r\n\r\n// Mood configs\r\nconst moods = ['Horrível', 'Mal', 'Regular', 'Bem', 'Ótimo']\r\nconst moodColorsHEX = ['#ff3333', '#0099cc', '#add8e6', '#ffff33', '#00cc00']\r\nconst moodColorsRGBA = ['rgba(255, 51, 51, 1)', 'rgba(0, 153, 204, 1)', 'rgba(173, 216, 230, 1)', 'rgba(255, 255, 51, 1)', 'rgba(0, 204, 0, 1)']\r\nconst moodColorsTransp = (alpha) => [`rgba(255, 51, 51, ${alpha})`, `rgba(0, 153, 204, ${alpha})`, `rgba(173, 216, 230, ${alpha})`, `rgba(255, 255, 51, ${alpha})`, `rgba(0, 204, 0, ${alpha})`]\r\nconst moodIcons = ['emoticon-dead', 'emoticon-sad', 'emoticon-neutral', 'emoticon-happy', 'emoticon-excited']\r\n\r\n// Emotion configs\r\nconst emotionGroupsNames = [ 'Bem & Calmo', 'Bem & Energizado', 'Mal & Calmo', 'Mal & Energizado' ]\r\nconst goodEnergizedEmotions = ['Animação', 'Concentração', 'Desinibição', 'Motivação', 'Euforia']\r\nconst goodCalmEmotions = ['Alívio', 'Calma', 'Conforto', 'Despreocupação', 'Inspiração', 'Orgulho', 'Paz', 'Relaxamento', 'Satisfação', 'Segurança', 'Criatividade']\r\nconst badEnergizedEmotions = ['Inquietação', 'Ansiedade', 'Desespero', 'Frustração', 'Insatisfação', 'Irritação', 'Medo', 'Vergonha', 'Preocupação', 'Impaciência', 'Sobrecarregado(a)', 'Tensão']\r\nconst badCalmEmotions = ['Depressão', 'Timidez', 'Cansaço', 'Tristeza','Confusão', 'Desanimo', 'Insegurança', 'Solidão', 'Tédio']\r\n// const badEnergizedEmotions = ['Agitação', 'Ansiedade', 'Tristeza', 'Decepção', 'Depressão', 'Desespero', 'Frustração', 'Insatisfação', 'Irritação', 'Medo', 'Paranoia', 'Preocupação', 'Impaciencia', 'Raiva', 'Revolta', 'Sobrecarregado(a)', 'Tensão', 'Nojo']\r\n\r\nconst emotionGroups = [ goodCalmEmotions.sort(), goodEnergizedEmotions.sort(), badCalmEmotions.sort(), badEnergizedEmotions.sort() ]\r\nconst basicEmotions = [ ...emotionGroups[0], ...emotionGroups[1], ...emotionGroups[2], ...emotionGroups[3] ]\r\n\r\nvar isSelectedEmotions = {}\r\nfor ( let emotion of basicEmotions){\r\n    isSelectedEmotions[emotion] = false\r\n}\r\n\r\n// Date config\r\nconst monthSigs = ['Jan', 'Feb', 'Mar', 'Apr', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dec']\r\nconst months = ['01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12']\r\n\r\nconst monthNameMap = {\r\n    '01': 'Janeiro',\r\n    '02': 'Fevereiro',\r\n    '03': 'Março',\r\n    '04': 'Abril',\r\n    '05': 'Maio',\r\n    '06': 'Junho',\r\n    '07': 'Julho',\r\n    '08': 'Agosto',\r\n    '09': 'Setembro',\r\n    '10': 'Outubro',\r\n    '11': 'Novembro',\r\n    '12': 'Dezembro',\r\n}\r\n\r\n// Functions\r\n\r\nfunction convertMonthSig(monthSig) {\r\n    const thisMonth = months[monthSigs.indexOf(monthSig)]\r\n    return thisMonth\r\n}\r\n\r\nfunction Today() {\r\n    const now = Date().toString().split(' ')\r\n    const today = [ now[3], convertMonthSig(now[1]), now[2] ].join('-')\r\n    return today\r\n}\r\n\r\nfunction getTime() {\r\n    //Wed,Jan,26,2022,15:12:37,GMT-0300,(Horário,Padrão,de,Brasília)\r\n    const now = Date().toString().split(' ')\r\n    const time = now[4]\r\n    return time\r\n}\r\n\r\nfunction oneDigit(stringNumber) {\r\n    if (stringNumber[0] == '0') return stringNumber.slice(1, stringNumber.length)\r\n    else return stringNumber\r\n}\r\n\r\nfunction formatPostEntryDatetimeTitle(date, time) {\r\n    const ymd = date.split('-')\r\n    const m = monthNameMap[ ymd[1] ]\r\n    return oneDigit( ymd[2] ) + ' ' + m + ' ' + ymd[0] + (time ? ' - ' : '') + time.slice(0,5)\r\n}\r\n\r\nfunction formattedAddress(addressObj) {\r\n    return addressObj.street + ', ' + addressObj.streetNumber + ' - ' + addressObj.district + ', ' + addressObj.subregion + '. ' + addressObj.region + ', ' + addressObj.isoCountryCode + '.'\r\n}\r\n\r\nexport default class PostEntranceScreen extends Component {\r\n  \r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            \r\n            date: '',\r\n            startTime: '',\r\n            endTime: '',\r\n            createdAt: '',\r\n            lastEdited: [],\r\n\r\n            star: false,\r\n            selectedMood: '',\r\n            emotions: [],\r\n            jornalEntry: '',    \r\n            address: '',\r\n            location: null,\r\n            weather: null,\r\n\r\n            selectedEntry: 'Avaliação',\r\n            isMoodUnmarked: true,\r\n            isSelectedEmotions: isSelectedEmotions,\r\n            isLoading: false,\r\n            isFetchingLocationOrWeather: false,\r\n\r\n            locationServiceEnabled: null,\r\n            userCoordinates: null,\r\n\r\n            loginMsg: '',\r\n        };\r\n\r\n        this.initializeEntry = this.initializeEntry.bind(this);\r\n        this.onSaveButtonPress = this.onSaveButtonPress.bind(this);\r\n        this.saveButton = this.saveButton.bind(this);\r\n        this.EmotionButtons = this.EmotionButtons.bind(this);\r\n        this.MoodButtons = this.MoodButtons.bind(this);\r\n        this.postEntryHeader = this.postEntryHeader.bind(this);\r\n        this.onEmotionButtonPress = this.onEmotionButtonPress.bind(this);\r\n        this.onMoodButtonPress = this.onMoodButtonPress.bind(this);\r\n        this.inputCardBody = this.inputCardBody.bind(this);\r\n        this.setSelectedEntry = this.setSelectedEntry.bind(this);\r\n        this.InputCard = this.InputCard.bind(this);\r\n        this.JornalInput = this.JornalInput.bind(this);\r\n        this.postNewEntryAsync = this.postNewEntryAsync.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log('\"PostEntryComponent\" did mount.')\r\n        this.initializeEntry()\r\n    }\r\n\r\n    postEntryHeader() {\r\n        return(\r\n            <View style={[styles.cardRow, {justifyContent: 'space-between'}]}>\r\n                <Pressable onPress={() => {this.props.navigation.goBack()}}  style={styles.postButton}>\r\n                    <Icon name='arrow-back' fill='white' height={30} width={30}/>\r\n                </Pressable>\r\n                <View style={[styles.entryCardEmotionBadge, {flexDirection: 'row', alignItems: 'center'}]}>\r\n                    <Text style={styles.datetimeTitle}> { formatPostEntryDatetimeTitle(this.props.route.params.currentEntry.date, this.state.startTime) } </Text>\r\n                    <Icon name='edit' fill='rgba(75,75,75,1)' height={20} width={20}/>\r\n                </View>\r\n                <Pressable onPress={() => {this.setState({star: !this.state.star})}}  style={styles.postButton}>\r\n                    <Icon name={this.state.star ? 'star' : 'star-outline'} fill='rgba(245,245,245,0.7)' height={30} width={30}/>\r\n                </Pressable>\r\n            </View>\r\n        )\r\n    }\r\n\r\n    MoodButtons() {\r\n        return moods.map((item, index) => {\r\n            const selected = this.state.selectedMood == item\r\n            const isMoodUnmarked = this.state.isMoodUnmarked\r\n            const selColor = moodColorsRGBA[index]\r\n            return(\r\n                <View key={'mood '+index} style={styles.moodButton} >\r\n                    <VectorIcon\r\n                    name={moodIcons[index]}\r\n                    size={isMoodUnmarked ? 52 : (selected ? 57 : 50) }\r\n                    color={ isMoodUnmarked ? selColor : (selected ? selColor : moodColorsTransp(0.5)[index]) }\r\n                    onPress={this.onMoodButtonPress(item)}\r\n                    />\r\n                </View>\r\n            )\r\n        })\r\n    }\r\n\r\n    onMoodButtonPress(item) {\r\n        function selectMood() {\r\n            if (this.state.selectedMood==item) {\r\n                this.setState({selectedMood: null, isMoodUnmarked: true})\r\n            } else {\r\n                this.setState({selectedMood: item, isMoodUnmarked: false})\r\n            }\r\n        }\r\n        selectMood = selectMood.bind(this);\r\n        return selectMood\r\n    }\r\n\r\n    EmotionButtons(emotions) {\r\n        return(\r\n            emotions.map( emotion => (\r\n                <Pressable\r\n                key={'emotion-' + emotion}\r\n                title={emotion}\r\n                onPress={this.onEmotionButtonPress(emotion)}\r\n                >\r\n                    <Text style={[styles.emotionBadge, {backgroundColor: this.state.isSelectedEmotions[emotion] ? 'lightblue' : 'aliceblue' }]}>{emotion}</Text>\r\n                </Pressable>\r\n            ))\r\n        )\r\n    }\r\n\r\n    onEmotionButtonPress(emotion) { \r\n        function selectEmotion () {\r\n            this.setState({\r\n                isSelectedEmotions: {\r\n                    ...this.state.isSelectedEmotions,\r\n                    [emotion]: !this.state.isSelectedEmotions[emotion]\r\n                }\r\n            })\r\n        }\r\n        selectEmotion = selectEmotion.bind(this);\r\n        return selectEmotion\r\n    }\r\n\r\n    JornalInput() {\r\n        return(\r\n            <TextInput\r\n            multiline\r\n            scrollEnabled\r\n            placeholder='Escreva aqui...'\r\n            placeholderTextColor='rgba(255,255,255,0.6)'\r\n            onChangeText={text => this.setState({jornalEntry: text})}\r\n            value={this.state.jornalEntry}\r\n            style={styles.jornalText}\r\n            >\r\n            </TextInput>\r\n        )\r\n    }\r\n\r\n    inputCardBody(sectionName, cardBodyStyle, cardBodyContent) {\r\n        if (this.state.selectedEntry === sectionName) {\r\n            if (sectionName == 'Emoções') {\r\n                return emotionGroups.map((emotions, index) => (\r\n                    <View key={'emotion-group-' + index} style={{width: '100%', alignItems: 'center', marginVertical: 10}}>\r\n                        <Text style={{fontSize: 15, color: 'white', marginVertical: 8}}>{emotionGroupsNames[index]}</Text>\r\n                        <View key={index} style={[styles.cardRow, cardBodyStyle]}>\r\n                            {cardBodyContent(emotions)}\r\n                        </View>\r\n                    </View>\r\n                ))\r\n            } else {\r\n                return(\r\n                    <View style={[styles.cardRow, cardBodyStyle]}>\r\n                        {cardBodyContent}\r\n                    </View>\r\n                )    \r\n            }\r\n        } else {\r\n            return(\r\n                <></>\r\n            )\r\n        }\r\n    }\r\n\r\n    InputCard(sectionName, icon, cardBodyStyle, cardBodyContent) {\r\n        if (sectionName !== 'Jornal') {\r\n            return(\r\n                <Pressable style={[styles.card]} onPress={this.setSelectedEntry(sectionName)} >\r\n                    <View style={styles.cardRow}  >\r\n                        <Icon name={icon} fill='rgba(255,255,255,0.75)' height={28} width={28} style={styles.entryIcon} />\r\n                        <Text style={styles.entryTitle}> {sectionName} </Text>\r\n                    </View>    \r\n                    {this.inputCardBody(sectionName, cardBodyStyle, cardBodyContent)}\r\n                </Pressable>\r\n            )\r\n        } else {\r\n            return(\r\n                <View style={[styles.card]} >\r\n                    <Pressable style={styles.cardRow} onPress={this.setSelectedEntry(sectionName)} >\r\n                        <Icon name={icon} fill='rgba(255,255,255,0.75)' height={28} width={28} style={styles.entryIcon} />\r\n                        <Text style={styles.entryTitle}> {sectionName} </Text>\r\n                    </Pressable>    \r\n                    {this.inputCardBody(sectionName, cardBodyStyle, cardBodyContent)}  \r\n                </View>   \r\n            )\r\n        }\r\n    }\r\n\r\n    setSelectedEntry (entry) {\r\n        function setSelected() {\r\n            this.setState( {selectedEntry:  this.state.selectedEntry === entry ? null : entry  } )\r\n        }\r\n        setSelected = setSelected.bind(this);\r\n        return setSelected\r\n    }\r\n\r\n    loginMsg() {\r\n        return(\r\n          <View style={[styles.login.msgBox, this.state.loginMsg ? {} : {backgroundColor: 'transparent', borderColor: 'transparent'} ]}>\r\n            <Text style={styles.login.msg}>{this.state.loginMsg}</Text>\r\n          </View>\r\n        )\r\n    }\r\n\r\n    setLoginMsg(msg) {\r\n        this.setState({loginMsg: msg})\r\n        setTimeout( () => this.setState({loginMsg: ''}) , 1000 * 5 )\r\n    }    \r\n\r\n    initializeEntry() {\r\n        const currentEntry = this.props.route.params.currentEntry\r\n        switch (currentEntry.type) {\r\n            case 'new':\r\n                console.log('POST ENTRY STATUS: INITIATING BLANK NEW ENTRY! FETCHING LOCATION AND WEATHER DATA...')\r\n                this.setState({\r\n                    date: currentEntry.date,\r\n                    startTime: getTime(),\r\n                    endTime: '',\r\n                    isFetchingLocationOrWeather: true\r\n                })\r\n                this.checkIfLocationEnabled();\r\n                this.getCurrentLocation();                    \r\n                break;\r\n        \r\n            case 'custom-date':\r\n                console.log('POST ENTRY STATUS: INITIALIZING CUSTOM DATE ENTRY! SETTING DATE TO: ' + currentEntry.date)\r\n                this.setState({\r\n                    date: currentEntry.date,\r\n                    startTime: '',\r\n                    endTime: '',\r\n                })\r\n                break\r\n\r\n            case 'edit':\r\n                const entry = currentEntry.entry\r\n                var isSelectedEmotionsNew = {}\r\n                for ( let emotion of basicEmotions ) {\r\n                    isSelectedEmotionsNew[emotion] = entry.emotions.indexOf(emotion) != -1\r\n                }\r\n                this.setState({\r\n                    date: entry.date,\r\n                    startTime: entry.startTime,\r\n                    endTime: entry.endTime,\r\n                    createdAt: entry.createdAt,\r\n                    lastEdited: entry.lastEdited,\r\n                    star: entry.star,\r\n                    selectedMood: entry.mood,\r\n                    isSelectedEmotions: isSelectedEmotionsNew,\r\n                    jornalEntry: entry.jornal,\r\n                    address: entry.address,\r\n                    location: entry.location,\r\n                    weather: entry.weather,\r\n                    isMoodUnmarked: false,\r\n                })\r\n                break\r\n    \r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    saveButton() {\r\n        const isDataLoading = this.state.isFetchingLocationOrWeather | this.state.isLoading\r\n        return(\r\n            <Pressable\r\n            onPress={this.onSaveButtonPress}\r\n            disabled={isDataLoading}\r\n            style={styles.saveButton}\r\n            >\r\n                { isDataLoading ? (\r\n                    <ActivityIndicator size='small' color='#000000' /> // <Icon name={'sync-outline'} fill='black' width={28} height={28} />\r\n                ) : (\r\n                    <Text style={styles.saveButtonLabel}> Salvar </Text>\r\n                ) }\r\n            </Pressable>\r\n        )\r\n    }\r\n\r\n    onSaveButtonPress() {\r\n        if (!this.state.selectedMood) {\r\n            this.setLoginMsg('Necessário adicionar uma avaliação.')\r\n            this.setState({selectedEntry: 'Avaliação'})\r\n\r\n        } else {\r\n            try {\r\n                const currentEntry = this.props.route.params.currentEntry\r\n                var createdAt, endTime\r\n                var lastEdited = getTime()\r\n                switch (currentEntry.type) {\r\n                    case 'new':\r\n                        endTime = lastEdited\r\n                        createdAt = lastEdited\r\n                        break;\r\n                    \r\n                    case 'custom-date':\r\n                        endTime = this.state.endTime // Returns empty string ''.\r\n                        createdAt = lastEdited\r\n                        break\r\n                    \r\n                    case 'edit':\r\n                        endTime = this.state.endTime\r\n                        createdAt = this.state.createdAt\r\n                        break\r\n                \r\n                    default:\r\n                        break;\r\n                }\r\n\r\n                const newEntryPost = {\r\n                    date: this.state.date,\r\n                    startTime: this.state.startTime,\r\n                    endTime: endTime,\r\n                    createdAt: createdAt,\r\n                    lastEdited: [ ...this.state.lastEdited, {date: Today(), time: lastEdited}],\r\n                    star: this.state.star,\r\n                    mood: this.state.selectedMood,\r\n                    emotions: basicEmotions.filter( emotion => this.state.isSelectedEmotions[emotion] ),\r\n                    jornal: this.state.jornalEntry,\r\n                    address: this.state.address,\r\n                    location: this.state.location,\r\n                    weather: this.state.weather,\r\n                }\r\n\r\n                console.log(`POST ENTRY STATUS: POST SET FOR ENTRY TYPE: ${currentEntry.type}. POST: ${JSON.stringify(newEntryPost)}`)\r\n                this.postNewEntryAsync(newEntryPost)\r\n\r\n            } catch (error) {\r\n                // alert('Não foi possível postar sua entrada. Tente novamente...')\r\n                this.setLoginMsg('Não foi possível postar a entrada. Tente novamente...')\r\n                console.log('Error when attempting to post user entry. Logging error...')\r\n                console.log(error)\r\n            }\r\n        }\r\n    }\r\n\r\n    async postNewEntryAsync(newEntry) {\r\n        this.setState({ isLoading: true });\r\n        var info = this.props.route.params.userInfo;\r\n        const currentEntry = this.props.route.params.currentEntry\r\n        const editMode = currentEntry.type === 'edit';\r\n        try {\r\n            console.log('POST ENTRY STATUS: Started...')\r\n            var postUserEntryResult = {ok: false, status: '999', statusText: 'Post not fetched yet.'}\r\n            const postUserEntryOpts = { \r\n                method: editMode? 'PUT' : 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify( newEntry ),\r\n            }\r\n            // var postUserEntryResult = await fetch('http://localhost:3000/Users/' + info.username + '/entries', postUserEntryOpts);\r\n            postUserEntryResult = await fetch( corsURI + appServerURI + 'Users/' + info.username + '/entries' + (editMode ? '/'+currentEntry.entry._id : ''), postUserEntryOpts);\r\n            const postUserEntryStatus = 'Status: ' + postUserEntryResult.status + ', ' + postUserEntryResult.statusText\r\n\r\n            if (postUserEntryResult.ok) {\r\n                console.log('POST ENTRY STATUS: Successful.')\r\n                console.log(postUserEntryStatus)\r\n                    \r\n            } else {\r\n                console.log('POST ENTRY STATUS: Failed. Throwing error...')\r\n                throw new Error(postUserEntryStatus)\r\n            }\r\n\r\n        } catch (error) {\r\n            console.log('Erro capturado:')\r\n            console.log(error);\r\n\r\n        } finally {\r\n            console.log('POST ENTRY STATUS: Finished.')\r\n            this.setState({ isLoading: false });\r\n            if (postUserEntryResult.ok) this.props.navigation.navigate('Entrances', {posted: {status: true, entry: currentEntry} } )\r\n        }\r\n    }\r\n\r\n    async fetchWeather() {\r\n\r\n        try {\r\n            if (this.state.userCoordinates) {\r\n\r\n                console.log('FETCH WEATHER STATUS: STARTED...!')\r\n                const coords = this.state.userCoordinates\r\n                const lat = coords.latitude\r\n                const lng = coords.longitude\r\n                \r\n                await fetch(\r\n                    `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lng}&APPID=${OpenWeatherMapAPI.KEY}&units=metric`\r\n                )\r\n                .then(res => {\r\n                    const resStatus = 'Status: ' + res.status + ', Status Text: ' + res.statusText\r\n                    if (!res.ok) \r\n                        throw new Error(resStatus)\r\n                    else {\r\n                        return res.json()\r\n                    }\r\n                })\r\n                .then(weather => {\r\n                    console.log('FETCH WEATHER STATUS: SUCCESSFUL!')\r\n                    // console.log(weather);\r\n\r\n                    const weatherInfo = {\r\n                        coords: weather.coord,\r\n                        name: weather.name,\r\n                        weather: weather.weather[0],\r\n                        main: weather.main,\r\n                        clouds: weather.clouds,\r\n                        wind: weather.wind,\r\n                        visibility: weather.visibility,\r\n                    }\r\n\r\n                    this.setState({weather: weatherInfo})\r\n                });\r\n        \r\n            } else {\r\n                console.log('FETCH WEATHER STATUS: UNABLE TO START! USER POSITION NOT AVAILABLE.')\r\n            }\r\n\r\n        } catch(error) {\r\n            console.log('FETCH WEATHER STATUS: ERROR! LOGGING ERROR...')\r\n            console.log(error)\r\n\r\n        } finally {\r\n            console.log('FETCH WEATHER STATUS: FINISHED!')    \r\n            this.setState({isFetchingLocationOrWeather: false})\r\n        }\r\n    }\r\n\r\n    // Check if device has location services enabled\r\n    async checkIfLocationEnabled () {\r\n\r\n        if ( !this.state.locationServiceEnabled ) {\r\n            try{\r\n                console.log('GEOCODING PROCESS (CHECK): CHECKING IF USER HAS SERVICES ENABLED.' )\r\n                let enabled = await Location.hasServicesEnabledAsync();\r\n            \r\n                if (!enabled) {\r\n                    console.log('GEOCODING PROCESS (CHECK): CHECKED! USER DOES NOT HAVE SERVICES ENABLED.' )\r\n                    alert('Location Service not enabled. Please enable your location services.')\r\n                } else {\r\n                    console.log('GEOCODING PROCESS (CHECK): CHECKED! USER HAS SERVICES ENABLED.')\r\n                    this.setState({LocationServiceEnabled: enabled});\r\n                }\r\n\r\n            } catch(error) {\r\n                console.log(\"GEOCODING PROCESS (CHECK): ERROR IN SERVICES PERMISSION CHECK! COULD'NT CHECK IF USER HAS SERVICES ENABLED.\")\r\n            \r\n            } finally {\r\n                console.log(\"GEOCODING PROCESS (CHECK): FINISHED!\")\r\n            }\r\n        \r\n        } else {\r\n                console.log(\"GEOCODING PROCESS (CHECK): SKIPPING! USER ALREADY HAS SERVICES ENABLED.\")\r\n        } \r\n\r\n    };\r\n\r\n    // Check for permission, get current user position and use reverse geocoding for user coordinates\r\n    async getCurrentLocation() {\r\n\r\n        try {\r\n            console.log('GEOCODING PROCESS (PERMISSION): REQUEST PERMISSION ASYNC...')\r\n            let { status } = await Location.requestForegroundPermissionsAsync()\r\n            // let { status } = await Location.requestBackgroundPermissionsAsync()\r\n        \r\n            if (status !== 'granted') {\r\n                console.log('GEOCODING PROCESS (PERMISSION): PERMISSION NOT GRANTED!')\r\n                alert('Permission not granted. Allow the app to use location service.');\r\n\r\n            } else {\r\n                console.log('GEOCODING PROCESS (PERMISSION): PERMISSION GRANTED!')\r\n            }\r\n        \r\n            console.log('GEOCODING PROCESS (REQUEST): GETTING CURRENT USER POSITION ASYNC...')\r\n            let { coords } = await Location.getCurrentPositionAsync();\r\n            \r\n            if (coords) {   \r\n                const { latitude, longitude } = coords;\r\n                this.setState({userCoordinates: coords})\r\n                console.log(`GEOCODING PROCESS (REQUEST): CURRENT USER POSITION FOUND... Latitude: ${latitude}, Logitude: ${longitude}`)\r\n                console.log('GEOCODING PROCESS (REVERSE GEOCODING): REVERSE GEOCODE ASYNC...')  \r\n                let response = await Location.reverseGeocodeAsync({ latitude, longitude });\r\n        \r\n                if (response) {\r\n                    this.setState({ address: formattedAddress(response[0]), location: { position: coords, address: response[0] } })\r\n                    console.log('GEOCODING PROCESS (REVERSE GEOCODING): REVERSE GEOCODE SUCCESSFUL! UPDATING STATE...')  \r\n\r\n                } else {\r\n                    console.log('GEOCODING PROCESS (REVERSE GEOCODING): REVERSE GEOCODE FAILED! LOGGING RESPONSE...')  \r\n                    console.log(response)\r\n                }\r\n        \r\n            } else {\r\n                console.log(`GEOCODING PROCESS (REVERSE GEOCODING): USER POSITION NOT FOUND! UNABLE TO PROCEED TO REVERSE GEOCODING...`)\r\n            }\r\n\r\n        } catch (error) {\r\n            console.log('GEOCODING PROCESS: ERROR IN USER POSITION REQUEST! LOGGING ERROR...')\r\n            console.log(error)\r\n        \r\n        } finally {\r\n            console.log('GEOCODING PROCESS: USER POSITION REQUEST FINISHED. PROCEEDING TO FETCH WEATHER DATA...')\r\n            this.fetchWeather()\r\n        }\r\n    };\r\n\r\n    render() {\r\n        // console.log('Rendering \"Post Entry\" screen...')\r\n        return(\r\n            <ImageBackground source={require('../assets/wallpaper.jpg')} style={styles.mainView}>\r\n\r\n                <ScrollView style={styles.scrollView}>\r\n                    <View style={styles.section}>\r\n                            {this.postEntryHeader()}\r\n                            {this.InputCard('Avaliação', 'smiling-face', {justifyContent: 'space-between'}, this.MoodButtons())}\r\n                            {this.InputCard('Emoções', 'checkmark-square-outline', {flexWrap: 'wrap', justifyContent: 'center'}, this.EmotionButtons)}\r\n                            {this.InputCard('Jornal', 'book', {flexDirection: 'column', minHeight: 130}, this.JornalInput())}\r\n                    </View>\r\n                </ScrollView>  \r\n\r\n                <this.saveButton />\r\n\r\n                {this.loginMsg()}\r\n\r\n            </ImageBackground>\r\n        )    \r\n    }\r\n}","var styles = {\r\n    login: {\r\n        mainView: {\r\n            flex: 1,\r\n            justifyContent: 'center',\r\n            alignItems: 'center',\r\n            // paddingHorizontal: Platform.OS != 'web' ? '5%' : '5%',\r\n        },\r\n        titleView: {\r\n            flexDirection: 'row',\r\n            justifyContent: 'center',\r\n            alignItems: 'center',\r\n            minHeight: 60,\r\n        },\r\n        title: {\r\n            fontSize: 30,\r\n            fontWeight: 'bold',\r\n            color: 'white',\r\n            alignSelf: 'center',\r\n        },\r\n        titleIcon: {\r\n            width: 30,\r\n            height: 30,\r\n            marginLeft: 6,\r\n            paddingTop: 3,\r\n        },\r\n        card: {\r\n            height: '55%',\r\n            minHeight: 390,\r\n            width: 350,\r\n            paddingHorizontal: 10,\r\n            paddingVertical: 10,\r\n            borderWidth: 1,\r\n            borderRadius: 10,\r\n            backgroundColor: 'azure',\r\n        },\r\n        cardHeader: {\r\n            height: '25%',\r\n            width: '100%',\r\n        },\r\n        cardTitle: {\r\n            position: 'relative',\r\n            top: '30%',\r\n            left: '5%',\r\n            fontSize: 24,\r\n            fontWeight: 'bold',\r\n            color: 'black',\r\n        },\r\n        cardSection: {\r\n            height: '25%',\r\n            justifyContent: 'space-evenly',\r\n            alignItems: 'center',\r\n        },\r\n        loadingIcon: {\r\n            alignSelf: 'center'\r\n        },\r\n        inputField: {\r\n            minHeight: 40,\r\n            width: '100%',\r\n            paddingLeft: 10,\r\n            fontSize: 14,\r\n            borderWidth: 1,\r\n            borderRadius: 5,\r\n            backgroundColor: 'white'\r\n        },\r\n        button: {\r\n            height: 40,\r\n            width: '100%',\r\n            textAlign: 'center',\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n            borderWidth: 1,\r\n            borderRadius: 5,\r\n            borderColor: 'white',\r\n            backgroundColor: 'lightblue',        \r\n        },\r\n        buttonLabel: {\r\n            fontSize: 15,\r\n            fontWeight: 'bold',\r\n            color: 'black',\r\n        },\r\n        text: {\r\n            fontSize: 15,\r\n            textAlign: 'center',\r\n        },\r\n        msgBox: {\r\n            width: 300,\r\n            height: 36,\r\n            justifyContent: 'center',\r\n            backgroundColor: 'rgb(30,30,30)',\r\n            borderWidth: 1,\r\n            borderColor: 'rgb(40,40,40)',\r\n        },\r\n        msg: {\r\n            textAlign: 'center',\r\n            color: 'white',\r\n            // paddingHorizontal: 20,\r\n        },\r\n    }\r\n};\r\nexport default styles;","// import Icon from 'react-native-vector-icons/FontAwesome';\r\n// import { Ionicons } from '@expo/vector-icons';\r\nimport { Icon } from 'react-native-eva-icons'\r\n// import { WiDaySunny } from \"weather-icons-react\";\r\n\r\nimport React, { Component } from 'react';\r\nimport { View, Text, ImageBackground, TextInput, Pressable, Platform, ActivityIndicator } from 'react-native';\r\nimport styles from '../styles/loginStyles'\r\n\r\n// App server connection settings\r\nconst corsURI = Platform.OS == 'web' ? 'https://morning-journey-78874.herokuapp.com/' : ''\r\nconst appServerURI = 'https://mood-tracker-server.herokuapp.com/'\r\n\r\n// Email Validation settings\r\n\r\n// const Verifier = require('email-verifier')\r\nconst emailVerification_APIKEY = \"at_TPKXmSQnStekLzTbstLO9GyHvd7or\"\r\n// let verifier = new Verifier(emailVerification_APIKEY);\r\nconst emailVerification_APIURI = (emailAddress) => `https://emailverification.whoisxmlapi.com/api/v2?apiKey=${emailVerification_APIKEY}&emailAddress=${emailAddress}`\r\nconst falseParams = ['validateDNS', 'checkCatchAll', 'checkFree', 'checkDisposable']\r\nfunction appendValueToUri(uri, params, value) {\r\n  for (let param of params) {\r\n    uri += '&' + param + '=' + value\r\n  }\r\n  return uri\r\n}\r\n\r\nasync function validateEmail(email) {\r\n\r\n  console.log('EMAIL VERIFICATION STATUS: Fetching email verification api...')\r\n\r\n  try {\r\n\r\n    var uri = emailVerification_APIURI(email)\r\n    uri = appendValueToUri(uri, falseParams, '0')\r\n    var emailStatus = {ok: false, status: 'Email não verificado.'}\r\n    const apiResp = await fetch( uri , { method: 'GET' } )\r\n  \r\n    if (apiResp.ok) {\r\n  \r\n      console.log('EMAIL VERIFICATION STATUS: Api fetch request successful.')\r\n      const apiRespJson = await apiResp.json()\r\n  \r\n      if ( apiRespJson.formatCheck=='false' ) {\r\n        emailStatus.status = 'Email inválido.'\r\n      } else if ( apiRespJson.smtpCheck=='false' ) {\r\n        emailStatus.status = 'Email não existe.'\r\n      } else {\r\n        emailStatus = {ok: true, status: 'Email válido.'}\r\n      }\r\n      \r\n      return emailStatus\r\n  \r\n    } else {\r\n      console.log('EMAIL VERIFICATION STATUS: Api fetch request failed. Throwing error...')\r\n      throw new Error('Status: ' + apiResp.status + ', Status Text: ' + apiResp.statusText)\r\n    }  \r\n\r\n  } finally {\r\n    console.log('EMAIL VERIFICATION STATUS: Concluído')\r\n\r\n  }\r\n  // Use the email verification api using its module...\r\n  // verifier.verify(email, (err, data) => {\r\n  //   if (err) throw err;\r\n  //   console.log(data);\r\n  // });\r\n}\r\n\r\nfunction validatePassword(password) {\r\n  console.log('VALIDATING PASSWORD FOR SIGNUP...')\r\n\r\n  const hasMinLength = password.length > 6\r\n  var res\r\n  if (!hasMinLength) {\r\n    res = {ok: false, status: 'A senha deve ter no mínimo 6 caractéres.'}\r\n  } else {\r\n    res = {ok: true, status: 'Senha válida.'}\r\n  }\r\n  return res\r\n}\r\n\r\nclass LoginScreen extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      userInfo: {\r\n        password: '',\r\n        email: '',\r\n        username: '',\r\n      },\r\n      loginMsg: '',\r\n      isUserAuth: false,\r\n      isDataLoading: false,\r\n    }\r\n    this.onChangeText = this.onChangeText.bind(this);\r\n    this.submitButton = this.submitButton.bind(this);\r\n    this.loginMsg = this.loginMsg.bind(this);\r\n    this.setLoginMsg = this.setLoginMsg.bind(this);\r\n    this.onSignIn = this.onSignIn.bind(this);\r\n    this.onSignUp = this.onSignUp.bind(this);\r\n  }\r\n\r\n  LoginIcon() {  \r\n    if (this.state.isDataLoading) {\r\n      return <ActivityIndicator color='#000000' />\r\n    } else {\r\n      return <Icon name='log-in-outline' animation='pulse' fill='#000' width={30} height={30} />\r\n    }\r\n  }\r\n\r\n  setLoginMsg(msg) {\r\n    this.setState({loginMsg: msg})\r\n    setTimeout( () => this.setState({loginMsg: ''}) , 1000 * 5 )\r\n  }\r\n\r\n  loginMsg() {\r\n      return(\r\n        <View style={[styles.login.msgBox, this.state.loginMsg ? {} : {backgroundColor: 'transparent', borderColor: 'transparent'} ]}>\r\n          <Text style={styles.login.msg}>{this.state.loginMsg}</Text>\r\n        </View>\r\n      )\r\n  }\r\n\r\n  onChangeText(textField) {\r\n    function setField(text) {\r\n      this.setState( { userInfo: { ...this.state.userInfo, [textField] : text}} )\r\n    }\r\n    setField = setField.bind(this);\r\n    return setField\r\n  }\r\n\r\n  submitButton(sign) {\r\n    const signIn = sign == 'signin'\r\n    return(\r\n      <Pressable disabled={this.state.isDataLoading} onPress={signIn ? this.onSignIn : this.onSignUp} style={[styles.login.button]}>\r\n        <Text style={styles.login.buttonLabel}>{ signIn ? 'Entrar' : 'Cadastrar' }</Text>\r\n      </Pressable>\r\n    )\r\n  }\r\n\r\n  LoginScreen = () => {\r\n    return(\r\n      <ImageBackground source={require('../assets/wallpaper.jpg')} style={[styles.login.mainView ,{justifyContent: 'space-evenly'}]}>\r\n        \r\n        <View style={styles.login.titleView}>\r\n          <Text style={styles.login.title}>Mood Tracker</Text>\r\n        </View>\r\n\r\n        <View style={styles.login.card}>\r\n          <View style={styles.login.cardHeader} >\r\n            <Text style={styles.login.cardTitle}>Entrar</Text>\r\n          </View>\r\n          <View style={styles.login.cardSection}>\r\n            <TextInput\r\n            placeholder='Email'\r\n            textContentType='emailAddress'\r\n            style={styles.login.inputField}\r\n            onChangeText={this.onChangeText('email')}\r\n            autoComplete='email'\r\n            importantForAutofill='yes'\r\n            >\r\n            </TextInput>\r\n            <TextInput\r\n            placeholder='Senha'\r\n            textContentType='password'\r\n            secureTextEntry={true}\r\n            style={styles.login.inputField}\r\n            onChangeText={this.onChangeText('password')}\r\n            autoComplete='password'\r\n            importantForAutofill='yes'\r\n            >\r\n            </TextInput>\r\n          </View>\r\n          <View style={styles.login.cardSection}>\r\n            {this.submitButton('signin')}\r\n            {this.submitButton('signup')}\r\n          </View>\r\n          <View style={[styles.login.cardSection]}>\r\n            {this.LoginIcon()}\r\n          </View>\r\n        </View>\r\n\r\n        {this.loginMsg()}\r\n\r\n      </ImageBackground>\r\n    )\r\n  }\r\n\r\n  isInputEmpty() {\r\n    if (!this.state.userInfo.email) {\r\n      const errMsg = 'Insira um endereço de email.'\r\n      this.setLoginMsg(errMsg)\r\n      console.log('SIGNIN STATUS: ' + errMsg)\r\n      return true\r\n    } else if (!this.state.userInfo.password) {\r\n      const errMsg = 'Insira uma senha.'\r\n      this.setLoginMsg(errMsg)\r\n      console.log('SIGNIN STATUS: ' + errMsg)\r\n      return true\r\n    } else return false\r\n  }\r\n\r\n  async onSignIn() {\r\n\r\n    console.log('SIGNIN STATUS: Started...')\r\n    var info = this.state.userInfo;\r\n    this.setState({ isDataLoading: true });\r\n\r\n    try {\r\n\r\n      if (this.isInputEmpty()) return\r\n\r\n      var UsersResult = await fetch( corsURI + appServerURI + 'Users', { method: 'GET' });\r\n      const UsersStatus = 'Status: ' + UsersResult.status + ', ' + 'Status Text: ' + UsersResult.statusText\r\n      if (UsersResult.ok) {\r\n        console.log('fetch GET request for users data at signin successful.');\r\n        console.log(UsersStatus)\r\n      } else {\r\n        console.log('fetch GET request for users data at signin failed. Printing fetch response...')\r\n        console.log(JSON.stringify(UsersResult))\r\n        console.log('Throwing error...')\r\n        throw new Error(UsersStatus)\r\n      }\r\n\r\n      const Users = await UsersResult.json();\r\n      const user = Users.filter((user) => user.email === info.email)[0]\r\n      \r\n      if ( user ) {          \r\n        \r\n        if (user.password === info.password) {\r\n          const userInfo = { ...info, username: info.email.split('@')[0]}\r\n          this.setState( {isUserAuth: true, userInfo} )\r\n          const successMsg = 'Login realizado com sucesso!'\r\n          this.setLoginMsg(successMsg)\r\n          console.log('SIGNIN STATUS: Sucesso.')\r\n\r\n        } else {\r\n          const errMsg = 'Senha incorreta.'\r\n          this.setLoginMsg(errMsg)\r\n          console.log('SIGNIN STATUS: ' + errMsg);\r\n        }\r\n\r\n      } else {\r\n        const errMsg = 'Email não cadastrado!'\r\n        this.setLoginMsg(errMsg)\r\n        console.log('SIGNIN STATUS: ' + errMsg)\r\n      }\r\n\r\n    } catch (error) {\r\n      const errMsg = 'Erro no servidor! Tente novamente...'\r\n      this.setLoginMsg(errMsg)\r\n      console.log('Error catched in fetch GET request for users data at signin. Printing Error...')\r\n      console.log('SIGNIN STATUS:' + 'Erro capturado. Imprimindo erro...')\r\n      console.log(error);\r\n\r\n    } finally {\r\n      this.setState({ isDataLoading: false });\r\n      console.log('SIGNIN STATUS: Concluido.')\r\n      if (this.state.isUserAuth) this.props.authUser(this.state.userInfo)        // Father class component method that authenticates the user and redirects to entrances screen.\r\n    }\r\n  }\r\n\r\n  async onSignUp() {\r\n\r\n    console.log('SIGNUP STATUS: started...')\r\n    var info = this.state.userInfo;\r\n    this.setState({ isDataLoading: true });\r\n    \r\n    try {\r\n\r\n      var postUserResult = {ok: false}\r\n      if (this.isInputEmpty()) return\r\n\r\n      // Validating email and password\r\n      const emailValidation = await validateEmail(info.email)\r\n      console.log('SING UP STATUS: ' + emailValidation.status)\r\n      if (!emailValidation.ok) {\r\n          this.setLoginMsg(emailValidation.status)\r\n          return\r\n      }\r\n\r\n      // Checking if email is already registerd\r\n      var UsersResult = await fetch( corsURI + appServerURI + 'Users', { method: 'GET' } );  \r\n      const reqStatus = 'Status: ' + UsersResult.status + ', ' + UsersResult.statusText\r\n      if (UsersResult.ok) {\r\n        console.log('fetch GET request for users data at signup successful.')\r\n        console.log(reqStatus)\r\n      } else {\r\n        console.log('fetch GET request for users data at signup failed. Throwing error...')\r\n        throw new Error(reqStatus)\r\n      }\r\n\r\n      const Users = await UsersResult.json();\r\n      const User = Users.filter((user) => user.email === info.email)[0]\r\n      if ( !User ) {\r\n\r\n        // Validating Password\r\n        const passwordCheck = validatePassword(info.password)\r\n        if (!passwordCheck.ok) {\r\n          console.log('SING UP STATUS: ' + passwordCheck.status)\r\n          this.setLoginMsg(passwordCheck.status)\r\n          return\r\n      }\r\n\r\n        // Registering new user by posting user identification to database\r\n        info.username = info.email.split('@')[0]\r\n        const postUserOpts = { \r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify( { entries: [], ...info } )\r\n        }\r\n        \r\n        postUserResult = await fetch( corsURI + appServerURI +  'Users/' + info.username, postUserOpts );\r\n        const postUserStatus = 'Status: ' + postUserResult.status + ', ' + postUserResult.statusText\r\n\r\n        if (postUserResult.ok) {\r\n          const successMsg = 'Cadastro realizado com sucesso!'\r\n          this.setLoginMsg(successMsg)\r\n          console.log('fetch POST request for user data at signup successful.')\r\n          console.log(postUserStatus)\r\n          console.log('SING UP STATUS: ' + successMsg)\r\n\r\n        } else {\r\n          console.log('fetch POST request for user data at signup failed. Throwing error...')\r\n          throw new Error(postUserStatus)\r\n        }\r\n\r\n      } else {\r\n        const errMsg = 'Email já cadastrado.'\r\n        this.setLoginMsg(errMsg)\r\n        console.log('SING UP STATUS: ' + errMsg)\r\n      }\r\n\r\n    } catch (error) {\r\n      const errMsg = 'Erro no servidor, tente novamente...'\r\n      this.setLoginMsg(errMsg)\r\n      console.log('SING UP STATUS: Erro capturado. Imprimindo erro...')\r\n      console.log(error);\r\n\r\n    } finally {\r\n      this.setState({ isDataLoading: false })\r\n      console.log('SING UP STATUS: Concluido.')\r\n      if (postUserResult.ok)  this.onSignIn()\r\n    }\r\n  }\r\n\r\n  render() {\r\n\r\n    // console.log('Rendering \"LoginComponent\" screen...')\r\n    return this.LoginScreen()\r\n  \r\n  }\r\n}\r\n\r\nexport default LoginScreen;","import React, { Component } from 'react';\nimport { Text, ImageBackground} from 'react-native';\n\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\n// import { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\n//import { createDrawerNavigator } from '@react-navigation/drawer';\n\nimport EntrancesScreen from './components/EntrancesComponent';\nimport PostEntranceScreen from './components/PostEntryComponent';\nimport LoginScreen from './components/LoginComponent'\n\nconst Stack = createNativeStackNavigator();\n// const Tab = createBottomTabNavigator();\n\nconst HomeScreen = (props) => {\n\n  // console.log('Returning \"HomeScreen\" Component...')\n  return(\n    <Stack.Navigator \n    initialRouteName='Entrances'\n    screenOptions={{\n      headerShown: false,\n    }}\n    >\n      <Stack.Screen\n      name=\"Entrances\"\n      component={EntrancesScreen}\n      options={{title: 'Suas entradas'}}\n      initialParams={{userInfo: props.userInfo}}\n      // initialParams={{userInfo: props.route.params.userInfo}}\n      />\n      <Stack.Screen\n      name=\"PostEntrance\"\n      component={PostEntranceScreen}\n      options={{title: 'Adicione uma  entrada'}}\n      initialParams={{userInfo: props.userInfo}}\n      // initialParams={{userInfo: props.route.params.userInfo}}\n      />\n    </Stack.Navigator>\n  )  \n}\n\n// function SettingsScreen() {\n//   return(\n//     <ImageBackground source={require('./assets/wallpaper.jpg')} style={{width: '100%', height: '100%'}}>\n//       <Text>Settings</Text>\n//     </ImageBackground>\n//   )\n// }\n\n// const mainScreenOptions = ({ route }) => ({\n//   headerShown: false,\n//   tabBarActiveTintColor: 'tomato',\n//   tabBarInactiveTintColor: 'gray',\n//   tabBarHideOnKeyboard: true,\n//   tabBarIcon: ({ focused, color, size }) => {\n//     let iconName;\n//     if (route.name === 'Home') {\n//       iconName = focused\n//         ? 'home'\n//         : 'home-outline';\n//     } else if (route.name === 'Settings') {\n//       iconName = focused ? 'settings' : 'settings-outline';\n//     }\n//     // You can return any component that you like here!\n//     return <Icon name={iconName} width={size} height={size} fill='rgb(35,35,35)'></Icon>\n//   },\n// })\n\nexport default class App extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isUserAuth: false,\n      userInfo: null,\n    };\n    this.authUser = this.authUser.bind(this);\n  }\n\n  authUser(userInfo) {\n    console.log('User authenticated. Navigating to \"HomeScreen\"...')\n    this.setState( {isUserAuth: true, userInfo} )\n  }\n\n  render() {\n\n    if (!this.state.isUserAuth) {\n      return <LoginScreen authUser={this.authUser} />\n\n    } else {\n      return (\n\n        <NavigationContainer>\n          <HomeScreen userInfo={this.state.userInfo} />\n        </NavigationContainer>\n\n        // <NavigationContainer>\n        //   <Tab.Navigator\n        //     screenOptions={mainScreenOptions}\n        //   >\n        //     <Tab.Screen name=\"Home\" component={HomeScreen} initialParams={{userInfo: this.state.userInfo}}/>\n        //     <Tab.Screen name=\"Settings\" component={SettingsScreen} initialParams={{userInfo: this.state.userInfo}} />\n        //   </Tab.Navigator>    \n        // </NavigationContainer>\n\n      );  \n    }\n  }\n}"],"sourceRoot":""}