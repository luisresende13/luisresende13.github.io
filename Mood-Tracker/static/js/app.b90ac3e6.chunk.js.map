{"version":3,"sources":["styles/entrancesStyles.js","components/subcomponents/UserEntryCards.js","shared/dateRange.js","components/EntrancesComponent.js","styles/postEntryStyles.js","components/subcomponents/EditEmotions.js","components/subcomponents/GoogleMapsAPI.js","components/subcomponents/OpenWeatherMapAPI.js","components/PostEntryComponent.js","styles/loginStyles.js","components/LoginComponent.js","components/SettingsScreen.js","shared/UserContext.js","components/WallpapersComponent.js","components/WallpaperZoomComponent.js","App.js","shared/emotionsConfig.js"],"names":["styles","mainView","flex","postButton","position","height","width","borderRadius","bottom","alignSelf","backgroundColor","justifyContent","postButtonLabel","scrollView","section","paddingVertical","borderBottomWidth","borderColor","sectionTitle","fontSize","color","fontWeight","card","marginTop","paddingHorizontal","cardRow","flexDirection","alignItems","moodBadge","textAlign","emotionBadge","marginRight","textBadge","paddingTop","paddingBottom","lineHeight","textAlignVertical","text","spaceBetween","icon","entryIcon","paddingRight","borderWidth","editButtonsView","editButton","editButtonLabel","msgBox","msg","corsURI","Platform","OS","moodColors","monthDict","MoodHeader","entry","View","style","Text","mood","star","name","fill","weather","Image","source","uri","main","temp","toString","slice","startTime","Address","useState","isCollapsed","setIsCollapsed","address","numberOfLines","onPress","top","Emotions","emotions","length","flexWrap","PaddingBottom","map","emotion","index","Jornal","jornal","left","EmptyCard","props","navigateParams","currentEntry","type","date","now","Date","split","join","Today","parentState","setMainScreenState","getMainScreenState","textStyle","Pressable","parentProps","navigation","navigate","CardsLoadingMessage","UserEntryCards","state","EntryCard","bind","EditEntryButtons","editUserEntry","deleteUserEntry","console","log","this","selectedEntryId","_id","entryId","selDateEntries","user","entries","filter","reverse","isUserDataSyncing","onButtonPress","isButtonPressed","setIsButtonPressed","highlightButtonFor","label","isLoading","isDeleteLoading","buttonLabel","disabled","onPressIn","ActivityIndicator","selectedEntry","a","async","isDeleteEntryLoading","UsersResult","ok","status","fetch","username","method","usersStatus","statusText","Error","setAlertMsg","syncUserData","UserEntryCardsList","Component","dateRange","englishMonthSigs","portugueseMonthSigs","englishWeekDayMap","getNextDate","next","nextDate","indexOf","formatDate","selDate","ymd","yesterday","englishWeekDay","weekDay","prefix","i","oneDigit","stringNumber","EntrancesScreen","DateNavigationButton","today","onNextButtonPress","hitSlop","time","selectedDate","alertMsg","locationPermission","setSelectedDate","setState","setTimeout","appState","settings","backgroundImage","imgURI","displayBackgroundImage","urls","regular","ImageBackground","ScrollView","route","params","size","login","StatusBar","currentHeight","entrances","content","flexGrow","contentRow","padding","entryTitle","paddingLeft","postButtonView","moodButtonView","moodButton","jornalText","saveButton","borderTopLeftRadius","borderTopRightRadius","saveButtonLabel","marginVertical","marginHorizontal","entryCardEmotionBadge","datetimeTitle","capitalize","multipleWordString","words","trim","CapitalizedWords","forEach","element","push","toUpperCase","EditEmotions","showEditMenu","showExpandMenuButton","mode","newEmotionName","selectedEmotionType","selectedEmotionEnergy","initialEmotionLayout","EditEmotionsMenu","EditEmotionsSection","onSaveEmotionButtonPress","emotionLayoutMap","inputSectionStyle","marginBottom","tagStyle","createEmotionViewStyle","borderTopWidth","borderTopColor","isDeleteEmotionLoading","isSaveEmotionLoading","isPostEntryLoading","isUpdateUserDataLoading","isNewEmotionFormComplete","TextInput","placeholder","placeholderTextColor","onChangeText","value","typeSelected","setParentState","deleteEmotionMode","layout","isLayoutSelected","selectedEmotionLayout","onSaveEmotionLayoutButtonPress","hidden","anyOpen","marginLeft","Object","keys","isSelectedEmotions","includes","newEmotion","energy","postEmotionResult","postUserEntryOpts","headers","body","JSON","stringify","postEmotionStatus","updateUserData","isSaveEmotionLayoutLoading","postEmotionLayoutResult","postEmotionLayoutOpts","postEmotionLayoutStatus","GoogleMapsAPI","GoogleMapsJavascriptAPIkey","GoogleMapsGeocodingAPIKey","OpenWeatherMapAPI","KEY","Location","moods","moodColorsRGBA","moodIcons","emotionGroupsNames","emotionTypes","emotionEnergy","buildIsSelectedEmotions","monthSigs","months","monthNameMap","monthSig","getTime","formatPostEntryDatetimeTitle","m","PostEntranceScreen","endTime","createdAt","lastEdited","selectedMood","jornalEntry","location","isMoodUnmarked","isFetchingLocationOrWeather","userCoordinates","loginMsg","initializeEntry","onSaveButtonPress","setLoginMsg","EmotionButtons","MoodButtons","postEntryHeader","onEmotionButtonPress","onMoodButtonPress","inputCardBody","setSelectedEntry","InputCard","JornalInput","postNewEntryAsync","deleteEmotion","onEmotionButtonLongPress","goBack","item","alpha","selected","selColor","selectMood","objList","objKey","obj","sortedKeys","sort","newObjList","key","sortObjListByKey","title","onLongPress","suppressHighlighting","selectable","selectEmotion","multiline","scrollEnabled","sectionName","cardBodyStyle","cardBodyContent","userEmotionGroups","emotionLabels","mapEmotions","setSelected","checkIfLocationEnabled","getCurrentLocation","fetchWeather","currentEmotions","isSelectedEmotionsNew","oldEmotions","newEmotionsSelected","isDataLoading","newEntryPost","newEntry","editMode","postUserEntryResult","postUserEntryStatus","coords","lat","latitude","lng","longitude","then","res","resStatus","json","weatherInfo","coord","clouds","wind","visibility","response","addressObj","street","streetNumber","district","subregion","region","isoCountryCode","minHeight","titleView","titleIcon","cardHeader","cardTitle","cardSection","loadingIcon","inputField","button","defaultEmotions","require","falseParams","appendValueToUri","validateEmail","email","emailStatus","apiResp","apiRespJson","formatCheck","smtpCheck","registerLocallyIfUserIsNewToDevice","AsyncStorage","getItem","localAuthInfo","parse","users","localUser","updatedLocalAuthInfo","password","setItem","keepUserConnectionAlive","userId","keepConnected","LoginScreen","isUserAuth","userInfo","textContentType","autoComplete","importantForAutofill","secureTextEntry","submitButton","Switch","trackColor","false","true","thumbColor","ios_backgroundColor","onValueChange","LoginIcon","onSignIn","onSignUp","restoreUserToken","animation","textField","setField","sign","signIn","errMsg","NetInfo","DEVICE_IP_ADDRESS","details","ipAddress","initialLocalAuthInfo","IP_ADDRESS","info","isInputEmpty","UsersStatus","Users","setAppState","postUserResult","emailValidation","reqStatus","passwordCheck","postUserOpts","postUserStatus","successMsg","colorList","StyleSheet","create","background","foreground","header","settingsRow","colorBox","colorRow","colorSquare","logout","h1","h2","h3","h4","blinkButton","setPressed","timeSpan","SettingsScreen","selectedColor","selectedImage","isBackgroundColorSettingsOpen","isSaveColorLoading","isDisplayBackgroundImageLoading","isLogoutButtonPressed","onLogoutButtonPress","onColorButtonPressFor","onSaveColorButtonPress","syncUserSettings","ColorRow","ScreenSettings","logoutPressable","setParams","React","isColorRowPressed","setIsColorRowPressed","fontStyle","textDecorationLine","isColorButtonPressed","setIsColorButtonPressed","isChooseImageButtonPressed","setIsChooseImageButtonPressed","isExposeImageButtonPressed","setIsExposeImageButtonPressed","newColorUnselected","onDisplayBackgroundImageSwitch","displayImage","displaySetting","postDisplayResult","postDisplaySettingOpts","postDisplayStatus","alert","colorSetting","postColorResult","postColorSettingOpts","postColorStatus","UserContext","createContext","window","Dimensions","get","windowWidth","screenHeight","formatTopicName","headerLabel","photosView","imagePressable","image","Item","topicsScreen","nextScreenName","photoURI","cover_photo","photoHeight","slug","getUnsplash","unsplashParams","endpoint","page","per_page","order_by","reqParams","url","unsplashUrl","result","result_json","success","WallpapersComponent","renderItem","PhotoList","FlatList","data","photos","keyExtractor","id","numColumns","isPhotosLoading","isHeaderShown","getUnsplashAsync","HeaderText","WallpaperListHeader","photoList","orientation","asyncResult","headerText","hide","SafeAreaView","WallpaperZoom","useContext","isSaveImageLoading","setIsSaveImageLoading","imageSetting","postImageResult","postImageSettingOpts","unsplashTopics","SettingsScreenProvider","EntrancesScreenProvider","PostEntranceScreenProvider","Stack","createNativeStackNavigator","Tab","createBottomTabNavigator","tabBarIcon","iconName","focused","newIconName","HomeTab","Navigator","initialRouteName","screenOptions","headerShown","tabBarShowLabel","tabBarHideOnKeyboard","tabBarBackground","LinearGradient","colors","start","end","Screen","component","initialParams","getAppState","options","HomeStack","App","Provider","NavigationContainer","emotionGroups","module","exports"],"mappings":"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,mDACZD,QAAQC,IAAIgC,GACZjC,QAAQC,IAAI,yCAhBxB,8BAmBYD,QAAQC,IAAK,IAAIkC,MAAM,oEACjB,IAAIA,MAAMF,GApB5B,0DAwBYjC,QAAQC,IAAI,+DACZD,QAAQC,IAAR,MACAC,KAAK5B,MAAM8D,YAAY,8DA1BnC,yBA6BQlC,KAAK5B,MAAMW,mBAAmB,CAAEyC,sBAAsB,IACtDxB,KAAK5B,MAAMW,mBAAmB,CAAEkB,gBAAiB,OACjDH,QAAQC,IAA6D,sCACjE0B,EAAYC,IAAK1B,KAAK5B,MAAM+D,eAhCxC,sF,oBAoCA,WAEI,OADArC,QAAQC,IAAI,iDACLC,KAAKoC,yB,GArJwBC,aC4Y7BC,GApiBG,CACd,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,c,gbCrhBY5G,IAASC,GAAzB,IAIME,GAAY,CAAC,IAAO,KAAM,IAAO,KAAM,IAAO,KAAM,IAAO,KAAM,IAAO,KAAM,IAAO,KAAM,IAAO,KAAM,IAAO,KAAM,IAAO,KAAM,IAAO,KAAM,IAAO,KAAM,IAAO,MACnK0G,GAAmB,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OACjGC,GAAsB,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OACpGC,GAAoB,CAAC,IAAO,MAAO,IAAO,MAAO,IAAO,MAAO,IAAO,MAAO,IAAO,MAAO,IAAO,MAAO,IAAO,OAGtH,SAAS5D,KACL,IAAMJ,EAAMC,OAAO7B,WAAW8B,MAAM,KAEpC,MADc,CAAEF,EAAI,GAAI5C,GAAU4C,EAAI,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","file":"static/js/app.b90ac3e6.chunk.js","sourcesContent":["import { StatusBar } from 'expo-status-bar';\r\n\r\n//import StatusBar from 'react-native'\r\n// import { Platform } from 'react-native';\r\n\r\n// import { Dimensions } from 'react-native';\r\n// var windowWidth = Dimensions.get('window').width;\r\n// var windowHeight = Dimensions.get('window').height;\r\n\r\n// import DeviceInfo from 'react-native-device-info';\r\n// import AsyncStorage from '@react-native-community/async-storage';\r\n\r\n// // how can i do some code that will gives me if its \"Handset\"=> Smartphone , \r\n// //if its \"unknown\"=> Laptop/Computer \r\n// //and it will be saved as well in my async-storage.\r\n\r\n// //this some example that i wanna get it works well coz now its not work good\r\n\r\n// const funct1=  (type) => {\r\n// let type = DeviceInfo.getDeviceType();\r\n\r\n// if type==='Handset'{\r\n//   AsyncStorage.setItem('PLATFORM-TYPE', 'Smartphone');\r\n// }\r\n// if type==='unknown'{\r\n//   AsyncStorage.setItem('PLATFORM-TYPE', 'Laptop/Computer');\r\n// }\r\n// };\r\n\r\nconst styles = {\r\n    mainView: {\r\n        flex: 1,                 \r\n        // marginTop: StatusBar.currentHeight,\r\n    },\r\n    postButton: {\r\n        position: 'absolute',\r\n        height: 60,\r\n        width: 60,\r\n        borderRadius: 30,\r\n        bottom: '2%',\r\n        alignSelf: 'center',\r\n        backgroundColor: 'rgba(0,0,0,1)',\r\n        justifyContent: 'center',  \r\n    },\r\n    postButtonLabel: {\r\n        alignSelf: 'center',\r\n    },\r\n    scrollView: {\r\n        // paddingHorizontal: Platform.OS != 'web' ? '5%' : '5%',\r\n        flex: 1,\r\n    },\r\n    section: {\r\n        width: 350,\r\n        paddingVertical: '16%',\r\n        borderBottomWidth: 1,\r\n        borderColor: 'rgba(155,155,155,0.3)',\r\n        alignSelf: 'center',\r\n    },\r\n    sectionTitle: {\r\n        paddingVertical: 7.5,\r\n        fontSize: 19,\r\n        color: 'white',\r\n        fontWeight: '400',\r\n    },\r\n    card: {\r\n        marginTop: '5%',\r\n        paddingVertical: 5,\r\n        paddingHorizontal: 10,\r\n        borderRadius: 20,\r\n        backgroundColor: 'rgba(0,0,0,0.3)',\r\n    },\r\n    cardRow: {\r\n        flexDirection: 'row',\r\n        paddingVertical: 5,\r\n        alignItems: 'center',\r\n    },\r\n    moodBadge: {\r\n        // fontFamily: 'sans-serif',\r\n        backgroundColor: 'green',\r\n        borderRadius: 30,\r\n        paddingVertical: 4,\r\n        width: 130,\r\n        fontSize: 15,\r\n        textAlign: 'center',\r\n    },\r\n    emotionBadge: {\r\n        // fontFamily: 'sans-serif',\r\n        backgroundColor: '#f4f3f4',\r\n        borderRadius: 18,\r\n        paddingVertical: 5,\r\n        paddingHorizontal: 12.5,\r\n        marginRight: 6,\r\n        fontSize: 14,\r\n        textAlign: 'center',\r\n    },\r\n    textBadge: {\r\n        backgroundColor: 'aliceblue',\r\n        borderRadius: 17,\r\n        paddingTop: 5,\r\n        paddingBottom: 8,\r\n        paddingHorizontal: 11,\r\n        width: '100%',\r\n        fontSize: 15,\r\n        lineHeight: 22,\r\n        textAlign: 'left',\r\n        textAlignVertical: 'top',\r\n},\r\n    text: {\r\n        // fontFamily: 'sans-serif',\r\n        fontSize: 14,\r\n        color: 'white'\r\n    },\r\n    spaceBetween: {\r\n        justifyContent: 'space-between',\r\n    },\r\n    icon: {\r\n        paddingHorizontal: 12,\r\n    },\r\n    entryIcon: {\r\n        paddingRight: 0,\r\n        borderWidth: 1,\r\n    },\r\n    editButtonsView: {\r\n        flexDirection: 'row',\r\n        height: 50,\r\n        paddingBottom: 5,\r\n        alignItems: 'flex-end',\r\n        justifyContent: 'space-between'\r\n    },\r\n    editButton: {\r\n        height: 34,\r\n        width: 102,\r\n        borderWidth: 1,\r\n        borderColor: 'aliceblue',\r\n        borderRadius: 17,\r\n        alignItems: 'center',\r\n        justifyContent: 'center'\r\n    },\r\n    editButtonLabel: {\r\n        fontSize: 15,\r\n        fontWeight: '400',\r\n        color: 'white',\r\n    },\r\n    msgBox: {\r\n        position: 'absolute',\r\n        alignSelf: 'center',\r\n        bottom: 110,\r\n        width: 300,\r\n        paddingVertical: 5,\r\n        paddingHorizontal: 3,\r\n        // height: 36,\r\n        justifyContent: 'center',\r\n        backgroundColor: 'rgb(30,30,30)',\r\n        borderWidth: 1,\r\n        borderColor: 'rgb(40,40,40)',\r\n        \r\n    },\r\n    msg: {\r\n        textAlign: 'center',\r\n        color: 'white',\r\n        // paddingHorizontal: 20,\r\n    },\r\n};\r\n\r\nexport default styles;","// Module import\r\nimport React, { Component, useState } from 'react';\r\nimport { Platform, View, Text, Pressable, Image, ActivityIndicator } from 'react-native';\r\nimport { Icon } from 'react-native-eva-icons'\r\n\r\n// Local import\r\nimport styles from '../../styles/entrancesStyles'\r\n\r\n// cors-midpoint uri (needed to avoid cors' allow-cross-origin error when fetching in web platforms)\r\nconst corsURI = Platform.OS == 'web' ? 'https://morning-journey-78874.herokuapp.com/' : ''\r\nconst appServerURI = 'https://mood-tracker-server.herokuapp.com/'\r\n\r\n// OpenWeatherMap API weather icons URI:\r\nfunction openWeatherMapIconsURI (icon) {\r\n    if (Platform.OS === 'android') {\r\n        return `http://openweathermap.org/img/wn/${icon}@2x.png`\r\n\r\n    } else if (Platform.OS === 'web') {\r\n        return `https://openweathermap.org/img/wn/${icon}@2x.png`\r\n    }\r\n}\r\n\r\n// Defining mood colors schema\r\n// const moodColors = ['#ff3333', '#0099cc', '#add8e6', '#ffff33', '#00cc00']\r\nconst moodColors = {'Horrível': '#ff3333', 'Mal': '#0099cc', 'Regular': '#add8e6', 'Bem': '#ffff33', 'Ótimo': '#00cc00'};\r\n\r\nconst monthDict = {'Jan': '01', 'Feb': '02', 'Mar': '03', 'Apr': '04', 'May': '05', 'Jun': '06', 'Jul': '07', 'Ago': '08', 'Sep': '09', 'Oct': '10', 'Nov': '11', 'Dec': '12'}\r\nfunction Today() {\r\n    const now = Date().toString().split(' ')\r\n    const today = [ now[3], monthDict[now[1]], now[2] ].join('-')\r\n    return today\r\n}\r\n\r\nfunction MoodHeader({entry}) {\r\n    return(\r\n        <View style={ [styles.cardRow, styles.spaceBetween] }>\r\n            <View style={ [{flexDirection: 'row', alignItems: 'center'} ] }>\r\n                <Text style={[styles.moodBadge, {backgroundColor: moodColors[entry.mood]}]}>{entry.mood}</Text>\r\n                    { entry.star ? (\r\n                    <View style={{height: 30, width: 42, alignItems: 'flex-end', justifyContent: 'center'}}>\r\n                        <Icon name='star' fill='gold' width={28} height={28} style={{}} />\r\n                    </View>\r\n                    ) : <></> }                    \r\n                    { entry.weather ? (\r\n                        <View style={{height: 30, width: 50, alignItems: 'flex-end', justifyContent: 'center'}}>\r\n                            <Image source={{uri: openWeatherMapIconsURI(entry.weather.weather.icon)}} style={{width: 40, height: 40}} />\r\n                        </View>\r\n                    ) : <></> }                    \r\n                    { entry.weather ? (\r\n                        <View style={{height: 30, width: 40, alignItems: 'flex-end', justifyContent: 'center'}}>\r\n                            <Text style={{fontSize: 14, fontWeight: '500', color:'#fffd'}}> { entry.weather.main.temp.toString().slice(0,2) + '°C' } </Text>\r\n                        </View>\r\n                    ) : <></> }                \r\n                \r\n            </View>\r\n            <View style={[styles.cardRow]}>\r\n                <Icon name='edit' height={18} width={18} fill='rgba(255,255,255,0.75)' style={{marginRight: 6}} />\r\n                <Text style={styles.text}>{entry.startTime.slice(0,5)}</Text>\r\n            </View>\r\n        </View>\r\n\r\n    )\r\n}\r\n\r\nfunction Address ({entry}) {\r\n    const [isCollapsed, setIsCollapsed] = useState( 1 );\r\n    if (entry.address) {\r\n        return(\r\n            <View style={styles.cardRow}>\r\n                <Text numberOfLines={ isCollapsed } onPress={ () => { setIsCollapsed( isCollapsed ? 0 : 1 ) }} style={styles.text}>\r\n                    <Icon name='pin' height={17} width={17} fill='rgba(255,255,255,0.75)' style={{position: 'relative', marginRight: 5, top: 2}} />\r\n                    {entry.address}\r\n                </Text>\r\n            </View>        \r\n        )\r\n    } else {\r\n        return <></>\r\n    }\r\n}\r\n\r\nfunction Emotions ({entry}) {\r\n    if (entry.emotions.length>0) {\r\n        return (\r\n            <View style={[styles.cardRow, {flexWrap: 'wrap', justifyContent: 'flex-start', paddingTop: 2, PaddingBottom: 0}]}>\r\n                { entry.emotions.map((emotion, index) => {\r\n                    if (emotion.name) {\r\n                        emotion = emotion.name\r\n                    }\r\n                    return(\r\n                        <View key={'emotion-' + emotion} style={{paddingVertical: 5, paddingHorizontal: 2}}>\r\n                            <Text style={[styles.emotionBadge]}>{emotion}</Text>\r\n                        </View>\r\n                    )\r\n                })}\r\n            </View>\r\n        )\r\n    } else {\r\n        return (\r\n            <></>\r\n        )\r\n    }\r\n}\r\n\r\nfunction Jornal({ entry }) {\r\n    if (entry.jornal) {\r\n        return(\r\n            <View style={styles.cardRow}>\r\n                <Text style={styles.textBadge}>\r\n                    <Icon name='book-open' height={20} width={20} fill='rgba(0,0,0,0.25)' style={{position: 'relative', top: 4, left: 1, marginRight: 6}} />\r\n                    {entry.jornal}\r\n                </Text>\r\n            </View>\r\n        )\r\n    } else {\r\n        return <></>\r\n    }\r\n}\r\n\r\nfunction EmptyCard(props) {\r\n    const today = props.date == Today()\r\n    const navigateParams = {\r\n        currentEntry: {\r\n            type: today ? 'new' : 'custom-date',\r\n            date: props.parentState.date,\r\n            entry: null\r\n        },\r\n        setMainScreenState: props.setMainScreenState,\r\n        getMainScreenState: props.getMainScreenState,\r\n\r\n    }\r\n    const textStyle = {fontSize: 16, color: 'white', marginTop: 7}\r\n    return (\r\n        <Pressable\r\n        onPress={ () => props.parentProps.navigation.navigate('PostEntrance', navigateParams) }\r\n        style={[styles.card, {alignItems: 'center', justifyContent: 'center', fontSize: 16, height: 145}]}\r\n        >\r\n            <Icon name='inbox' fill='rgba(255,255,255,0.3)' width={25} height={25} />\r\n            <Text style={textStyle}> Nenhuma entrada encontrada. </Text>\r\n            <Text style={textStyle}> Pressione aqui para adicionar uma a este dia! </Text>\r\n        </Pressable>\r\n    );\r\n}\r\n\r\nfunction CardsLoadingMessage() {\r\n    return(\r\n        <View style={[styles.card, {alignItems: 'center', justifyContent: 'center', height: 85}]}>\r\n            <Icon name='sync-outline' fill='rgba(255,255,255,1)' width={25} height={25} />\r\n            <Text style={{marginTop: 10, fontSize: 16, color: 'white'}}>Sincronizando entradas...</Text>\r\n        </View>\r\n    )\r\n}\r\n\r\nexport default class UserEntryCards extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n        \r\n        this.EntryCard = this.EntryCard.bind(this);\r\n        this.EditEntryButtons = this.EditEntryButtons.bind(this);\r\n        this.editUserEntry = this.editUserEntry.bind(this);\r\n        this.deleteUserEntry = this.deleteUserEntry.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log('Subcomponent \"UserEntryCards\" did mount...')\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        console.log('\"UserEntryCards\" sub-component will unmount...')\r\n      }\r\n    \r\n    EntryCard({ entry }) {\r\n        function onEntryCardPress() {\r\n            this.props.setMainScreenState({ selectedEntryId: this.props.parentState.selectedEntryId === entry._id ? null : entry._id })\r\n        }\r\n        return (\r\n        <Pressable onPress={onEntryCardPress.bind(this)} style={styles.card}>\r\n            <MoodHeader entry={entry} />\r\n            <Emotions entry={entry} />\r\n            <Address entry={entry} />\r\n            <Jornal entry={entry} />\r\n            <this.EditEntryButtons entryId={entry._id} />\r\n        </Pressable>\r\n        );\r\n    }    \r\n\r\n    UserEntryCardsList() {\r\n        const selDateEntries = this.props.parentState.user.entries.filter( (entry) => entry.date === this.props.parentState.date ).reverse()\r\n        if (selDateEntries.length) {\r\n            return(\r\n                <>\r\n                    { selDateEntries.map( entry => <this.EntryCard key={'entry-card-'+entry.startTime} entry={entry} />) }\r\n                    {/* { this.props.parentState.isUserDataSyncing ? <CardsLoadingMessage /> : null } */}\r\n                </>\r\n            )\r\n       \r\n        } else if (this.props.parentState.isUserDataSyncing ) {\r\n            return <CardsLoadingMessage />\r\n            \r\n        } else {\r\n            return <EmptyCard {...this.props} />\r\n        }\r\n    }\r\n\r\n    EditEntryButtons(props) {\r\n        const buttonLabels = ['Editar', 'Excluir']\r\n        const onButtonPress = { 'Editar': this.editUserEntry, 'Excluir': this.deleteUserEntry }\r\n\r\n        const [isButtonPressed, setIsButtonPressed] = useState({\r\n            'Editar': false,\r\n            'Excluir': false,\r\n        })\r\n\r\n        function highlightButtonFor(label) {\r\n            function highlightButton() {\r\n                setIsButtonPressed({ ...isButtonPressed, [label]: !isButtonPressed[label] })\r\n            }\r\n            return highlightButton.bind(this);\r\n        }\r\n\r\n        const isLoading = this.props.parentState.isDeleteLoading | this.props.parentState.isUserDataSyncing\r\n        const buttonLabel = (label) => <Text style={[styles.editButtonLabel, {color: label=='Excluir' ? 'red' : 'white' }]}>{label}</Text>\r\n        if (this.props.parentState.selectedEntryId == props.entryId) {\r\n            return(\r\n                <View style={styles.editButtonsView}>\r\n                    { buttonLabels.map( (label) => (\r\n                        <Pressable\r\n                        key={`edit-${label}-${props.entryId}`}\r\n                        style={[styles.editButton,  {backgroundColor: isButtonPressed[label] ? (label=='Excluir' ? '#0008' : '#fff5') : '#0000', borderColor: label=='Excluir' ? 'red' : 'white' }]}\r\n                        disabled={ isLoading }\r\n                        onPress={() => {highlightButtonFor(label)(); onButtonPress[label]() }}\r\n                        onPressIn={highlightButtonFor(label)}\r\n                        >\r\n                            { label=='Excluir' ? (\r\n                                this.props.parentState.isDeleteLoading ? <ActivityIndicator color='red' /> : buttonLabel(label)\r\n                                \r\n                            ) : buttonLabel(label) }\r\n                                                \r\n                        </Pressable>\r\n                    )) }\r\n            </View>\r\n            )\r\n        } else {\r\n            return null\r\n        }\r\n    }\r\n\r\n    editUserEntry() {\r\n        const selectedEntry = this.props.parentState.user.entries.filter( (entry) => entry._id == this.props.parentState.selectedEntryId )[0]\r\n        const navigateParams = {\r\n            currentEntry: {\r\n                type: 'edit',\r\n                date: selectedEntry.date,\r\n                entry: selectedEntry\r\n            },\r\n            setMainScreenState: this.props.setMainScreenState,\r\n            getMainScreenState: this.props.getMainScreenState,\r\n    \r\n        }\r\n        this.props.parentProps.navigation.navigate('PostEntrance', navigateParams)\r\n    }\r\n\r\n    async deleteUserEntry() {\r\n\r\n        console.log('DELETE USER ENTRY STATUS: Started...')\r\n        this.props.setMainScreenState({ isDeleteEntryLoading: true });\r\n        // prompt()\r\n\r\n        try {\r\n            var UsersResult = {ok: false, status: 999}\r\n            UsersResult = await fetch( corsURI + appServerURI + 'Users/' + this.props.parentState.user.username + '/entries/' + this.props.parentState.selectedEntryId, { method: 'DELETE' });\r\n            // var UsersResult = await fetch( 'https://localhost:3000/' + 'Users/' + this.props.parentState.user.username + '/entries/' + this.props.parentState.selectedEntryId, { method: 'DELETE' });\r\n            const usersStatus =  'Status ' + UsersResult.status + ', ' + UsersResult.statusText\r\n\r\n            if (UsersResult.ok) {\r\n                // const users = await UsersResult.json();\r\n                console.log('fetch DELETE request for user entry successful.')\r\n                console.log(usersStatus)\r\n                console.log('DELETE USER ENTRY STATUS: Successful.')\r\n\r\n            } else {\r\n                console.log( new Error('\"fetch\" DELETE request for user entry failed. Throwing error...') )\r\n                throw new Error(usersStatus)\r\n            }\r\n    \r\n        } catch (error) {\r\n                console.log('DELETE USER ENTRY STATUS: Error captured. Printing error...')\r\n                console.log(error);\r\n                this.props.setAlertMsg('Não foi possível deletar a entrada. Tente novamente.')\r\n\r\n        } finally {\r\n            this.props.setMainScreenState({ isDeleteEntryLoading: false });\r\n            this.props.setMainScreenState({ selectedEntryId: null })\r\n            console.log('DELETE USER ENTRY STATUS: FINISHED.' + UsersResult.ok ? 'Proceeding to sync user entries...' : 'Delete failed, skipping sync of user entries...')\r\n            if (UsersResult.ok) {this.props.syncUserData()}\r\n        }    \r\n    }\r\n\r\n    render() {\r\n        console.log('\"Rendering \"UserEntryCards\" sub-component...\"')\r\n        return this.UserEntryCardsList()\r\n    }\r\n}","const dateRange = [\r\n    \"2021-01-01\",\r\n    \"2021-01-02\",\r\n    \"2021-01-03\",\r\n    \"2021-01-04\",\r\n    \"2021-01-05\",\r\n    \"2021-01-06\",\r\n    \"2021-01-07\",\r\n    \"2021-01-08\",\r\n    \"2021-01-09\",\r\n    \"2021-01-10\",\r\n    \"2021-01-11\",\r\n    \"2021-01-12\",\r\n    \"2021-01-13\",\r\n    \"2021-01-14\",\r\n    \"2021-01-15\",\r\n    \"2021-01-16\",\r\n    \"2021-01-17\",\r\n    \"2021-01-18\",\r\n    \"2021-01-19\",\r\n    \"2021-01-20\",\r\n    \"2021-01-21\",\r\n    \"2021-01-22\",\r\n    \"2021-01-23\",\r\n    \"2021-01-24\",\r\n    \"2021-01-25\",\r\n    \"2021-01-26\",\r\n    \"2021-01-27\",\r\n    \"2021-01-28\",\r\n    \"2021-01-29\",\r\n    \"2021-01-30\",\r\n    \"2021-01-31\",\r\n    \"2021-02-01\",\r\n    \"2021-02-02\",\r\n    \"2021-02-03\",\r\n    \"2021-02-04\",\r\n    \"2021-02-05\",\r\n    \"2021-02-06\",\r\n    \"2021-02-07\",\r\n    \"2021-02-08\",\r\n    \"2021-02-09\",\r\n    \"2021-02-10\",\r\n    \"2021-02-11\",\r\n    \"2021-02-12\",\r\n    \"2021-02-13\",\r\n    \"2021-02-14\",\r\n    \"2021-02-15\",\r\n    \"2021-02-16\",\r\n    \"2021-02-17\",\r\n    \"2021-02-18\",\r\n    \"2021-02-19\",\r\n    \"2021-02-20\",\r\n    \"2021-02-21\",\r\n    \"2021-02-22\",\r\n    \"2021-02-23\",\r\n    \"2021-02-24\",\r\n    \"2021-02-25\",\r\n    \"2021-02-26\",\r\n    \"2021-02-27\",\r\n    \"2021-02-28\",\r\n    \"2021-03-01\",\r\n    \"2021-03-02\",\r\n    \"2021-03-03\",\r\n    \"2021-03-04\",\r\n    \"2021-03-05\",\r\n    \"2021-03-06\",\r\n    \"2021-03-07\",\r\n    \"2021-03-08\",\r\n    \"2021-03-09\",\r\n    \"2021-03-10\",\r\n    \"2021-03-11\",\r\n    \"2021-03-12\",\r\n    \"2021-03-13\",\r\n    \"2021-03-14\",\r\n    \"2021-03-15\",\r\n    \"2021-03-16\",\r\n    \"2021-03-17\",\r\n    \"2021-03-18\",\r\n    \"2021-03-19\",\r\n    \"2021-03-20\",\r\n    \"2021-03-21\",\r\n    \"2021-03-22\",\r\n    \"2021-03-23\",\r\n    \"2021-03-24\",\r\n    \"2021-03-25\",\r\n    \"2021-03-26\",\r\n    \"2021-03-27\",\r\n    \"2021-03-28\",\r\n    \"2021-03-29\",\r\n    \"2021-03-30\",\r\n    \"2021-03-31\",\r\n    \"2021-04-01\",\r\n    \"2021-04-02\",\r\n    \"2021-04-03\",\r\n    \"2021-04-04\",\r\n    \"2021-04-05\",\r\n    \"2021-04-06\",\r\n    \"2021-04-07\",\r\n    \"2021-04-08\",\r\n    \"2021-04-09\",\r\n    \"2021-04-10\",\r\n    \"2021-04-11\",\r\n    \"2021-04-12\",\r\n    \"2021-04-13\",\r\n    \"2021-04-14\",\r\n    \"2021-04-15\",\r\n    \"2021-04-16\",\r\n    \"2021-04-17\",\r\n    \"2021-04-18\",\r\n    \"2021-04-19\",\r\n    \"2021-04-20\",\r\n    \"2021-04-21\",\r\n    \"2021-04-22\",\r\n    \"2021-04-23\",\r\n    \"2021-04-24\",\r\n    \"2021-04-25\",\r\n    \"2021-04-26\",\r\n    \"2021-04-27\",\r\n    \"2021-04-28\",\r\n    \"2021-04-29\",\r\n    \"2021-04-30\",\r\n    \"2021-05-01\",\r\n    \"2021-05-02\",\r\n    \"2021-05-03\",\r\n    \"2021-05-04\",\r\n    \"2021-05-05\",\r\n    \"2021-05-06\",\r\n    \"2021-05-07\",\r\n    \"2021-05-08\",\r\n    \"2021-05-09\",\r\n    \"2021-05-10\",\r\n    \"2021-05-11\",\r\n    \"2021-05-12\",\r\n    \"2021-05-13\",\r\n    \"2021-05-14\",\r\n    \"2021-05-15\",\r\n    \"2021-05-16\",\r\n    \"2021-05-17\",\r\n    \"2021-05-18\",\r\n    \"2021-05-19\",\r\n    \"2021-05-20\",\r\n    \"2021-05-21\",\r\n    \"2021-05-22\",\r\n    \"2021-05-23\",\r\n    \"2021-05-24\",\r\n    \"2021-05-25\",\r\n    \"2021-05-26\",\r\n    \"2021-05-27\",\r\n    \"2021-05-28\",\r\n    \"2021-05-29\",\r\n    \"2021-05-30\",\r\n    \"2021-05-31\",\r\n    \"2021-06-01\",\r\n    \"2021-06-02\",\r\n    \"2021-06-03\",\r\n    \"2021-06-04\",\r\n    \"2021-06-05\",\r\n    \"2021-06-06\",\r\n    \"2021-06-07\",\r\n    \"2021-06-08\",\r\n    \"2021-06-09\",\r\n    \"2021-06-10\",\r\n    \"2021-06-11\",\r\n    \"2021-06-12\",\r\n    \"2021-06-13\",\r\n    \"2021-06-14\",\r\n    \"2021-06-15\",\r\n    \"2021-06-16\",\r\n    \"2021-06-17\",\r\n    \"2021-06-18\",\r\n    \"2021-06-19\",\r\n    \"2021-06-20\",\r\n    \"2021-06-21\",\r\n    \"2021-06-22\",\r\n    \"2021-06-23\",\r\n    \"2021-06-24\",\r\n    \"2021-06-25\",\r\n    \"2021-06-26\",\r\n    \"2021-06-27\",\r\n    \"2021-06-28\",\r\n    \"2021-06-29\",\r\n    \"2021-06-30\",\r\n    \"2021-07-01\",\r\n    \"2021-07-02\",\r\n    \"2021-07-03\",\r\n    \"2021-07-04\",\r\n    \"2021-07-05\",\r\n    \"2021-07-06\",\r\n    \"2021-07-07\",\r\n    \"2021-07-08\",\r\n    \"2021-07-09\",\r\n    \"2021-07-10\",\r\n    \"2021-07-11\",\r\n    \"2021-07-12\",\r\n    \"2021-07-13\",\r\n    \"2021-07-14\",\r\n    \"2021-07-15\",\r\n    \"2021-07-16\",\r\n    \"2021-07-17\",\r\n    \"2021-07-18\",\r\n    \"2021-07-19\",\r\n    \"2021-07-20\",\r\n    \"2021-07-21\",\r\n    \"2021-07-22\",\r\n    \"2021-07-23\",\r\n    \"2021-07-24\",\r\n    \"2021-07-25\",\r\n    \"2021-07-26\",\r\n    \"2021-07-27\",\r\n    \"2021-07-28\",\r\n    \"2021-07-29\",\r\n    \"2021-07-30\",\r\n    \"2021-07-31\",\r\n    \"2021-08-01\",\r\n    \"2021-08-02\",\r\n    \"2021-08-03\",\r\n    \"2021-08-04\",\r\n    \"2021-08-05\",\r\n    \"2021-08-06\",\r\n    \"2021-08-07\",\r\n    \"2021-08-08\",\r\n    \"2021-08-09\",\r\n    \"2021-08-10\",\r\n    \"2021-08-11\",\r\n    \"2021-08-12\",\r\n    \"2021-08-13\",\r\n    \"2021-08-14\",\r\n    \"2021-08-15\",\r\n    \"2021-08-16\",\r\n    \"2021-08-17\",\r\n    \"2021-08-18\",\r\n    \"2021-08-19\",\r\n    \"2021-08-20\",\r\n    \"2021-08-21\",\r\n    \"2021-08-22\",\r\n    \"2021-08-23\",\r\n    \"2021-08-24\",\r\n    \"2021-08-25\",\r\n    \"2021-08-26\",\r\n    \"2021-08-27\",\r\n    \"2021-08-28\",\r\n    \"2021-08-29\",\r\n    \"2021-08-30\",\r\n    \"2021-08-31\",\r\n    \"2021-09-01\",\r\n    \"2021-09-02\",\r\n    \"2021-09-03\",\r\n    \"2021-09-04\",\r\n    \"2021-09-05\",\r\n    \"2021-09-06\",\r\n    \"2021-09-07\",\r\n    \"2021-09-08\",\r\n    \"2021-09-09\",\r\n    \"2021-09-10\",\r\n    \"2021-09-11\",\r\n    \"2021-09-12\",\r\n    \"2021-09-13\",\r\n    \"2021-09-14\",\r\n    \"2021-09-15\",\r\n    \"2021-09-16\",\r\n    \"2021-09-17\",\r\n    \"2021-09-18\",\r\n    \"2021-09-19\",\r\n    \"2021-09-20\",\r\n    \"2021-09-21\",\r\n    \"2021-09-22\",\r\n    \"2021-09-23\",\r\n    \"2021-09-24\",\r\n    \"2021-09-25\",\r\n    \"2021-09-26\",\r\n    \"2021-09-27\",\r\n    \"2021-09-28\",\r\n    \"2021-09-29\",\r\n    \"2021-09-30\",\r\n    \"2021-10-01\",\r\n    \"2021-10-02\",\r\n    \"2021-10-03\",\r\n    \"2021-10-04\",\r\n    \"2021-10-05\",\r\n    \"2021-10-06\",\r\n    \"2021-10-07\",\r\n    \"2021-10-08\",\r\n    \"2021-10-09\",\r\n    \"2021-10-10\",\r\n    \"2021-10-11\",\r\n    \"2021-10-12\",\r\n    \"2021-10-13\",\r\n    \"2021-10-14\",\r\n    \"2021-10-15\",\r\n    \"2021-10-16\",\r\n    \"2021-10-17\",\r\n    \"2021-10-18\",\r\n    \"2021-10-19\",\r\n    \"2021-10-20\",\r\n    \"2021-10-21\",\r\n    \"2021-10-22\",\r\n    \"2021-10-23\",\r\n    \"2021-10-24\",\r\n    \"2021-10-25\",\r\n    \"2021-10-26\",\r\n    \"2021-10-27\",\r\n    \"2021-10-28\",\r\n    \"2021-10-29\",\r\n    \"2021-10-30\",\r\n    \"2021-10-31\",\r\n    \"2021-11-01\",\r\n    \"2021-11-02\",\r\n    \"2021-11-03\",\r\n    \"2021-11-04\",\r\n    \"2021-11-05\",\r\n    \"2021-11-06\",\r\n    \"2021-11-07\",\r\n    \"2021-11-08\",\r\n    \"2021-11-09\",\r\n    \"2021-11-10\",\r\n    \"2021-11-11\",\r\n    \"2021-11-12\",\r\n    \"2021-11-13\",\r\n    \"2021-11-14\",\r\n    \"2021-11-15\",\r\n    \"2021-11-16\",\r\n    \"2021-11-17\",\r\n    \"2021-11-18\",\r\n    \"2021-11-19\",\r\n    \"2021-11-20\",\r\n    \"2021-11-21\",\r\n    \"2021-11-22\",\r\n    \"2021-11-23\",\r\n    \"2021-11-24\",\r\n    \"2021-11-25\",\r\n    \"2021-11-26\",\r\n    \"2021-11-27\",\r\n    \"2021-11-28\",\r\n    \"2021-11-29\",\r\n    \"2021-11-30\",\r\n    \"2021-12-01\",\r\n    \"2021-12-02\",\r\n    \"2021-12-03\",\r\n    \"2021-12-04\",\r\n    \"2021-12-05\",\r\n    \"2021-12-06\",\r\n    \"2021-12-07\",\r\n    \"2021-12-08\",\r\n    \"2021-12-09\",\r\n    \"2021-12-10\",\r\n    \"2021-12-11\",\r\n    \"2021-12-12\",\r\n    \"2021-12-13\",\r\n    \"2021-12-14\",\r\n    \"2021-12-15\",\r\n    \"2021-12-16\",\r\n    \"2021-12-17\",\r\n    \"2021-12-18\",\r\n    \"2021-12-19\",\r\n    \"2021-12-20\",\r\n    \"2021-12-21\",\r\n    \"2021-12-22\",\r\n    \"2021-12-23\",\r\n    \"2021-12-24\",\r\n    \"2021-12-25\",\r\n    \"2021-12-26\",\r\n    \"2021-12-27\",\r\n    \"2021-12-28\",\r\n    \"2021-12-29\",\r\n    \"2021-12-30\",\r\n    \"2021-12-31\",\r\n    \"2022-01-01\",\r\n    \"2022-01-02\",\r\n    \"2022-01-03\",\r\n    \"2022-01-04\",\r\n    \"2022-01-05\",\r\n    \"2022-01-06\",\r\n    \"2022-01-07\",\r\n    \"2022-01-08\",\r\n    \"2022-01-09\",\r\n    \"2022-01-10\",\r\n    \"2022-01-11\",\r\n    \"2022-01-12\",\r\n    \"2022-01-13\",\r\n    \"2022-01-14\",\r\n    \"2022-01-15\",\r\n    \"2022-01-16\",\r\n    \"2022-01-17\",\r\n    \"2022-01-18\",\r\n    \"2022-01-19\",\r\n    \"2022-01-20\",\r\n    \"2022-01-21\",\r\n    \"2022-01-22\",\r\n    \"2022-01-23\",\r\n    \"2022-01-24\",\r\n    \"2022-01-25\",\r\n    \"2022-01-26\",\r\n    \"2022-01-27\",\r\n    \"2022-01-28\",\r\n    \"2022-01-29\",\r\n    \"2022-01-30\",\r\n    \"2022-01-31\",\r\n    \"2022-02-01\",\r\n    \"2022-02-02\",\r\n    \"2022-02-03\",\r\n    \"2022-02-04\",\r\n    \"2022-02-05\",\r\n    \"2022-02-06\",\r\n    \"2022-02-07\",\r\n    \"2022-02-08\",\r\n    \"2022-02-09\",\r\n    \"2022-02-10\",\r\n    \"2022-02-11\",\r\n    \"2022-02-12\",\r\n    \"2022-02-13\",\r\n    \"2022-02-14\",\r\n    \"2022-02-15\",\r\n    \"2022-02-16\",\r\n    \"2022-02-17\",\r\n    \"2022-02-18\",\r\n    \"2022-02-19\",\r\n    \"2022-02-20\",\r\n    \"2022-02-21\",\r\n    \"2022-02-22\",\r\n    \"2022-02-23\",\r\n    \"2022-02-24\",\r\n    \"2022-02-25\",\r\n    \"2022-02-26\",\r\n    \"2022-02-27\",\r\n    \"2022-02-28\",\r\n    \"2022-03-01\",\r\n    \"2022-03-02\",\r\n    \"2022-03-03\",\r\n    \"2022-03-04\",\r\n    \"2022-03-05\",\r\n    \"2022-03-06\",\r\n    \"2022-03-07\",\r\n    \"2022-03-08\",\r\n    \"2022-03-09\",\r\n    \"2022-03-10\",\r\n    \"2022-03-11\",\r\n    \"2022-03-12\",\r\n    \"2022-03-13\",\r\n    \"2022-03-14\",\r\n    \"2022-03-15\",\r\n    \"2022-03-16\",\r\n    \"2022-03-17\",\r\n    \"2022-03-18\",\r\n    \"2022-03-19\",\r\n    \"2022-03-20\",\r\n    \"2022-03-21\",\r\n    \"2022-03-22\",\r\n    \"2022-03-23\",\r\n    \"2022-03-24\",\r\n    \"2022-03-25\",\r\n    \"2022-03-26\",\r\n    \"2022-03-27\",\r\n    \"2022-03-28\",\r\n    \"2022-03-29\",\r\n    \"2022-03-30\",\r\n    \"2022-03-31\",\r\n    \"2022-04-01\",\r\n    \"2022-04-02\",\r\n    \"2022-04-03\",\r\n    \"2022-04-04\",\r\n    \"2022-04-05\",\r\n    \"2022-04-06\",\r\n    \"2022-04-07\",\r\n    \"2022-04-08\",\r\n    \"2022-04-09\",\r\n    \"2022-04-10\",\r\n    \"2022-04-11\",\r\n    \"2022-04-12\",\r\n    \"2022-04-13\",\r\n    \"2022-04-14\",\r\n    \"2022-04-15\",\r\n    \"2022-04-16\",\r\n    \"2022-04-17\",\r\n    \"2022-04-18\",\r\n    \"2022-04-19\",\r\n    \"2022-04-20\",\r\n    \"2022-04-21\",\r\n    \"2022-04-22\",\r\n    \"2022-04-23\",\r\n    \"2022-04-24\",\r\n    \"2022-04-25\",\r\n    \"2022-04-26\",\r\n    \"2022-04-27\",\r\n    \"2022-04-28\",\r\n    \"2022-04-29\",\r\n    \"2022-04-30\",\r\n    \"2022-05-01\",\r\n    \"2022-05-02\",\r\n    \"2022-05-03\",\r\n    \"2022-05-04\",\r\n    \"2022-05-05\",\r\n    \"2022-05-06\",\r\n    \"2022-05-07\",\r\n    \"2022-05-08\",\r\n    \"2022-05-09\",\r\n    \"2022-05-10\",\r\n    \"2022-05-11\",\r\n    \"2022-05-12\",\r\n    \"2022-05-13\",\r\n    \"2022-05-14\",\r\n    \"2022-05-15\",\r\n    \"2022-05-16\",\r\n    \"2022-05-17\",\r\n    \"2022-05-18\",\r\n    \"2022-05-19\",\r\n    \"2022-05-20\",\r\n    \"2022-05-21\",\r\n    \"2022-05-22\",\r\n    \"2022-05-23\",\r\n    \"2022-05-24\",\r\n    \"2022-05-25\",\r\n    \"2022-05-26\",\r\n    \"2022-05-27\",\r\n    \"2022-05-28\",\r\n    \"2022-05-29\",\r\n    \"2022-05-30\",\r\n    \"2022-05-31\",\r\n    \"2022-06-01\",\r\n    \"2022-06-02\",\r\n    \"2022-06-03\",\r\n    \"2022-06-04\",\r\n    \"2022-06-05\",\r\n    \"2022-06-06\",\r\n    \"2022-06-07\",\r\n    \"2022-06-08\",\r\n    \"2022-06-09\",\r\n    \"2022-06-10\",\r\n    \"2022-06-11\",\r\n    \"2022-06-12\",\r\n    \"2022-06-13\",\r\n    \"2022-06-14\",\r\n    \"2022-06-15\",\r\n    \"2022-06-16\",\r\n    \"2022-06-17\",\r\n    \"2022-06-18\",\r\n    \"2022-06-19\",\r\n    \"2022-06-20\",\r\n    \"2022-06-21\",\r\n    \"2022-06-22\",\r\n    \"2022-06-23\",\r\n    \"2022-06-24\",\r\n    \"2022-06-25\",\r\n    \"2022-06-26\",\r\n    \"2022-06-27\",\r\n    \"2022-06-28\",\r\n    \"2022-06-29\",\r\n    \"2022-06-30\"\r\n]\r\nexport default dateRange;","// Module imports\r\nimport React, { Component } from 'react';\r\nimport { View, Text, ImageBackground, Pressable, ScrollView, ActivityIndicator, Platform } from 'react-native';\r\nimport { Icon } from 'react-native-eva-icons'\r\n\r\n// Component imports\r\nimport UserEntryCards from './subcomponents/UserEntryCards';\r\n\r\n// Local imports\r\nimport dateRange from '../shared/dateRange';\r\nimport styles from '../styles/entrancesStyles';\r\n\r\n// cors-midpoint uri (needed to avoid cors' allow-cross-origin error when fetching in web platforms)\r\nconst corsURI = Platform.OS == 'web' ? 'https://morning-journey-78874.herokuapp.com/' : ''\r\nconst appServerURI = 'https://mood-tracker-server.herokuapp.com/'\r\n\r\n// Defining pertinent constants\r\nconst monthDict = {'Jan': '01', 'Feb': '02', 'Mar': '03', 'Apr': '04', 'May': '05', 'Jun': '06', 'Jul': '07', 'Ago': '08', 'Sep': '09', 'Oct': '10', 'Nov': '11', 'Dec': '12'}\r\nconst englishMonthSigs = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dec']\r\nconst portugueseMonthSigs = ['Jan', 'Fev', 'Mar', 'Abr', 'Mai', 'Jun', 'Jul', 'Ago', 'Set', 'Out', 'Nov', 'Dez']\r\nconst englishWeekDayMap = {'Mon': 'Seg', 'Tue': 'Ter', 'Wed': 'Qua', 'Thu': 'Qui', 'Fri': 'Sex', 'Sat': 'Sab', 'Sun': 'Dom'}\r\n\r\n// Defining pertinent functions\r\nfunction Today() {\r\n    const now = Date().toString().split(' ')\r\n    const today = [ now[3], monthDict[now[1]], now[2] ].join('-')\r\n    return today\r\n}\r\nfunction getNextDate(date, next='next') {\r\n    const nextDate = dateRange[dateRange.indexOf(date) + (next=='previous' ? -1 : 1)]\r\n    return nextDate\r\n}\r\nfunction getTime() {\r\n    //Wed,Jan,26,2022,15:12:37,GMT-0300,(Horário,Padrão,de,Brasília)\r\n    const now = Date().toString().split(' ')\r\n    const time = now[4]\r\n    return time\r\n}\r\nfunction formatDate(selDate) {\r\n    \r\n    var ymd = selDate.split('-')\r\n    const yesterday = getNextDate(Today(), 'previous')\r\n    const englishWeekDay = new Date(ymd[0], ymd[1], ymd[2]).toString().split(' ')[0]\r\n    const weekDay = englishWeekDayMap[englishWeekDay]\r\n    var prefix = ''\r\n\r\n    if (selDate === Today()) prefix = 'Hoje, '\r\n    else if (selDate === yesterday) prefix = 'Ontem, '\r\n    else prefix = weekDay + ', '\r\n    \r\n    for (var i=0; i<12; i++) {\r\n        if (monthDict[ englishMonthSigs[i] ] == ymd[1]) {\r\n            return prefix + oneDigit(ymd[2]) + '° ' + portugueseMonthSigs[i]\r\n        }\r\n    }\r\n}\r\nfunction oneDigit(stringNumber) {\r\n    if (stringNumber[0] == '0') return stringNumber.slice(1, stringNumber.length)\r\n    else return stringNumber\r\n}\r\n\r\nexport default class EntrancesScreen extends Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            \r\n            // user: this.props.route.params.user,\r\n            date: Today(),\r\n            time: getTime(),\r\n            selectedDate: Today(),\r\n            // isUserDataSynced: true,\r\n            // isUserDataSyncing: false,\r\n            isDeleteEntryLoading: false,\r\n            alertMsg: '',\r\n            locationPermission: null,\r\n        };\r\n        this.onNextButtonPress = this.onNextButtonPress.bind(this);\r\n        this.setAlertMsg = this. setAlertMsg.bind(this);\r\n        // this.syncUserData = this.syncUserData.bind(this);\r\n        this.getMainScreenState = this.getMainScreenState.bind(this);\r\n        \r\n    }\r\n    \r\n    componentDidMount() {\r\n        console.log('\"Entries\" screen component did mount...')\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        console.log('\"EntriesScreen\" component will unmount...')\r\n    }\r\n\r\n    getMainScreenState() {\r\n        return this.state\r\n    }\r\n\r\n    onNextButtonPress(next='next') {\r\n        function setSelectedDate() {\r\n            this.setState({\r\n                selectedEntryId: null,\r\n                selectedDate: getNextDate(this.state.selectedDate, next),\r\n            })\r\n        }\r\n        return setSelectedDate.bind(this);\r\n    }\r\n\r\n    setAlertMsg(msg) {\r\n        this.setState({alertMsg: msg})\r\n        setTimeout( () => this.setState({alertMsg: ''}) , 1000 * 5 )\r\n    }\r\n    \r\n    alertMsg() {\r\n        return(\r\n            <View style={[styles.msgBox, this.state.alertMsg ? {} : {height: 0, backgroundColor: 'transparent', borderColor: 'transparent'} ]}>\r\n                <Text style={styles.msg}>{this.state.alertMsg}</Text>\r\n            </View>\r\n        )\r\n    }\r\n\r\n    DateNavigationButton = ({next, today}) => {\r\n        return(\r\n            <Pressable onPress={this.onNextButtonPress(next)} hitSlop={15} >\r\n                <Icon name={ next=='next' ? 'arrow-forward' : 'arrow-back'} width={26} height={26} fill='white' />\r\n            </Pressable>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        console.log('Rendering \"EntriesScreen\" component...')\r\n\r\n        const today = this.state.selectedDate === Today()\r\n        const navigateParams = {\r\n            currentEntry: {type: 'new', date: Today(), entry: null},\r\n            setMainScreenState: this.setState.bind(this),\r\n            getMainScreenState: this.getMainScreenState,\r\n        }\r\n        const isLoading = this.props.appState.isUserDataSyncing | this.state.isDeleteEntryLoading\r\n        const settings = this.props.appState.user.settings\r\n        const backgroundImage = settings.backgroundImage\r\n        const imgURI =  settings.displayBackgroundImage ? (backgroundImage ? backgroundImage.urls.regular : null) : null\r\n        const backgroundColor = settings.backgroundColor\r\n\r\n        return(\r\n            <ImageBackground source={{uri: imgURI}} style={[styles.mainView, {backgroundColor: backgroundColor}]}>\r\n                \r\n                <ScrollView style={styles.scrollView}>\r\n                    <View style={styles.section}>\r\n                        <View style={[styles.cardRow, {justifyContent: 'space-between'}]}>\r\n                            <this.DateNavigationButton icon='arrow-back' next='previous' />\r\n                            <Text style={styles.sectionTitle}> {'Suas entradas  •  ' + formatDate(this.state.selectedDate)} </Text>                                \r\n                            <this.DateNavigationButton icon='arrow-forward' next='next' today={today} />\r\n                        </View>\r\n                        <UserEntryCards\r\n                        parentState={{\r\n                            date: this.state.selectedDate,\r\n                            selectedEntryId: this.state.selectedEntryId,\r\n                            user: this.props.appState.user,\r\n                            // isUserDataSynced: this.props.appState.isUserDataSynced,\r\n                            isUserDataSyncing: this.props.appState.isUserDataSyncing,\r\n                            isDeleteEntryLoading: this.state.isDeleteEntryLoading,\r\n                        }}\r\n                        parentProps={{\r\n                            navigation: this.props.navigation\r\n                        }}\r\n                        syncUserData={this.props.route.params.syncUserData}\r\n                        setMainScreenState ={this.setState.bind(this)}\r\n                        getMainScreenState={this.getMainScreenState}\r\n                        setAlertMsg = {this.setAlertMsg}\r\n                        />\r\n                    </View>\r\n                </ScrollView>\r\n\r\n                <Pressable\r\n                onPress={() => {this.props.navigation.navigate( 'PostEntrance', navigateParams )}}\r\n                style={[styles.postButton, {backgroundColor: isLoading ? 'white' : 'black'}]}\r\n                disabled={isLoading}\r\n                >\r\n                { this.props.appState.isUserDataSyncing ? (\r\n                        <ActivityIndicator color='black' size={'large'} />\r\n                ) : (\r\n                    this.state.isDeleteEntryLoading ? (\r\n                        <ActivityIndicator color='red' size={'large'} />\r\n                    ) : (\r\n                        <Icon name='plus-circle' width={72} height={72} fill='#f4f3f4' style={styles.postButtonLabel}/>\r\n                    )\r\n                )}\r\n                </Pressable>\r\n\r\n                {this.alertMsg()}\r\n  \r\n            </ImageBackground>\r\n            )\r\n    }\r\n  }\r\n","import { StatusBar } from 'expo-status-bar';\r\n// import { Platform } from 'react-native';\r\n\r\nconst styles = {\r\n  login: {\r\n    msgBox: {\r\n      position: 'absolute',\r\n      bottom: '10%',\r\n      width: 300,\r\n      paddingHorizontal: 3,\r\n      paddingVertical: 5,\r\n      alignSelf: 'center',\r\n      // width: 350,\r\n      // height: 36,\r\n      justifyContent: 'center',\r\n      backgroundColor: 'rgb(30,30,30)',\r\n      borderWidth: 1,\r\n      borderColor: 'rgb(40,40,40)',\r\n    },\r\n    msg: {\r\n        textAlign: 'center',\r\n        color: 'white',\r\n        // paddingHorizontal: 15,\r\n    },\r\n  },\r\n  mainView: {\r\n    flex: 1,                 \r\n    marginTop: StatusBar.currentHeight,\r\n  },\r\n  entrances: {\r\n    marginTop: StatusBar.currentHeight,\r\n    borderWidth: 0,\r\n    flex:1,\r\n    justifyContent: 'space-between',\r\n    alignItems: 'flex-start',\r\n  },\r\n  scrollView: {\r\n    // paddingHorizontal: Platform.OS != 'web' ? '5%' : '5%',\r\n    width: '100%',\r\n    alignSelf: 'center',\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    paddingBottom: '0%',\r\n    paddingHorizontal: '5%',\r\n    alignSelf: 'stretch',\r\n    borderColor: 'black',\r\n  },\r\n  section: {\r\n    width: 350,\r\n    paddingVertical: '16%',\r\n    borderBottomWidth: 1,\r\n    borderColor: 'rgba(155,155,155,0.3)',\r\n    alignSelf: 'center',\r\n  },\r\n  contentRow: {\r\n    flexDirection: 'column',\r\n    padding: 10,\r\n    marginTop: 22,\r\n    borderWidth: 1,\r\n    borderColor: 'rgba(155,155,155, 0.4)',\r\n    borderRadius: 30,\r\n    backgroundColor: 'rgba(255,255,255, 0.3)',\r\n\r\n  },\r\n  entryTitle: {\r\n    paddingVertical: 3,\r\n    paddingLeft: 4,\r\n    fontSize: 19,\r\n    color: 'white',\r\n  },\r\n  entryIcon: {\r\n    paddingRight: 0,\r\n  },\r\n  postButtonView: {\r\n    height: 60,\r\n    width: 60,\r\n    borderRadius: 30,\r\n    alignSelf: 'center',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    backgroundColor: 'white',\r\n  },\r\n  postButtonLabel: {\r\n    fontSize: 45,\r\n    fontWeight: 'bold',\r\n  },\r\n  moodButtonView: {\r\n    width: 65,\r\n    height: 65,\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    borderWidth: 1,\r\n  },\r\n  moodButton: {\r\n    width: 65,\r\n    height: 65,\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n  date: {\r\n    position: 'relative',\r\n    left: '60%',\r\n    paddingVertical: 8,\r\n    paddingHorizontal: 10,\r\n    fontSize: 15,\r\n    alignSelf: 'center',\r\n    backgroundColor: 'white',\r\n    borderRadius: 20\r\n  },\r\n  jornalText: {\r\n    paddingVertical: 5,\r\n    paddingHorizontal: 12,\r\n    flex: 1,\r\n    textAlignVertical: 'top',\r\n    width: '100%',\r\n    borderRadius: 20,\r\n    color: 'white',\r\n    fontSize: 16,\r\n  },\r\n  saveButton: {\r\n    height: 50,\r\n    width: '100%',\r\n    borderTopLeftRadius: 30,\r\n    borderTopRightRadius: 30,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    backgroundColor: 'white'\r\n  },\r\n  saveButtonLabel: {\r\n    fontWeight:'bold',\r\n    fontSize: 19\r\n  },\r\n  card: {\r\n    marginTop: '5%',\r\n    paddingVertical: 5,\r\n    paddingHorizontal: 10,\r\n    borderRadius: 20,\r\n    backgroundColor: 'rgba(0,0,0,0.2)',\r\n  },\r\n  cardRow: {\r\n      flexDirection: 'row',\r\n      paddingVertical: 5,\r\n      alignItems: 'center',\r\n  },\r\n  moodBadge: {\r\n      backgroundColor: 'green',\r\n      borderRadius: 30,\r\n      paddingVertical: 6,\r\n      width: 130,\r\n      fontSize: 16,\r\n      textAlign: 'center',\r\n  },\r\n  emotionBadge: {\r\n      backgroundColor: 'rgba(1,1,1,0.5)',\r\n      borderRadius: 30,\r\n      paddingVertical: 6,\r\n      paddingHorizontal: 12.5,\r\n      fontSize: 15,\r\n      textAlign: 'center',\r\n      marginVertical: 5,\r\n      marginHorizontal: 5\r\n  },\r\n  entryCardEmotionBadge: {\r\n    backgroundColor: 'aliceblue',\r\n    borderRadius: 30,\r\n    paddingVertical: 7,\r\n    paddingHorizontal: 12.5,\r\n    marginRight: 6,\r\n    fontSize: 15,\r\n    textAlign: 'center',\r\n  },\r\n  datetimeTitle: {\r\n    fontSize: 16,\r\n    marginRight: 3,\r\n  },\r\n  editButtonsView: {\r\n    flexDirection: 'row',\r\n    height: 55,\r\n    paddingVertical: 5,\r\n    alignItems: 'flex-end',\r\n    justifyContent: 'space-between'\r\n  },\r\n  editButton: {\r\n    height: 34,\r\n    width: 102,\r\n    borderWidth: 1,\r\n    borderColor: 'aliceblue',\r\n    borderRadius: 17,\r\n    alignItems: 'center',\r\n    justifyContent: 'center'\r\n  },\r\n  editButtonLabel: {\r\n      fontSize: 15,\r\n      fontWeight: '400',\r\n      color: 'white',\r\n  },\r\n}\r\n\r\nexport default styles;","import React, { Component, useState } from 'react';\r\nimport { View, Text,  Pressable, TextInput, ActivityIndicator, Platform } from 'react-native';\r\nimport { Icon } from 'react-native-eva-icons'\r\nimport VectorIcon from 'react-native-vector-icons/MaterialCommunityIcons';\r\nimport styles from '../../styles/postEntryStyles'\r\n\r\n// cors-midpoint uri (needed to avoid cors' allow-cross-origin error when fetching in web platforms)\r\nconst corsURI = Platform.OS == 'web' ? 'https://morning-journey-78874.herokuapp.com/' : ''\r\nconst appServerURI = 'https://mood-tracker-server.herokuapp.com/'\r\n\r\nexport function capitalize(multipleWordString) {\r\n    var words = multipleWordString.trim().split(' ');\r\n    var CapitalizedWords = [];\r\n    words.forEach(element => {\r\n    CapitalizedWords.push(element[0].toUpperCase() + element.slice(1, element.length));\r\n    });\r\n    return CapitalizedWords.join(' ');\r\n}\r\n\r\nexport default class EditEmotions extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            showEditMenu: false,\r\n            showExpandMenuButton: true,\r\n            mode: 'hidden',\r\n            newEmotionName: '',\r\n            selectedEmotionType: null,\r\n            selectedEmotionEnergy: null,\r\n            initialEmotionLayout: null,\r\n        }\r\n        this.EditEmotionsMenu = this.EditEmotionsMenu.bind(this);\r\n        this.EditEmotionsSection = this.EditEmotionsSection.bind(this);\r\n        this.onSaveEmotionButtonPress = this.onSaveEmotionButtonPress.bind(this);\r\n    }\r\n\r\n    EditEmotionsSection() {\r\n\r\n        const emotionTypes = ['Positiva', 'Negativa']\r\n        const emotionEnergy = ['Calmo(a)', 'Energizado(a)']\r\n        const emotionLayoutMap = {\r\n            'Positiva ou Negativa': 'type',\r\n            'Calmo(a) ou Energizado(a)': 'energy',\r\n            'Grade': 'grid',\r\n            'Espalhado': 'spread'\r\n        }\r\n\r\n        const inputSectionStyle = {marginTop: 0, marginTop: 0   , alignItems: 'center'}\r\n        const textStyle = {color: 'white', fontSize: 16, alignSelf: 'center', marginBottom: 8}\r\n        const inputStyle = {width: '70%', height: 35, borderRadius: 16.5, color: 'white', backgroundColor: 'rgba(0,0,0,0.7)', fontSize: 15, textAlign: 'center' }\r\n        const tagStyle = {width: '45%', height: 28, borderRadius: 13.5,  marginBottom: 7, color: 'white', alignItems: 'center', justifyContent: 'center'}\r\n        const createEmotionViewStyle = {height: 420, marginTop: 10, paddingTop: 10, justifyContent: 'space-evenly', borderTopWidth: 1, borderTopColor: 'rgba(255,255,255,0.2)'}\r\n\r\n        const [isButtonPressed, setIsButtonPressed] = useState({\r\n            'Salvar': false,\r\n            'Voltar': false,\r\n            'Terminar': false,\r\n            'Salvar-Layout': false,\r\n            'Voltar-Layout': false\r\n        })\r\n        function highlightButtonFor(label) {\r\n            function highlightButton() {\r\n                setIsButtonPressed({ ...isButtonPressed, [label]: !isButtonPressed[label] })\r\n            }\r\n            return highlightButton.bind(this);\r\n        }\r\n\r\n        const isLoading = (\r\n            this.props.isDeleteEmotionLoading |\r\n            this.props.isSaveEmotionLoading |\r\n            this.props.isPostEntryLoading |\r\n            this.props.appState.isUserDataSyncing |\r\n            this.props.isUpdateUserDataLoading\r\n        )\r\n\r\n        const isNewEmotionFormComplete = !this.state.newEmotionName | !this.state.selectedEmotionType | !this.state.selectedEmotionEnergy\r\n\r\n        switch (this.state.mode) {\r\n\r\n            case 'hidden':\r\n                return null\r\n\r\n            case 'create':\r\n                return(\r\n                    <View style={createEmotionViewStyle}>\r\n                        <Text style={{color: 'white', fontSize: 22, alignSelf: 'center'}}>Criar emoção</Text>\r\n                        <View style={inputSectionStyle}>\r\n                            <Text style={textStyle}>Nome</Text>\r\n                            <TextInput\r\n                            placeholder='Nome da emoção...'\r\n                            placeholderTextColor={'rgba(255,255,255,0.4)'}\r\n                            style={inputStyle}\r\n                            onChangeText={text => this.setState({newEmotionName: text})}\r\n                            value={this.state.newEmotionName}\r\n                            />\r\n                        </View>\r\n                        <View style={inputSectionStyle}>\r\n                            <Text style={textStyle}>Tipo</Text>\r\n                            { emotionTypes.map((type) => {\r\n                                const typeSelected = this.state.selectedEmotionType === type\r\n                                return(\r\n                                    <Pressable\r\n                                    key={'emotion-'+type}\r\n                                    onPress={() => this.setState({selectedEmotionType: typeSelected ? null : type })}\r\n                                    style={[tagStyle, {backgroundColor: typeSelected ? 'rgba(0,0,0,0.8)' : 'rgba(0,0,0,0.3)'}]}>\r\n                                        <Text style={[{fontSize: 15, color: 'white'}]}>{type}</Text>\r\n                                    </Pressable>\r\n                                )\r\n                            }) }\r\n                        </View>\r\n                        <View style={inputSectionStyle}>\r\n                            <Text style={textStyle}>Energia</Text>\r\n                            { emotionEnergy.map((type) => {\r\n                                const typeSelected = this.state.selectedEmotionEnergy === type\r\n                                return(\r\n                                    <Pressable\r\n                                    key={'emotion-'+type}\r\n                                    onPress={() => this.setState({selectedEmotionEnergy: typeSelected ? null : type })}\r\n                                    style={[tagStyle, {backgroundColor: typeSelected ? 'rgba(0,0,0,0.8)' : 'rgba(0,0,0,0.3)'}]}>\r\n                                        <Text style={[{fontSize: 15, color: 'white'}]}>{type}</Text>\r\n                                    </Pressable>\r\n                                )\r\n                            }) }\r\n                        </View>\r\n                        <View style={[inputSectionStyle, {flexDirection: 'row', justifyContent: 'space-evenly'}]}>\r\n                            <Pressable\r\n                            onPress={() => {\r\n                                highlightButtonFor('Salvar')()\r\n                                this.onSaveEmotionButtonPress()\r\n                                setIsButtonPressed({'Salvar': false})\r\n                            }}\r\n                            onPressIn={highlightButtonFor('Salvar')}\r\n                            disabled={isLoading | isNewEmotionFormComplete}\r\n                            style={[styles.editButton, {\r\n                                alignSelf: 'center',\r\n                                backgroundColor: isButtonPressed['Salvar'] ? '#fff5' : '#fff0',\r\n                                borderColor: isLoading | isNewEmotionFormComplete ? '#fff5' : '#ffff',\r\n                                }]}>\r\n                                <Text style={[styles.editButtonLabel, {color: isLoading | isNewEmotionFormComplete ? '#fff5' : '#ffff'}]}>Salvar</Text>\r\n                            </Pressable>\r\n                            <Pressable\r\n                            onPress={() => {\r\n                                highlightButtonFor('Voltar')()\r\n                                this.setState({showEditMenu: true, showExpandMenuButton: true, mode: 'hidden'})\r\n                                setIsButtonPressed({'Voltar': false})\r\n                            }}\r\n                            onPressIn={highlightButtonFor('Voltar')}\r\n                            disabled={isLoading}\r\n                            style={[styles.editButton, {\r\n                                alignSelf: 'center',\r\n                                borderColor: isLoading ? '#fff5' : '#ffff',\r\n                                backgroundColor: isButtonPressed['Voltar'] ? '#fff5' : '#fff0'\r\n                                }]}>\r\n                                <Text style={[styles.editButtonLabel, {color: isLoading ? '#fff5' : '#ffff'}]}>Voltar</Text>\r\n                            </Pressable>\r\n                        </View>\r\n                    </View>\r\n                )\r\n\r\n            case 'delete':\r\n                return(\r\n                    <View style={[createEmotionViewStyle, {height: 180}]}>\r\n                        <Text style={{color: 'white', fontSize: 22, alignSelf: 'center'}}>Excluir emoções</Text>\r\n                        <Text style={{color: 'white', fontSize: 16, textAlign: 'center'}}>Pressione e segure para excluir uma emoção.</Text>\r\n                        <View style={[styles.cardRow, {justifyContent: 'space-evenly'}]}>\r\n                            <Pressable\r\n                            onPress={() => {\r\n                                highlightButtonFor('Terminar')();\r\n                                this.props.setParentState({deleteEmotionMode: false});\r\n                                this.setState({showEditMenu: true, showExpandMenuButton: true, mode: 'hidden'});\r\n                                setIsButtonPressed({'Terminar': false})\r\n                            }}\r\n                            onPressIn={highlightButtonFor('Terminar')}\r\n                            disabled={isLoading}\r\n                            style={[styles.editButton, {\r\n                                alignSelf: 'center',\r\n                                borderColor: isLoading ? '#fff5' : '#ffff',\r\n                                backgroundColor: isButtonPressed['Terminar'] ? '#fff5' : '#fff0'\r\n                            }]}\r\n                            >\r\n                                <Text style={[styles.editButtonLabel, {color: isLoading ? '#fff5' : '#ffff'}]}>Terminar</Text>\r\n                            </Pressable>\r\n                        </View>\r\n                    </View>\r\n                )\r\n\r\n            case 'layout':\r\n                return(\r\n                    <View style={[createEmotionViewStyle, {height: 320}]}>\r\n                        <View style={inputSectionStyle}>\r\n                            <Text style={{color: 'white', fontSize: 22, alignSelf: 'center', paddingBottom: 25}}>Escolha o layout</Text>\r\n                            { ['Positiva ou Negativa', 'Calmo(a) ou Energizado(a)', 'Grade', 'Espalhado'].map((layout) => {\r\n                                const isLayoutSelected = this.props.selectedEmotionLayout === emotionLayoutMap[layout]\r\n                                return(\r\n                                    <Pressable\r\n                                    key={'emotion-'+layout}\r\n                                    onPress={() => this.props.setParentState({selectedEmotionLayout: emotionLayoutMap[layout] })}\r\n                                    style={[tagStyle, {width: 230, height: 30, borderRadius: 15, marginBottom: 10, backgroundColor: isLayoutSelected ? 'rgba(0,0,0,0.8)' : 'rgba(0,0,0,0.3)'}]}>\r\n                                        <Text style={[{fontSize: 15, color: 'white'}]}>{layout}</Text>\r\n                                    </Pressable>\r\n                                )\r\n                            }) }\r\n                        </View>\r\n                        <View style={[inputSectionStyle, {flexDirection: 'row', justifyContent: 'space-evenly'}]}>\r\n                            <Pressable\r\n                            onPress={() => {\r\n                                highlightButtonFor('Salvar-Layout')()\r\n                                this.onSaveEmotionLayoutButtonPress()\r\n                                setIsButtonPressed({'Salvar-Layout': false})\r\n                            }}\r\n                            onPressIn={highlightButtonFor('Salvar-Layout')}\r\n                            disabled={ isLoading }\r\n                            style={[styles.editButton, {\r\n                                alignSelf: 'center',\r\n                                backgroundColor: isButtonPressed['Salvar-Layout'] ? '#fff5' : '#fff0',\r\n                                borderColor: isLoading ? '#fff5' : '#ffff',\r\n                                }]}>\r\n                                <Text style={[styles.editButtonLabel, {color: isLoading ? '#fff5' : '#ffff'}]}>Salvar</Text>\r\n                            </Pressable>\r\n                            <Pressable\r\n                            onPress={() => {\r\n                                highlightButtonFor('Voltar-Layout')()\r\n                                this.props.setParentState({selectedEmotionLayout: this.state.initialEmotionLayout})\r\n                                this.setState({showEditMenu: true, showExpandMenuButton: true, mode: 'hidden', initialEmotionLayout: null})\r\n                                setIsButtonPressed({'Voltar-Layout': false})\r\n                            }}\r\n                            onPressIn={highlightButtonFor('Voltar-Layout')}\r\n                            disabled={isLoading}\r\n                            style={[styles.editButton, {\r\n                                alignSelf: 'center',\r\n                                borderColor: isLoading ? '#fff5' : '#ffff',\r\n                                backgroundColor: isButtonPressed['Voltar-Layout'] ? '#fff5' : '#fff0'\r\n                                }]}>\r\n                                <Text style={[styles.editButtonLabel, {color: isLoading ? '#fff5' : '#ffff'}]}>Voltar</Text>\r\n                            </Pressable>\r\n                        </View>\r\n                    </View>\r\n                )\r\n\r\n            default:\r\n                return null\r\n        }\r\n    }\r\n\r\n    EditEmotionsMenu() {\r\n\r\n        const buttonLabels = ['Criar', 'Excluir', 'Layout']\r\n        const onButtonPress = { \r\n            'Criar': () => this.setState({showEditMenu: false, showExpandMenuButton: false, mode: 'create'}),\r\n            'Excluir': () => {\r\n                this.props.setParentState({deleteEmotionMode: !this.props.deleteEmotionMode})\r\n                this.setState({showEditMenu: false , showExpandMenuButton: false, mode: 'delete'})\r\n            },\r\n            'Layout': () => this.setState({showEditMenu: false, showExpandMenuButton: false, mode: 'layout', initialEmotionLayout: this.props.selectedEmotionLayout})\r\n        }\r\n        const [isButtonPressed, setIsButtonPressed] = useState({\r\n            'Criar': false,\r\n            'Excluir': false,\r\n            'Layout': false,\r\n        })\r\n        function highlightButtonFor(label) {\r\n            function highlightButton() {\r\n                setIsButtonPressed({ ...isButtonPressed, [label]: !isButtonPressed[label] })\r\n            }\r\n            return highlightButton.bind(this);\r\n        }\r\n\r\n        const showEditMenu =  this.state.showEditMenu\r\n        const showExpandMenuButton = this.state.showExpandMenuButton\r\n        const hidden = this.state.mode == 'hidden'\r\n        const anyOpen = showEditMenu || !hidden\r\n\r\n        const isLoading = (\r\n            this.props.isPostEntryLoading |\r\n            this.props.appState.isUserDataSyncing |\r\n            this.props.isUpdateUserDataLoading |\r\n            this.props.isDeleteEmotionLoading |\r\n            this.props.isSaveEmotionLoading\r\n        )\r\n\r\n        return(\r\n            <>\r\n                { showExpandMenuButton ? (\r\n                    <View style={[styles.cardRow, {height: 50, marginTop: 10, paddingTop: 10, justifyContent: showEditMenu ? 'space-between' : 'center', borderTopWidth: 1, borderTopColor: 'rgba(255,255,255,0.2)'}]}>\r\n                        { showEditMenu ? ( \r\n                            buttonLabels.map((label) => (\r\n                                <Pressable\r\n                                key={`emotion-${label}`}\r\n                                style={[styles.editButton,  {\r\n                                    backgroundColor: isButtonPressed[label] ? '#fff5' : '#0000',\r\n                                    borderColor: isLoading ? '#fff5' : '#ffff',\r\n                                    width: 75\r\n                                }]}\r\n                                disabled={ isLoading }\r\n                                onPress={() => {\r\n                                    highlightButtonFor(label)(); onButtonPress[label]()\r\n                                    setIsButtonPressed({ [label]: false })\r\n                                } }\r\n                                onPressIn={highlightButtonFor(label)}\r\n                                >\r\n                                    <Text style={[styles.editButtonLabel, {color: isLoading ? '#fff5' : '#ffff'}]}>{label}</Text>                    \r\n                                </Pressable>\r\n                            ))\r\n                        ) : null }\r\n                        <Pressable\r\n                        onPress={() => this.setState({ showEditMenu:  !showEditMenu })}\r\n                        // disabled={isLoading}\r\n                        style={{flexDirection: 'row', alignItems: 'center', justifyContent: 'center', paddingVertical: 5, width: 75}}>\r\n                            <Icon name={ !showEditMenu ? 'more-horizontal-outline' : 'arrow-back-outline' } fill='white' width={20} height={20} />\r\n                            <Text style={{color: 'white', fontSize: 15, marginLeft: 0}}> {anyOpen ? 'menos' : 'mais'}</Text>\r\n                        </Pressable>\r\n                    </View> \r\n                ) :  null  }\r\n            </>\r\n\r\n        )\r\n    }\r\n\r\n    async onSaveEmotionButtonPress() {\r\n\r\n        const newEmotionAlreadyExists = Object.keys(this.props.isSelectedEmotions).includes(capitalize(this.state.newEmotionName))\r\n        if (newEmotionAlreadyExists) {\r\n            this.props.setAlertMsg('Essa emoção já foi criada, escolha outro nome para continuar.')\r\n            return\r\n        }\r\n\r\n        try {\r\n            this.props.setParentState({ isSaveEmotionLoading: true });\r\n            var user = this.props.appState.user;\r\n            const newEmotion = {\r\n                name: capitalize(this.state.newEmotionName),\r\n                type: this.state.selectedEmotionType,\r\n                energy: this.state.selectedEmotionEnergy,\r\n            }\r\n\r\n            console.log('POST EMOTION STATUS: Started...')\r\n            var postEmotionResult = {ok: false, status: '999', statusText: 'Post not fetched yet.'}\r\n            const postUserEntryOpts = { \r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify( newEmotion ),\r\n            }\r\n            // var postUserEntryResult = await fetch('http://localhost:3000/Users/' + info.username + '/emotions', postUserEntryOpts);\r\n            postEmotionResult = await fetch( corsURI + appServerURI + 'Users/' + user.username + '/emotions', postUserEntryOpts);\r\n            const postEmotionStatus = 'Status: ' + postEmotionResult.status + ', ' + postEmotionResult.statusText\r\n\r\n            if (postEmotionResult.ok) {\r\n                console.log('POST EMOTION STATUS: Successful.')\r\n                console.log(postEmotionStatus)\r\n                this.setState({\r\n                    showEditMenu: true,\r\n                    showExpandMenuButton: true,\r\n                    mode: 'hidden',\r\n                    newEmotionName: '',\r\n                    selectedEmotionType: null,\r\n                    selectedEmotionEnergy: null,        \r\n                })\r\n                    \r\n            } else {\r\n                console.log('POST EMOTION STATUS: Failed. Throwing error...')\r\n                throw new Error(postEmotionStatus)\r\n            }\r\n\r\n        } catch (error) {\r\n            this.props.setAlertMsg('Erro no servidor. Tente novamente...')\r\n            console.log('Erro capturado:')\r\n            console.log(error);\r\n\r\n        } finally {\r\n            console.log('POST EMOTION STATUS: Finished.')\r\n            this.props.setParentState({ isSaveEmotionLoading: false });\r\n            if (postEmotionResult.ok) {\r\n                await this.props.route.params.syncUserData();\r\n                this.props.updateUserData();\r\n            }\r\n        } \r\n    }\r\n    \r\n    async onSaveEmotionLayoutButtonPress() {\r\n\r\n        try {\r\n            this.props.setParentState({ isSaveEmotionLayoutLoading: true });\r\n            var user = this.props.appState.user;\r\n            \r\n            console.log('POST EMOTION LAYOUT STATUS: Started...')\r\n            var postEmotionLayoutResult = {ok: false, status: '999', statusText: 'Post not fetched yet.'}\r\n            const postEmotionLayoutOpts = { \r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify( {layout: this.props.selectedEmotionLayout} ),\r\n            }\r\n            postEmotionLayoutResult = await fetch( corsURI + appServerURI + 'Users/' + user.username + '/layout', postEmotionLayoutOpts);\r\n            // var postUserEntryResult = await fetch('http://localhost:3000/Users/' + info.username + '/emotions', postEmotionLayoutOpts);\r\n            const postEmotionLayoutStatus = 'Status: ' + postEmotionLayoutResult.status + ', ' + postEmotionLayoutResult.statusText\r\n\r\n            if (postEmotionLayoutResult.ok) {\r\n                console.log('POST EMOTION LAYOUT STATUS: Successful.')\r\n                console.log(postEmotionLayoutStatus)\r\n                this.setState({\r\n                    showEditMenu: true,\r\n                    showExpandMenuButton: true,\r\n                    mode: 'hidden',\r\n                    initialEmotionLayout: null,\r\n                })\r\n                    \r\n            } else {\r\n                console.log('POST EMOTION LAYOUT STATUS: Failed. Throwing error...')\r\n                throw new Error(postEmotionLayoutStatus)\r\n            }\r\n\r\n        } catch (error) {\r\n            this.props.setAlertMsg('Erro no servidor. Tente novamente...')\r\n            console.log('Erro capturado:')\r\n            console.log(error);\r\n\r\n        } finally {\r\n            console.log('POST EMOTION LAYOUT STATUS: Finished.')\r\n            this.props.setParentState({ isSaveEmotionLayoutLoading: false });\r\n            if (postEmotionLayoutResult.ok) {\r\n                await this.props.route.params.syncUserData();\r\n                this.props.updateUserData();\r\n            }\r\n        } \r\n    }\r\n\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                <this.EditEmotionsSection />\r\n                <this.EditEmotionsMenu />\r\n            </>\r\n        )\r\n    }\r\n\r\n}","const GoogleMapsAPI = {\r\n    GoogleMapsJavascriptAPIkey: \"AIzaSyBVWbOwPAMRyz2bS6rYHrDftVeihQ8WMCo\",\r\n    GoogleMapsGeocodingAPIKey: \"AIzaSyB6O-DpvulBC0rom1mGy-mBcstIbPlDPHA\",\r\n}\r\n\r\nexport default GoogleMapsAPI","const OpenWeatherMapAPI = {\r\n    KEY: \"de9e6896f84109d7920528172207411a\",\r\n}\r\nexport default OpenWeatherMapAPI\r\n","import React, { Component } from 'react';\r\nimport { View, Text, ImageBackground, Pressable, ScrollView, Platform, TextInput, ActivityIndicator } from 'react-native';\r\n\r\nimport { Icon } from 'react-native-eva-icons'\r\nimport VectorIcon from 'react-native-vector-icons/MaterialCommunityIcons';\r\nimport EditEmotions from './subcomponents/EditEmotions'\r\nimport styles from '../styles/postEntryStyles'\r\n\r\n// Geocoding and weather dependencies and APIs\r\nimport * as Location from 'expo-location';\r\nimport GoogleMapsAPI from './subcomponents/GoogleMapsAPI'\r\nLocation.setGoogleApiKey(GoogleMapsAPI.GoogleMapsGeocodingAPIKey)\r\nimport OpenWeatherMapAPI from './subcomponents/OpenWeatherMapAPI';\r\n\r\n// cors-midpoint uri (needed to avoid cors' allow-cross-origin error when fetching in web platforms)\r\nconst corsURI = Platform.OS == 'web' ? 'https://morning-journey-78874.herokuapp.com/' : ''\r\nconst appServerURI = 'https://mood-tracker-server.herokuapp.com/'\r\n\r\n// Date() => wed jan 91 2022 07:46:57 ...\r\nconst now = new Date().toString().split(' ')\r\nconst datetime = now[2] + ' ' + now[1] + ' ' + now[3] + ' - ' + now[4].slice(0, 5)\r\n\r\n// Mood configs\r\nconst moods = ['Horrível', 'Mal', 'Regular', 'Bem', 'Ótimo']\r\nconst moodColorsHEX = ['#ff3333', '#0099cc', '#add8e6', '#ffff33', '#00cc00']\r\nconst moodColorsRGBA = ['rgba(255, 51, 51, 1)', 'rgba(0, 153, 204, 1)', 'rgba(173, 216, 230, 1)', 'rgba(255, 255, 51, 1)', 'rgba(0, 204, 0, 1)']\r\nconst moodColorsTransp = (alpha) => [`rgba(255, 51, 51, ${alpha})`, `rgba(0, 153, 204, ${alpha})`, `rgba(173, 216, 230, ${alpha})`, `rgba(255, 255, 51, ${alpha})`, `rgba(0, 204, 0, ${alpha})`]\r\nconst moodIcons = ['emoticon-dead', 'emoticon-sad', 'emoticon-neutral', 'emoticon-happy', 'emoticon-excited']\r\n\r\n// Emotion configs\r\nconst emotionGroupsNames = [ 'Bem & Calmo(a)', 'Bem & Energizado(a)', 'Mal & Calmo(a)', 'Mal & Energizado(a)' ]\r\nconst emotionTypes = ['Positiva', 'Negativa']\r\nconst emotionEnergy = ['Calmo(a)', 'Energizado(a)']\r\n\r\nfunction buildIsSelectedEmotions(emotions) {\r\n    var isSelectedEmotions = {}\r\n    for ( let emotion of emotions) {\r\n        isSelectedEmotions[emotion.name] = false\r\n    }\r\n    return isSelectedEmotions\r\n}\r\n\r\n// Date config\r\nconst monthSigs = ['Jan', 'Feb', 'Mar', 'Apr', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dec']\r\nconst months = ['01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12']\r\n\r\nconst monthNameMap = {\r\n    '01': 'Janeiro',\r\n    '02': 'Fevereiro',\r\n    '03': 'Março',\r\n    '04': 'Abril',\r\n    '05': 'Maio',\r\n    '06': 'Junho',\r\n    '07': 'Julho',\r\n    '08': 'Agosto',\r\n    '09': 'Setembro',\r\n    '10': 'Outubro',\r\n    '11': 'Novembro',\r\n    '12': 'Dezembro',\r\n}\r\n\r\n// Functions\r\n\r\nfunction convertMonthSig(monthSig) {\r\n    const thisMonth = months[monthSigs.indexOf(monthSig)]\r\n    return thisMonth\r\n}\r\n\r\nfunction Today() {\r\n    const now = Date().toString().split(' ')\r\n    const today = [ now[3], convertMonthSig(now[1]), now[2] ].join('-')\r\n    return today\r\n}\r\n\r\nfunction getTime() {\r\n    //Wed,Jan,26,2022,15:12:37,GMT-0300,(Horário,Padrão,de,Brasília)\r\n    const now = Date().toString().split(' ')\r\n    const time = now[4]\r\n    return time\r\n}\r\n\r\nfunction oneDigit(stringNumber) {\r\n    if (stringNumber[0] == '0') return stringNumber.slice(1, stringNumber.length)\r\n    else return stringNumber\r\n}\r\n\r\nfunction formatPostEntryDatetimeTitle(date, time) {\r\n    const ymd = date.split('-')\r\n    const m = monthNameMap[ ymd[1] ]\r\n    return oneDigit( ymd[2] ) + ' ' + m + ' ' + ymd[0] + (time ? ' - ' : '') + time.slice(0,5)\r\n}\r\n\r\nfunction formattedAddress(addressObj) {\r\n    return addressObj.street + ', ' + addressObj.streetNumber + ' - ' + addressObj.district + ', ' + addressObj.subregion + '. ' + addressObj.region + ', ' + addressObj.isoCountryCode + '.'\r\n}\r\n\r\nfunction mapEmotions(emotions, layout='grid') {\r\n    var userEmotionGroups = layout=='grid' ? [[],[],[],[]] : ( layout=='spread' ? [[]] : [[],[]] )\r\n    var emotionLabels = layout=='grid' ? emotionGroupsNames : ( layout=='type' ? emotionTypes : (layout=='spread' ? [''] : emotionEnergy ) )\r\n    for (let emotion of emotions) {\r\n        if (layout=='grid') {\r\n            if (emotion.type=='Positiva') {\r\n                if (emotion.energy=='Calmo(a)')\r\n                    userEmotionGroups[0] = [ ...userEmotionGroups[0], emotion]\r\n                else if (emotion.energy=='Energizado(a)')\r\n                    userEmotionGroups[1] = [ ...userEmotionGroups[1], emotion]\r\n            } else if (emotion.type=='Negativa') {\r\n                if (emotion.energy=='Calmo(a)')\r\n                    userEmotionGroups[2] = [ ...userEmotionGroups[2], emotion]\r\n                else if (emotion.energy=='Energizado(a)')\r\n                    userEmotionGroups[3] = [ ...userEmotionGroups[3], emotion]\r\n            }\r\n        } else if (layout=='type') {\r\n            if (emotion.type=='Positiva')\r\n                userEmotionGroups[0] = [ ...userEmotionGroups[0], emotion]\r\n            else if (emotion.type=='Negativa')\r\n                userEmotionGroups[1] = [ ...userEmotionGroups[1], emotion]\r\n        } else if (layout=='energy') {\r\n            if (emotion.energy=='Calmo(a)')\r\n                userEmotionGroups[0] = [ ...userEmotionGroups[0], emotion]\r\n            else if (emotion.energy=='Energizado(a)')\r\n                userEmotionGroups[1] = [ ...userEmotionGroups[1], emotion]\r\n        } else if (layout=='spread') {\r\n            userEmotionGroups[0] = [ ...userEmotionGroups[0], emotion]\r\n        }\r\n    }\r\n    return [userEmotionGroups, emotionLabels]\r\n}\r\n\r\nfunction sortObjListByKey(objList, objKey) {\r\n    const keys = objList.map(obj => obj[objKey])\r\n    const sortedKeys = [...keys].sort()\r\n    var newObjList = []\r\n    sortedKeys.forEach(key => {\r\n        newObjList.push( objList[keys.indexOf(key)] )\r\n    })\r\n    return newObjList\r\n}\r\n\r\nexport default class PostEntranceScreen extends Component {\r\n  \r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            user: this.props.appState.user,\r\n\r\n            date: '',\r\n            startTime: '',\r\n            endTime: '',\r\n            createdAt: '',\r\n            lastEdited: [],\r\n\r\n            star: false,\r\n            selectedMood: '',\r\n            emotions: [],\r\n            jornalEntry: '',    \r\n            address: '',\r\n            location: null,\r\n            weather: null,\r\n\r\n            selectedEntry: 'Avaliação',\r\n            isMoodUnmarked: true,\r\n            isSelectedEmotions: buildIsSelectedEmotions(this.props.appState.user.emotions),\r\n            selectedEmotionLayout: this.props.appState.user.layout,\r\n            isFetchingLocationOrWeather: false,\r\n            isPostEntryLoading: false,\r\n            isDeleteEmotionLoading: false,\r\n            isSaveEmotionLoading: false,\r\n            deleteEmotionMode: false,\r\n            isUpdateUserDataLoading: false,\r\n\r\n            userCoordinates: null,\r\n            loginMsg: '',\r\n        };\r\n\r\n        this.initializeEntry = this.initializeEntry.bind(this);\r\n        this.onSaveButtonPress = this.onSaveButtonPress.bind(this);\r\n        this.saveButton = this.saveButton.bind(this);\r\n        this.setLoginMsg = this.setLoginMsg.bind(this);\r\n        this.EmotionButtons = this.EmotionButtons.bind(this);\r\n        this.MoodButtons = this.MoodButtons.bind(this);\r\n        this.postEntryHeader = this.postEntryHeader.bind(this);\r\n        this.onEmotionButtonPress = this.onEmotionButtonPress.bind(this);\r\n        this.onMoodButtonPress = this.onMoodButtonPress.bind(this);\r\n        this.inputCardBody = this.inputCardBody.bind(this);\r\n        this.setSelectedEntry = this.setSelectedEntry.bind(this);\r\n        this.InputCard = this.InputCard.bind(this);\r\n        this.JornalInput = this.JornalInput.bind(this);\r\n        this.postNewEntryAsync = this.postNewEntryAsync.bind(this);\r\n        this.updateUserData = this.updateUserData.bind(this);\r\n        this.deleteEmotion = this.deleteEmotion.bind(this);\r\n        this.onEmotionButtonLongPress = this.onEmotionButtonLongPress.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log('\"PostEntry\" component did mount.')\r\n        this.initializeEntry()\r\n    }\r\n\r\n    postEntryHeader() {\r\n        return(\r\n            <View style={[styles.cardRow, {justifyContent: 'space-between'}]}>\r\n                <Pressable onPress={() => {this.props.navigation.goBack()}} hitSlop={10} style={styles.postButton}>\r\n                    <Icon name='arrow-back' fill='white' height={29} width={29}/>\r\n                </Pressable>\r\n                <View style={[styles.entryCardEmotionBadge, {flexDirection: 'row', alignItems: 'center'}]}>\r\n                    <Text style={styles.datetimeTitle}> { formatPostEntryDatetimeTitle(this.props.route.params.currentEntry.date, this.state.startTime) } </Text>\r\n                    <Icon name='edit' fill='rgba(75,75,75,1)' height={20} width={20}/>\r\n                </View>\r\n                <Pressable onPress={() => {this.setState({star: !this.state.star})}}  hitSlop={10} style={styles.postButton}>\r\n                    <Icon name={this.state.star ? 'star' : 'star-outline'} fill='rgba(245,245,245,0.7)' height={30} width={30}/>\r\n                </Pressable>\r\n            </View>\r\n        )\r\n    }\r\n\r\n    MoodButtons() {\r\n        return moods.map((item, index) => {\r\n            const selected = this.state.selectedMood == item\r\n            const isMoodUnmarked = this.state.isMoodUnmarked\r\n            const selColor = moodColorsRGBA[index]\r\n            return(\r\n                <View key={'mood '+index} style={styles.moodButton}>\r\n                    <VectorIcon\r\n                    name={moodIcons[index]}\r\n                    size={isMoodUnmarked ? 52 : (selected ? 57 : 50) }\r\n                    color={ isMoodUnmarked ? selColor : (selected ? selColor : moodColorsTransp(0.5)[index]) }\r\n                    onPress={this.onMoodButtonPress(item)}\r\n                    />\r\n                </View>\r\n            )\r\n        })\r\n    }\r\n\r\n    onMoodButtonPress(item) {\r\n        function selectMood() {\r\n            if (this.state.selectedMood==item) {\r\n                this.setState({selectedMood: null, isMoodUnmarked: true})\r\n            } else {\r\n                this.setState({selectedMood: item, isMoodUnmarked: false})\r\n            }\r\n        }\r\n        selectMood = selectMood.bind(this);\r\n        return selectMood\r\n    }\r\n\r\n    EmotionButtons(emotions) {\r\n        return(\r\n            sortObjListByKey(emotions, 'name').map( emotion => (\r\n                <Pressable\r\n                key={'emotion-' + emotion.name}\r\n                title={emotion.name}\r\n                onPress={this.onEmotionButtonPress(emotion.name)}\r\n                onLongPress={this.onEmotionButtonLongPress(emotion.name)}\r\n                suppressHighlighting={true}\r\n                selectable={false}\r\n                >\r\n                    <Text onLongPress={null} style={[styles.emotionBadge, {backgroundColor: this.state.isSelectedEmotions[emotion.name] ? 'lightblue' : 'aliceblue' }]}>{emotion.name}</Text>\r\n                </Pressable>\r\n            ))\r\n        )\r\n    }\r\n\r\n    onEmotionButtonPress(emotion) {\r\n        function selectEmotion () {\r\n            this.setState({\r\n                isSelectedEmotions: {\r\n                    ...this.state.isSelectedEmotions,\r\n                    [emotion]: !this.state.isSelectedEmotions[emotion]\r\n                }\r\n            })    \r\n        }\r\n        selectEmotion = selectEmotion.bind(this);\r\n        return selectEmotion\r\n    }\r\n\r\n    onEmotionButtonLongPress(emotion) { \r\n        function selectEmotion () {\r\n            if (this.state.deleteEmotionMode) {\r\n                this.deleteEmotion(emotion)\r\n            }\r\n        }\r\n        selectEmotion = selectEmotion.bind(this);\r\n        return selectEmotion\r\n    }\r\n\r\n    JornalInput() {\r\n        return(\r\n            <TextInput\r\n            multiline\r\n            scrollEnabled\r\n            placeholder='Escreva aqui...'\r\n            placeholderTextColor='rgba(255,255,255,0.6)'\r\n            onChangeText={text => this.setState({jornalEntry: text})}\r\n            value={this.state.jornalEntry}\r\n            style={styles.jornalText}\r\n            >\r\n            </TextInput>\r\n        )\r\n    }\r\n\r\n    inputCardBody(sectionName, cardBodyStyle, cardBodyContent) {\r\n        if (this.state.selectedEntry === sectionName) {\r\n            if (sectionName == 'Emoções') {\r\n                const [userEmotionGroups, emotionLabels] = mapEmotions(this.props.appState.user.emotions, this.state.selectedEmotionLayout)\r\n                return(\r\n                    <>\r\n                        { userEmotionGroups.map((emotions, index) => (\r\n                            <View key={'emotion-group-' + index} style={{width: '100%', alignItems: 'center', marginVertical: 10}}>\r\n                                { emotionLabels[index] ? <Text style={{fontSize: 15, color: 'white', marginVertical: 8}}>{emotionLabels[index]}</Text> : null }\r\n                                <View key={index} style={[styles.cardRow, cardBodyStyle]}>\r\n                                    {cardBodyContent(emotions)}\r\n                                </View>\r\n                            </View>\r\n                        )) }\r\n                        <EditEmotions\r\n                        {...this.props}\r\n                        {...this.state}\r\n                        setParentState={this.setState.bind(this)}\r\n                        updateUserData={this.updateUserData}\r\n                        setAlertMsg={this.setLoginMsg}\r\n                        />\r\n                    </>\r\n\r\n                )\r\n            } else {\r\n                return(\r\n                    <View style={[styles.cardRow, cardBodyStyle]}>\r\n                        {cardBodyContent}\r\n                    </View>\r\n                )    \r\n            }\r\n        } else {\r\n            return(\r\n                <></>\r\n            )\r\n        }\r\n    }\r\n\r\n    InputCard(sectionName, icon, cardBodyStyle, cardBodyContent) {\r\n        return(\r\n            <View style={[styles.card]} >\r\n                <Pressable style={styles.cardRow} onPress={this.setSelectedEntry(sectionName)} >\r\n                    <Icon name={icon} fill='rgba(255,255,255,0.75)' height={28} width={28} style={styles.entryIcon} />\r\n                    <Text style={styles.entryTitle}> {sectionName} </Text>\r\n                </Pressable>    \r\n                {this.inputCardBody(sectionName, cardBodyStyle, cardBodyContent)}  \r\n            </View>   \r\n        )\r\n    }\r\n\r\n    setSelectedEntry (entry) {\r\n        function setSelected() {\r\n            this.setState( {selectedEntry:  this.state.selectedEntry === entry ? null : entry  } )\r\n        }\r\n        setSelected = setSelected.bind(this);\r\n        return setSelected\r\n    }\r\n\r\n    loginMsg() {\r\n        return(\r\n          <View style={[styles.login.msgBox, this.state.loginMsg ? {} : {height: 0, backgroundColor: 'transparent', borderColor: 'transparent'} ]}>\r\n            <Text style={styles.login.msg}>{this.state.loginMsg}</Text>\r\n          </View>\r\n        )\r\n    }\r\n\r\n    setLoginMsg(msg) {\r\n        this.setState({loginMsg: msg})\r\n        setTimeout( () => this.setState({loginMsg: ''}) , 1000 * 5 )\r\n    }    \r\n\r\n    async initializeEntry() {\r\n        const currentEntry = this.props.route.params.currentEntry\r\n        const user = this.props.appState.user\r\n        switch (currentEntry.type) {\r\n            case 'new':\r\n                console.log('POST ENTRY STATUS: INITIATING BLANK NEW ENTRY! FETCHING LOCATION AND WEATHER DATA...')\r\n                this.setState({\r\n                    date: currentEntry.date,\r\n                    startTime: getTime(),\r\n                    endTime: '',\r\n                    isFetchingLocationOrWeather: true\r\n                })\r\n                await this.checkIfLocationEnabled();\r\n                await this.getCurrentLocation();                    \r\n                await this.fetchWeather()\r\n                this.setState({isFetchingLocationOrWeather: false})\r\n            break;\r\n        \r\n            case 'custom-date':\r\n                console.log('POST ENTRY STATUS: INITIALIZING CUSTOM DATE ENTRY! SETTING DATE TO: ' + currentEntry.date)\r\n                this.setState({\r\n                    date: currentEntry.date,\r\n                    startTime: '',\r\n                    endTime: '',\r\n                })\r\n                break\r\n\r\n            case 'edit':\r\n                const entry = currentEntry.entry\r\n                const currentEmotions = entry.emotions.map(emotion => emotion.name)\r\n                var isSelectedEmotionsNew = {}\r\n                for ( let emotion of user.emotions ) {\r\n                    isSelectedEmotionsNew[emotion.name] = currentEmotions.includes(emotion.name)\r\n                }\r\n\r\n                this.setState({\r\n                    date: entry.date,\r\n                    startTime: entry.startTime,\r\n                    endTime: entry.endTime,\r\n                    createdAt: entry.createdAt,\r\n                    lastEdited: entry.lastEdited,\r\n                    star: entry.star,\r\n                    selectedMood: entry.mood,\r\n                    isSelectedEmotions: isSelectedEmotionsNew,\r\n                    jornalEntry: entry.jornal,\r\n                    address: entry.address,\r\n                    location: entry.location,\r\n                    weather: entry.weather,\r\n                    isMoodUnmarked: false,\r\n                })\r\n                break\r\n    \r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    updateUserData() {\r\n        console.log('UPDATING USER DATA IN \"PostEntryComponent\"...')\r\n        this.setState({isUpdateUserDataLoading: true})\r\n        const user = this.props.appState.user\r\n\r\n        const oldEmotions = Object.keys(this.state.isSelectedEmotions)\r\n        const currentEmotions = user.emotions.map(emotion => emotion.name)\r\n        const newEmotions = currentEmotions.filter(emotion => oldEmotions.includes(emotion))\r\n\r\n        const newEmotionsSelected = buildIsSelectedEmotions(newEmotions)\r\n        oldEmotions.forEach(emotion => { \r\n            if (currentEmotions.includes(emotion)) \r\n                newEmotionsSelected[emotion] = this.state.isSelectedEmotions[emotion]\r\n        })\r\n\r\n        this.setState({\r\n            // user: user,\r\n            isSelectedEmotions: newEmotionsSelected,\r\n            isUpdateUserDataLoading: false\r\n        })\r\n    }\r\n\r\n    saveButton() {\r\n        const isDataLoading = (\r\n            this.state.isFetchingLocationOrWeather |\r\n            this.state.isPostEntryLoading |\r\n            this.state.isSaveEmotionLoading |\r\n            this.state.isDeleteEmotionLoading |\r\n            this.props.appState.isUserDataSyncing |\r\n            this.state.isUpdateUserDataLoading\r\n        )\r\n        var color;\r\n        switch (true) {\r\n            case this.state.isFetchingLocationOrWeather:\r\n                color = 'brown'\r\n                break;\r\n        \r\n            case this.state.isPostEntryLoading:\r\n                color = 'black'\r\n                break;\r\n            case this.state.isSaveEmotionLoading:\r\n                color = 'green'\r\n                break;\r\n            case this.state.isDeleteEmotionLoading:\r\n                color = 'red'\r\n                break;\r\n            case this.props.appState.isUserDataSyncing:\r\n                color = 'blue'\r\n                break;\r\n            case this.state.isUpdateUserDataLoading:\r\n                color = 'green'\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        return(\r\n            <Pressable\r\n            onPress={this.onSaveButtonPress}\r\n            disabled={isDataLoading}\r\n            style={styles.saveButton}\r\n            >\r\n                { isDataLoading ? (\r\n                    <ActivityIndicator size='small' color={color} />\r\n                ) : (\r\n                    <Text style={styles.saveButtonLabel}> Salvar </Text>\r\n                ) }\r\n            </Pressable>\r\n        )\r\n    }\r\n\r\n    onSaveButtonPress() {\r\n        if (!this.state.selectedMood) {\r\n            this.setLoginMsg('Adicione uma avaliação para continuar.')\r\n            this.setState({selectedEntry: 'Avaliação'})\r\n            return\r\n        }\r\n        const currentEntry = this.props.route.params.currentEntry\r\n        var lastEdited = getTime()\r\n        var createdAt, endTime\r\n        switch (currentEntry.type) {\r\n            case 'new':\r\n                endTime = lastEdited\r\n                createdAt = lastEdited\r\n                break;\r\n            case 'custom-date':\r\n                endTime = this.state.endTime // Returns empty string ''.\r\n                createdAt = lastEdited\r\n                break\r\n            case 'edit':\r\n                endTime = this.state.endTime\r\n                createdAt = this.state.createdAt\r\n                break\r\n            default:\r\n                break;\r\n        }\r\n        const newEntryPost = {\r\n            date: this.state.date,\r\n            startTime: this.state.startTime,\r\n            endTime: endTime,\r\n            createdAt: createdAt,\r\n            lastEdited: [ ...this.state.lastEdited, {date: Today(), time: lastEdited}],\r\n            star: this.state.star,\r\n            mood: this.state.selectedMood,\r\n            emotions: this.props.appState.user.emotions.filter( emotion => this.state.isSelectedEmotions[emotion.name] ),\r\n            jornal: this.state.jornalEntry,\r\n            address: this.state.address,\r\n            location: this.state.location,\r\n            weather: this.state.weather,\r\n        }\r\n        this.postNewEntryAsync(newEntryPost)\r\n    }\r\n    \r\n    async postNewEntryAsync(newEntry) {\r\n        this.setState({ isPostEntryLoading: true });\r\n        var user = this.props.appState.user;\r\n        const currentEntry = this.props.route.params.currentEntry\r\n        const editMode = currentEntry.type === 'edit';\r\n        try {\r\n            console.log('POST ENTRY STATUS: Started...')\r\n            var postUserEntryResult = {ok: false, status: '999', statusText: 'Post not fetched yet.'}\r\n            const postUserEntryOpts = { \r\n                method: editMode? 'PUT' : 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify( newEntry ),\r\n            }\r\n            // var postUserEntryResult = await fetch('http://localhost:3000/Users/' + info.username + '/entries', postUserEntryOpts);\r\n            postUserEntryResult = await fetch( corsURI + appServerURI + 'Users/' + user.username + '/entries' + (editMode ? '/'+currentEntry.entry._id : ''), postUserEntryOpts);\r\n            const postUserEntryStatus = 'Status: ' + postUserEntryResult.status + ', ' + postUserEntryResult.statusText\r\n\r\n            if (postUserEntryResult.ok) {\r\n                console.log('POST ENTRY STATUS: Successful.')\r\n                console.log(postUserEntryStatus)\r\n                    \r\n            } else {\r\n                console.log('POST ENTRY STATUS: Failed. Throwing error...')\r\n                throw new Error(postUserEntryStatus)\r\n            }\r\n\r\n        } catch (error) {\r\n            this.setLoginMsg('Erro no servidor. Tente novamente...')\r\n            console.log('Erro capturado:')\r\n            console.log(error);\r\n\r\n        } finally {\r\n            console.log('POST ENTRY STATUS: Finished.')\r\n            this.setState({ isPostEntryLoading: false });\r\n            if (postUserEntryResult.ok) {\r\n                console.log('proceding to SYNC USER DATA IN RESPONSE TO SUCCESSFUL USER ENTRY POST... ')\r\n                this.props.route.params.syncUserData()\r\n                this.props.route.params.setMainScreenState({\r\n                    selectedEntryId: null,\r\n                    selectedDate: currentEntry.type == 'new' ? Today() : this.props.route.params.getMainScreenState().selectedDate,\r\n                })\r\n                this.props.navigation.navigate('Entrances', {} )\r\n            }\r\n        }\r\n    }\r\n\r\n    async deleteEmotion(emotion) {\r\n        this.setState({ isDeleteEmotionLoading: true });\r\n        var user = this.props.appState.user;\r\n        try {\r\n            console.log('DELETE EMOTION STATUS: Started...')\r\n            var postEmotionResult = {ok: false, status: '999', statusText: 'Post not fetched yet.'}\r\n            const postUserEntryOpts = { \r\n                method: 'DELETE',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n            }\r\n            // var postUserEntryResult = await fetch('http://localhost:3000/Users/' + info.username + '/emotions', postUserEntryOpts);\r\n            postEmotionResult = await fetch( corsURI + appServerURI + 'Users/' + user.username + '/emotions/' + emotion, postUserEntryOpts);\r\n            const postEmotionStatus = 'Status: ' + postEmotionResult.status + ', ' + postEmotionResult.statusText\r\n\r\n            if (postEmotionResult.ok) {\r\n                console.log('DELETE EMOTION STATUS: Successful.')\r\n                console.log(postEmotionStatus)\r\n                    \r\n            } else {\r\n                console.log('DELETE EMOTION STATUS: Failed. Throwing error...')\r\n                throw new Error(postEmotionStatus)\r\n            }\r\n\r\n        } catch (error) {\r\n            this.setLoginMsg('Erro no servidor. Tente novamente...')\r\n            console.log('Erro capturado:')\r\n            console.log(error);\r\n\r\n        } finally {\r\n            console.log('DELETE EMOTION STATUS: Finished.')\r\n            this.setState({ isDeleteEmotionLoading: false });\r\n            if (postEmotionResult.ok) {\r\n                // this.setState({isUserDataSyncing: true})\r\n                await this.props.route.params.syncUserData();\r\n                // this.setState({isUserDataSyncing: false})\r\n                this.updateUserData();\r\n            }\r\n        }\r\n \r\n    }\r\n\r\n    async fetchWeather() {\r\n\r\n        try {\r\n            if (this.state.userCoordinates) {\r\n\r\n                console.log('FETCH WEATHER STATUS: STARTED...!')\r\n                const coords = this.state.userCoordinates\r\n                const lat = coords.latitude\r\n                const lng = coords.longitude\r\n                \r\n                await fetch(\r\n                    `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lng}&APPID=${OpenWeatherMapAPI.KEY}&units=metric`\r\n                )\r\n                .then(res => {\r\n                    const resStatus = 'Status: ' + res.status + ', Status Text: ' + res.statusText\r\n                    if (!res.ok) \r\n                        throw new Error(resStatus)\r\n                    else {\r\n                        return res.json()\r\n                    }\r\n                })\r\n                .then(weather => {\r\n                    console.log('FETCH WEATHER STATUS: SUCCESSFUL!')\r\n                    // console.log(weather);\r\n\r\n                    const weatherInfo = {\r\n                        coords: weather.coord,\r\n                        name: weather.name,\r\n                        weather: weather.weather[0],\r\n                        main: weather.main,\r\n                        clouds: weather.clouds,\r\n                        wind: weather.wind,\r\n                        visibility: weather.visibility,\r\n                    }\r\n\r\n                    this.setState({weather: weatherInfo})\r\n                });\r\n        \r\n            } else {\r\n            // this.setLoginMsg('Não foi possível obter as condições do tempo. Tente reabrir essa tela...')\r\n            console.log('FETCH WEATHER STATUS: UNABLE TO START! USER POSITION NOT AVAILABLE.')\r\n            }\r\n\r\n        } catch (error) {\r\n            this.setLoginMsg('Não foi possível obter as condições do tempo. Tente reabrir essa tela...')\r\n            console.log('FETCH WEATHER STATUS: ERROR! LOGGING ERROR...')\r\n            console.log(error)\r\n\r\n        } finally {\r\n            console.log('FETCH WEATHER STATUS: FINISHED!')    \r\n        }\r\n    }\r\n\r\n    // Check if device has location services enabled\r\n    async checkIfLocationEnabled () {\r\n\r\n        try{\r\n            console.log('GEOCODING PROCESS (CHECK): CHECKING IF USER HAS SERVICES ENABLED.' )\r\n            let enabled = await Location.hasServicesEnabledAsync();            \r\n\r\n            if (!enabled) {\r\n                console.log('GEOCODING PROCESS (CHECK): CHECKED! USER DOES NOT HAVE SERVICES ENABLED.' )\r\n                this.setLoginMsg('Não foi possível obter sua localização. Habilite o serviço de localização para associar um endereço a essa entrada...')\r\n            } else {\r\n                console.log('GEOCODING PROCESS (CHECK): CHECKED! USER HAS SERVICES ENABLED.')\r\n            }\r\n\r\n        } catch(error) {\r\n            this.setLoginMsg('Não foi possível conferir se o serviço de localização está ativado. Tente reabrir essa tela...')\r\n            console.log(\"GEOCODING PROCESS (CHECK): ERROR IN SERVICES PERMISSION CHECK! COULD'NT CHECK IF USER HAS SERVICES ENABLED.\")\r\n        \r\n        } finally {\r\n            console.log(\"GEOCODING PROCESS (CHECK): FINISHED!\")\r\n        }\r\n    };\r\n\r\n    // Check for permission, get current user position and use reverse geocoding for user coordinates\r\n    async getCurrentLocation() {\r\n\r\n        try {\r\n\r\n            if (this.props.route.params.getMainScreenState().locationPermission === 'granted') {\r\n                console.log('GEOCODING PROCESS (PERMISSION): PERMISSION ALREADY GRANTED. SKIPPING REQUEST...')\r\n            } else {\r\n                console.log('GEOCODING PROCESS (PERMISSION): REQUESTING PERMISSION ASYNC...')\r\n                let { status } = await Location.requestForegroundPermissionsAsync()\r\n                // let { status } = await Location.requestBackgroundPermissionsAsync()        \r\n                this.props.route.params.setMainScreenState({locationPermission: status})\r\n    \r\n                if (status !== 'granted') {\r\n                    console.log('GEOCODING PROCESS (PERMISSION): PERMISSION NOT GRANTED!')\r\n                    this.setLoginMsg('Permissão de localização não concedida. Permita que o app use os serviços de localização para associar um endereço a essa entrada...')\r\n                    return \r\n    \r\n                } else {\r\n                    console.log('GEOCODING PROCESS (PERMISSION): PERMISSION GRANTED!')\r\n                }\r\n            }\r\n\r\n            console.log('GEOCODING PROCESS (REQUEST): GETTING CURRENT USER POSITION ASYNC...')\r\n            let { coords } = await Location.getCurrentPositionAsync();\r\n            \r\n            if (coords) {   \r\n                const { latitude, longitude } = coords;\r\n                this.setState({userCoordinates: coords})\r\n                console.log(`GEOCODING PROCESS (REQUEST): CURRENT USER POSITION FOUND... Latitude: ${latitude}, Logitude: ${longitude}`)\r\n                console.log('GEOCODING PROCESS (REVERSE GEOCODING): REVERSE GEOCODE ASYNC...')  \r\n                let response = await Location.reverseGeocodeAsync({ latitude, longitude });\r\n        \r\n                if (response) {\r\n                    this.setState({ address: formattedAddress(response[0]), location: { position: coords, address: response[0] } })\r\n                    console.log('GEOCODING PROCESS (REVERSE GEOCODING): REVERSE GEOCODE SUCCESSFUL! UPDATING STATE...')  \r\n\r\n                } else {\r\n                    console.log('GEOCODING PROCESS (REVERSE GEOCODING): REVERSE GEOCODE FAILED! LOGGING RESPONSE...')  \r\n                    console.log(response)\r\n                }\r\n        \r\n            } else {\r\n                console.log(`GEOCODING PROCESS (REVERSE GEOCODING): USER POSITION NOT FOUND! UNABLE TO PROCEED TO REVERSE GEOCODING...`)\r\n            }\r\n\r\n        } catch (error) {\r\n            this.setLoginMsg('Não foi possível obter a localização atual. Tente reabrir essa tela...')\r\n            console.log('GEOCODING PROCESS: ERROR IN USER POSITION REQUEST! LOGGING ERROR...')\r\n            console.log(error)\r\n        \r\n        } finally {\r\n            console.log('GEOCODING PROCESS: USER POSITION REQUEST FINISHED. PROCEEDING TO FETCH WEATHER DATA...')\r\n        }\r\n    };\r\n\r\n    render() {\r\n        console.log('Rendering \"PostEntry\" component...')\r\n\r\n        const settings = this.props.appState.user.settings\r\n        const backgroundImage = settings.backgroundImage\r\n        const imgURI =  settings.displayBackgroundImage ? (backgroundImage ? backgroundImage.urls.regular : null ) : null\r\n        const backgroundColor = settings.backgroundColor\r\n\r\n        return(\r\n            <ImageBackground source={{'uri' : imgURI}} style={[styles.mainView, {backgroundColor: backgroundColor}]}>\r\n                <ScrollView style={styles.scrollView}>\r\n                    <View style={styles.section}>\r\n                            {this.postEntryHeader()}\r\n                            {this.InputCard('Avaliação', 'smiling-face', {justifyContent: 'space-between'}, this.MoodButtons())}\r\n                            {this.InputCard('Emoções', 'checkmark-square-outline', {flexWrap: 'wrap', justifyContent: 'center'}, this.EmotionButtons)}\r\n                            {this.InputCard('Jornal', 'book', {flexDirection: 'column', minHeight: 130}, this.JornalInput())}\r\n                    </View>\r\n                </ScrollView>  \r\n                <this.saveButton />\r\n                {this.loginMsg()}\r\n            </ImageBackground>\r\n        )    \r\n    }\r\n}","import { StatusBar } from 'expo-status-bar';\r\nvar styles = {\r\n    login: {\r\n        mainView: {\r\n            flex: 1,\r\n            justifyContent: 'center',\r\n            alignItems: 'center',\r\n            // paddingHorizontal: Platform.OS != 'web' ? '5%' : '5%',\r\n        },\r\n        titleView: {\r\n            flexDirection: 'row',\r\n            justifyContent: 'center',\r\n            alignItems: 'center',\r\n            minHeight: 50,\r\n            marginTop: 30,\r\n        },\r\n        title: {\r\n            fontSize: 30,\r\n            fontWeight: 'bold',\r\n            color: 'white',\r\n            alignSelf: 'center',\r\n        },\r\n        titleIcon: {\r\n            width: 30,\r\n            height: 30,\r\n            marginLeft: 6,\r\n            paddingTop: 3,\r\n        },\r\n        card: {\r\n            height: 440,\r\n            minHeight: 430,\r\n            width: 350,\r\n            paddingHorizontal: 10,\r\n            paddingVertical: 10,\r\n            borderWidth: 4,\r\n            borderRadius: 10,\r\n            borderColor: 'rgba(0,0,0,0.1)',\r\n            justifyContent: 'space-between',\r\n            backgroundColor: 'azure',\r\n        },\r\n        cardHeader: {\r\n            height: 90,\r\n            width: '100%',\r\n            justifyContent: 'center'\r\n            // borderWidth: 1\r\n        },\r\n        cardTitle: {\r\n            position: 'relative',\r\n            left: 5,\r\n            fontSize: 24,\r\n            fontWeight: 'bold',\r\n            color: 'black',\r\n        },\r\n        cardSection: {\r\n            height: 85,\r\n            justifyContent: 'space-between',\r\n            alignItems: 'center',\r\n            // borderWidth: 1\r\n        },\r\n        loadingIcon: {\r\n            alignSelf: 'center'\r\n        },\r\n        inputField: {\r\n            minHeight: 40,\r\n            width: '100%',\r\n            paddingLeft: 10,\r\n            fontSize: 14,\r\n            borderWidth: 1,\r\n            borderRadius: 5,\r\n            borderColor: 'rgba(0,0,0,0.1)',\r\n            backgroundColor: 'white'\r\n        },\r\n        button: {\r\n            height: 40,\r\n            width: '100%',\r\n            textAlign: 'center',\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n            borderWidth: 1,\r\n            borderRadius: 5,\r\n            borderColor: 'rgba(0,0,0,0)',\r\n            backgroundColor: 'lightblue',        \r\n        },\r\n        buttonLabel: {\r\n            fontSize: 15,\r\n            fontWeight: 'bold',\r\n            color: 'black',\r\n        },\r\n        text: {\r\n            fontSize: 15,\r\n            textAlign: 'center',\r\n        },\r\n        msgBox: {\r\n            width: 300,\r\n            paddingVertical: 5,\r\n            paddingHorizontal: 3,\r\n            justifyContent: 'center',\r\n            backgroundColor: 'rgb(30,30,30)',\r\n            borderWidth: 1,\r\n            borderColor: 'rgb(40,40,40)',\r\n            \r\n        },\r\n        msg: {\r\n            textAlign: 'center',\r\n            color: 'white',\r\n            // paddingHorizontal: 20,\r\n        },\r\n    }\r\n};\r\nexport default styles;","// import Icon from 'react-native-vector-icons/FontAwesome';\r\n// import { Ionicons } from '@expo/vector-icons';\r\nimport { Icon } from 'react-native-eva-icons'\r\n// import { WiDaySunny } from \"weather-icons-react\";\r\n\r\nimport React, { Component } from 'react';\r\nimport { View, Text, ImageBackground, TextInput, Pressable, Platform, ActivityIndicator, Switch } from 'react-native';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport NetInfo from \"@react-native-community/netinfo\";\r\n\r\nimport styles from '../styles/loginStyles'\r\nconst defaultEmotions = require('../shared/emotionsConfig')\r\n\r\n// App server connection settings\r\nconst corsURI = Platform.OS == 'web' ? 'https://morning-journey-78874.herokuapp.com/' : ''\r\nconst appServerURI = 'https://mood-tracker-server.herokuapp.com/'\r\n\r\n// Email Validation settings\r\n\r\n// const Verifier = require('email-verifier')\r\nconst emailVerification_APIKEY = \"at_TPKXmSQnStekLzTbstLO9GyHvd7or\"\r\n// let verifier = new Verifier(emailVerification_APIKEY);\r\nconst emailVerification_APIURI = (emailAddress) => `https://emailverification.whoisxmlapi.com/api/v2?apiKey=${emailVerification_APIKEY}&emailAddress=${emailAddress}`\r\nconst falseParams = ['validateDNS', 'checkCatchAll', 'checkFree', 'checkDisposable']\r\n\r\nfunction appendValueToUri(uri, params, value) {\r\n  for (let param of params) {\r\n    uri += '&' + param + '=' + value\r\n  }\r\n  return uri\r\n}\r\n\r\nasync function validateEmail(email) {\r\n\r\n  console.log('EMAIL VERIFICATION STATUS: Fetching email verification api...')\r\n\r\n  try {\r\n\r\n    var uri = emailVerification_APIURI(email)\r\n    uri = appendValueToUri(uri, falseParams, '0')\r\n    var emailStatus = {ok: false, status: 'Email não verificado.'}\r\n    const apiResp = await fetch( uri , { method: 'GET' } )\r\n  \r\n    if (apiResp.ok) {\r\n  \r\n      console.log('EMAIL VERIFICATION STATUS: Api fetch request successful.')\r\n      const apiRespJson = await apiResp.json()\r\n  \r\n      if ( apiRespJson.formatCheck=='false' ) {\r\n        emailStatus.status = 'Email inválido.'\r\n      } else if ( apiRespJson.smtpCheck=='false' ) {\r\n        emailStatus.status = 'Email não existe.'\r\n      } else {\r\n        emailStatus = {ok: true, status: 'Email válido.'}\r\n      }\r\n      \r\n      return emailStatus\r\n  \r\n    } else {\r\n      console.log('EMAIL VERIFICATION STATUS: Api fetch request failed. Throwing error...')\r\n      throw new Error('Status: ' + apiResp.status + ', Status Text: ' + apiResp.statusText)\r\n    }  \r\n\r\n  } finally {\r\n    console.log('EMAIL VERIFICATION STATUS: Concluído')\r\n\r\n  }\r\n  // Use the email verification api using its module...\r\n  // verifier.verify(email, (err, data) => {\r\n  //   if (err) throw err;\r\n  //   console.log(data);\r\n  // });\r\n}\r\n\r\nfunction validatePassword(password) {\r\n  console.log('VALIDATING PASSWORD FOR SIGNUP...')\r\n\r\n  const hasMinLength = password.length > 6\r\n  var res\r\n  if (!hasMinLength) {\r\n    res = {ok: false, status: 'A senha deve ter no mínimo 6 caractéres.'}\r\n  } else {\r\n    res = {ok: true, status: 'Senha válida.'}\r\n  }\r\n  return res\r\n}\r\n\r\nasync function registerLocallyIfUserIsNewToDevice(user) {\r\n  var localAuthInfo = await AsyncStorage.getItem('LocalAuthenticationInfo')\r\n  localAuthInfo = JSON.parse(localAuthInfo)  \r\n  if ( !localAuthInfo.users.filter(localUser => localUser._id == user._id)[0] ) {\r\n    console.log('SIGNIN STATUS: Primeiro login do usuário nesse aparelho. Adicionando informações do usuário no armazenamento local...')\r\n    const updatedLocalAuthInfo = {\r\n      ...localAuthInfo,\r\n      users: [ \r\n        ...localAuthInfo.users,\r\n        {\r\n          _id: user._id,\r\n          username: user.username,\r\n          email: user.email,\r\n          password: user.password,\r\n          // settings: {\r\n          //   backgroundColor: 'lightblue',\r\n          //   backgroundImage: null      \r\n          // }\r\n        }\r\n      ]\r\n    }\r\n    await AsyncStorage.setItem('LocalAuthenticationInfo', JSON.stringify(updatedLocalAuthInfo))\r\n  } else {\r\n    console.log('SIGNIN STATUS: Informações do usuário já registradas nesse aparelho. Pulando registro do usuário no armazenamento local...')\r\n  } \r\n}\r\n\r\nexport async function keepUserConnectionAlive(userId) {\r\n  var localAuthInfo = await AsyncStorage.getItem('LocalAuthenticationInfo')\r\n  localAuthInfo = JSON.parse(localAuthInfo)\r\n\r\n  console.log(`SIGNIN STATUS: Usuário optou por ${userId ? 'manter conexão ativa. Configurando conexão ativa para o usuário...' : 'desativar conexão ativa. Desativando...' }`)\r\n  const updatedLocalAuthInfo = {\r\n    ...localAuthInfo,\r\n    keepConnected: {\r\n      status: userId ? true : false,\r\n      userId: userId\r\n    }\r\n  }\r\n  await AsyncStorage.setItem('LocalAuthenticationInfo', JSON.stringify(updatedLocalAuthInfo))\r\n}\r\n\r\nclass LoginScreen extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      userInfo: {\r\n        password: '',\r\n        email: '',\r\n        username: '',\r\n      },\r\n      keepConnected: true,\r\n      loginMsg: '',\r\n      isUserAuth: false,\r\n      isDataLoading: false,\r\n    }\r\n    this.onChangeText = this.onChangeText.bind(this);\r\n    this.submitButton = this.submitButton.bind(this);\r\n    this.loginMsg = this.loginMsg.bind(this);\r\n    this.setLoginMsg = this.setLoginMsg.bind(this);\r\n    this.onSignIn = this.onSignIn.bind(this);\r\n    this.onSignUp = this.onSignUp.bind(this);\r\n    this.LoginScreen = this.LoginScreen.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    console.log('\"LoginScreen\" component did mount...')\r\n    this.restoreUserToken()\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    console.log('\"LoginScreen\" component will unmount...')\r\n  }\r\n\r\n  LoginIcon() {  \r\n    if (this.state.isDataLoading) {\r\n      return <ActivityIndicator color='#000000' />\r\n    } else {\r\n      return <Icon name='log-in-outline' animation='pulse' fill='#000' width={30} height={30} />\r\n    }\r\n  }\r\n\r\n  setLoginMsg(msg) {\r\n    this.setState({loginMsg: msg})\r\n    setTimeout( () => this.setState({loginMsg: ''}) , 1000 * 5 )\r\n  }\r\n\r\n  loginMsg() {\r\n      return(\r\n        <View style={[styles.login.msgBox, this.state.loginMsg ? {} : {backgroundColor: 'transparent', borderColor: 'transparent'} ]}>\r\n          <Text style={styles.login.msg}>{this.state.loginMsg}</Text>\r\n        </View>\r\n      )\r\n  }\r\n\r\n  onChangeText(textField) {\r\n    function setField(text) {\r\n      this.setState( { userInfo: { ...this.state.userInfo, [textField] : text}} )\r\n    }\r\n    setField = setField.bind(this);\r\n    return setField\r\n  }\r\n\r\n  submitButton(sign) {\r\n    const signIn = sign == 'signin'\r\n    return(\r\n      <Pressable\r\n      disabled={this.state.isDataLoading}\r\n      onPress={signIn ? this.onSignIn : this.onSignUp}\r\n      style={[styles.login.button]}\r\n      >\r\n        <Text style={styles.login.buttonLabel}>{ signIn ? 'Entrar' : 'Cadastrar' }</Text>\r\n      </Pressable>\r\n    )\r\n  }\r\n\r\n  LoginScreen = () => {\r\n    var imgURI, backgroundColor\r\n    if (this.state.isUserAuth) {\r\n      backgroundColor = this.state.userInfo.settings.backgroundColor\r\n      if (this.state.userInfo.settings.backgroundImage) {\r\n        imgURI = this.state.userInfo.settings.backgroundImage.urls.regular\r\n      } else {\r\n        imgURI = null\r\n      }\r\n    } else {\r\n      imgURI = null\r\n      backgroundColor = 'lightblue'     \r\n    }\r\n\r\n    return(\r\n      <ImageBackground source={{uri: imgURI}} style={[styles.login.mainView ,{backgroundColor: backgroundColor, justifyContent: 'space-evenly'}]}>\r\n        \r\n        <View style={styles.login.titleView}>\r\n          <Text style={styles.login.title}>Mood Tracker</Text>\r\n        </View>\r\n\r\n        <View style={styles.login.card}>\r\n          <View style={styles.login.cardHeader} >\r\n            <Text style={styles.login.cardTitle}>Entrar</Text>\r\n          </View>\r\n          <View style={styles.login.cardSection}>\r\n            <TextInput\r\n            placeholder='Email'\r\n            textContentType='emailAddress'\r\n            style={styles.login.inputField}\r\n            onChangeText={this.onChangeText('email')}\r\n            autoComplete='email'\r\n            importantForAutofill='yes'\r\n            >\r\n            </TextInput>\r\n            <TextInput\r\n            placeholder='Senha'\r\n            textContentType='password'\r\n            secureTextEntry={true}\r\n            style={styles.login.inputField}\r\n            onChangeText={this.onChangeText('password')}\r\n            autoComplete='password'\r\n            importantForAutofill='yes'\r\n            >\r\n            </TextInput>\r\n          </View>\r\n          <View style={[styles.login.cardSection, {height: 138}]}>\r\n            {this.submitButton('signin')}\r\n            {this.submitButton('signup')}\r\n            <View style={{flexDirection: 'row', height: 48, alignSelf: 'stretch', alignItems: 'center', justifyContent: 'flex-end'}}>\r\n              <Text style={{marginRight: Platform.OS=='web' ? 10 : null }}>Manter-me conectado</Text>\r\n              <Switch\r\n                disabled={this.state.isDataLoading}\r\n                trackColor={{ false: \"#767577\", true: \"#81b0ff\" }}\r\n                thumbColor={this.state.keepConnected ? \"#f4f3f4\" : \"#f4f3f4\"}\r\n                ios_backgroundColor=\"#3e3e3e\" \r\n                onValueChange={() => this.setState({keepConnected: !this.state.keepConnected})}\r\n                value={this.state.keepConnected}\r\n              />\r\n            </View>\r\n          </View>\r\n          <View style={[styles.login.cardSection, {height: 80, justifyContent: 'center'}]}>\r\n            {this.LoginIcon()}\r\n          </View>\r\n        </View>\r\n\r\n        {this.loginMsg()}\r\n\r\n      </ImageBackground>\r\n    )\r\n  }\r\n\r\n  isInputEmpty() {\r\n    if (!this.state.userInfo.email) {\r\n      const errMsg = 'Insira um endereço de email.'\r\n      this.setLoginMsg(errMsg)\r\n      console.log('SIGNIN STATUS: ' + errMsg)\r\n      return true\r\n    } else if (!this.state.userInfo.password) {\r\n      const errMsg = 'Insira uma senha.'\r\n      this.setLoginMsg(errMsg)\r\n      console.log('SIGNIN STATUS: ' + errMsg)\r\n      return true\r\n    } else return false\r\n  }\r\n\r\n  async restoreUserToken() {\r\n    try {\r\n      console.log('RESTORE USER TOKE STATUS: STARTED...')\r\n      var localAuthInfo = await AsyncStorage.getItem('LocalAuthenticationInfo')\r\n      \r\n      if (localAuthInfo) {\r\n        localAuthInfo = JSON.parse(localAuthInfo)\r\n\r\n        console.log('RESTORE USER TOKE STATUS: LOCAL AUTH INFO ALREADY CONFIGURED.')\r\n        // console.log(localAuthInfo)\r\n\r\n        if (localAuthInfo.keepConnected.status) {\r\n          console.log(`RESTORE USER TOKEN STATUS: USER CONNECTION IS ALIVE FOR USER ID: ${localAuthInfo.keepConnected.userId}. PROCEDING TO SIGNIN...`)\r\n          const user = localAuthInfo.users.filter(user => user._id = localAuthInfo.keepConnected.userId)[0]\r\n  \r\n          this.setState({\r\n            userInfo: {\r\n              username: user.username,\r\n              email: user.email,\r\n              password: user.password,  \r\n            }\r\n          })\r\n          this.onSignIn()\r\n        }\r\n\r\n        else {\r\n          console.log('RESTORE USER TOKEN STATUS: NO USER CONNECTION ALIVE. PROCEEDING TO SIGNIN/SIGNUP ...')\r\n        }\r\n\r\n      } else {\r\n        console.log('RESTORE USER TOKEN STATUS: NO LOCAL AUTH INFO CONFIGURED IN THIS DEVICE. SETTING DEVICE LOCAL AUTH INFO FOR THE FIRST TIME...')\r\n\r\n        var DEVICE_IP_ADDRESS\r\n        NetInfo.fetch(\"wifi\").then(state => {\r\n          DEVICE_IP_ADDRESS = state.details.ipAddress\r\n          console.log(\"RESTORE USER TOKEN STATUS: IP ADDRESS REQUEST SUCCESSFUL. IP ADDRESS: \" + DEVICE_IP_ADDRESS);\r\n        });\r\n        const initialLocalAuthInfo = {\r\n          IP_ADDRESS: DEVICE_IP_ADDRESS,\r\n          users: [],\r\n          keepConnected: {\r\n            status: false,\r\n            userId: null\r\n          }\r\n        }\r\n        await AsyncStorage.setItem('LocalAuthenticationInfo', JSON.stringify(initialLocalAuthInfo))\r\n        console.log('RESTORE USER TOKEN STATUS: DEVICE LOCAL AUTH INFO CONFIGURED FOR THE FIRST TIME. PROCEEDING TO SIGNIN/SIGNUP ...')\r\n      }\r\n\r\n    } catch(error) {\r\n      console.log('RESTORE USER TOKEN STATUS: ERROR. LOGGING ERROR...')\r\n      console.log(error)\r\n    }\r\n  }  \r\n\r\n  async onSignIn() {\r\n\r\n    console.log('SIGNIN STATUS: Started...')\r\n    var info = this.state.userInfo;\r\n    info.email = info.email.trim()\r\n    this.setState({ isDataLoading: true });\r\n\r\n    try {\r\n\r\n      if (this.isInputEmpty()) return\r\n\r\n      var UsersResult = await fetch( corsURI + appServerURI + 'Users', { method: 'GET' });\r\n      const UsersStatus = 'Status: ' + UsersResult.status + ', ' + 'Status Text: ' + UsersResult.statusText\r\n      if (UsersResult.ok) {\r\n        console.log('fetch GET request for users data at signin successful.');\r\n        console.log(UsersStatus)\r\n      } else {\r\n        console.log('fetch GET request for users data at signin failed. Printing fetch response...')\r\n        console.log(JSON.stringify(UsersResult))\r\n        console.log('Throwing error...')\r\n        throw new Error(UsersStatus)\r\n      }\r\n\r\n      const Users = await UsersResult.json();\r\n      const user = Users.filter((user) => user.email === info.email)[0]\r\n      \r\n      if ( user ) {          \r\n        \r\n        if (user.password === info.password) {\r\n\r\n          await registerLocallyIfUserIsNewToDevice(user)\r\n\r\n          if (this.state.keepConnected) {\r\n            await keepUserConnectionAlive(user._id)\r\n          }\r\n\r\n          this.setState( {isUserAuth: true, userInfo: user} )\r\n          const successMsg = 'Login realizado com sucesso!'\r\n          this.setLoginMsg(successMsg)\r\n          console.log('SIGNIN STATUS: Sucesso.')\r\n\r\n        } else {\r\n          const errMsg = 'Senha incorreta.'\r\n          this.setLoginMsg(errMsg)\r\n          console.log('SIGNIN STATUS: ' + errMsg);\r\n        }\r\n\r\n      } else {\r\n        const errMsg = 'Email não cadastrado!'\r\n        this.setLoginMsg(errMsg)\r\n        console.log('SIGNIN STATUS: ' + errMsg)\r\n      }\r\n\r\n    } catch (error) {\r\n      const errMsg = 'Erro no servidor! Tente novamente...'\r\n      this.setLoginMsg(errMsg)\r\n      console.log('Error catched in fetch GET request for users data at signin. Printing Error...')\r\n      console.log('SIGNIN STATUS:' + 'Erro capturado. Imprimindo erro...')\r\n      console.log(error);\r\n\r\n    } finally {\r\n      this.setState({ isDataLoading: false });\r\n      console.log('SIGNIN STATUS: Concluido.')\r\n      if (this.state.isUserAuth) {\r\n        console.log('User authenticated. Navigating to \"HomeScreen\"...')\r\n        this.props.setAppState({isUserAuth: true, user: this.state.userInfo})\r\n        // Parent class component method that authenticates the user and redirects to entrances screen.\r\n      }\r\n    }\r\n  }\r\n\r\n  async onSignUp() {\r\n\r\n    console.log('SIGNUP STATUS: started...')\r\n    var info = this.state.userInfo;\r\n    info.email = info.email.trim()\r\n    this.setState({ isDataLoading: true });\r\n    \r\n    try {\r\n\r\n      var postUserResult = {ok: false}\r\n      if (this.isInputEmpty()) return\r\n\r\n      // Validating email and password\r\n      const emailValidation = await validateEmail(info.email)\r\n      console.log('SING UP STATUS: ' + emailValidation.status)\r\n      if (!emailValidation.ok) {\r\n          this.setLoginMsg(emailValidation.status)\r\n          return\r\n      }\r\n\r\n      // Checking if email is already registerd\r\n      var UsersResult = await fetch( corsURI + appServerURI + 'Users', { method: 'GET' } );  \r\n      const reqStatus = 'Status: ' + UsersResult.status + ', ' + UsersResult.statusText\r\n      if (UsersResult.ok) {\r\n        console.log('fetch GET request for users data at signup successful.')\r\n        console.log(reqStatus)\r\n      } else {\r\n        console.log('fetch GET request for users data at signup failed. Throwing error...')\r\n        throw new Error(reqStatus)\r\n      }\r\n\r\n      const Users = await UsersResult.json();\r\n      const User = Users.filter((user) => user.email === info.email)[0]\r\n      if ( !User ) {\r\n\r\n        // Validating Password\r\n        const passwordCheck = validatePassword(info.password)\r\n        if (!passwordCheck.ok) {\r\n          console.log('SING UP STATUS: ' + passwordCheck.status)\r\n          this.setLoginMsg(passwordCheck.status)\r\n          return\r\n      }\r\n\r\n        // Registering new user by posting user identification to database\r\n        info.username = info.email.split('@')[0]\r\n        const postUserOpts = {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify({ \r\n            ...info,\r\n            emotions: defaultEmotions,\r\n            entries: [],\r\n            layout: 'grid',\r\n            settings: {\r\n              backgroundColor: 'lightblue',\r\n              backgroundImage: null,\r\n            },\r\n          })\r\n        }\r\n\r\n        postUserResult = await fetch( corsURI + appServerURI +  'Users/' + info.username, postUserOpts );\r\n        const postUserStatus = 'Status: ' + postUserResult.status + ', ' + postUserResult.statusText\r\n\r\n        if (postUserResult.ok) {\r\n          const successMsg = 'Cadastro realizado com sucesso!'\r\n          this.setLoginMsg(successMsg)\r\n          console.log('fetch POST request for user data at signup successful.')\r\n          console.log(postUserStatus)\r\n          console.log('SING UP STATUS: ' + successMsg)\r\n\r\n        } else {\r\n          console.log('fetch POST request for user data at signup failed. Throwing error...')\r\n          throw new Error(postUserStatus)\r\n        }\r\n\r\n      } else {\r\n        const errMsg = 'Email já cadastrado.'\r\n        this.setLoginMsg(errMsg)\r\n        console.log('SING UP STATUS: ' + errMsg)\r\n      }\r\n\r\n    } catch (error) {\r\n      const errMsg = 'Erro no servidor, tente novamente...'\r\n      this.setLoginMsg(errMsg)\r\n      console.log('SING UP STATUS: Erro capturado. Imprimindo erro...')\r\n      console.log(error);\r\n\r\n    } finally {\r\n      this.setState({ isDataLoading: false })\r\n      console.log('SING UP STATUS: Concluido.')\r\n      if (postUserResult.ok)  this.onSignIn()\r\n    }\r\n  }\r\n\r\n  render() {\r\n\r\n    console.log('Rendering \"LoginScreen\" component...')\r\n    return this.LoginScreen()\r\n  \r\n  }\r\n}\r\n\r\nexport default LoginScreen;","import React, { Component } from 'react';\r\nimport { ImageBackground, View, Text, Pressable, ScrollView, StyleSheet, ActivityIndicator, Switch, StatusBar } from 'react-native';\r\nimport { Icon } from 'react-native-eva-icons';\r\nimport { keepUserConnectionAlive } from './LoginComponent';\r\nimport { capitalize } from './subcomponents/EditEmotions';\r\n\r\n// cors-midpoint uri (needed to avoid cors' allow-cross-origin error when fetching in web platforms)\r\nconst corsURI = Platform.OS == 'web' ? 'https://morning-journey-78874.herokuapp.com/' : ''\r\nconst appServerURI = 'https://mood-tracker-server.herokuapp.com/'\r\n\r\nconst colorList = require('../shared/colorList.json')\r\n\r\nconst styles = StyleSheet.create({\r\n  background: {\r\n    flex: 1,\r\n    paddingTop: StatusBar.currentHeight,\r\n    alignItems: 'center',\r\n    justifyContent: 'space-between'\r\n  },\r\n  foreground: {\r\n    width: 350,\r\n    // borderWidth: 2,\r\n  },\r\n  header: {\r\n    height: 110,\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    // borderWidth: 1,\r\n  },\r\n  settingsRow: {\r\n    height: 60,\r\n    paddingHorizontal: 10,\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n    justifyContent: 'space-between',\r\n    borderRadius: 10,\r\n    // borderWidth: 1,\r\n  },\r\n  colorBox: {\r\n    height: 300,\r\n    paddingHorizontal: 0,\r\n    borderColor: 'rgba(200,200,200,0.2)'\r\n  },\r\n  colorRow: {\r\n    width: '100%',\r\n    height: 60,\r\n    paddingHorizontal: 10,\r\n    // paddingLeft: 5,\r\n    // paddingRight: 3,\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n    justifyContent: 'space-between',\r\n    borderBottomWidth: 1,\r\n    borderColor: 'rgba(200,200,200,0.2)',\r\n    borderRadius: 10,\r\n  },\r\n  colorSquare: {\r\n    // marginRight: 0,\r\n    width: 30,\r\n    height: 30,\r\n    borderRadius: 6,\r\n    borderColor: 'white'\r\n  },\r\n  logout: {\r\n    height: 33,\r\n    width: 85,\r\n    marginTop: 0,\r\n    marginBottom: 20,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    // borderWidth: 1,\r\n    // borderColor: 'red',\r\n  },\r\n  h1: {\r\n    fontSize: 22,\r\n    color: 'white'\r\n  },\r\n  h2: {\r\n    fontSize: 20,\r\n    color: 'white',\r\n  },\r\n  h3: {\r\n    fontSize: 18,\r\n    color: 'white',\r\n  },\r\n  h4: {\r\n    fontSize: 16,\r\n    color: 'white',\r\n  },\r\n})\r\n\r\nfunction blinkButton(setPressed, timeSpan=200) {\r\n  setPressed(true)\r\n  setTimeout(() => {\r\n    setPressed(false)\r\n  }, timeSpan);\r\n}\r\n\r\nexport default class SettingsScreen extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      selectedColor: null,\r\n      selectedImage: null,\r\n      displayBackgroundImage: false,\r\n      isBackgroundColorSettingsOpen: false,\r\n\r\n      isSaveColorLoading: false,\r\n      isDisplayBackgroundImageLoading: false,\r\n      isLogoutButtonPressed: false,\r\n    }\r\n    this.SettingsScreen = this.SettingsScreen.bind(this);\r\n    this.onLogoutButtonPress = this.onLogoutButtonPress.bind(this);\r\n    this.onColorButtonPressFor = this.onColorButtonPressFor.bind(this);\r\n    this.onSaveColorButtonPress = this.onSaveColorButtonPress.bind(this);\r\n    this.syncUserSettings = this.syncUserSettings.bind(this);\r\n    this.ColorRow = this.ColorRow.bind(this);\r\n    this.ScreenSettings = this.ScreenSettings.bind(this);\r\n    this.logoutPressable = this.logoutPressable.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    console.log('\"SettingsScreen\" component did mount')\r\n    this.syncUserSettings()\r\n  }\r\n\r\n  syncUserSettings() {\r\n    console.log('INITIALIZE SETTINGS STATUS: INITIALIZING...')\r\n\r\n    this.setState({\r\n      selectedColor: this.props.appState.user.settings.backgroundColor,\r\n      // selectedImage: this.props.appState.user.settings.backgroundImage\r\n      // displayBackgroundImage: this.props.appState.user.settings.displayBackgroundImage\r\n    })\r\n    this.props.navigation.setParams({selectedColor: this.props.appState.user.settings.backgroundColor})  // Necessary to change the tab bar color dinamically in App.js\r\n  }\r\n\r\n  SettingsScreen() {\r\n    const settings = this.props.appState.user.settings\r\n    const backgroundImage = settings.backgroundImage\r\n    const imgURI = settings.displayBackgroundImage ? (backgroundImage ? backgroundImage.urls.regular : null) : null\r\n    return(\r\n      <ImageBackground\r\n      source={{uri : imgURI}}\r\n      style={[ styles.background, {backgroundColor: this.state.selectedColor} ]}\r\n      >\r\n        <View style={styles.foreground}>\r\n          \r\n          <View style={styles.header}>\r\n            <Text style={styles.h1}>Configurações</Text>\r\n          </View>\r\n\r\n          <this.ScreenSettings />\r\n          <this.logoutPressable />\r\n        </View>\r\n\r\n      </ImageBackground>\r\n    )\r\n  }\r\n\r\n  async onLogoutButtonPress() {\r\n    this.setState({isLogoutButtonPressed: true});\r\n    setTimeout(() => {\r\n      this.setState({isLogoutButtonPressed: false});\r\n    }, 400);\r\n    await keepUserConnectionAlive(null); // kills user connection\r\n    this.props.route.params.logout();\r\n  }\r\n\r\n  logoutPressable() {\r\n    const isLoading = this.state.isSaveColorLoading\r\n    return(\r\n      <Pressable   // logout pressable\r\n      onPress={this.onLogoutButtonPress}\r\n      disabled={isLoading}\r\n      style={[ styles.settingsRow, {\r\n        // borderColor: isLoading ? 'rgba(255,255,255,0.3)' : 'red',\r\n        backgroundColor: this.state.isLogoutButtonPressed ? 'rgba(0,0,0,0.4)' : null\r\n      }]}\r\n      >\r\n        <View style={{flexDirection: 'row', alignItems: 'center'}}>\r\n          <Icon name='log-out' width={30} height={30} fill='red' />\r\n          <Text\r\n          style={[styles.h2, { marginLeft: 10, color: isLoading ? 'rgba(255,255,255,0.4)' : 'red' }]}\r\n          >\r\n          Logout\r\n          </Text>\r\n        </View>\r\n      </Pressable>\r\n    )\r\n  }\r\n\r\n  onColorButtonPressFor(color) {\r\n    function onColorButtonPress() {\r\n      this.setState({ selectedColor: color })\r\n      this.props.navigation.setParams({selectedColor: color}) // Necessary to change the tab bar color dinamically in App.js\r\n    }\r\n    return onColorButtonPress.bind(this);\r\n  }\r\n\r\n  ColorRow({color}) {\r\n    const [isColorRowPressed, setIsColorRowPressed] = React.useState(false)\r\n\r\n    return(\r\n      <Pressable\r\n      // android_ripple={{}}\r\n      onPressIn={() => {\r\n        blinkButton(setIsColorRowPressed, 200)\r\n      }}\r\n        onPress={() => {\r\n        this.onColorButtonPressFor(color)()\r\n        }}\r\n      style={[styles.colorRow, {backgroundColor: isColorRowPressed ? 'rgba(0,0,0,0.2)' : null }]}>\r\n        <Text style={[\r\n          styles.h3,\r\n          this.state.selectedColor == color\r\n          ? {fontStyle: 'italic', textDecorationLine: 'underline' }\r\n          : {fontStyle: 'italic', textDecorationLine: 'none' }\r\n        ]}>{ capitalize(color) }</Text>\r\n        <View style={[ styles.colorSquare, { backgroundColor: color, borderWidth: this.state.selectedColor==color ? 3 : 0 }]} />\r\n      </Pressable>\r\n    )\r\n  }\r\n\r\n  ScreenSettings() {\r\n    const [isColorButtonPressed, setIsColorButtonPressed] = React.useState(false)\r\n    const [isChooseImageButtonPressed, setIsChooseImageButtonPressed] = React.useState(false)\r\n    const [isExposeImageButtonPressed, setIsExposeImageButtonPressed] = React.useState(false)\r\n    // const [isApplyColorButtonPressed, setIsApplyColorButtonPressed] = React.useState(false)\r\n\r\n\r\n    const newColorUnselected = this.state.selectedColor == this.props.appState.user.settings.backgroundColor\r\n    const isLoading = this.state.isSaveColorLoading | this.state.isDisplayBackgroundImageLoading\r\n    return (\r\n              <>\r\n                <Pressable\r\n                onPress={() => {\r\n                  blinkButton(setIsChooseImageButtonPressed)\r\n                  this.props.navigation.navigate('WallpaperTopics')\r\n                }}\r\n                style={[styles.settingsRow, {backgroundColor: isChooseImageButtonPressed ? 'rgba(0,0,0,0.2)' : null }]}\r\n                >\r\n                  <View style={{flexDirection: 'row', alignItems: 'center'}}>\r\n                    <Icon name='image-outline' width={30} height={30} fill='white' />\r\n                    <Text style={[styles.h2, {marginLeft: 10}]}>Escolher fundo</Text>\r\n                  </View>\r\n                  \r\n                  <Icon\r\n                  width={30} height={30}\r\n                  name='arrow-ios-forward-outline'\r\n                  fill={isChooseImageButtonPressed ? 'rgba(255,255,255,1)' : 'rgb(200,200,200)' } />\r\n                </Pressable>\r\n\r\n                <Pressable\r\n                onPress={ () => {\r\n                  blinkButton(setIsExposeImageButtonPressed)\r\n                  // this.onDisplayBackgroundImageSwitch()\r\n                }}\r\n                style={[styles.settingsRow, {backgroundColor: isExposeImageButtonPressed ? 'rgba(0,0,0,0.2)' : null }]}\r\n                >\r\n                  <View style={{flexDirection: 'row', alignItems: 'center'}}>\r\n                    <Icon name='eye-outline' width={30} height={30} fill='white' />\r\n                    <Text style={[styles.h2, {marginLeft: 10}]}>Habilitar fundo</Text>\r\n                  </View>\r\n\r\n                  <Switch\r\n                  disabled={isLoading}\r\n                  trackColor={{ false: \"#767577\", true: \"#81b0ff\" }}\r\n                  thumbColor={this.state.keepConnected ? \"#f4f3f4\" : \"#f4f3f4\"}\r\n                  ios_backgroundColor=\"#3e3e3e\"\r\n                  onPress={() => {}}\r\n                  onValueChange={() => {\r\n                    blinkButton(setIsExposeImageButtonPressed)\r\n                    this.onDisplayBackgroundImageSwitch()\r\n                  }}\r\n                  value={this.props.appState.user.settings.displayBackgroundImage}\r\n                  />\r\n                </Pressable>\r\n\r\n            <Pressable\r\n            onPressIn={() => {\r\n              blinkButton(setIsColorButtonPressed)\r\n            }}\r\n            onPress={() => {\r\n              // blinkButton(setIsColorButtonPressed)\r\n              this.setState({\r\n                isBackgroundColorSettingsOpen: !this.state.isBackgroundColorSettingsOpen,\r\n              })\r\n              if (!newColorUnselected) this.syncUserSettings()\r\n            }}\r\n            style={[styles.settingsRow, {backgroundColor: isColorButtonPressed ? 'rgba(0,0,0,0.2)' : null }]}\r\n            >\r\n              <View style={{flexDirection: 'row', alignItems: 'center'} }>\r\n                <Icon name='color-palette-outline' height={30} width={30} fill='white' style={{marginRight: 0}} />\r\n                <Text style={[styles.h2, {marginLeft: 10}]}>Tema</Text>\r\n              </View>\r\n              <View style={{flexDirection: 'row', alignItems: 'center'} }>\r\n                {/* <View style={{ width: 25, height: 25, borderRadius: 6, marginRight: 15, backgroundColor: this.props.appState.user.settings.backgroundColor }} /> */}\r\n                <Icon\r\n                width={30} height={30}\r\n                name={this.state.isBackgroundColorSettingsOpen ? 'arrow-ios-upward-outline' : 'arrow-ios-downward-outline' }\r\n                fill={this.state.isBackgroundColorSettingsOpen ? 'rgba(255,255,255,1)' : 'rgba(255,255,255,0.5)' } />\r\n              </View>\r\n            </Pressable>\r\n\r\n\r\n            { this.state.isBackgroundColorSettingsOpen ? (\r\n              <>\r\n                <ScrollView style={styles.colorBox}>\r\n                  { colorList.map(color => {\r\n                    return (\r\n                      <this.ColorRow color={color} key={'color-' + color} />\r\n                    )\r\n                  })}\r\n                </ScrollView>\r\n\r\n                <View style={[styles.settingsRow, {justifyContent: 'space-between'}]}>\r\n                  <View style={{flexDirection: 'row', alignItems: 'center', justifyContent: 'flex-start'}}>\r\n                      { this.state.displayImage & !newColorUnselected ? (\r\n                        <>\r\n                          <View style={[styles.colorSquare, {\r\n                            backgroundColor: this.state.selectedColor,\r\n                          }]}\r\n                          />\r\n                          <Text style={[styles.h4, {marginLeft: 20}]}>Tema selecionado</Text>\r\n                        </>\r\n                      ) : null }\r\n                  </View>\r\n\r\n                  <Pressable\r\n                  disabled={this.state.isSaveColorLoading | newColorUnselected}\r\n                  onPress={() => {\r\n                    this.onSaveColorButtonPress()\r\n                  }}\r\n                  style={{ justifyContent: 'center', alignItems: 'center' }}\r\n                  >\r\n                    <Text style={[styles.h2, {width: 63, textAlign: 'center', color: newColorUnselected ? 'rgba(255,255,255,0.5)' : 'white'}]}>\r\n                      { this.state.isSaveColorLoading ? <ActivityIndicator color='white' /> : 'Aplicar' }\r\n                      </Text>\r\n                    \r\n                  </Pressable>\r\n                </View>\r\n              </>\r\n            ) : (\r\n              null\r\n            )}\r\n          </>\r\n    )\r\n  }\r\n\r\n  async onDisplayBackgroundImageSwitch() {\r\n       // fetch post display background image value to user settings in server\r\n       try {\r\n        console.log('POST DISPLAY BACKGROUND IMAGE STATUS: Started...')\r\n        this.setState({ isDisplayBackgroundImageLoading: true });\r\n        const displaySetting = {\r\n          displayBackgroundImage: !this.props.appState.user.settings.displayBackgroundImage\r\n        }\r\n        var postDisplayResult = {ok: false, status: '999', statusText: 'Post not fetched yet.'}\r\n        const postDisplaySettingOpts = { \r\n          method: 'POST',\r\n          headers: {\r\n              'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify( displaySetting ),\r\n        }\r\n        // var postDisplayResult = await fetch('http://localhost:3000/Users/' + this.context.username + '/settings', postColorSettingOpts);\r\n        postDisplayResult = await fetch( `${corsURI + appServerURI}Users/${this.props.appState.user.username}/settings`, postDisplaySettingOpts);\r\n        const postDisplayStatus = 'Status: ' + postDisplayResult.status + ', ' + postDisplayResult.statusText\r\n  \r\n        if (postDisplayResult.ok) {\r\n          console.log('POST DISPLAY BACKGROUND IMAGE STATUS: Successful.')\r\n          console.log(postDisplayStatus)\r\n              \r\n        } else {\r\n          console.log('POST DISPLAY BACKGROUND IMAGE STATUS: Failed. Throwing error...')\r\n          throw new Error(postDisplayStatus)\r\n        }\r\n  \r\n      } catch (error) {\r\n        alert('Erro no servidor. Tente novamente...')\r\n        console.log('Erro capturado:')\r\n        console.log(error);\r\n  \r\n      } finally {\r\n        console.log('POST DISPLAY BACKGROUND IMAGE STATUS: Finished.')\r\n        if (postDisplayResult.ok) {\r\n          // sync user data with app or entries component\r\n          await this.props.route.params.syncUserData()\r\n          // initialize settings\r\n          // this.syncUserSettings()\r\n        }\r\n        this.setState({ isDisplayBackgroundImageLoading: false });\r\n      } \r\n  \r\n  }\r\n\r\n  async onSaveColorButtonPress() {\r\n    // fetch post selected color to user settings in server\r\n    try {\r\n      console.log('POST COLOR STATUS: Started...')\r\n      this.setState({ isSaveColorLoading: true });\r\n      const colorSetting = {\r\n        backgroundColor: this.state.selectedColor\r\n      }\r\n      var postColorResult = {ok: false, status: '999', statusText: 'Post not fetched yet.'}\r\n      const postColorSettingOpts = { \r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify( colorSetting ),\r\n      }\r\n      // var postColorResult = await fetch('http://localhost:3000/Users/' + this.context.username + '/settings', postColorSettingOpts);\r\n      postColorResult = await fetch( `${corsURI + appServerURI}Users/${this.props.appState.user.username}/settings`, postColorSettingOpts);\r\n      const postColorStatus = 'Status: ' + postColorResult.status + ', ' + postColorResult.statusText\r\n\r\n      if (postColorResult.ok) {\r\n        console.log('POST COLOR STATUS: Successful.')\r\n        console.log(postColorStatus)\r\n            \r\n      } else {\r\n        console.log('POST COLOR STATUS: Failed. Throwing error...')\r\n        throw new Error(postColorStatus)\r\n      }\r\n\r\n    } catch (error) {\r\n      alert('Erro no servidor. Tente novamente...')\r\n      console.log('Erro capturado:')\r\n      console.log(error);\r\n\r\n    } finally {\r\n      console.log('POST COLOR STATUS: Finished.')\r\n      if (postColorResult.ok) {\r\n        // sync user data with app or entries component\r\n        await this.props.route.params.syncUserData()\r\n        // initialize settings\r\n        this.syncUserSettings()\r\n        this.setState({\r\n          isBackgroundColorSettingsOpen: !this.state.isBackgroundColorSettingsOpen,\r\n        })\r\n      }\r\n      this.setState({ isSaveColorLoading: false });\r\n    } \r\n  }\r\n\r\n  render() {\r\n    console.log('Rendering \"SettingsScreen\" component...')\r\n    return (\r\n      <this.SettingsScreen />\r\n    );  \r\n  }\r\n}\r\n","import { createContext } from 'react';\r\n\r\nconst UserContext = createContext();\r\n\r\nexport default UserContext","import React, { Component } from 'react';\r\nimport { Image, FlatList, View, Text, SafeAreaView, Pressable, StatusBar, ActivityIndicator, Dimensions, ImageBackground } from 'react-native';\r\nimport { capitalize } from './subcomponents/EditEmotions';\r\n\r\nconst unsplash_APIKEY = '5fRBt7AhEBCWmlgXrHd-k6RYsEq0t4aJGy5kxkCofDQ' \r\nconst unsplashUrl = 'https://api.unsplash.com/'\r\n\r\nconst window = Dimensions.get('window')\r\nconst windowWidth = window.width;\r\nconst windowHeight = window.height;\r\nconst screenHeight = windowHeight + StatusBar.currentHeight\r\n\r\nfunction formatTopicName(name){\r\n  return capitalize(name.split('-').join(' '))\r\n}\r\n\r\nconst styles = {\r\n  header: {\r\n    position: 'absolute',\r\n    top: 0,\r\n    paddingTop: StatusBar.currentHeight,\r\n    width: windowWidth,\r\n    height: '20%',\r\n    backgroundColor: 'rgba(255,255,255,0.5)',\r\n    justifyContent: 'space-evenly',\r\n    alignItems: 'center'\r\n  },\r\n  h1: {\r\n    fontSize: 24,\r\n    alignSelf: 'center',\r\n    // borderWidth: 1\r\n  },\r\n  headerLabel: {\r\n    // borderWidth: 1,\r\n    width: 200,\r\n    fontSize: 20,\r\n    alignSelf: 'center',\r\n    textAlign: 'center',\r\n  },\r\n  status: {\r\n    backgroundColor: 'rgb(230,230,230)',\r\n    width: '100%',\r\n    height: '20%',\r\n    borderRadius: 20,\r\n    alignItems: 'center',\r\n    justifyContent: 'center'\r\n  },\r\n  statusText: {\r\n    fontSize: 18,\r\n    color: 'black'\r\n  },\r\n  photosView: {\r\n    height: screenHeight,\r\n  },\r\n  imagePressable: {\r\n    width: windowWidth/2,\r\n    height: (screenHeight)/2,\r\n  },\r\n  image: {\r\n    width: '100%',\r\n    height: '100%',\r\n    alignItems: 'center',\r\n    justifyContent: 'center'\r\n  },\r\n}\r\n\r\nconst Item = (props) => {\r\n  const topicsScreen = props.route.name == 'WallpaperTopics'\r\n  const nextScreenName = topicsScreen ? 'Wallpapers' : 'WallpaperZoom'\r\n  const photoURI = topicsScreen ? props.item.cover_photo.urls.regular : props.item.urls.regular\r\n  return(\r\n    <Pressable\r\n      onPress={() => props.navigation.navigate( nextScreenName , { selectedImage: props.item })}\r\n      style={[styles.imagePressable, {height: props.route.params.photoHeight}]}\r\n    >\r\n      <ImageBackground source={{ uri:  photoURI }} style={styles.image} >\r\n        <Text style={[styles.h1, {width: '70%', color: 'white', textAlign: 'center'}]}>{ topicsScreen ? formatTopicName(props.item.slug) : '' }</Text>\r\n      </ImageBackground>\r\n    </Pressable>\r\n  )\r\n};\r\n\r\nasync function getUnsplash(unsplashParams) {\r\n\r\n  console.log('UNSPLASH GET PHOTOS STATUS: STARTED...')\r\n  const { endpoint, page, per_page, order_by } = unsplashParams\r\n  const reqParams = {\r\n    method: 'GET',\r\n    headers: {\r\n      // 'Accept-Version': 'v1',\r\n      // 'Authorization': `Client-ID ${unsplash_APIKEY}`\r\n    }\r\n  }\r\n  const url = `${unsplashUrl + endpoint}?page=${page}&per_page=${per_page}&order_by=${order_by}&client_id=${unsplash_APIKEY}`\r\n  var result, result_json, success\r\n  try {\r\n    result = await fetch(url, reqParams)\r\n    if (result.ok) {\r\n\r\n      console.log(`UNSPLASH PHOTOS STATUS: FETCH SUCCESSFULL...`)\r\n      console.log(`UNSPLASH PHOTOS STATUS:\\n  x-ratelimit-limit: ${result.headers.map['x-ratelimit-limit']}\\n  x-ratelimit-remaining: ${result.headers.map['x-ratelimit-remaining']}`)\r\n      result_json = await result.json()\r\n      success = result_json.length\r\n      if (success) {\r\n        console.log(`UNSPLASH PHOTOS STATUS: JSON RESULT SUCCESSFULL. RETRIEVED ${success} PHOTOS...`)\r\n\r\n      } else {\r\n        console.log(`UNSPLASH PHOTOS STATUS: JSON RESULT FAILED. Logging json value...`)\r\n        console.log(result_json)\r\n      }\r\n    } else {\r\n      console.log(`UNSPLASH GET PHOTOS STATUS: FETCH FAILED. Status code: ${result.status}, Text: ${result.statusText}..`)\r\n    }\r\n  } catch (error) {\r\n    console.log('UNSPLASH GET PHOTOS STATUS: ERROR CATCHED. LOGGING ERROR...')\r\n    console.log(error)\r\n\r\n  } finally {\r\n    if (success) {\r\n      return result_json\r\n    } else return null\r\n  }\r\n}\r\n\r\nexport class WallpapersComponent extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state={\r\n      photos: null,\r\n      isPhotosLoading: false,\r\n      isHeaderShown: true,\r\n    };\r\n    this.getUnsplashAsync = this.getUnsplashAsync.bind(this);\r\n    this.HeaderText = this.HeaderText.bind(this);\r\n    this.WallpaperListHeader = this.WallpaperListHeader.bind(this);\r\n    this.renderItem = this.renderItem.bind(this);\r\n    this.PhotoList = this.PhotoList.bind(this); \r\n  }\r\n\r\n  componentDidMount() {\r\n    console.log('\"Wallpapers\" component did mount...')\r\n    this.getUnsplashAsync()\r\n  }\r\n\r\n  async getUnsplashAsync() {\r\n    this.setState({isPhotosLoading: true})\r\n    let route = this.props.route\r\n    if (this.props.route.name=='WallpaperTopics') {\r\n      console.log('WALLPAPER COMPONENT TYPE: WallpaperTopics')\r\n      this.setState({photos: route.params.photoList}) \r\n\r\n    } else {\r\n      let unsplashParams = {\r\n        endpoint: `topics/${route.params.selectedImage.id}/photos`,\r\n        page: 1, per_page: 30, order_by: 'popular', orientation: 'portrait'\r\n      }\r\n      let asyncResult = await getUnsplash(unsplashParams)\r\n      this.setState({photos: asyncResult, isPhotosLoading: false}) \r\n    }\r\n    this.setState({isPhotosLoading: false}) \r\n  }  \r\n\r\n  HeaderText () {\r\n    const topicsScreen = this.props.route.name=='WallpaperTopics'\r\n    return(\r\n      this.state.isPhotosLoading ? (\r\n        <ActivityIndicator size='large' color='black' />\r\n      ) : (\r\n        this.state.photos ? (\r\n          <>\r\n            { !topicsScreen ? <Text style={[styles.h1]}>{ formatTopicName(this.props.route.params.selectedImage.slug) }</Text> : null }\r\n            <Text style={[styles.headerLabel, {fontSize: topicsScreen ? 24 : 20 }]}>{ this.props.route.params.headerText }</Text>\r\n          </>\r\n        ) : (\r\n          <Text style={styles.headerLabel}>Erro ao carregar imagems...</Text>\r\n        )\r\n      )\r\n    )\r\n  }\r\n  \r\n  WallpaperListHeader () {\r\n    const hide = !this.state.isHeaderShown\r\n    return(\r\n      <Pressable\r\n      style={[styles.header, { height: hide ? 0 : styles.header.height }]}\r\n      onPress={() => {this.setState({ isHeaderShown: false }); console.log('close button clicked...')}}\r\n      >\r\n        <this.HeaderText />\r\n      </Pressable>\r\n    )\r\n  }\r\n\r\n  renderItem = ({ item }) => (\r\n    <Item item={item} {...this.props} />\r\n  );\r\n\r\n  PhotoList = () => (\r\n    <FlatList\r\n      data={this.state.photos}\r\n      renderItem={this.renderItem}\r\n      keyExtractor={item => item.id}\r\n      numColumns={2}\r\n      />\r\n  )\r\n\r\n  render() {\r\n    return (\r\n        <SafeAreaView style={styles.photosView}>\r\n          <this.PhotoList />\r\n          <this.WallpaperListHeader />\r\n        </SafeAreaView>\r\n    );  \r\n  }\r\n\r\n}","import React, { useContext } from 'react';\r\nimport { View, Text, ImageBackground, Pressable, ActivityIndicator } from 'react-native';\r\nimport UserContext from '../shared/UserContext';\r\n\r\n// cors-midpoint uri (needed to avoid cors' allow-cross-origin error when fetching in web platforms)\r\nconst corsURI = Platform.OS == 'web' ? 'https://morning-journey-78874.herokuapp.com/' : ''\r\nconst appServerURI = 'https://mood-tracker-server.herokuapp.com/'\r\n\r\nexport function WallpaperZoom(props) {\r\n\r\n  const appState = useContext(UserContext);\r\n  const [isSaveImageLoading, setIsSaveImageLoading] = React.useState(false);\r\n\r\n  async function onSaveImageButtonPress() {\r\n    // fetch post selected color to user settings in server\r\n    try {\r\n      console.log('POST IMAGE STATUS: Started...');\r\n      setIsSaveImageLoading(true);\r\n      const imageSetting = {\r\n        backgroundImage: props.route.params.selectedImage\r\n      };\r\n      var postImageResult = { ok: false, status: '999', statusText: 'Post not fetched yet.' };\r\n      const postImageSettingOpts = {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(imageSetting),\r\n      };\r\n      // var postColorResult = await fetch('http://localhost:3000/Users/' + this.context.username + '/settings', postColorSettingOpts);\r\n      postImageResult = await fetch(`${corsURI + appServerURI}Users/${appState.user.username}/settings`, postImageSettingOpts);\r\n      const postColorStatus = 'Status: ' + postImageResult.status + ', ' + postImageResult.statusText;\r\n\r\n      if (postImageResult.ok) {\r\n        console.log('POST IMAGE STATUS: Successful.');\r\n        console.log(postColorStatus);\r\n\r\n      } else {\r\n        console.log('POST IMAGE STATUS: Failed. Throwing error...');\r\n        throw new Error(postColorStatus);\r\n      }\r\n\r\n    } catch (error) {\r\n      alert('Erro no servidor. Tente novamente...');\r\n      console.log('Erro capturado:');\r\n      console.log(error);\r\n\r\n    } finally {\r\n      console.log('POST IMAGE STATUS: Finished.');\r\n      setIsSaveImageLoading(false);\r\n      if (postImageResult.ok) {\r\n        // sync user data with app or entries component\r\n        await props.route.params.syncUserData();\r\n        // navigate back to settings\r\n        props.navigation.navigate('Settings');\r\n      }\r\n    }\r\n  }\r\n\r\n  console.log('Returning \"WallpaperZoom\" component...')\r\n\r\n  return (\r\n    <ImageBackground\r\n      source={{ uri: props.route.params.selectedImage.urls.regular }}\r\n      style={{ flex: 1 }}\r\n    >\r\n      <View style={{ position: 'absolute', width: '100%', height: null, bottom: 75, flexDirection: 'row', justifyContent: 'space-evenly', alignItems: 'center' }}>\r\n        <Pressable\r\n          onPress={() => props.navigation.goBack()}\r\n          style={{ width: '35%', height: 40, borderRadius: 20, backgroundColor: '#f4f3f4', alignItems: 'center', justifyContent: 'center' }}\r\n        >\r\n          <Text style={{ fontSize: 17, fontWeight: 'bold' }}>Voltar</Text>\r\n        </Pressable>\r\n        <Pressable\r\n          onPress={onSaveImageButtonPress}\r\n          style={{ width: '35%', height: 40, borderRadius: 20, backgroundColor: '#f4f3f4', alignItems: 'center', justifyContent: 'center' }}\r\n        >\r\n          {isSaveImageLoading ? (\r\n            <ActivityIndicator color='black' />\r\n          ) : (\r\n            <Text style={{ fontSize: 17, fontWeight: 'bold' }}>Aplicar</Text>\r\n          )}\r\n        </Pressable>\r\n      </View>\r\n    </ImageBackground>\r\n  );\r\n}\r\n","import React, { Component, createContext, useContext } from 'react';\nimport { Dimensions, StatusBar } from 'react-native'; \nimport { Icon } from 'react-native-eva-icons'\n// import AsyncStorage from '@react-native-async-storage/async-storage';\nimport { LinearGradient } from 'expo-linear-gradient';\n\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\n//import { createDrawerNavigator } from '@react-navigation/drawer';\n\nimport EntrancesScreen from './components/EntrancesComponent';\nimport PostEntranceScreen from './components/PostEntryComponent';\nimport LoginScreen from './components/LoginComponent'\nimport SettingsScreen from './components/SettingsScreen';\nimport UserContext from './shared/UserContext';\nimport { WallpapersComponent } from './components/WallpapersComponent';\nimport { WallpaperZoom } from './components/WallpaperZoomComponent';\n\n// cors-midpoint uri (needed to avoid cors' allow-cross-origin error when fetching in web platforms)\nconst corsURI = Platform.OS == 'web' ? 'https://morning-journey-78874.herokuapp.com/' : ''\nconst appServerURI = 'https://mood-tracker-server.herokuapp.com/'\n\nconst unsplashTopics = require('./shared/unsplashTopics.json')\n\nconst window = Dimensions.get('window')\nconst windowHeight = window.height;\nconst screenHeight = windowHeight + StatusBar.currentHeight\n\n\nconst SettingsScreenProvider = (props) => {\n  const appState = useContext(UserContext)\n  return(\n    <SettingsScreen  appState={appState} {...props} />\n  )\n}\n\nconst EntrancesScreenProvider = (props) => {\n  const appState = useContext(UserContext)\n  return(\n    <EntrancesScreen  appState={appState} {...props} />\n  )\n}\n\nconst PostEntranceScreenProvider = (props) => {\n  const appState = useContext(UserContext)\n  return(\n    <PostEntranceScreen  appState={appState} {...props} />\n  )\n}\n  \nconst Stack = createNativeStackNavigator();\nconst Tab = createBottomTabNavigator();\n\nfunction tabBarIcon(iconName) {\n  const iconFunc = ({ focused, color, size }) => {\n    let newIconName = focused\n    ? iconName + '-outline'\n    : iconName + '-outline';\n    return <Icon name={newIconName} width={size} height={size} fill={ focused ? 'rgba(0,0,0,1)' : 'rgba(0,0,0,0.6)' } />\n  }\n  return iconFunc\n}\n\nconst HomeTab = (props) => {\n\n  const appState = useContext(UserContext)\n\n  const mainScreenOptions = ({ route }) => ({\n    headerShown: false,\n    tabBarShowLabel: false,\n    tabBarHideOnKeyboard: true,\n    tabBarBackground: () => (\n      <LinearGradient\n        colors={['#f4f3f4', route.name=='Settings' ? route.params.selectedColor : appState.user.settings.backgroundColor, '#f4f3f4']}\n        start={[route.name=='Entrances' ? -0.5 : 1.5, 1]}\n        end={[route.name=='Entrances' ? 1 : 0, 1]}\n        location={[0, 0.5, 1]}\n        style={{flex: 1}}\n      />\n    ),\n  })\n\n  return(\n    <Tab.Navigator\n    initialRouteName='Entrances'\n    screenOptions={mainScreenOptions}\n    >\n      <Tab.Screen\n      name=\"Entrances\"\n      component={EntrancesScreenProvider}\n      initialParams={{\n        // user: props.route.params.user,\n        getAppState: props.route.params.getAppState,\n        setAppState: props.route.params.setAppState,\n        syncUserData: props.route.params.syncUserData,\n      }}\n      options={{\n        tabBarIcon: tabBarIcon('inbox')\n      }}\n      />\n      <Tab.Screen\n      name=\"Settings\"\n      component={SettingsScreenProvider}\n      initialParams={{\n        // user: props.route.params.user,\n        logout: props.route.params.logout,\n        getAppState: props.route.params.getAppState,\n        setAppState: props.route.params.setAppState,\n        syncUserData: props.route.params.syncUserData,\n      }}\n      options={{\n        tabBarIcon: tabBarIcon('settings-2')\n      }}\n      />\n    </Tab.Navigator>    \n  )\n}\n\nconst HomeStack = (props) => {\n\n  console.log('Returning \"HomeScreen\" component...')\n  return(\n    <Stack.Navigator \n    initialRouteName='Home'\n    screenOptions={{\n      headerShown: false,\n    }}\n    >\n      <Stack.Screen\n      name=\"Home\"\n      component={HomeTab}\n      initialParams={{\n        // user: props.user,\n        logout: props.logout,\n        getAppState: props.getAppState,\n        setAppState: props.setAppState,\n        syncUserData: props.syncUserData,\n      }}\n      // options={{title: 'Suas entradas'}}\n      />\n      <Stack.Screen\n      name=\"PostEntrance\"\n      component={PostEntranceScreenProvider}\n      initialParams={{\n        // user: props.user,\n        getAppState: props.getAppState,\n        setAppState: props.setAppState,\n        syncUserData: props.syncUserData,\n      }}\n      // options={{title: 'Adicione uma  entrada'}}\n      />\n      <Stack.Screen\n      name=\"WallpaperTopics\"\n      component={WallpapersComponent}\n      initialParams={{\n        photoList: unsplashTopics,\n        // getUnsplashParams: {},\n        headerText: 'Tópicos',\n        photoHeight: screenHeight/4,\n        getAppState: props.getAppState,\n        setAppState: props.setAppState,\n        syncUserData: props.syncUserData\n      }}\n      />\n      <Stack.Screen\n      name=\"Wallpapers\"\n      component={WallpapersComponent}\n      initialParams={{\n        photoList: [],\n        // unsplashParams: {}, //{endpoint: 'photos', page: 1, per_page: 30, order_by: 'popular', orientation: 'portrait'},\n        headerText: 'Clique em uma imagem para ampliar',\n        photoHeight: screenHeight/2,\n        getAppState: props.getAppState,\n        setAppState: props.setAppState,\n        syncUserData: props.syncUserData\n      }}\n      />\n      <Stack.Screen\n      name=\"WallpaperZoom\"\n      component={WallpaperZoom}\n      initialParams={{\n        getAppState: props.getAppState,\n        setAppState: props.setAppState,\n        syncUserData: props.syncUserData,\n      }}\n      />\n    </Stack.Navigator>\n  )  \n}\n\n// export const UserContext = createContext();\n\nexport default class App extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isUserAuth: false,\n      user: null,\n      isUserDataSyncing: false,\n      // userDataSynced: false\n    };\n\n    this.logout = this.logout.bind(this);\n    this.getAppState = this.getAppState.bind(this);\n    this.syncUserData = this.syncUserData.bind(this);\n  }\n\n  logout() {\n    console.log('User logged out. Navigating to \"LoginScreen\"...')\n    this.setState({isUserAuth: false, user: null})\n  }\n\n  getAppState() {\n    return this.state\n  }\n\n  async syncUserData() {\n\n    console.log('SYNC USER DATA STATUS: Started...')\n    this.setState({ isUserDataSyncing: true });\n\n    try {\n\n        var UsersResult = await fetch( corsURI + appServerURI + 'Users', { method: 'GET' });\n        const usersStatus =  'Status: ' + UsersResult.status + ', ' + UsersResult.statusText\n\n        if (UsersResult.ok) {\n            const users = await UsersResult.json();\n            const user = users.filter((user) => user.email === this.state.user.email)[0]\n            console.log('fetch GET request for user DATA successful.')\n            console.log(usersStatus)\n            console.log('SYNC USER DATA STATUS: Successful.')\n            this.setState({user: user})\n\n        } else {\n            console.log( new Error('\"fetch\" GET request for user DATA failed. Throwing error...') )\n            throw new Error(usersStatus)\n        }\n\n    } catch (error) {\n            console.log('SYNC USER DATA STATUS: Error captured. Printing error...')\n            console.log(error);\n            alert('Não foi possível sincronizar as entradas. Por favor, aguarde..')\n\n    } finally {\n        this.setState({ isUserDataSyncing: false });\n        console.log('SYNC USER DATA STATUS: Finished.')\n    }    \n}\n\n  render() {\n  \n\n    if (!this.state.isUserAuth) {\n      return <LoginScreen\n      user={this.state.user}\n      getAppState={this.getAppState}\n      setAppState={this.setState.bind(this)}\n      />\n\n    } else {\n      return (\n\n    <UserContext.Provider value={this.state}>\n        <NavigationContainer>\n          <HomeStack\n          user={this.state.user}\n          logout={this.logout}\n          getAppState={this.getAppState}\n          setAppState={this.setState.bind(this)}\n          syncUserData={this.syncUserData}\n          />\n        </NavigationContainer>    \n    </UserContext.Provider>\n\n        // <NavigationContainer>\n        //   <HomeScreen user={this.state.user} />\n        // </NavigationContainer>\n      );  \n    }\n  }\n}","// Emotion configs\r\nconst emotionGroupsNames = [ 'Bem & Calmo', 'Bem & Energizado', 'Mal & Calmo', 'Mal & Energizado' ]\r\nconst goodEnergizedEmotions = ['Animação', 'Concentração', 'Desinibição', 'Motivação', 'Euforia']\r\nconst goodCalmEmotions = ['Alívio', 'Calma', 'Conforto', 'Despreocupação', 'Inspiração', 'Orgulho', 'Paz', 'Relaxamento', 'Satisfação', 'Segurança', 'Criatividade']\r\nconst badEnergizedEmotions = ['Inquietação', 'Ansiedade', 'Desespero', 'Frustração', 'Insatisfação', 'Irritação', 'Medo', 'Vergonha', 'Preocupação', 'Impaciência', 'Sobrecarregado(a)', 'Tensão']\r\nconst badCalmEmotions = ['Depressão', 'Timidez', 'Cansaço', 'Tristeza','Confusão', 'Desanimo', 'Insegurança', 'Solidão', 'Tédio']\r\n// const badEnergizedEmotions = ['Agitação', 'Ansiedade', 'Tristeza', 'Decepção', 'Depressão', 'Desespero', 'Frustração', 'Insatisfação', 'Irritação', 'Medo', 'Paranoia', 'Preocupação', 'Impaciencia', 'Raiva', 'Revolta', 'Sobrecarregado(a)', 'Tensão', 'Nojo']\r\n\r\nconst emotionGroups = [ goodCalmEmotions.sort(), goodEnergizedEmotions.sort(), badCalmEmotions.sort(), badEnergizedEmotions.sort() ]\r\nconst basicEmotions = [ ...emotionGroups[0], ...emotionGroups[1], ...emotionGroups[2], ...emotionGroups[3] ]\r\n\r\nconst emotionTypes = ['Positiva', 'Negativa']\r\nconst emotionEnergy = ['Calmo(a)', 'Energizado(a)']\r\n\r\nvar defaultEmotions = []\r\nvar type, energy\r\n\r\nfor (let emotion of basicEmotions) {\r\n    type = emotionGroups[0].includes(emotion) || emotionGroups[1].includes(emotion) ? emotionTypes[0] : emotionTypes[1]\r\n    energy = emotionGroups[0].includes(emotion) || emotionGroups[2].includes(emotion) ? emotionEnergy[0] : emotionEnergy[1]\r\n    defaultEmotions.push({name: emotion, type: type, energy: energy})\r\n}\r\n\r\n// console.log(defaultEmotions);\r\n\r\nmodule.exports = defaultEmotions;"],"sourceRoot":""}