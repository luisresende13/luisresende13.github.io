{"version":3,"sources":["assets/wallpaper.png","styles/loginStyles.js","styles/entrancesStyles.js","components/subcomponents/UserEntryCards.js","shared/dateRange.js","components/EntrancesComponent.js","styles/postEntryStyles.js","components/subcomponents/EditEmotions.js","components/subcomponents/GoogleMapsAPI.js","components/PostEntryComponent.js","components/LoginComponent.js","components/SettingsScreen.js","components/WallpapersComponent.js","shared/UserContext.js","components/WallpaperZoomComponent.js","components/victory.ts","shared/dates.js","components/Charts.js","App.js","shared/emotionsConfig.js"],"names":["module","exports","isWindowsBroswer","Platform","OS","Device","screenWidth","Dimensions","get","width","screenHeight","height","relativeToScreen","size","axis","styles","login","mainView","flex","justifyContent","alignItems","titleView","flexDirection","minHeight","marginTop","StatusBar","currentHeight","title","textAlign","fontSize","fontWeight","color","alignSelf","titleIcon","marginLeft","paddingTop","card","paddingHorizontal","paddingVertical","borderWidth","borderRadius","borderColor","backgroundColor","cardHeader","cardTitle","position","left","cardSection","loadingIcon","inputField","paddingLeft","button","buttonLabel","text","msgBox","marginBottom","msg","postButton","bottom","postButtonLabel","scrollView","section","borderBottomWidth","sectionTitle","cardRow","moodBadge","textAlignVertical","moodHeaderItem","emotionBadge","marginRight","textBadge","paddingBottom","lineHeight","spaceBetween","icon","entryIcon","paddingRight","editButtonsView","editButton","editButtonLabel","theme","altTheme","moodColors","monthDict","MoodHeader","entry","View","style","Text","mood","star","name","fill","weather","Image","source","uri","main","temp","toString","slice","startTime","Address","useState","isCollapsed","setIsCollapsed","address","numberOfLines","onPress","top","Emotions","emotions","length","flexWrap","PaddingBottom","map","emotion","index","Jornal","jornal","EmptyCard","props","navigateParams","currentEntry","type","parentState","selectedDate","now","Date","split","join","Today","date","textStyle","Pressable","parentProps","navigation","navigate","CardsLoadingMessage","UserEntryCards","state","EntryCard","bind","EditEntryButtons","editUserEntry","deleteUserEntry","setFontColor","console","log","this","setParams","selectedEntryId","_id","entryId","selDateEntries","user","entries","filter","reverse","isUserDataSyncing","onButtonPress","setAlertMsg","onButtonLongPress","isButtonPressed","setIsButtonPressed","highlightButtonFor","label","isLoading","isDeleteLoading","selectable","disabled","onPressIn","onLongPress","ActivityIndicator","selectedEntry","a","async","setMainScreenState","isDeleteEntryLoading","UsersResult","ok","status","deleteEntryURI","appServerURI","username","fetch","method","usersStatus","statusText","Error","syncUserData","fontColorDark","settings","fontColor","altFontColor","UserEntryCardsList","Component","dateRange","englishMonthSigs","portugueseMonthSigs","englishWeekDayMap","getNextDate","next","nextDate","indexOf","formatDate","selDate","ymd","yesterday","englishWeekDay","weekDay","prefix","i","oneDigit","stringNumber","EntrancesScreen","DateNavigationButton","onNextButtonPress","hitSlop","time","alertMsg","getMainScreenState","setState","setTimeout","setSelectedDate","route","params","appState","backgroundImage","imgURI","displayBackgroundImage","enableHighResolution","urls","raw","regular","ImageBackground","ScrollView","entrances","content","flexGrow","entryTitle","moodButton","jornalText","saveButton","borderTopLeftRadius","borderTopRightRadius","saveButtonLabel","marginVertical","marginHorizontal","entryCardEmotionBadge","datetimeTitle","capitalize","multipleWordString","words","trim","CapitalizedWords","forEach","element","push","toUpperCase","EditEmotions","showEditMenu","showExpandMenuButton","mode","newEmotionName","selectedEmotionType","selectedEmotionEnergy","initialEmotionLayout","EditEmotionsMenu","EditEmotionsSection","onSaveEmotionButtonPress","emotionLayoutMap","inputSectionStyle","inputStyle","tagStyle","createEmotionViewStyle","borderTopWidth","borderTopColor","isDeleteEmotionLoading","isSaveEmotionLoading","isPostEntryLoading","isUpdateUserDataLoading","isNewEmotionFormComplete","TextInput","placeholder","placeholderTextColor","onChangeText","value","typeSelected","setParentState","deleteEmotionMode","layout","isLayoutSelected","selectedEmotionLayout","onSaveEmotionLayoutButtonPress","hidden","anyOpen","Object","keys","isSelectedEmotions","includes","newEmotion","energy","postEmotionResult","postUserEntryOpts","headers","body","JSON","stringify","postEmotionStatus","updateUserData","isSaveEmotionLayoutLoading","postEmotionLayoutResult","postEmotionLayoutOpts","postEmotionLayoutStatus","GoogleMapsAPI","GoogleMapsJavascriptAPIkey","GoogleMapsGeocodingAPIKey","Location","moods","moodColorsHEX","moodColorsRGBA","moodIcons","emotionGroupsNames","emotionTypes","emotionEnergy","buildIsSelectedEmotions","monthSigs","months","monthNameMap","monthSig","getTime","formatPostEntryDatetimeTitle","m","PostEntranceScreen","endTime","createdAt","lastEdited","selectedMood","jornalEntry","location","isMoodUnmarked","isFetchingLocationOrWeather","locationPermission","userCoordinates","loginMsg","initializeEntry","onSaveButtonPress","setLoginMsg","EmotionButtons","MoodButtons","postEntryHeader","onEmotionButtonPress","onMoodButtonPress","inputCardBody","setSelectedEntry","InputCard","JornalInput","postNewEntryAsync","deleteEmotion","onEmotionButtonLongPress","goBack","item","alpha","selected","selColor","selectMood","objList","objKey","obj","sortedKeys","sort","newObjList","key","sortObjListByKey","suppressHighlighting","selectEmotion","multiline","scrollEnabled","sectionName","cardBodyStyle","cardBodyContent","userEmotionGroups","emotionLabels","mapEmotions","setSelected","checkIfLocationEnabled","getCurrentLocation","fetchWeather","currentEmotions","isSelectedEmotionsNew","oldEmotions","newEmotionsSelected","isDataLoading","newEntryPost","newEntry","editMode","postUserEntryResult","postUserEntryStatus","coords","queryParams","lat","latitude","lon","longitude","units","fetchOptions","response","resStatus","json","weatherInfo","coord","clouds","wind","visibility","addr","street","streetNumber","district","subregion","region","isoCountryCode","require","userScheme","falseParams","validateEmail","email","emailStatus","emailAddress","param","apiResp","apiRespJson","formatCheck","smtpCheck","registerLocallyIfUserIsNewToDevice","AsyncStorage","getItem","localAuthInfo","parse","users","localUser","updatedLocalAuthInfo","password","setItem","keepUserConnectionAlive","id","keepConnected","userId","LoginScreen","textContentType","autoComplete","importantForAutofill","userInfo","secureTextEntry","submitButton","Switch","trackColor","false","true","thumbColor","ios_backgroundColor","onValueChange","LoginIcon","isUserAuth","onSignIn","onSignUp","restoreUserToken","animation","textField","setField","sign","signIn","errMsg","NetInfo","then","DEVICE_IP_ADDRESS","details","ipAddress","initialLocalAuthInfo","IP_ADDRESS","deviceBrand","deviceManufacturer","deviceModelName","deviceModelId","deviceOsName","deviceOsVersion","deviceName","deviceType","info","isInputEmpty","UsersStatus","Users","setAppState","postUserResult","emailValidation","reqStatus","passwordCheck","postUserOpts","postUserStatus","successMsg","colorList","background","foreground","header","settingsRow","colorBox","colorRow","colorSquare","logout","h1","h2","h3","h4","blinkButton","setPressed","timeSpan","postSettings","postSettingsResult","postSettingsOpts","postSettingsStatus","alert","SettingsScreen","isBackgroundColorSettingsOpen","selectedColor","isDisplayBackgroundImageLoading","isChangeFontColorLoading","isEnableHighResolutionLoading","isRestoreColorLoading","isSaveColorLoading","syncUserSettings","setBackgroundColor","ScreenSettings","ChooseImageSection","DisplayBackgroundImageSection","ChangeFontColorSection","EnableHighResolutionSection","ChangeBackgroundColorSection","ColorOptions","ColorControl","onLogoutButtonPress","onColorButtonPressFor","onSaveColorButtonPress","onChangeFontColorSwitch","ColorRow","logoutPressable","h","React","isChooseImageButtonPressed","setIsChooseImageButtonPressed","isExposeImageButtonPressed","setIsExposeImageButtonPressed","displayBackgroundImageValue","onDisplayBackgroundImageSwitch","isEnableHighResolutionButtonPressed","setIsEnableHighResolutionButtonPressed","enableHighResolutionValue","onEnableHighResolutionSwitch","isChangeFontColorButtonPressed","setIsChangeFontColorButtonPressed","changeFontColorValue","isColorButtonPressed","setIsColorButtonPressed","newColorUnselected","nestedScrollEnabled","isColorRowPressed","setIsColorRowPressed","fontStyle","textDecorationLine","isLogoutButtonPressed","setIsLogoutButtonPressed","logoutColor","newSettings","colorSetting","isWindows","formatTopicName","photosView","headerLabel","image","getUnsplash","endpoint","reqParams","result","result_json","success","Item","topicsScreen","photoURI","cover_photo","nextScreenName","windowHeight","photoHeight","photoWidth","selectedImage","margin","slug","WallpapersComponent","renderItem","PhotoList","useEffect","subscription","addEventListener","window","screen","Math","abs","remove","FlatList","data","photos","keyExtractor","numColumns","initialNumToRender","onEndReached","loadNextPagePhotosAsync","refreshing","isPhotosLoading","page","hideHeader","initializePhotosAsync","WallpapersHeaderText","WallpapersHeader","ControlButtons","per_page","order_by","asyncResult","orientation","prevState","headerText","topRight","right","SafeAreaView","UserContext","createContext","fotter","controlView","attributionView","controlButton","controlButtonLabel","userProfileImage","attributionLabel","maxWidth","attributionURL","openUnsplashURL","Linking","openURL","WallpaperZoom","useContext","isSaveImageLoading","setIsSaveImageLoading","userProfileHtmlLink","imageSetting","profile_image","large","links","html","Victory","getUniqueYears","uniqueYears","year","fullDates","dates","currentYear","currentWeek","newDate","day","getUTCDate","weekday","getUTCDay","week","month","getUTCMonth","getUTCFullYear","Years","FullDates","Weeks","weeks","fullDate","getWeeks","Months","getMonths","fullDateMap","current","period","dateCollections","moodColorsObj","periodButton","chartView","controlRow","statsRowItem","h5","moodMap","ChartPanel","periods","setPeriod","setDate","NavigationRow","Chart","MoodLineCard","MoodPieCard","formatWeek","thisWeek","lastWeek","getNext","isThisWeek","isLastWeek","formatMonth","thisMonth","lastMonth","isThisMonth","isLastMonth","formatPeriodDate","currentIndex","dateCollection","nDates","collDate","lastDateIndex","nextIndex","ChartCard","filters","temporal","setTemporal","interpolation","setInterpolation","x","y","MoodLineTemporal","MoodLine","MoodLineControls","interpolations","temporalClicked","setTemporalClicked","interpolationClicked","setInterpolationClicked","nextInterpolation","time_s","x_domain","x_dif","times","parseInt","b","x_min","x_max","VictoryChart","padding","domain","VictoryAxis","dependentAxis","tickFormat","tick","stroke","grid","tickLabels","tickValues","tickEntry","tickLabelComponent","VictoryLabel","angle","dx","dy","axisLabel","ticks","VictoryLine","strokeWidth","VictoryScatter","datum","moodCount","1","2","3","4","5","moodPieData","MoodPie","MoodPieStats","nEntries","colorScale","row","VictoryPie","innerRadius","padAngle","cornerRadius","labels","MoodStat","moodCountObj","countObj","moodProp","round","Charts","ChartsScreen","linking","prefixes","config","screens","Home","Entrances","Settings","PostEntrance","WallpaperTopics","Wallpapers","loginLinking","Login","LoadingScreen","SettingsScreenProvider","EntrancesScreenProvider","PostEntranceScreenProvider","WallpapersScreenProvider","WallpaperZoomScreenProvider","ChartsScreenProvider","Stack","createNativeStackNavigator","Tab","createBottomTabNavigator","tabBarIcon","iconName","focused","newIconName","HomeTab","Navigator","initialRouteName","screenOptions","headerShown","tabBarShowLabel","tabBarHideOnKeyboard","tabBarBackground","LinearGradient","colors","start","end","Screen","component","initialParams","options","HomeStack","App","getAppState","LoginContainer","ContextProvider","UserResult","userStatus","NavigationContainer","fallback","Provider","emotionGroups","defaultEmotions"],"mappings":"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CA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,c,gbCphBJ,IAAMlH,GAAY,CAAC,IAAO,KAAM,IAAO,KAAM,IAAO,KAAM,IAAO,KAAM,IAAO,KAAM,IAAO,KAAM,IAAO,KAAM,IAAO,KAAM,IAAO,KAAM,IAAO,KAAM,IAAO,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","file":"static/js/app.b1f1f709.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/wallpaper.219bc3cc.png\";","import { StatusBar } from 'expo-status-bar';\r\nimport { Platform, Dimensions } from 'react-native';\r\nimport * as Device from 'expo-device';\r\nconst isWindowsBroswer = Platform.OS=='web' & (Device.osName!='iOS' & Device.osName!='Android')\r\nconst screenWidth = Dimensions.get('screen').width\r\nconst screenHeight = Dimensions.get('screen').height\r\nexport function relativeToScreen(size, axis='width') {\r\n    if (axis=='width') return isWindowsBroswer ? size : size * screenWidth/392.72\r\n    else return isWindowsBroswer ? size : size * screenHeight/850.9\r\n}\r\nvar styles = {\r\n    login: {\r\n        mainView: {\r\n            flex: 1,\r\n            justifyContent: 'center',\r\n            alignItems: 'center',\r\n            // paddingHorizontal: Platform.OS != 'web' ? '5%' : '5%',\r\n        },\r\n        titleView: {\r\n            flexDirection: 'row',\r\n            justifyContent: 'center',\r\n            alignItems: 'center',\r\n            minHeight: relativeToScreen(50, 'height'),\r\n            marginTop: StatusBar.currentHeight,\r\n        },\r\n        title: {\r\n            // width: '70%',\r\n            textAlign: 'center',\r\n            fontSize: relativeToScreen(30),\r\n            fontWeight: 'bold',\r\n            color: 'white',\r\n            alignSelf: 'center',\r\n        },\r\n        titleIcon: {\r\n            width: relativeToScreen(30),\r\n            height: relativeToScreen(30),\r\n            marginLeft: relativeToScreen(6),\r\n            paddingTop: relativeToScreen(3),\r\n        },\r\n        card: {\r\n            height: relativeToScreen(440),\r\n            minHeight: relativeToScreen(430, ),\r\n            width: relativeToScreen(350),\r\n            paddingHorizontal: relativeToScreen(10),\r\n            paddingVertical: relativeToScreen(10),\r\n            borderWidth: relativeToScreen(4),\r\n            borderRadius: relativeToScreen(10),\r\n            borderColor: 'rgba(0,0,0,0.1)',\r\n            justifyContent: 'space-between',\r\n            backgroundColor: 'azure',\r\n        },\r\n        cardHeader: {\r\n            height: '21.42%',\r\n            width: '100%',\r\n            justifyContent: 'center'\r\n            // borderWidth: 1\r\n        },\r\n        cardTitle: {\r\n            position: 'relative',\r\n            left: relativeToScreen(5),\r\n            fontSize: relativeToScreen(24),\r\n            fontWeight: 'bold',\r\n            color: 'black',\r\n        },\r\n        cardSection: {\r\n            height: '20.5%',\r\n            justifyContent: 'space-between',\r\n            alignItems: 'center',\r\n            // borderWidth: 1\r\n        },\r\n        loadingIcon: {\r\n            alignSelf: 'center'\r\n        },\r\n        inputField: {\r\n            // minHeight: 40,\r\n            height: '47%',\r\n            width: '100%',\r\n            paddingLeft: relativeToScreen(10),\r\n            fontSize: relativeToScreen(14),\r\n            borderWidth: 1,\r\n            borderRadius: relativeToScreen(5),\r\n            borderColor: 'rgba(0,0,0,0.1)',\r\n            backgroundColor: 'white'\r\n        },\r\n        button: {\r\n            height: '29%',\r\n            width: '100%',\r\n            textAlign: 'center',\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n            borderWidth: 1,\r\n            borderRadius: 5,\r\n            borderColor: 'rgba(0,0,0,0)',\r\n            backgroundColor: 'lightblue',        \r\n        },\r\n        buttonLabel: {\r\n            fontSize: relativeToScreen(15),\r\n            fontWeight: 'bold',\r\n            color: 'black',\r\n        },\r\n        text: {\r\n            fontSize: relativeToScreen(15),\r\n            textAlign: 'center',\r\n        },\r\n        msgBox: {\r\n            width: relativeToScreen(300),\r\n            paddingVertical: relativeToScreen(5),\r\n            paddingHorizontal: relativeToScreen(3),\r\n            marginBottom: relativeToScreen(3),\r\n            justifyContent: 'center',\r\n            backgroundColor: 'rgb(30,30,30)',\r\n            borderWidth: 1,\r\n            borderColor: 'rgb(40,40,40)',\r\n            \r\n        },\r\n        msg: {\r\n            textAlign: 'center',\r\n            color: 'white',\r\n            // paddingHorizontal: 20,\r\n        },\r\n    }\r\n};\r\nexport default styles;","import { StatusBar } from 'expo-status-bar';\r\nimport { Platform } from 'react-native';\r\nimport { relativeToScreen } from './loginStyles';\r\n\r\nvar styles = {\r\n    mainView: {\r\n        flex: 1,                 \r\n        marginTop: StatusBar.currentHeight,\r\n    },\r\n    postButton: {\r\n        position: 'absolute',\r\n        height: relativeToScreen(60),\r\n        width: relativeToScreen(60),\r\n        borderRadius: relativeToScreen(30),\r\n        bottom: '2%',\r\n        alignSelf: 'center',\r\n        backgroundColor: 'rgba(0,0,0,1)',\r\n        justifyContent: 'center',\r\n    },\r\n    postButtonLabel: {\r\n        alignSelf: 'center',\r\n    },\r\n    scrollView: {\r\n        flex: 1,\r\n    },\r\n    section: {\r\n        width: relativeToScreen(350),\r\n        paddingVertical: '16%',\r\n        borderBottomWidth: 1,\r\n        borderColor: 'rgba(155,155,155,0.3)',\r\n        alignSelf: 'center',\r\n    },\r\n    sectionTitle: {\r\n        paddingVertical: relativeToScreen(7.5),\r\n        fontSize: relativeToScreen(19),\r\n        color: 'white',\r\n        fontWeight: '400',\r\n    },\r\n    card: {\r\n        marginTop: '5%',\r\n        paddingVertical: relativeToScreen(5),\r\n        paddingHorizontal: relativeToScreen(10),\r\n        borderRadius: relativeToScreen(20),\r\n        backgroundColor: 'rgba(0,0,0,0.3)',\r\n    },\r\n    cardRow: {\r\n        flexDirection: 'row',\r\n        paddingVertical: relativeToScreen(5),\r\n        alignItems: 'center',\r\n    },\r\n    moodBadge: {\r\n        height: Platform.OS=='web' ? null : relativeToScreen(30),\r\n        paddingVertical: Platform.OS=='web' ? 5 : null,\r\n        borderRadius: relativeToScreen(30),\r\n        width: relativeToScreen(130),\r\n        fontSize: relativeToScreen(15),\r\n        textAlign: 'center',\r\n        textAlignVertical: 'center'\r\n    },\r\n    moodHeaderItem: {\r\n        height: relativeToScreen(30),\r\n        alignItems: 'flex-end',\r\n        justifyContent: 'center',\r\n    },\r\n    emotionBadge: {\r\n        // fontFamily: 'sans-serif',\r\n        height: Platform.OS=='web' ? null : relativeToScreen(29),\r\n        backgroundColor: '#f4f3f4',\r\n        borderRadius: relativeToScreen(14.5),\r\n        paddingVertical: Platform.OS=='web' ? 5 : null,\r\n        paddingHorizontal: relativeToScreen(12.5),\r\n        marginRight: relativeToScreen(6),\r\n        fontSize: relativeToScreen(14),\r\n        textAlign: 'center',\r\n        textAlignVertical: 'center',\r\n    },\r\n    textBadge: {\r\n        backgroundColor: 'aliceblue',\r\n        borderRadius: relativeToScreen(17),\r\n        paddingTop: relativeToScreen(5),\r\n        paddingBottom: relativeToScreen(8),\r\n        paddingHorizontal: relativeToScreen(11),\r\n        width: '100%',\r\n        fontSize: relativeToScreen(15),\r\n        lineHeight: relativeToScreen(22),\r\n        textAlign: 'left',\r\n        textAlignVertical: 'top',\r\n},\r\n    text: {\r\n        // fontFamily: 'sans-serif',\r\n        fontSize: relativeToScreen(14),\r\n        color: 'white'\r\n    },\r\n    spaceBetween: {\r\n        justifyContent: 'space-between',\r\n    },\r\n    icon: {\r\n        paddingHorizontal: relativeToScreen(12),\r\n    },\r\n    entryIcon: {\r\n        paddingRight: 0,\r\n        borderWidth: 1,\r\n    },\r\n    editButtonsView: {\r\n        flexDirection: 'row',\r\n        height: relativeToScreen(50),\r\n        paddingBottom: relativeToScreen(5),\r\n        alignItems: 'flex-end',\r\n        justifyContent: 'space-between'\r\n    },\r\n    editButton: {\r\n        height: relativeToScreen(34),\r\n        width: relativeToScreen(102),\r\n        borderWidth: 1,\r\n        borderColor: 'aliceblue',\r\n        borderRadius: relativeToScreen(17),\r\n        alignItems: 'center',\r\n        justifyContent: 'center'\r\n    },\r\n    editButtonLabel: {\r\n        fontSize: relativeToScreen(15),\r\n        fontWeight: '400',\r\n        color: 'white',\r\n    },\r\n    msgBox: {\r\n        position: 'absolute',\r\n        alignSelf: 'center',\r\n        bottom: relativeToScreen(110),\r\n        width: relativeToScreen(300),\r\n        paddingVertical: relativeToScreen(10),\r\n        paddingHorizontal: relativeToScreen(10),\r\n        // height: 36,\r\n        justifyContent: 'center',\r\n        backgroundColor: 'rgb(30,30,30)',\r\n        borderWidth: 1,\r\n        borderColor: 'rgb(40,40,40)',\r\n    },\r\n    msg: {\r\n        textAlign: 'center',\r\n        color: 'white',\r\n        // paddingHorizontal: 20,\r\n    },\r\n};\r\n\r\nexport default styles;","// Module import\r\nimport React, { Component, useState } from 'react';\r\nimport { Platform, View, Text, Pressable, Image, ActivityIndicator } from 'react-native';\r\nimport { Icon } from 'react-native-eva-icons'\r\nimport { relativeToScreen } from '../../styles/loginStyles';\r\n\r\n// Local import\r\nimport styles from '../../styles/entrancesStyles'\r\nstyles.theme = {}; styles.altTheme = {}; \r\n\r\nconst appServerURI = 'https://mood-tracker-server.herokuapp.com/'\r\n\r\n// OpenWeatherMap API weather icons URI:\r\nfunction openWeatherMapIconsURI (icon) {\r\n    if (Platform.OS === 'android') {\r\n        return `http://openweathermap.org/img/wn/${icon}@2x.png`\r\n\r\n    } else if (Platform.OS === 'web') {\r\n        return `https://openweathermap.org/img/wn/${icon}@2x.png`\r\n    }\r\n}\r\n\r\n// Defining mood colors schema\r\nconst moodColors = {'Horrível': '#ff3333', 'Mal': '#0099cc', 'Regular': '#add8e6', 'Bem': '#ffff33', 'Ótimo': '#00cc00'};\r\n\r\nconst monthDict = {'Jan': '01', 'Feb': '02', 'Mar': '03', 'Apr': '04', 'May': '05', 'Jun': '06', 'Jul': '07', 'Ago': '08', 'Sep': '09', 'Oct': '10', 'Nov': '11', 'Dec': '12'}\r\nfunction Today() {\r\n    const now = Date().toString().split(' ')\r\n    const today = [ now[3], monthDict[now[1]], now[2] ].join('-')\r\n    return today\r\n}\r\n\r\nfunction MoodHeader({entry}) {\r\n    return(\r\n        <View style={ [styles.cardRow, styles.spaceBetween] }>\r\n            <View style={ [{flexDirection: 'row', alignItems: 'flex-start'} ] }>\r\n            <Text style={[styles.moodBadge, {backgroundColor: moodColors[entry.mood]}]}>{entry.mood}</Text>\r\n                    { entry.star ? (\r\n                    <View style={[styles.moodHeaderItem, {width: relativeToScreen(42)}]}>\r\n                        <Icon name='star' fill='gold' width={relativeToScreen(28)} height={relativeToScreen(28)} />\r\n                    </View>\r\n                    ) : null }                    \r\n                    { entry.weather ? (\r\n                        <View style={[styles.moodHeaderItem, {width: relativeToScreen(50)}]}>\r\n                            <Image\r\n                            source={{uri: openWeatherMapIconsURI(entry.weather.weather.icon)}}\r\n                            style={{width: relativeToScreen(40), height: relativeToScreen(40)}}\r\n                            />\r\n                        </View>\r\n                    ) : null }                    \r\n                    { entry.weather ? (\r\n                        <View style={[styles.moodHeaderItem, {width: relativeToScreen(35)}]}>\r\n                            <Text style={[styles.theme, {fontSize: relativeToScreen(14)}]}>\r\n                                { entry.weather.main.temp.toString().slice(0,2) + '°C' }\r\n                            </Text>\r\n                        </View>\r\n                    ) : null }                \r\n                \r\n            </View>\r\n            <View style={[styles.cardRow]}>\r\n                <Icon name='edit' height={relativeToScreen(18)} width={relativeToScreen(18)} fill='rgba(255,255,255,0.75)' style={{marginRight: relativeToScreen(6)}} />\r\n                <Text style={styles.text}>{entry.startTime.slice(0,5)}</Text>\r\n            </View>\r\n        </View>\r\n\r\n    )\r\n}\r\n\r\nfunction Address ({entry}) {\r\n    const [isCollapsed, setIsCollapsed] = useState( 1 );\r\n    if (entry.address) {\r\n        return(\r\n            <View style={styles.cardRow}>\r\n                <Text numberOfLines={ isCollapsed } onPress={ () => { setIsCollapsed( isCollapsed ? 0 : 1 ) }} style={styles.text}>\r\n                    <Icon name='pin' height={relativeToScreen(17)} width={relativeToScreen(17)} fill='rgba(255,255,255,0.75)' style={{position: 'relative', marginRight: relativeToScreen(5), top: relativeToScreen(2)}} />\r\n                    {entry.address}\r\n                </Text>\r\n            </View>        \r\n        )\r\n    } else {\r\n        return <></>\r\n    }\r\n}\r\n\r\nfunction Emotions ({entry}) {\r\n    if (entry.emotions.length > 0) {\r\n        return (\r\n            <View style={[styles.cardRow, {flexWrap: 'wrap', justifyContent: 'flex-start', paddingTop: 2, PaddingBottom: 0}]}>\r\n                { entry.emotions.map((emotion, index) => {\r\n                    if (emotion.name) {\r\n                        emotion = emotion.name\r\n                    }\r\n                    return(\r\n                        <View\r\n                        key={'emotion-' + emotion}\r\n                        style={{paddingVertical: relativeToScreen(5), paddingHorizontal: relativeToScreen(2)}}\r\n                        >\r\n                            <Text style={[styles.emotionBadge]}>{emotion}</Text>\r\n                        </View>\r\n                    )\r\n                })}\r\n            </View>\r\n        )\r\n    } else {\r\n        return (\r\n            <></>\r\n        )\r\n    }\r\n}\r\n\r\nfunction Jornal({ entry }) {\r\n    if (entry.jornal) {\r\n        return(\r\n            <View style={styles.cardRow}>\r\n                <Text style={styles.textBadge}>\r\n                    <Icon\r\n                    name='book-open'\r\n                    height={relativeToScreen(20)}\r\n                    width={relativeToScreen(20)}\r\n                    fill='rgba(0,0,0,0.25)'\r\n                    style={{position: 'relative', top: relativeToScreen(4), left: 1, marginRight: relativeToScreen(6)}}\r\n                    />\r\n                    {entry.jornal}\r\n                </Text>\r\n            </View>\r\n        )\r\n    } else {\r\n        return <></>\r\n    }\r\n}\r\n\r\nfunction EmptyCard(props) {\r\n    const today = props.parentState.selectedDate == Today()\r\n    const navigateParams = {\r\n        currentEntry: {\r\n            type: today ? 'new' : 'custom-date',\r\n            date: props.parentState.selectedDate,\r\n            entry: null\r\n        },\r\n        // setMainScreenState: props.setMainScreenState,\r\n        // getMainScreenState: props.getMainScreenState,\r\n\r\n    }\r\n    const textStyle = [{fontSize: relativeToScreen(16), marginTop: relativeToScreen(7)}, styles.theme]\r\n    return (\r\n        <Pressable\r\n        onPress={ () => props.parentProps.navigation.navigate('PostEntrance', navigateParams) }\r\n        style={[styles.card, {alignItems: 'center', justifyContent: 'center', fontSize: relativeToScreen(16), height: relativeToScreen(145)}]}\r\n        >\r\n            <Icon name='inbox' fill='rgba(255,255,255,0.3)' width={relativeToScreen(25)} height={relativeToScreen(25)} />\r\n            <Text style={textStyle}> Nenhuma entrada encontrada. </Text>\r\n            <Text style={textStyle}> Pressione aqui para adicionar uma a este dia! </Text>\r\n        </Pressable>\r\n    );\r\n}\r\n\r\nfunction CardsLoadingMessage() {\r\n    return(\r\n        <View style={[styles.card, {alignItems: 'center', justifyContent: 'center', height: relativeToScreen(85)}]}>\r\n            <Icon name='sync-outline' fill='rgba(255,255,255,1)' width={relativeToScreen(25)} height={relativeToScreen(25)} />\r\n            <Text style={[styles.theme, {marginTop: relativeToScreen(10), fontSize: relativeToScreen(16)}]}>Sincronizando entradas...</Text>\r\n        </View>\r\n    )\r\n}\r\n\r\nexport default class UserEntryCards extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n        \r\n        this.EntryCard = this.EntryCard.bind(this);\r\n        this.EditEntryButtons = this.EditEntryButtons.bind(this);\r\n        this.editUserEntry = this.editUserEntry.bind(this);\r\n        this.deleteUserEntry = this.deleteUserEntry.bind(this);\r\n        this.setFontColor = this.setFontColor.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log('Subcomponent \"UserEntryCards\" did mount...')\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        console.log('\"UserEntryCards\" sub-component will unmount...')\r\n      }\r\n    \r\n    EntryCard({ entry }) {\r\n        function onEntryCardPress() {\r\n            this.props.parentProps.navigation.setParams({ selectedEntryId: this.props.parentState.selectedEntryId === entry._id ? null : entry._id })\r\n        }\r\n        return (\r\n        <Pressable\r\n        onPress={onEntryCardPress.bind(this)}\r\n        style={[styles.card]}>\r\n            <MoodHeader entry={entry} />\r\n            <Emotions entry={entry} />\r\n            <Address entry={entry} />\r\n            <Jornal entry={entry} />\r\n            <this.EditEntryButtons entryId={entry._id} />\r\n        </Pressable>\r\n        );\r\n    }\r\n\r\n    UserEntryCardsList() {\r\n        const selDateEntries = this.props.parentState.user.entries.filter( entry => entry.date === this.props.parentState.selectedDate ).reverse()\r\n        // console.log('LOGGING USER ENTRIES:')\r\n        // console.log(selDateEntries)\r\n        if (selDateEntries.length) {\r\n            return(\r\n                <>\r\n                    { selDateEntries.map( entry => <this.EntryCard key={'entry-card-'+entry.startTime} entry={entry} />) }\r\n                    {/* { this.props.parentState.isUserDataSyncing ? <CardsLoadingMessage /> : null } */}\r\n                </>\r\n            )\r\n        } else if (this.props.parentState.isUserDataSyncing) {\r\n            return <CardsLoadingMessage />\r\n            \r\n        } else {\r\n            return <EmptyCard {...this.props} />\r\n        }\r\n    }\r\n\r\n    EditEntryButtons(props) {\r\n        const buttonLabels = ['Editar', 'Excluir']\r\n        const onButtonPress = {\r\n            'Editar': this.editUserEntry,\r\n            'Excluir': () => {this.props.setAlertMsg('Pressione e segure para excluir uma entrada.')}\r\n        }\r\n        const onButtonLongPress = { 'Editar': () => {}, 'Excluir': this.deleteUserEntry }\r\n\r\n        const [isButtonPressed, setIsButtonPressed] = useState({\r\n            'Editar': false,\r\n            'Excluir': false,\r\n        })\r\n\r\n        function highlightButtonFor(label) {\r\n            function highlightButton() {\r\n                setIsButtonPressed({ ...isButtonPressed, [label]: !isButtonPressed[label] })\r\n            }\r\n            return highlightButton.bind(this);\r\n        }\r\n\r\n        const isLoading = this.props.parentState.isDeleteLoading | this.props.parentState.isUserDataSyncing\r\n        const buttonLabel = (label) => <Text selectable={false} style={[styles.editButtonLabel, {color: label=='Excluir' ? 'red' : styles.theme.color }]}>{label}</Text>\r\n        if (this.props.parentState.selectedEntryId == props.entryId) {\r\n            return(\r\n                <View style={styles.editButtonsView}>\r\n                    { buttonLabels.map( (label) => (\r\n                        <Pressable\r\n                        key={`edit-${label}-${props.entryId}`}\r\n                        style={[ styles.editButton, {\r\n                            backgroundColor: isButtonPressed[label] ? styles.theme.color + '4' : '#0000',\r\n                            borderColor: label=='Excluir' ? 'red' : styles.theme.color\r\n                        }]}\r\n                        disabled={ isLoading }\r\n                        onPress={ () => {highlightButtonFor(label)(); onButtonPress[label]()} }\r\n                        onPressIn={highlightButtonFor(label)}\r\n                        onLongPress={() => {highlightButtonFor(label)(); onButtonLongPress[label]()}}\r\n                        >\r\n                            { label=='Excluir' ? (\r\n                                this.props.parentState.isDeleteLoading ? <ActivityIndicator color='red' /> : buttonLabel(label)\r\n                                \r\n                            ) : buttonLabel(label) }\r\n                                                \r\n                        </Pressable>\r\n                    )) }\r\n            </View>\r\n            )\r\n        } else {\r\n            return null\r\n        }\r\n    }\r\n\r\n    editUserEntry() {\r\n        const selectedEntry = this.props.parentState.user.entries.filter( (entry) => entry._id == this.props.parentState.selectedEntryId )[0]\r\n        const navigateParams = {\r\n            currentEntry: {\r\n                type: 'edit',\r\n                date: selectedEntry.date,\r\n                entry: selectedEntry\r\n            },\r\n            // setMainScreenState: this.props.setMainScreenState,\r\n            // getMainScreenState: this.props.getMainScreenState,\r\n    \r\n        }\r\n        this.props.parentProps.navigation.navigate('PostEntrance', navigateParams)\r\n    }\r\n\r\n    async deleteUserEntry() {\r\n\r\n        console.log('DELETE USER ENTRY STATUS: Started...')\r\n        this.props.setMainScreenState({ isDeleteEntryLoading: true });\r\n\r\n        try {\r\n            var UsersResult = {ok: false, status: 999}\r\n            const parentState = this.props.parentState\r\n            const deleteEntryURI = appServerURI + 'Users/' + parentState.user.username + '/entries/' + parentState.selectedEntryId\r\n            UsersResult = await fetch( deleteEntryURI, { method: 'DELETE' });\r\n            // var UsersResult = await fetch( 'https://localhost:3000/' + 'Users/' + this.props.parentState.user.username + '/entries/' + this.props.parentState.selectedEntryId, { method: 'DELETE' });\r\n            const usersStatus =  'Status ' + UsersResult.status + ', ' + UsersResult.statusText\r\n\r\n            if (UsersResult.ok) {\r\n                // const users = await UsersResult.json();\r\n                console.log('fetch DELETE request for user entry successful.')\r\n                console.log(usersStatus)\r\n                console.log('DELETE USER ENTRY STATUS: Successful.')\r\n\r\n            } else {\r\n                console.log( new Error('\"fetch\" DELETE request for user entry failed. Throwing error...') )\r\n                throw new Error(usersStatus)\r\n            }\r\n    \r\n        } catch (error) {\r\n                console.log('DELETE USER ENTRY STATUS: Error captured. Printing error...')\r\n                console.log(error);\r\n                this.props.setAlertMsg('Não foi possível deletar a entrada. Tente novamente.')\r\n\r\n        } finally {\r\n            this.props.setMainScreenState({ isDeleteEntryLoading: false });\r\n            // this.props.setMainScreenState({ selectedEntryId: null })\r\n            console.log('DELETE USER ENTRY STATUS: FINISHED.' + UsersResult.ok ? 'Proceeding to sync user entries...' : 'Delete failed, skipping sync of user entries...')\r\n            if (UsersResult.ok) {\r\n                await this.props.syncUserData();\r\n                this.props.parentProps.navigation.setParams({ selectedEntryId: null })\r\n            }\r\n        }    \r\n    }\r\n\r\n    setFontColor() {\r\n        const fontColorDark = this.props.parentState.user.settings.fontColorDark\r\n        const fontColor = fontColorDark ? '#000' : '#fff'\r\n        const altFontColor = fontColorDark ? '#fff' : '#000'\r\n        for (let style of ['theme', 'text']) {\r\n            styles[style] = { ...styles[style], color: fontColor }\r\n        }\r\n        styles.altTheme.color = altFontColor\r\n        styles.altTheme.backgroundColor = altFontColor\r\n    }\r\n\r\n    render() {\r\n        console.log('\"Rendering \"UserEntryCards\" sub-component...\"')\r\n        this.setFontColor()\r\n        return this.UserEntryCardsList()\r\n    }\r\n}","const dateRange = [\r\n    \"2021-01-01\",\r\n    \"2021-01-02\",\r\n    \"2021-01-03\",\r\n    \"2021-01-04\",\r\n    \"2021-01-05\",\r\n    \"2021-01-06\",\r\n    \"2021-01-07\",\r\n    \"2021-01-08\",\r\n    \"2021-01-09\",\r\n    \"2021-01-10\",\r\n    \"2021-01-11\",\r\n    \"2021-01-12\",\r\n    \"2021-01-13\",\r\n    \"2021-01-14\",\r\n    \"2021-01-15\",\r\n    \"2021-01-16\",\r\n    \"2021-01-17\",\r\n    \"2021-01-18\",\r\n    \"2021-01-19\",\r\n    \"2021-01-20\",\r\n    \"2021-01-21\",\r\n    \"2021-01-22\",\r\n    \"2021-01-23\",\r\n    \"2021-01-24\",\r\n    \"2021-01-25\",\r\n    \"2021-01-26\",\r\n    \"2021-01-27\",\r\n    \"2021-01-28\",\r\n    \"2021-01-29\",\r\n    \"2021-01-30\",\r\n    \"2021-01-31\",\r\n    \"2021-02-01\",\r\n    \"2021-02-02\",\r\n    \"2021-02-03\",\r\n    \"2021-02-04\",\r\n    \"2021-02-05\",\r\n    \"2021-02-06\",\r\n    \"2021-02-07\",\r\n    \"2021-02-08\",\r\n    \"2021-02-09\",\r\n    \"2021-02-10\",\r\n    \"2021-02-11\",\r\n    \"2021-02-12\",\r\n    \"2021-02-13\",\r\n    \"2021-02-14\",\r\n    \"2021-02-15\",\r\n    \"2021-02-16\",\r\n    \"2021-02-17\",\r\n    \"2021-02-18\",\r\n    \"2021-02-19\",\r\n    \"2021-02-20\",\r\n    \"2021-02-21\",\r\n    \"2021-02-22\",\r\n    \"2021-02-23\",\r\n    \"2021-02-24\",\r\n    \"2021-02-25\",\r\n    \"2021-02-26\",\r\n    \"2021-02-27\",\r\n    \"2021-02-28\",\r\n    \"2021-03-01\",\r\n    \"2021-03-02\",\r\n    \"2021-03-03\",\r\n    \"2021-03-04\",\r\n    \"2021-03-05\",\r\n    \"2021-03-06\",\r\n    \"2021-03-07\",\r\n    \"2021-03-08\",\r\n    \"2021-03-09\",\r\n    \"2021-03-10\",\r\n    \"2021-03-11\",\r\n    \"2021-03-12\",\r\n    \"2021-03-13\",\r\n    \"2021-03-14\",\r\n    \"2021-03-15\",\r\n    \"2021-03-16\",\r\n    \"2021-03-17\",\r\n    \"2021-03-18\",\r\n    \"2021-03-19\",\r\n    \"2021-03-20\",\r\n    \"2021-03-21\",\r\n    \"2021-03-22\",\r\n    \"2021-03-23\",\r\n    \"2021-03-24\",\r\n    \"2021-03-25\",\r\n    \"2021-03-26\",\r\n    \"2021-03-27\",\r\n    \"2021-03-28\",\r\n    \"2021-03-29\",\r\n    \"2021-03-30\",\r\n    \"2021-03-31\",\r\n    \"2021-04-01\",\r\n    \"2021-04-02\",\r\n    \"2021-04-03\",\r\n    \"2021-04-04\",\r\n    \"2021-04-05\",\r\n    \"2021-04-06\",\r\n    \"2021-04-07\",\r\n    \"2021-04-08\",\r\n    \"2021-04-09\",\r\n    \"2021-04-10\",\r\n    \"2021-04-11\",\r\n    \"2021-04-12\",\r\n    \"2021-04-13\",\r\n    \"2021-04-14\",\r\n    \"2021-04-15\",\r\n    \"2021-04-16\",\r\n    \"2021-04-17\",\r\n    \"2021-04-18\",\r\n    \"2021-04-19\",\r\n    \"2021-04-20\",\r\n    \"2021-04-21\",\r\n    \"2021-04-22\",\r\n    \"2021-04-23\",\r\n    \"2021-04-24\",\r\n    \"2021-04-25\",\r\n    \"2021-04-26\",\r\n    \"2021-04-27\",\r\n    \"2021-04-28\",\r\n    \"2021-04-29\",\r\n    \"2021-04-30\",\r\n    \"2021-05-01\",\r\n    \"2021-05-02\",\r\n    \"2021-05-03\",\r\n    \"2021-05-04\",\r\n    \"2021-05-05\",\r\n    \"2021-05-06\",\r\n    \"2021-05-07\",\r\n    \"2021-05-08\",\r\n    \"2021-05-09\",\r\n    \"2021-05-10\",\r\n    \"2021-05-11\",\r\n    \"2021-05-12\",\r\n    \"2021-05-13\",\r\n    \"2021-05-14\",\r\n    \"2021-05-15\",\r\n    \"2021-05-16\",\r\n    \"2021-05-17\",\r\n    \"2021-05-18\",\r\n    \"2021-05-19\",\r\n    \"2021-05-20\",\r\n    \"2021-05-21\",\r\n    \"2021-05-22\",\r\n    \"2021-05-23\",\r\n    \"2021-05-24\",\r\n    \"2021-05-25\",\r\n    \"2021-05-26\",\r\n    \"2021-05-27\",\r\n    \"2021-05-28\",\r\n    \"2021-05-29\",\r\n    \"2021-05-30\",\r\n    \"2021-05-31\",\r\n    \"2021-06-01\",\r\n    \"2021-06-02\",\r\n    \"2021-06-03\",\r\n    \"2021-06-04\",\r\n    \"2021-06-05\",\r\n    \"2021-06-06\",\r\n    \"2021-06-07\",\r\n    \"2021-06-08\",\r\n    \"2021-06-09\",\r\n    \"2021-06-10\",\r\n    \"2021-06-11\",\r\n    \"2021-06-12\",\r\n    \"2021-06-13\",\r\n    \"2021-06-14\",\r\n    \"2021-06-15\",\r\n    \"2021-06-16\",\r\n    \"2021-06-17\",\r\n    \"2021-06-18\",\r\n    \"2021-06-19\",\r\n    \"2021-06-20\",\r\n    \"2021-06-21\",\r\n    \"2021-06-22\",\r\n    \"2021-06-23\",\r\n    \"2021-06-24\",\r\n    \"2021-06-25\",\r\n    \"2021-06-26\",\r\n    \"2021-06-27\",\r\n    \"2021-06-28\",\r\n    \"2021-06-29\",\r\n    \"2021-06-30\",\r\n    \"2021-07-01\",\r\n    \"2021-07-02\",\r\n    \"2021-07-03\",\r\n    \"2021-07-04\",\r\n    \"2021-07-05\",\r\n    \"2021-07-06\",\r\n    \"2021-07-07\",\r\n    \"2021-07-08\",\r\n    \"2021-07-09\",\r\n    \"2021-07-10\",\r\n    \"2021-07-11\",\r\n    \"2021-07-12\",\r\n    \"2021-07-13\",\r\n    \"2021-07-14\",\r\n    \"2021-07-15\",\r\n    \"2021-07-16\",\r\n    \"2021-07-17\",\r\n    \"2021-07-18\",\r\n    \"2021-07-19\",\r\n    \"2021-07-20\",\r\n    \"2021-07-21\",\r\n    \"2021-07-22\",\r\n    \"2021-07-23\",\r\n    \"2021-07-24\",\r\n    \"2021-07-25\",\r\n    \"2021-07-26\",\r\n    \"2021-07-27\",\r\n    \"2021-07-28\",\r\n    \"2021-07-29\",\r\n    \"2021-07-30\",\r\n    \"2021-07-31\",\r\n    \"2021-08-01\",\r\n    \"2021-08-02\",\r\n    \"2021-08-03\",\r\n    \"2021-08-04\",\r\n    \"2021-08-05\",\r\n    \"2021-08-06\",\r\n    \"2021-08-07\",\r\n    \"2021-08-08\",\r\n    \"2021-08-09\",\r\n    \"2021-08-10\",\r\n    \"2021-08-11\",\r\n    \"2021-08-12\",\r\n    \"2021-08-13\",\r\n    \"2021-08-14\",\r\n    \"2021-08-15\",\r\n    \"2021-08-16\",\r\n    \"2021-08-17\",\r\n    \"2021-08-18\",\r\n    \"2021-08-19\",\r\n    \"2021-08-20\",\r\n    \"2021-08-21\",\r\n    \"2021-08-22\",\r\n    \"2021-08-23\",\r\n    \"2021-08-24\",\r\n    \"2021-08-25\",\r\n    \"2021-08-26\",\r\n    \"2021-08-27\",\r\n    \"2021-08-28\",\r\n    \"2021-08-29\",\r\n    \"2021-08-30\",\r\n    \"2021-08-31\",\r\n    \"2021-09-01\",\r\n    \"2021-09-02\",\r\n    \"2021-09-03\",\r\n    \"2021-09-04\",\r\n    \"2021-09-05\",\r\n    \"2021-09-06\",\r\n    \"2021-09-07\",\r\n    \"2021-09-08\",\r\n    \"2021-09-09\",\r\n    \"2021-09-10\",\r\n    \"2021-09-11\",\r\n    \"2021-09-12\",\r\n    \"2021-09-13\",\r\n    \"2021-09-14\",\r\n    \"2021-09-15\",\r\n    \"2021-09-16\",\r\n    \"2021-09-17\",\r\n    \"2021-09-18\",\r\n    \"2021-09-19\",\r\n    \"2021-09-20\",\r\n    \"2021-09-21\",\r\n    \"2021-09-22\",\r\n    \"2021-09-23\",\r\n    \"2021-09-24\",\r\n    \"2021-09-25\",\r\n    \"2021-09-26\",\r\n    \"2021-09-27\",\r\n    \"2021-09-28\",\r\n    \"2021-09-29\",\r\n    \"2021-09-30\",\r\n    \"2021-10-01\",\r\n    \"2021-10-02\",\r\n    \"2021-10-03\",\r\n    \"2021-10-04\",\r\n    \"2021-10-05\",\r\n    \"2021-10-06\",\r\n    \"2021-10-07\",\r\n    \"2021-10-08\",\r\n    \"2021-10-09\",\r\n    \"2021-10-10\",\r\n    \"2021-10-11\",\r\n    \"2021-10-12\",\r\n    \"2021-10-13\",\r\n    \"2021-10-14\",\r\n    \"2021-10-15\",\r\n    \"2021-10-16\",\r\n    \"2021-10-17\",\r\n    \"2021-10-18\",\r\n    \"2021-10-19\",\r\n    \"2021-10-20\",\r\n    \"2021-10-21\",\r\n    \"2021-10-22\",\r\n    \"2021-10-23\",\r\n    \"2021-10-24\",\r\n    \"2021-10-25\",\r\n    \"2021-10-26\",\r\n    \"2021-10-27\",\r\n    \"2021-10-28\",\r\n    \"2021-10-29\",\r\n    \"2021-10-30\",\r\n    \"2021-10-31\",\r\n    \"2021-11-01\",\r\n    \"2021-11-02\",\r\n    \"2021-11-03\",\r\n    \"2021-11-04\",\r\n    \"2021-11-05\",\r\n    \"2021-11-06\",\r\n    \"2021-11-07\",\r\n    \"2021-11-08\",\r\n    \"2021-11-09\",\r\n    \"2021-11-10\",\r\n    \"2021-11-11\",\r\n    \"2021-11-12\",\r\n    \"2021-11-13\",\r\n    \"2021-11-14\",\r\n    \"2021-11-15\",\r\n    \"2021-11-16\",\r\n    \"2021-11-17\",\r\n    \"2021-11-18\",\r\n    \"2021-11-19\",\r\n    \"2021-11-20\",\r\n    \"2021-11-21\",\r\n    \"2021-11-22\",\r\n    \"2021-11-23\",\r\n    \"2021-11-24\",\r\n    \"2021-11-25\",\r\n    \"2021-11-26\",\r\n    \"2021-11-27\",\r\n    \"2021-11-28\",\r\n    \"2021-11-29\",\r\n    \"2021-11-30\",\r\n    \"2021-12-01\",\r\n    \"2021-12-02\",\r\n    \"2021-12-03\",\r\n    \"2021-12-04\",\r\n    \"2021-12-05\",\r\n    \"2021-12-06\",\r\n    \"2021-12-07\",\r\n    \"2021-12-08\",\r\n    \"2021-12-09\",\r\n    \"2021-12-10\",\r\n    \"2021-12-11\",\r\n    \"2021-12-12\",\r\n    \"2021-12-13\",\r\n    \"2021-12-14\",\r\n    \"2021-12-15\",\r\n    \"2021-12-16\",\r\n    \"2021-12-17\",\r\n    \"2021-12-18\",\r\n    \"2021-12-19\",\r\n    \"2021-12-20\",\r\n    \"2021-12-21\",\r\n    \"2021-12-22\",\r\n    \"2021-12-23\",\r\n    \"2021-12-24\",\r\n    \"2021-12-25\",\r\n    \"2021-12-26\",\r\n    \"2021-12-27\",\r\n    \"2021-12-28\",\r\n    \"2021-12-29\",\r\n    \"2021-12-30\",\r\n    \"2021-12-31\",\r\n    \"2022-01-01\",\r\n    \"2022-01-02\",\r\n    \"2022-01-03\",\r\n    \"2022-01-04\",\r\n    \"2022-01-05\",\r\n    \"2022-01-06\",\r\n    \"2022-01-07\",\r\n    \"2022-01-08\",\r\n    \"2022-01-09\",\r\n    \"2022-01-10\",\r\n    \"2022-01-11\",\r\n    \"2022-01-12\",\r\n    \"2022-01-13\",\r\n    \"2022-01-14\",\r\n    \"2022-01-15\",\r\n    \"2022-01-16\",\r\n    \"2022-01-17\",\r\n    \"2022-01-18\",\r\n    \"2022-01-19\",\r\n    \"2022-01-20\",\r\n    \"2022-01-21\",\r\n    \"2022-01-22\",\r\n    \"2022-01-23\",\r\n    \"2022-01-24\",\r\n    \"2022-01-25\",\r\n    \"2022-01-26\",\r\n    \"2022-01-27\",\r\n    \"2022-01-28\",\r\n    \"2022-01-29\",\r\n    \"2022-01-30\",\r\n    \"2022-01-31\",\r\n    \"2022-02-01\",\r\n    \"2022-02-02\",\r\n    \"2022-02-03\",\r\n    \"2022-02-04\",\r\n    \"2022-02-05\",\r\n    \"2022-02-06\",\r\n    \"2022-02-07\",\r\n    \"2022-02-08\",\r\n    \"2022-02-09\",\r\n    \"2022-02-10\",\r\n    \"2022-02-11\",\r\n    \"2022-02-12\",\r\n    \"2022-02-13\",\r\n    \"2022-02-14\",\r\n    \"2022-02-15\",\r\n    \"2022-02-16\",\r\n    \"2022-02-17\",\r\n    \"2022-02-18\",\r\n    \"2022-02-19\",\r\n    \"2022-02-20\",\r\n    \"2022-02-21\",\r\n    \"2022-02-22\",\r\n    \"2022-02-23\",\r\n    \"2022-02-24\",\r\n    \"2022-02-25\",\r\n    \"2022-02-26\",\r\n    \"2022-02-27\",\r\n    \"2022-02-28\",\r\n    \"2022-03-01\",\r\n    \"2022-03-02\",\r\n    \"2022-03-03\",\r\n    \"2022-03-04\",\r\n    \"2022-03-05\",\r\n    \"2022-03-06\",\r\n    \"2022-03-07\",\r\n    \"2022-03-08\",\r\n    \"2022-03-09\",\r\n    \"2022-03-10\",\r\n    \"2022-03-11\",\r\n    \"2022-03-12\",\r\n    \"2022-03-13\",\r\n    \"2022-03-14\",\r\n    \"2022-03-15\",\r\n    \"2022-03-16\",\r\n    \"2022-03-17\",\r\n    \"2022-03-18\",\r\n    \"2022-03-19\",\r\n    \"2022-03-20\",\r\n    \"2022-03-21\",\r\n    \"2022-03-22\",\r\n    \"2022-03-23\",\r\n    \"2022-03-24\",\r\n    \"2022-03-25\",\r\n    \"2022-03-26\",\r\n    \"2022-03-27\",\r\n    \"2022-03-28\",\r\n    \"2022-03-29\",\r\n    \"2022-03-30\",\r\n    \"2022-03-31\",\r\n    \"2022-04-01\",\r\n    \"2022-04-02\",\r\n    \"2022-04-03\",\r\n    \"2022-04-04\",\r\n    \"2022-04-05\",\r\n    \"2022-04-06\",\r\n    \"2022-04-07\",\r\n    \"2022-04-08\",\r\n    \"2022-04-09\",\r\n    \"2022-04-10\",\r\n    \"2022-04-11\",\r\n    \"2022-04-12\",\r\n    \"2022-04-13\",\r\n    \"2022-04-14\",\r\n    \"2022-04-15\",\r\n    \"2022-04-16\",\r\n    \"2022-04-17\",\r\n    \"2022-04-18\",\r\n    \"2022-04-19\",\r\n    \"2022-04-20\",\r\n    \"2022-04-21\",\r\n    \"2022-04-22\",\r\n    \"2022-04-23\",\r\n    \"2022-04-24\",\r\n    \"2022-04-25\",\r\n    \"2022-04-26\",\r\n    \"2022-04-27\",\r\n    \"2022-04-28\",\r\n    \"2022-04-29\",\r\n    \"2022-04-30\",\r\n    \"2022-05-01\",\r\n    \"2022-05-02\",\r\n    \"2022-05-03\",\r\n    \"2022-05-04\",\r\n    \"2022-05-05\",\r\n    \"2022-05-06\",\r\n    \"2022-05-07\",\r\n    \"2022-05-08\",\r\n    \"2022-05-09\",\r\n    \"2022-05-10\",\r\n    \"2022-05-11\",\r\n    \"2022-05-12\",\r\n    \"2022-05-13\",\r\n    \"2022-05-14\",\r\n    \"2022-05-15\",\r\n    \"2022-05-16\",\r\n    \"2022-05-17\",\r\n    \"2022-05-18\",\r\n    \"2022-05-19\",\r\n    \"2022-05-20\",\r\n    \"2022-05-21\",\r\n    \"2022-05-22\",\r\n    \"2022-05-23\",\r\n    \"2022-05-24\",\r\n    \"2022-05-25\",\r\n    \"2022-05-26\",\r\n    \"2022-05-27\",\r\n    \"2022-05-28\",\r\n    \"2022-05-29\",\r\n    \"2022-05-30\",\r\n    \"2022-05-31\",\r\n    \"2022-06-01\",\r\n    \"2022-06-02\",\r\n    \"2022-06-03\",\r\n    \"2022-06-04\",\r\n    \"2022-06-05\",\r\n    \"2022-06-06\",\r\n    \"2022-06-07\",\r\n    \"2022-06-08\",\r\n    \"2022-06-09\",\r\n    \"2022-06-10\",\r\n    \"2022-06-11\",\r\n    \"2022-06-12\",\r\n    \"2022-06-13\",\r\n    \"2022-06-14\",\r\n    \"2022-06-15\",\r\n    \"2022-06-16\",\r\n    \"2022-06-17\",\r\n    \"2022-06-18\",\r\n    \"2022-06-19\",\r\n    \"2022-06-20\",\r\n    \"2022-06-21\",\r\n    \"2022-06-22\",\r\n    \"2022-06-23\",\r\n    \"2022-06-24\",\r\n    \"2022-06-25\",\r\n    \"2022-06-26\",\r\n    \"2022-06-27\",\r\n    \"2022-06-28\",\r\n    \"2022-06-29\",\r\n    \"2022-06-30\"\r\n]\r\n\r\nexport default dateRange;","// Module imports\r\nimport React, { Component } from 'react';\r\nimport { View, Text, ImageBackground, Pressable, ScrollView, ActivityIndicator } from 'react-native';\r\nimport { Icon } from 'react-native-eva-icons'\r\nimport { relativeToScreen } from '../styles/loginStyles';\r\n\r\n// Component imports\r\nimport UserEntryCards from './subcomponents/UserEntryCards';\r\n\r\n// Local imports\r\nimport dateRange from '../shared/dateRange';\r\nimport styles  from '../styles/entrancesStyles';\r\n\r\n// Defining pertinent constants\r\nconst monthDict = {'Jan': '01', 'Feb': '02', 'Mar': '03', 'Apr': '04', 'May': '05', 'Jun': '06', 'Jul': '07', 'Ago': '08', 'Sep': '09', 'Oct': '10', 'Nov': '11', 'Dec': '12'}\r\nconst englishMonthSigs = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dec']\r\nconst portugueseMonthSigs = ['Jan', 'Fev', 'Mar', 'Abr', 'Mai', 'Jun', 'Jul', 'Ago', 'Set', 'Out', 'Nov', 'Dez']\r\nconst englishWeekDayMap = {'Mon': 'Seg', 'Tue': 'Ter', 'Wed': 'Qua', 'Thu': 'Qui', 'Fri': 'Sex', 'Sat': 'Sab', 'Sun': 'Dom'}\r\n\r\n// Defining pertinent functions\r\nexport function Today() {\r\n    const now = Date().toString().split(' ')\r\n    const today = [ now[3], monthDict[now[1]], now[2] ].join('-')\r\n    return today\r\n}\r\nfunction getNextDate(date, next='next') {\r\n    const nextDate = dateRange[dateRange.indexOf(date) + (next=='previous' ? -1 : 1)]\r\n    return nextDate\r\n}\r\nfunction getTime() {\r\n    //Wed,Jan,26,2022,15:12:37,GMT-0300,(Horário,Padrão,de,Brasília)\r\n    const now = Date().toString().split(' ')\r\n    const time = now[4]\r\n    return time\r\n}\r\nexport function formatDate(selDate) {\r\n    \r\n    var ymd = selDate.split('-')\r\n    const yesterday = getNextDate(Today(), 'previous')\r\n    const englishWeekDay = new Date(ymd[0], ymd[1], ymd[2]).toString().split(' ')[0]\r\n    const weekDay = englishWeekDayMap[englishWeekDay]\r\n    var prefix = ''\r\n\r\n    if (selDate === Today()) prefix = 'Hoje, '\r\n    else if (selDate === yesterday) prefix = 'Ontem, '\r\n    else prefix = weekDay + ', '\r\n    \r\n    for (var i=0; i<12; i++) {\r\n        if (monthDict[ englishMonthSigs[i] ] == ymd[1]) {\r\n            return prefix + oneDigit(ymd[2]) + ' ' + portugueseMonthSigs[i]\r\n        }\r\n    }\r\n}\r\nexport function oneDigit(stringNumber) {\r\n    if (stringNumber[0] == '0') return stringNumber.slice(1, stringNumber.length)\r\n    else return stringNumber\r\n}\r\n\r\nexport default class EntrancesScreen extends Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {            \r\n            date: Today(),\r\n            time: getTime(),\r\n            isDeleteEntryLoading: false,\r\n            alertMsg: '',\r\n        };\r\n        this.onNextButtonPress = this.onNextButtonPress.bind(this);\r\n        this.setFontColor = this.setFontColor.bind(this);\r\n        this.setAlertMsg = this. setAlertMsg.bind(this);\r\n        this.getMainScreenState = this.getMainScreenState.bind(this); // remove\r\n    }\r\n    \r\n    componentDidMount() {\r\n        console.log('\"Entries\" screen component did mount...')\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        console.log('\"EntriesScreen\" component will unmount...')\r\n    }\r\n\r\n    getMainScreenState() {\r\n        return this.state\r\n    }\r\n\r\n    setAlertMsg(msg) {\r\n        this.setState({alertMsg: msg})\r\n        setTimeout( () => this.setState({alertMsg: ''}) , 1000 * 5 )\r\n    }\r\n    \r\n    alertMsg() {\r\n        return(\r\n            <View style={[styles.msgBox, this.state.alertMsg ? {} : {height: null, backgroundColor: 'transparent', borderColor: 'transparent'} ]}>\r\n                <Text style={styles.msg}>{this.state.alertMsg}</Text>\r\n            </View>\r\n        )\r\n    }\r\n\r\n    onNextButtonPress(next='next') {\r\n        function setSelectedDate() {\r\n            this.props.navigation.setParams({\r\n                selectedEntryId: null,\r\n                selectedDate: getNextDate(this.props.route.params.selectedDate, next),\r\n            })\r\n        }\r\n        return setSelectedDate.bind(this);\r\n    }\r\n\r\n    DateNavigationButton = ({next}) => {\r\n        return(\r\n            <Pressable onPress={this.onNextButtonPress(next)} hitSlop={relativeToScreen(15)} >\r\n                <Icon name={ next=='next' ? 'arrow-forward' : 'arrow-back'} width={relativeToScreen(29)} height={relativeToScreen(29)} fill={styles.theme.color} />\r\n            </Pressable>\r\n        )\r\n    }\r\n\r\n    setFontColor() {\r\n        const fontColor = this.props.appState.user.settings.fontColorDark ? '#000' : '#fff'\r\n        styles.theme = {color: fontColor}\r\n    }\r\n\r\n    render() {\r\n        console.log('Rendering \"EntriesScreen\" component...')\r\n\r\n        this.setFontColor()\r\n        const navigateParams = {\r\n            currentEntry: {type: 'new', date: Today(), entry: null},\r\n        }\r\n        const isLoading = this.props.appState.isUserDataSyncing | this.state.isDeleteEntryLoading\r\n        const settings = this.props.appState.user.settings\r\n        const backgroundImage = settings.backgroundImage\r\n        const imgURI =  settings.displayBackgroundImage ? (backgroundImage ? ( settings.enableHighResolution ? backgroundImage.urls.raw : backgroundImage.urls.regular ) : null ) : null\r\n        const backgroundColor = settings.backgroundColor\r\n\r\n        return(\r\n            <ImageBackground source={{uri: imgURI}} style={[styles.mainView, {backgroundColor: backgroundColor}]}>\r\n                \r\n                <ScrollView style={styles.scrollView}>\r\n                    <View style={styles.section}>\r\n                        <View style={[styles.cardRow, {justifyContent: 'space-between'}]}>\r\n                            <this.DateNavigationButton icon='arrow-back' next='previous' />\r\n                            <Text style={[styles.sectionTitle, styles.theme]}> {'Suas entradas  •  ' + formatDate(this.props.route.params.selectedDate)} </Text>                                \r\n                            <this.DateNavigationButton icon='arrow-forward' next='next' />\r\n                        </View>\r\n                        <UserEntryCards\r\n                        parentState={{\r\n                            selectedDate: this.props.route.params.selectedDate,\r\n                            selectedEntryId: this.props.route.params.selectedEntryId,\r\n                            user: this.props.appState.user,\r\n                            isUserDataSyncing: this.props.appState.isUserDataSyncing,\r\n                            isDeleteEntryLoading: this.state.isDeleteEntryLoading,\r\n                        }}\r\n                        parentProps={{\r\n                            navigation: this.props.navigation\r\n                        }}\r\n                        syncUserData={this.props.appState.syncUserData}\r\n                        setMainScreenState ={this.setState.bind(this)}\r\n                        getMainScreenState={this.getMainScreenState}\r\n                        setAlertMsg = {this.setAlertMsg}\r\n                        />\r\n                    </View>\r\n                </ScrollView>\r\n\r\n                <Pressable\r\n                onPress={() => {this.props.navigation.navigate( 'PostEntrance', navigateParams )}}\r\n                style={[styles.postButton, {backgroundColor: isLoading ? 'white' : 'black'}]}\r\n                disabled={isLoading}\r\n                >\r\n                { this.props.appState.isUserDataSyncing ? (\r\n                        <ActivityIndicator color='black' size={'large'} />\r\n                ) : (\r\n                    this.state.isDeleteEntryLoading ? (\r\n                        <ActivityIndicator color='red' size={'large'} />\r\n                    ) : (\r\n                        <Icon name='plus-circle' width={relativeToScreen(72)} height={relativeToScreen(72)} fill='#f4f3f4' style={styles.postButtonLabel}/>\r\n                    )\r\n                )}\r\n                </Pressable>\r\n\r\n                {this.alertMsg()}\r\n  \r\n            </ImageBackground>\r\n            )\r\n    }\r\n  }\r\n","import { StatusBar } from 'expo-status-bar';\r\nimport { Platform } from 'react-native';\r\nimport { relativeToScreen } from './loginStyles';\r\n\r\nconst styles = {\r\n  login: {\r\n    msgBox: {\r\n      position: 'absolute',\r\n      bottom: '10%',\r\n      width: relativeToScreen(300),\r\n      paddingHorizontal: 3,\r\n      paddingVertical: 5,\r\n      alignSelf: 'center',\r\n      justifyContent: 'center',\r\n      backgroundColor: 'rgb(30,30,30)',\r\n      borderWidth: 1,\r\n      borderColor: 'rgb(40,40,40)',\r\n    },\r\n    msg: {\r\n        textAlign: 'center',\r\n        color: 'white',\r\n    },\r\n  },\r\n  mainView: {\r\n    flex: 1,                 \r\n    marginTop: StatusBar.currentHeight,\r\n  },\r\n  entrances: {\r\n    marginTop: StatusBar.currentHeight,\r\n    borderWidth: 0,\r\n    flex:1,\r\n    justifyContent: 'space-between',\r\n    alignItems: 'flex-start',\r\n  },\r\n  scrollView: {\r\n    // paddingHorizontal: Platform.OS != 'web' ? '5%' : '5%',\r\n    width: '100%',\r\n    alignSelf: 'center',\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    paddingBottom: '0%',\r\n    paddingHorizontal: '5%',\r\n    alignSelf: 'stretch',\r\n    borderColor: 'black',\r\n  },\r\n  section: {\r\n    width: relativeToScreen(350),\r\n    // width: 350,\r\n    paddingVertical: '16%',\r\n    borderBottomWidth: 1,\r\n    borderColor: 'rgba(155,155,155,0.3)',\r\n    alignSelf: 'center',\r\n  },\r\n  // contentRow: {\r\n  //   flexDirection: 'column',\r\n  //   padding: 10,\r\n  //   marginTop: 22,\r\n  //   borderWidth: 1,\r\n  //   borderColor: 'rgba(155,155,155, 0.4)',\r\n  //   borderRadius: 30,\r\n  //   backgroundColor: 'rgba(255,255,255, 0.3)',\r\n\r\n  // },\r\n  entryTitle: {\r\n    paddingVertical: relativeToScreen(3),\r\n    paddingLeft: relativeToScreen(4),\r\n    fontSize: relativeToScreen(19),\r\n    color: '#fff',\r\n  },\r\n  entryIcon: {\r\n    paddingRight: 0,\r\n  },\r\n  // postButtonView: {\r\n  //   height: 60,\r\n  //   width: 60,\r\n  //   borderRadius: 30,\r\n  //   alignSelf: 'center',\r\n  //   justifyContent: 'center',\r\n  //   alignItems: 'center',\r\n  //   backgroundColor: 'white',\r\n  // },\r\n  // postButtonLabel: {\r\n  //   fontSize: 45,\r\n  //   fontWeight: 'bold',\r\n  // },\r\n  // moodButtonView: {\r\n  //   width: 65,\r\n  //   height: 65,\r\n  //   alignItems: 'center',\r\n  //   justifyContent: 'center',\r\n  //   borderWidth: 1,\r\n  // },\r\n  moodButton: {\r\n    width: relativeToScreen(65),\r\n    height: relativeToScreen(65),\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n  // date: {\r\n  //   position: 'relative',\r\n  //   left: '60%',\r\n  //   paddingVertical: 8,\r\n  //   paddingHorizontal: 10,\r\n  //   fontSize: 15,\r\n  //   alignSelf: 'center',\r\n  //   backgroundColor: 'white',\r\n  //   borderRadius: 20\r\n  // },\r\n  jornalText: {\r\n    paddingVertical: 5,\r\n    paddingHorizontal: relativeToScreen(12),\r\n    flex: 1,\r\n    textAlignVertical: 'top',\r\n    width: '100%',\r\n    borderRadius: relativeToScreen(20),\r\n    color: 'white',\r\n    fontSize: 16,\r\n  },\r\n  saveButton: {\r\n    height: relativeToScreen(50),\r\n    width: '100%',\r\n    borderTopLeftRadius: relativeToScreen(25),\r\n    borderTopRightRadius: relativeToScreen(25),\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    backgroundColor: 'white'\r\n  },\r\n  saveButtonLabel: {\r\n    fontWeight:'bold',\r\n    fontSize: relativeToScreen(19)\r\n  },\r\n  card: {\r\n    marginTop: '5%',\r\n    paddingVertical: relativeToScreen(5),\r\n    paddingHorizontal: relativeToScreen(10),\r\n    borderRadius: relativeToScreen(20),\r\n    backgroundColor: 'rgba(0,0,0,0.2)',\r\n  },\r\n  cardRow: {\r\n      flexDirection: 'row',\r\n      paddingVertical: relativeToScreen(5),\r\n      alignItems: 'center',\r\n  },\r\n  // moodBadge: {\r\n  //     backgroundColor: 'green',\r\n  //     borderRadius: relativeToScreen(30),\r\n  //     paddingVertical: relativeToScreen(6),\r\n  //     width: relativeToScreen(130),\r\n  //     fontSize: 16,\r\n  //     textAlign: 'center',\r\n  // },\r\n  emotionBadge: {\r\n      height: Platform.OS=='web' ? null : relativeToScreen(33),\r\n      backgroundColor: 'rgba(1,1,1,0.5)',\r\n      borderRadius: relativeToScreen(30),\r\n      paddingVertical: Platform.OS=='web' ? 5 : null,\r\n      paddingHorizontal: relativeToScreen(12.5),\r\n      fontSize: relativeToScreen(15),\r\n      textAlign: 'center',\r\n      textAlignVertical: 'center',\r\n      marginVertical: relativeToScreen(5),\r\n      marginHorizontal: relativeToScreen(5)\r\n  },\r\n  entryCardEmotionBadge: {\r\n    height: relativeToScreen(35),\r\n    backgroundColor: 'aliceblue',\r\n    borderRadius: relativeToScreen(32.5),\r\n    // paddingVertical: 7,\r\n    paddingHorizontal: relativeToScreen(12.5),\r\n    marginRight: relativeToScreen(6),\r\n    fontSize: relativeToScreen(15),\r\n    textAlign: 'center',\r\n    textAlignVertical: 'center',\r\n  },\r\n  datetimeTitle: {\r\n    fontSize: relativeToScreen(16),\r\n    marginRight: relativeToScreen(3),\r\n  },\r\n  editButtonsView: {\r\n    flexDirection: 'row',\r\n    height: relativeToScreen(55),\r\n    paddingVertical: relativeToScreen(5),\r\n    alignItems: 'flex-end',\r\n    justifyContent: 'space-between'\r\n  },\r\n  editButton: {\r\n    height: relativeToScreen(34),\r\n    width: relativeToScreen(102),\r\n    borderWidth: 1,\r\n    borderColor: 'aliceblue',\r\n    borderRadius: relativeToScreen(17),\r\n    alignItems: 'center',\r\n    justifyContent: 'center'\r\n  },\r\n  editButtonLabel: {\r\n      fontSize: relativeToScreen(15),\r\n      fontWeight: '400',\r\n      color: 'white',\r\n  },\r\n}\r\n\r\nexport default styles;","import React, { Component, useState } from 'react';\r\nimport { View, Text,  Pressable, TextInput } from 'react-native';\r\nimport { Icon } from 'react-native-eva-icons'\r\nimport { relativeToScreen } from '../../styles/loginStyles';\r\nimport styles from '../../styles/postEntryStyles'\r\n// import VectorIcon from 'react-native-vector-icons/MaterialCommunityIcons';\r\n\r\nconst appServerURI = 'https://mood-tracker-server.herokuapp.com/'\r\n\r\nexport function capitalize(multipleWordString) {\r\n    var words = multipleWordString.trim().split(' ');\r\n    var CapitalizedWords = [];\r\n    words.forEach(element => {\r\n    CapitalizedWords.push(element[0].toUpperCase() + element.slice(1, element.length));\r\n    });\r\n    return CapitalizedWords.join(' ');\r\n}\r\n\r\nexport default class EditEmotions extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            showEditMenu: false,\r\n            showExpandMenuButton: true,\r\n            mode: 'hidden',\r\n            newEmotionName: '',\r\n            selectedEmotionType: null,\r\n            selectedEmotionEnergy: null,\r\n            initialEmotionLayout: null,\r\n        }\r\n        this.EditEmotionsMenu = this.EditEmotionsMenu.bind(this);\r\n        this.EditEmotionsSection = this.EditEmotionsSection.bind(this);\r\n        this.onSaveEmotionButtonPress = this.onSaveEmotionButtonPress.bind(this);\r\n    }\r\n\r\n    EditEmotionsSection() {\r\n\r\n        const emotionTypes = ['Positiva', 'Negativa']\r\n        const emotionEnergy = ['Calmo(a)', 'Energizado(a)']\r\n        const emotionLayoutMap = {\r\n            'Positiva ou Negativa': 'type',\r\n            'Calmo(a) ou Energizado(a)': 'energy',\r\n            'Grade': 'grid',\r\n            'Espalhado': 'spread'\r\n        }\r\n\r\n        const inputSectionStyle = {marginTop: 0, marginTop: 0   , alignItems: 'center'}\r\n        const textStyle = {color: styles.theme.color, fontSize: relativeToScreen(16), alignSelf: 'center', marginBottom: relativeToScreen(8)}\r\n        const inputStyle = {width: '70%', height: relativeToScreen(35), borderRadius: relativeToScreen(15), color: styles.theme.color, backgroundColor: styles.altTheme.color+'8', fontSize: relativeToScreen(15), textAlign: 'center' }\r\n        const tagStyle = {width: '45%', height: relativeToScreen(28), borderRadius: relativeToScreen(14),  marginBottom: relativeToScreen(7), color: 'white', alignItems: 'center', justifyContent: 'center'}\r\n        const createEmotionViewStyle = {height: relativeToScreen(420), marginTop: relativeToScreen(10), paddingTop: relativeToScreen(10), justifyContent: 'space-evenly', borderTopWidth: 1, borderTopColor: 'rgba(255,255,255,0.2)'}\r\n\r\n        const [isButtonPressed, setIsButtonPressed] = useState({\r\n            'Salvar': false,\r\n            'Voltar': false,\r\n            'Terminar': false,\r\n            'Salvar-Layout': false,\r\n            'Voltar-Layout': false\r\n        })\r\n        function highlightButtonFor(label) {\r\n            function highlightButton() {\r\n                setIsButtonPressed({ ...isButtonPressed, [label]: !isButtonPressed[label] })\r\n            }\r\n            return highlightButton.bind(this);\r\n        }\r\n\r\n        const isLoading = (\r\n            this.props.isDeleteEmotionLoading |\r\n            this.props.isSaveEmotionLoading |\r\n            this.props.isPostEntryLoading |\r\n            this.props.appState.isUserDataSyncing |\r\n            this.props.isUpdateUserDataLoading\r\n        )\r\n\r\n        const isNewEmotionFormComplete = !this.state.newEmotionName | !this.state.selectedEmotionType | !this.state.selectedEmotionEnergy\r\n\r\n        switch (this.state.mode) {\r\n\r\n            case 'hidden':\r\n                return null\r\n\r\n            case 'create':\r\n                return(\r\n                    <View style={createEmotionViewStyle}>\r\n                        <Text style={[ styles.theme, {fontSize: relativeToScreen(22), alignSelf: 'center'}]}>Criar emoção</Text>\r\n                        <View style={inputSectionStyle}>\r\n                            <Text style={textStyle}>Nome</Text>\r\n                            <TextInput\r\n                            placeholder='Nome da emoção...'\r\n                            placeholderTextColor={styles.theme.color+'8'}\r\n                            style={inputStyle}\r\n                            onChangeText={text => this.setState({newEmotionName: text})}\r\n                            value={this.state.newEmotionName}\r\n                            />\r\n                        </View>\r\n                        <View style={inputSectionStyle}>\r\n                            <Text style={textStyle}>Tipo</Text>\r\n                            { emotionTypes.map((type) => {\r\n                                const typeSelected = this.state.selectedEmotionType === type\r\n                                return(\r\n                                    <Pressable\r\n                                    key={'emotion-'+type}\r\n                                    onPress={() => this.setState({selectedEmotionType: typeSelected ? null : type })}\r\n                                    style={[tagStyle, { backgroundColor: styles.altTheme.color + (typeSelected ? 'd' : '6') }]}>\r\n                                        <Text style={[{fontSize: relativeToScreen(15)}, styles.theme]}>{type}</Text>\r\n                                    </Pressable>\r\n                                )\r\n                            }) }\r\n                        </View>\r\n                        <View style={inputSectionStyle}>\r\n                            <Text style={textStyle}>Energia</Text>\r\n                            { emotionEnergy.map((type) => {\r\n                                const typeSelected = this.state.selectedEmotionEnergy === type\r\n                                return(\r\n                                    <Pressable\r\n                                    key={'emotion-'+type}\r\n                                    onPress={() => this.setState({selectedEmotionEnergy: typeSelected ? null : type })}\r\n                                    style={[tagStyle, { backgroundColor: styles.altTheme.color + (typeSelected ? 'd' : '6') }]}>\r\n                                        <Text style={[{fontSize: relativeToScreen(15)}, styles.theme]}>{type}</Text>\r\n                                    </Pressable>\r\n                                )\r\n                            }) }\r\n                        </View>\r\n                        <View style={[inputSectionStyle, {flexDirection: 'row', justifyContent: 'space-evenly'}]}>\r\n                            <Pressable\r\n                            onPress={() => {\r\n                                highlightButtonFor('Salvar')()\r\n                                this.onSaveEmotionButtonPress()\r\n                                setIsButtonPressed({'Salvar': false})\r\n                            }}\r\n                            onPressIn={highlightButtonFor('Salvar')}\r\n                            disabled={isLoading | isNewEmotionFormComplete}\r\n                            style={[styles.editButton, {\r\n                                alignSelf: 'center',\r\n                                backgroundColor: isButtonPressed['Salvar'] ? styles.theme.color+'5' : '#0000',\r\n                                borderColor: isLoading | isNewEmotionFormComplete ? styles.theme.color+'5' : styles.theme.color,\r\n                                }]}>\r\n                                <Text style={[ styles.editButtonLabel, {\r\n                                    color: isLoading | isNewEmotionFormComplete ? styles.theme.color+'5' : styles.theme.color\r\n                                }]}\r\n                                >\r\n                                {'Salvar'}\r\n                                </Text>\r\n                            </Pressable>\r\n                            <Pressable\r\n                            onPress={() => {\r\n                                highlightButtonFor('Voltar')()\r\n                                this.setState({showEditMenu: true, showExpandMenuButton: true, mode: 'hidden'})\r\n                                setIsButtonPressed({'Voltar': false})\r\n                            }}\r\n                            onPressIn={highlightButtonFor('Voltar')}\r\n                            disabled={isLoading}\r\n                            style={[styles.editButton, {\r\n                                alignSelf: 'center',\r\n                                backgroundColor: isButtonPressed['Voltar'] ? styles.theme.color+'5' : '#0000',\r\n                                borderColor: isLoading ? styles.theme.color+'5' : styles.theme.color,\r\n                                }]}>\r\n                                <Text style={[styles.editButtonLabel, {color: isLoading ? styles.theme.color+'5' : styles.theme.color}]}>Voltar</Text>\r\n                            </Pressable>\r\n                        </View>\r\n                    </View>\r\n                )\r\n\r\n            case 'delete':\r\n                return(\r\n                    <View style={[createEmotionViewStyle, {height: relativeToScreen(180)}]}>\r\n                        <Text style={{color: styles.theme.color, fontSize: relativeToScreen(22), alignSelf: 'center'}}>Excluir emoções</Text>\r\n                        <Text style={{color: styles.theme.color, fontSize: relativeToScreen(16), textAlign: 'center'}}>Pressione e segure para excluir uma emoção.</Text>\r\n                        <View style={[styles.cardRow, {justifyContent: 'space-evenly'}]}>\r\n                            <Pressable\r\n                            onPress={() => {\r\n                                highlightButtonFor('Terminar')();\r\n                                this.props.setParentState({deleteEmotionMode: false});\r\n                                this.setState({showEditMenu: true, showExpandMenuButton: true, mode: 'hidden'});\r\n                                setIsButtonPressed({'Terminar': false})\r\n                            }}\r\n                            onPressIn={highlightButtonFor('Terminar')}\r\n                            disabled={isLoading}\r\n                            style={[styles.editButton, {\r\n                                alignSelf: 'center',\r\n                                borderColor: isLoading ? styles.theme.color+'5' : styles.theme.color,\r\n                                backgroundColor: isButtonPressed['Terminar'] ? styles.theme.color+'5' : '#0000'\r\n                            }]}\r\n                            >\r\n                                <Text style={[styles.editButtonLabel, {color: isLoading ? styles.theme.color+'5' : styles.theme.color}]}>Terminar</Text>\r\n                            </Pressable>\r\n                        </View>\r\n                    </View>\r\n                )\r\n\r\n            case 'layout':\r\n                return(\r\n                    <View style={[createEmotionViewStyle, {height: relativeToScreen(320)}]}>\r\n                        <View style={inputSectionStyle}>\r\n                            <Text style={{color: styles.theme.color, fontSize: relativeToScreen(22), alignSelf: 'center', paddingBottom: relativeToScreen(25)}}>Escolha o layout</Text>\r\n                            { ['Positiva ou Negativa', 'Calmo(a) ou Energizado(a)', 'Grade', 'Espalhado'].map((layout) => {\r\n                                const isLayoutSelected = this.props.selectedEmotionLayout === emotionLayoutMap[layout]\r\n                                return(\r\n                                    <Pressable\r\n                                    key={'emotion-'+layout}\r\n                                    onPress={() => this.props.setParentState({selectedEmotionLayout: emotionLayoutMap[layout] })}\r\n                                    style={[tagStyle, {width: relativeToScreen(230), height: relativeToScreen(30), borderRadius: relativeToScreen(15), marginBottom: relativeToScreen(10), backgroundColor: isLayoutSelected ? styles.altTheme.color+'d' : styles.altTheme.color+'5'}]}>\r\n                                        <Text style={[{fontSize: 15, color: styles.theme.color}]}>{layout}</Text>\r\n                                    </Pressable>\r\n                                )\r\n                            }) }\r\n                        </View>\r\n                        <View style={[inputSectionStyle, {flexDirection: 'row', justifyContent: 'space-evenly'}]}>\r\n                            <Pressable\r\n                            onPress={() => {\r\n                                highlightButtonFor('Salvar-Layout')()\r\n                                this.onSaveEmotionLayoutButtonPress()\r\n                                setIsButtonPressed({'Salvar-Layout': false})\r\n                            }}\r\n                            onPressIn={highlightButtonFor('Salvar-Layout')}\r\n                            disabled={ isLoading }\r\n                            style={[styles.editButton, {\r\n                                alignSelf: 'center',\r\n                                backgroundColor: isButtonPressed['Salvar-Layout'] ? styles.theme.color+'5' : '#0000',\r\n                                borderColor: isLoading ? styles.theme.color+'5' : styles.theme.color,\r\n                                }]}>\r\n                                <Text style={[styles.editButtonLabel, {color: isLoading ? styles.theme.color+'5' : styles.theme.color}]}>Salvar</Text>\r\n                            </Pressable>\r\n                            <Pressable\r\n                            onPress={() => {\r\n                                highlightButtonFor('Voltar-Layout')()\r\n                                this.props.setParentState({selectedEmotionLayout: this.state.initialEmotionLayout})\r\n                                this.setState({showEditMenu: true, showExpandMenuButton: true, mode: 'hidden', initialEmotionLayout: null})\r\n                                setIsButtonPressed({'Voltar-Layout': false})\r\n                            }}\r\n                            onPressIn={highlightButtonFor('Voltar-Layout')}\r\n                            disabled={isLoading}\r\n                            style={[styles.editButton, {\r\n                                alignSelf: 'center',\r\n                                borderColor: isLoading ? styles.theme.color+'5' : styles.theme.color,\r\n                                backgroundColor: isButtonPressed['Voltar-Layout'] ? styles.theme.color+'5' : '#0000'\r\n                                }]}>\r\n                                <Text style={[styles.editButtonLabel, {color: isLoading ? styles.theme.color+'5' : styles.theme.color}]}>Voltar</Text>\r\n                            </Pressable>\r\n                        </View>\r\n                    </View>\r\n                )\r\n\r\n            default:\r\n                return null\r\n        }\r\n    }\r\n\r\n    EditEmotionsMenu() {\r\n\r\n        const buttonLabels = ['Criar', 'Excluir', 'Layout']\r\n        const onButtonPress = { \r\n            'Criar': () => this.setState({showEditMenu: false, showExpandMenuButton: false, mode: 'create'}),\r\n            'Excluir': () => {\r\n                this.props.setParentState({deleteEmotionMode: !this.props.deleteEmotionMode})\r\n                this.setState({showEditMenu: false , showExpandMenuButton: false, mode: 'delete'})\r\n            },\r\n            'Layout': () => this.setState({showEditMenu: false, showExpandMenuButton: false, mode: 'layout', initialEmotionLayout: this.props.selectedEmotionLayout})\r\n        }\r\n        const [isButtonPressed, setIsButtonPressed] = useState({\r\n            'Criar': false,\r\n            'Excluir': false,\r\n            'Layout': false,\r\n        })\r\n        function highlightButtonFor(label) {\r\n            function highlightButton() {\r\n                setIsButtonPressed({ ...isButtonPressed, [label]: !isButtonPressed[label] })\r\n            }\r\n            return highlightButton.bind(this);\r\n        }\r\n\r\n        const showEditMenu =  this.state.showEditMenu\r\n        const showExpandMenuButton = this.state.showExpandMenuButton\r\n        const hidden = this.state.mode == 'hidden'\r\n        const anyOpen = showEditMenu || !hidden\r\n\r\n        const isLoading = (\r\n            this.props.isPostEntryLoading |\r\n            this.props.appState.isUserDataSyncing |\r\n            this.props.isUpdateUserDataLoading |\r\n            this.props.isDeleteEmotionLoading |\r\n            this.props.isSaveEmotionLoading\r\n        )\r\n\r\n        return(\r\n            <>\r\n                { showExpandMenuButton ? (\r\n                    <View style={[styles.cardRow, {\r\n                        height: relativeToScreen(60),\r\n                        marginTop: relativeToScreen(10),\r\n                        paddingTop: relativeToScreen(10),\r\n                        justifyContent: showEditMenu ? 'space-between' : 'center', borderTopWidth: 1, borderTopColor: 'rgba(255,255,255,0.2)'\r\n                    }]}>\r\n                        { showEditMenu ? ( \r\n                            buttonLabels.map((label) => (\r\n                                <Pressable\r\n                                key={`emotion-${label}`}\r\n                                style={[styles.editButton,  {\r\n                                    backgroundColor: isButtonPressed[label] ? styles.theme.color+'5' : '#0000',\r\n                                    borderColor: isLoading ? styles.theme.color+'5' : styles.theme.color,\r\n                                    width: relativeToScreen(75)\r\n                                }]}\r\n                                disabled={ isLoading }\r\n                                onPress={() => {\r\n                                    highlightButtonFor(label)(); onButtonPress[label]()\r\n                                    setIsButtonPressed({ [label]: false })\r\n                                } }\r\n                                onPressIn={highlightButtonFor(label)}\r\n                                >\r\n                                    <Text style={[styles.editButtonLabel, {color: isLoading ? styles.theme.color+'5' : styles.theme.color}]}>{label}</Text>                    \r\n                                </Pressable>\r\n                            ))\r\n                        ) : null }\r\n                        <Pressable\r\n                        onPress={() => this.setState({ showEditMenu:  !showEditMenu })}\r\n                        // disabled={isLoading}\r\n                        style={{flexDirection: 'row', alignItems: 'center', justifyContent: 'center', paddingVertical: relativeToScreen(5), width: relativeToScreen(75)}}>\r\n                            <Icon name={ !showEditMenu ? 'more-horizontal-outline' : 'arrow-back-outline' } fill={styles.theme.color} width={relativeToScreen(20)} height={relativeToScreen(20)} />\r\n                            <Text style={{color: styles.theme.color, fontSize: relativeToScreen(15), marginLeft: 0}}> {anyOpen ? 'menos' : 'mais'}</Text>\r\n                        </Pressable>\r\n                    </View> \r\n                ) :  null  }\r\n            </>\r\n\r\n        )\r\n    }\r\n\r\n    async onSaveEmotionButtonPress() {\r\n\r\n        const newEmotionAlreadyExists = Object.keys(this.props.isSelectedEmotions).includes(capitalize(this.state.newEmotionName))\r\n        if (newEmotionAlreadyExists) {\r\n            this.props.setAlertMsg('Essa emoção já foi criada, escolha outro nome para continuar.')\r\n            return\r\n        }\r\n\r\n        try {\r\n            this.props.setParentState({ isSaveEmotionLoading: true });\r\n            var user = this.props.appState.user;\r\n            const newEmotion = {\r\n                name: capitalize(this.state.newEmotionName),\r\n                type: this.state.selectedEmotionType,\r\n                energy: this.state.selectedEmotionEnergy,\r\n            }\r\n\r\n            console.log('POST EMOTION STATUS: Started...')\r\n            var postEmotionResult = {ok: false, status: '999', statusText: 'Post not fetched yet.'}\r\n            const postUserEntryOpts = { \r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify( newEmotion ),\r\n            }\r\n            // var postUserEntryResult = await fetch('http://localhost:3000/Users/' + info.username + '/emotions', postUserEntryOpts);\r\n            postEmotionResult = await fetch( appServerURI + 'Users/' + user.username + '/emotions', postUserEntryOpts);\r\n            const postEmotionStatus = 'Status: ' + postEmotionResult.status + ', ' + postEmotionResult.statusText\r\n\r\n            if (postEmotionResult.ok) {\r\n                console.log('POST EMOTION STATUS: Successful.')\r\n                console.log(postEmotionStatus)\r\n                this.setState({\r\n                    showEditMenu: true,\r\n                    showExpandMenuButton: true,\r\n                    mode: 'hidden',\r\n                    newEmotionName: '',\r\n                    selectedEmotionType: null,\r\n                    selectedEmotionEnergy: null,        \r\n                })\r\n                    \r\n            } else {\r\n                console.log('POST EMOTION STATUS: Failed. Throwing error...')\r\n                throw new Error(postEmotionStatus)\r\n            }\r\n\r\n        } catch (error) {\r\n            this.props.setAlertMsg('Erro no servidor. Tente novamente...')\r\n            console.log('Erro capturado:')\r\n            console.log(error);\r\n\r\n        } finally {\r\n            console.log('POST EMOTION STATUS: Finished.')\r\n            this.props.setParentState({ isSaveEmotionLoading: false });\r\n            if (postEmotionResult.ok) {\r\n                await this.props.appState.syncUserData();\r\n                this.props.updateUserData();\r\n            }\r\n        } \r\n    }\r\n    \r\n    async onSaveEmotionLayoutButtonPress() {\r\n\r\n        try {\r\n            this.props.setParentState({ isSaveEmotionLayoutLoading: true });\r\n            var user = this.props.appState.user;\r\n            \r\n            console.log('POST EMOTION LAYOUT STATUS: Started...')\r\n            var postEmotionLayoutResult = {ok: false, status: '999', statusText: 'Post not fetched yet.'}\r\n            const postEmotionLayoutOpts = { \r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify( {layout: this.props.selectedEmotionLayout} ),\r\n            }\r\n            postEmotionLayoutResult = await fetch( appServerURI + 'Users/' + user.username + '/layout', postEmotionLayoutOpts);\r\n            // var postUserEntryResult = await fetch('http://localhost:3000/Users/' + info.username + '/emotions', postEmotionLayoutOpts);\r\n            const postEmotionLayoutStatus = 'Status: ' + postEmotionLayoutResult.status + ', ' + postEmotionLayoutResult.statusText\r\n\r\n            if (postEmotionLayoutResult.ok) {\r\n                console.log('POST EMOTION LAYOUT STATUS: Successful.')\r\n                console.log(postEmotionLayoutStatus)\r\n                this.setState({\r\n                    showEditMenu: true,\r\n                    showExpandMenuButton: true,\r\n                    mode: 'hidden',\r\n                    initialEmotionLayout: null,\r\n                })\r\n                    \r\n            } else {\r\n                console.log('POST EMOTION LAYOUT STATUS: Failed. Throwing error...')\r\n                throw new Error(postEmotionLayoutStatus)\r\n            }\r\n\r\n        } catch (error) {\r\n            this.props.setAlertMsg('Erro no servidor. Tente novamente...')\r\n            console.log('Erro capturado:')\r\n            console.log(error);\r\n\r\n        } finally {\r\n            console.log('POST EMOTION LAYOUT STATUS: Finished.')\r\n            this.props.setParentState({ isSaveEmotionLayoutLoading: false });\r\n            if (postEmotionLayoutResult.ok) {\r\n                await this.props.appState.syncUserData();\r\n                this.props.updateUserData();\r\n            }\r\n        } \r\n    }\r\n\r\n    setFontColor() {\r\n        const fontColorDark = this.props.appState.user.settings.fontColorDark\r\n        const fontColor = fontColorDark ? '#000' : '#fff'\r\n        const altFontColor = fontColorDark ? '#fff' : '#000'\r\n        for (let style of ['theme', ]) {\r\n            styles[style] = { ...styles[style], color: fontColor }\r\n        }\r\n        styles.altTheme.color = altFontColor\r\n        // styles.altTheme.backgroundColor = altFontColor\r\n    }    \r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                <this.EditEmotionsSection />\r\n                <this.EditEmotionsMenu />\r\n            </>\r\n        )\r\n    }\r\n\r\n}","const GoogleMapsAPI = {\r\n    GoogleMapsJavascriptAPIkey: \"AIzaSyBVWbOwPAMRyz2bS6rYHrDftVeihQ8WMCo\",\r\n    GoogleMapsGeocodingAPIKey: \"AIzaSyB6O-DpvulBC0rom1mGy-mBcstIbPlDPHA\",\r\n}\r\n\r\nexport default GoogleMapsAPI","import React, { Component } from 'react';\r\nimport { View, Text, ImageBackground, Pressable, ScrollView, TextInput, ActivityIndicator,  } from 'react-native';\r\nimport { relativeToScreen } from '../styles/loginStyles';\r\n\r\nimport { Icon } from 'react-native-eva-icons'\r\nimport VectorIcon from 'react-native-vector-icons/MaterialCommunityIcons';\r\nimport EditEmotions from './subcomponents/EditEmotions'\r\nimport styles from '../styles/postEntryStyles'\r\nstyles.theme = {}; styles.altTheme = {};\r\n\r\n// Geocoding and weather dependencies and APIs\r\nimport * as Location from 'expo-location';\r\nimport GoogleMapsAPI from './subcomponents/GoogleMapsAPI'\r\nLocation.setGoogleApiKey(GoogleMapsAPI.GoogleMapsGeocodingAPIKey)\r\n\r\nconst appServerURI = 'https://mood-tracker-server.herokuapp.com/'\r\n\r\n// Mood configs\r\nconst moods = ['Horrível', 'Mal', 'Regular', 'Bem', 'Ótimo']\r\nexport const moodColorsHEX = ['#ff3333', '#0099cc', '#add8e6', '#ffff33', '#00cc00']\r\nconst moodColorsRGBA = ['rgba(255, 51, 51, 1)', 'rgba(0, 153, 204, 1)', 'rgba(173, 216, 230, 1)', 'rgba(255, 255, 51, 1)', 'rgba(0, 204, 0, 1)']\r\nconst moodColorsTransp = (alpha) => [`rgba(255, 51, 51, ${alpha})`, `rgba(0, 153, 204, ${alpha})`, `rgba(173, 216, 230, ${alpha})`, `rgba(255, 255, 51, ${alpha})`, `rgba(0, 204, 0, ${alpha})`]\r\nexport const moodIcons = ['emoticon-dead', 'emoticon-sad', 'emoticon-neutral', 'emoticon-happy', 'emoticon-excited']\r\n\r\n// Emotion configs\r\nconst emotionGroupsNames = [ 'Bem & Calmo(a)', 'Bem & Energizado(a)', 'Mal & Calmo(a)', 'Mal & Energizado(a)' ]\r\nconst emotionTypes = ['Positiva', 'Negativa']\r\nconst emotionEnergy = ['Calmo(a)', 'Energizado(a)']\r\n\r\nfunction buildIsSelectedEmotions(emotions) {\r\n    var isSelectedEmotions = {}\r\n    for ( let emotion of emotions) {\r\n        isSelectedEmotions[emotion.name] = false\r\n    }\r\n    return isSelectedEmotions\r\n}\r\n\r\n// Date config\r\nconst monthSigs = ['Jan', 'Feb', 'Mar', 'Apr', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dec']\r\nconst months = ['01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12']\r\n\r\nconst monthNameMap = {\r\n    '01': 'Janeiro',\r\n    '02': 'Fevereiro',\r\n    '03': 'Março',\r\n    '04': 'Abril',\r\n    '05': 'Maio',\r\n    '06': 'Junho',\r\n    '07': 'Julho',\r\n    '08': 'Agosto',\r\n    '09': 'Setembro',\r\n    '10': 'Outubro',\r\n    '11': 'Novembro',\r\n    '12': 'Dezembro',\r\n}\r\n\r\n// Functions\r\n\r\nfunction convertMonthSig(monthSig) {\r\n    const thisMonth = months[monthSigs.indexOf(monthSig)]\r\n    return thisMonth\r\n}\r\n\r\nfunction Today() {\r\n    const now = Date().toString().split(' ')\r\n    const today = [ now[3], convertMonthSig(now[1]), now[2] ].join('-')\r\n    return today\r\n}\r\n\r\nfunction getTime() {\r\n    //Wed,Jan,26,2022,15:12:37,GMT-0300,(Horário,Padrão,de,Brasília)\r\n    const now = Date().toString().split(' ')\r\n    const time = now[4]\r\n    return time\r\n}\r\n\r\nfunction oneDigit(stringNumber) {\r\n    if (stringNumber[0] == '0') return stringNumber.slice(1, stringNumber.length)\r\n    else return stringNumber\r\n}\r\n\r\nfunction formatPostEntryDatetimeTitle(date, time) {\r\n    const ymd = date.split('-')\r\n    const m = monthNameMap[ ymd[1] ]\r\n    return oneDigit( ymd[2] ) + ' ' + m + ' ' + ymd[0] + (time ? ' - ' : '') + time.slice(0,5)\r\n}\r\n\r\nfunction formattedAddress(addr) {\r\n    return (\r\n        ( addr.street ? addr.street + ', ' : '' ) +\r\n        ( addr.streetNumber ? addr.streetNumber + ' - ' : '' ) +\r\n        ( addr.district ? addr.district + ', ' : '' ) +\r\n        ( addr.subregion ? addr.subregion + '. ' : '' ) +\r\n        ( addr.region ? addr.region + ', ' : '' ) +\r\n        ( addr.isoCountryCode ? addr.isoCountryCode : '' )  + '.'\r\n    )\r\n}\r\n\r\nfunction mapEmotions(emotions, layout='grid') {\r\n    var userEmotionGroups = layout=='grid' ? [[],[],[],[]] : ( layout=='spread' ? [[]] : [[],[]] )\r\n    var emotionLabels = layout=='grid' ? emotionGroupsNames : ( layout=='type' ? emotionTypes : (layout=='spread' ? [''] : emotionEnergy ) )\r\n    for (let emotion of emotions) {\r\n        if (layout=='grid') {\r\n            if (emotion.type=='Positiva') {\r\n                if (emotion.energy=='Calmo(a)')\r\n                    userEmotionGroups[0] = [ ...userEmotionGroups[0], emotion]\r\n                else if (emotion.energy=='Energizado(a)')\r\n                    userEmotionGroups[1] = [ ...userEmotionGroups[1], emotion]\r\n            } else if (emotion.type=='Negativa') {\r\n                if (emotion.energy=='Calmo(a)')\r\n                    userEmotionGroups[2] = [ ...userEmotionGroups[2], emotion]\r\n                else if (emotion.energy=='Energizado(a)')\r\n                    userEmotionGroups[3] = [ ...userEmotionGroups[3], emotion]\r\n            }\r\n        } else if (layout=='type') {\r\n            if (emotion.type=='Positiva')\r\n                userEmotionGroups[0] = [ ...userEmotionGroups[0], emotion]\r\n            else if (emotion.type=='Negativa')\r\n                userEmotionGroups[1] = [ ...userEmotionGroups[1], emotion]\r\n        } else if (layout=='energy') {\r\n            if (emotion.energy=='Calmo(a)')\r\n                userEmotionGroups[0] = [ ...userEmotionGroups[0], emotion]\r\n            else if (emotion.energy=='Energizado(a)')\r\n                userEmotionGroups[1] = [ ...userEmotionGroups[1], emotion]\r\n        } else if (layout=='spread') {\r\n            userEmotionGroups[0] = [ ...userEmotionGroups[0], emotion]\r\n        }\r\n    }\r\n    return [userEmotionGroups, emotionLabels]\r\n}\r\n\r\nfunction sortObjListByKey(objList, objKey) {\r\n    const keys = objList.map(obj => obj[objKey])\r\n    const sortedKeys = [...keys].sort()\r\n    var newObjList = []\r\n    sortedKeys.forEach(key => {\r\n        newObjList.push( objList[keys.indexOf(key)] )\r\n    })\r\n    return newObjList\r\n}\r\n\r\nexport default class PostEntranceScreen extends Component {\r\n  \r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            user: this.props.appState.user,\r\n\r\n            date: '',\r\n            startTime: '',\r\n            endTime: '',\r\n            createdAt: '',\r\n            lastEdited: [],\r\n\r\n            star: false,\r\n            selectedMood: '',\r\n            emotions: [],\r\n            jornalEntry: '',    \r\n            address: '',\r\n            location: null,\r\n            weather: null,\r\n\r\n            selectedEntry: 'Avaliação',\r\n            isMoodUnmarked: true,\r\n            isSelectedEmotions: buildIsSelectedEmotions(this.props.appState.user.emotions),\r\n            selectedEmotionLayout: this.props.appState.user.layout,\r\n            isFetchingLocationOrWeather: false,\r\n            isPostEntryLoading: false,\r\n            isDeleteEmotionLoading: false,\r\n            isSaveEmotionLoading: false,\r\n            deleteEmotionMode: false,\r\n            isUpdateUserDataLoading: false,\r\n\r\n            locationPermission: null,\r\n            userCoordinates: null,\r\n            loginMsg: '',\r\n        };\r\n\r\n        this.initializeEntry = this.initializeEntry.bind(this);\r\n        this.onSaveButtonPress = this.onSaveButtonPress.bind(this);\r\n        this.saveButton = this.saveButton.bind(this);\r\n        this.setLoginMsg = this.setLoginMsg.bind(this);\r\n        this.EmotionButtons = this.EmotionButtons.bind(this);\r\n        this.MoodButtons = this.MoodButtons.bind(this);\r\n        this.postEntryHeader = this.postEntryHeader.bind(this);\r\n        this.onEmotionButtonPress = this.onEmotionButtonPress.bind(this);\r\n        this.onMoodButtonPress = this.onMoodButtonPress.bind(this);\r\n        this.inputCardBody = this.inputCardBody.bind(this);\r\n        this.setSelectedEntry = this.setSelectedEntry.bind(this);\r\n        this.InputCard = this.InputCard.bind(this);\r\n        this.JornalInput = this.JornalInput.bind(this);\r\n        this.postNewEntryAsync = this.postNewEntryAsync.bind(this);\r\n        this.updateUserData = this.updateUserData.bind(this);\r\n        this.deleteEmotion = this.deleteEmotion.bind(this);\r\n        this.onEmotionButtonLongPress = this.onEmotionButtonLongPress.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log('\"PostEntry\" component did mount.')\r\n        this.initializeEntry()\r\n    }\r\n\r\n    postEntryHeader() {\r\n        return(\r\n            <View style={[styles.cardRow, {justifyContent: 'space-between'}]}>\r\n                <Pressable onPress={() => {this.props.navigation.goBack()}} hitSlop={relativeToScreen(10)} style={styles.postButton}>\r\n                    <Icon name='arrow-back' fill={styles.theme.color+'b'} height={relativeToScreen(29)} width={relativeToScreen(29)}/>\r\n                </Pressable>\r\n                <View style={[styles.entryCardEmotionBadge, {flexDirection: 'row', alignItems: 'center'}]}>\r\n                    <Text style={styles.datetimeTitle}> { formatPostEntryDatetimeTitle(this.props.route.params.currentEntry.date, this.state.startTime) } </Text>\r\n                    <Icon name='edit' fill='rgba(75,75,75,1)' height={relativeToScreen(20)} width={relativeToScreen(20)}/>\r\n                </View>\r\n                <Pressable onPress={() => {this.setState({star: !this.state.star})}}  hitSlop={relativeToScreen(10)} style={styles.postButton}>\r\n                    <Icon name={this.state.star ? 'star' : 'star-outline'} fill={this.state.star ? 'gold' : styles.theme.color+'b' } height={relativeToScreen(30)} width={relativeToScreen(30)}/>\r\n                </Pressable>\r\n            </View>\r\n        )\r\n    }\r\n\r\n    MoodButtons() {\r\n        return moods.map((item, index) => {\r\n            const selected = this.state.selectedMood == item\r\n            const isMoodUnmarked = this.state.isMoodUnmarked\r\n            const selColor = moodColorsRGBA[index]\r\n            return(\r\n                <View key={'mood '+index} style={styles.moodButton}>\r\n                    <VectorIcon\r\n                    name={moodIcons[index]}\r\n                    size={isMoodUnmarked ? relativeToScreen(52) : (selected ? relativeToScreen(57) : relativeToScreen(50)) }\r\n                    color={ isMoodUnmarked ? selColor : (selected ? selColor : moodColorsTransp(0.5)[index]) }\r\n                    onPress={this.onMoodButtonPress(item)}\r\n                    />\r\n                </View>\r\n            )\r\n        })\r\n    }\r\n\r\n    onMoodButtonPress(item) {\r\n        function selectMood() {\r\n            if (this.state.selectedMood==item) {\r\n                this.setState({selectedMood: null, isMoodUnmarked: true})\r\n            } else {\r\n                this.setState({selectedMood: item, isMoodUnmarked: false})\r\n            }\r\n        }\r\n        selectMood = selectMood.bind(this);\r\n        return selectMood\r\n    }\r\n\r\n    EmotionButtons(emotions) {\r\n        return(\r\n            sortObjListByKey(emotions, 'name').map( emotion => (\r\n                <Pressable\r\n                key={'emotion-' + emotion.name}\r\n                title={emotion.name}\r\n                onPress={this.onEmotionButtonPress(emotion.name)}\r\n                onLongPress={this.onEmotionButtonLongPress(emotion.name)}\r\n                suppressHighlighting={true}\r\n                selectable={false}\r\n                >\r\n                    <Text\r\n                    selectable={false}\r\n                    // selectionColor={'#0000'}\r\n                    onLongPress={null}\r\n                    style={[styles.emotionBadge,\r\n                        {backgroundColor: this.state.isSelectedEmotions[emotion.name] ? 'lightblue' : 'aliceblue' }\r\n                    ]}\r\n                    >\r\n                        {emotion.name}\r\n                        </Text>\r\n                </Pressable>\r\n            ))\r\n        )\r\n    }\r\n\r\n    onEmotionButtonPress(emotion) {\r\n        function selectEmotion () {\r\n            this.setState({\r\n                isSelectedEmotions: {\r\n                    ...this.state.isSelectedEmotions,\r\n                    [emotion]: !this.state.isSelectedEmotions[emotion]\r\n                }\r\n            })    \r\n        }\r\n        selectEmotion = selectEmotion.bind(this);\r\n        return selectEmotion\r\n    }\r\n\r\n    onEmotionButtonLongPress(emotion) { \r\n        function selectEmotion () {\r\n            if (this.state.deleteEmotionMode) {\r\n                this.deleteEmotion(emotion)\r\n            }\r\n        }\r\n        selectEmotion = selectEmotion.bind(this);\r\n        return selectEmotion\r\n    }\r\n\r\n    JornalInput() {\r\n        return(\r\n            <TextInput\r\n            multiline\r\n            scrollEnabled\r\n            placeholder='Escreva aqui...'\r\n            placeholderTextColor='rgba(255,255,255,0.6)'\r\n            onChangeText={text => this.setState({jornalEntry: text})}\r\n            value={this.state.jornalEntry}\r\n            style={[styles.jornalText, styles.theme]}\r\n            >\r\n            </TextInput>\r\n        )\r\n    }\r\n\r\n    inputCardBody(sectionName, cardBodyStyle, cardBodyContent) {\r\n        if (this.state.selectedEntry === sectionName) {\r\n            if (sectionName == 'Emoções') {\r\n                const [userEmotionGroups, emotionLabels] = mapEmotions(this.props.appState.user.emotions, this.state.selectedEmotionLayout)\r\n                return(\r\n                    <>\r\n                        { userEmotionGroups.map((emotions, index) => (\r\n                            <View key={'emotion-group-' + index} style={{width: '100%', alignItems: 'center', marginVertical: relativeToScreen(10)}}>\r\n                                { emotionLabels[index] ? <Text style={{fontSize: relativeToScreen(15), color: 'white', marginVertical: relativeToScreen(8)}}>{emotionLabels[index]}</Text> : null }\r\n                                <View key={index} style={[styles.cardRow, cardBodyStyle]}>\r\n                                    {cardBodyContent(emotions)}\r\n                                </View>\r\n                            </View>\r\n                        )) }\r\n                        <EditEmotions\r\n                        {...this.props}\r\n                        {...this.state}\r\n                        setParentState={this.setState.bind(this)}\r\n                        updateUserData={this.updateUserData}\r\n                        setAlertMsg={this.setLoginMsg}\r\n                        />\r\n                    </>\r\n\r\n                )\r\n            } else {\r\n                return(\r\n                    <View style={[styles.cardRow, cardBodyStyle]}>\r\n                        {cardBodyContent}\r\n                    </View>\r\n                )    \r\n            }\r\n        } else {\r\n            return(\r\n                <></>\r\n            )\r\n        }\r\n    }\r\n\r\n    InputCard(sectionName, icon, cardBodyStyle, cardBodyContent) {\r\n        return(\r\n            <View style={[styles.card]} >\r\n                <Pressable style={styles.cardRow} onPress={this.setSelectedEntry(sectionName)} >\r\n                    <Icon name={icon} fill={styles.theme.color+'c'} height={relativeToScreen(28)} width={relativeToScreen(28)} style={styles.entryIcon} />\r\n                    <Text style={styles.entryTitle}> {sectionName} </Text>\r\n                </Pressable>    \r\n                {this.inputCardBody(sectionName, cardBodyStyle, cardBodyContent)}  \r\n            </View>   \r\n        )\r\n    }\r\n\r\n    setSelectedEntry (entry) {\r\n        function setSelected() {\r\n            this.setState( {selectedEntry:  this.state.selectedEntry === entry ? null : entry  } )\r\n        }\r\n        setSelected = setSelected.bind(this);\r\n        return setSelected\r\n    }\r\n\r\n    loginMsg() {\r\n        return(\r\n          <View style={[styles.login.msgBox, this.state.loginMsg ? {} : {height: 0, backgroundColor: 'transparent', borderColor: 'transparent'} ]}>\r\n            <Text style={styles.login.msg}>{this.state.loginMsg}</Text>\r\n          </View>\r\n        )\r\n    }\r\n\r\n    setLoginMsg(msg) {\r\n        this.setState({loginMsg: msg})\r\n        setTimeout( () => this.setState({loginMsg: ''}) , 1000 * 5 )\r\n    }    \r\n\r\n    async initializeEntry() {\r\n        const currentEntry = this.props.route.params.currentEntry\r\n        const user = this.props.appState.user\r\n        switch (currentEntry.type) {\r\n            case 'new':\r\n                console.log('POST ENTRY STATUS: INITIATING BLANK NEW ENTRY! FETCHING LOCATION AND WEATHER DATA...')\r\n                this.setState({\r\n                    date: currentEntry.date,\r\n                    startTime: getTime(),\r\n                    endTime: '',\r\n                    isFetchingLocationOrWeather: true\r\n                })\r\n                await this.checkIfLocationEnabled();\r\n                await this.getCurrentLocation();                    \r\n                await this.fetchWeather()\r\n                this.setState({isFetchingLocationOrWeather: false})\r\n            break;\r\n        \r\n            case 'custom-date':\r\n                console.log('POST ENTRY STATUS: INITIALIZING CUSTOM DATE ENTRY! SETTING DATE TO: ' + currentEntry.date)\r\n                this.setState({\r\n                    date: currentEntry.date,\r\n                    startTime: '',\r\n                    endTime: '',\r\n                })\r\n                break\r\n\r\n            case 'edit':\r\n                const entry = currentEntry.entry\r\n                const currentEmotions = entry.emotions.map(emotion => emotion.name)\r\n                var isSelectedEmotionsNew = {}\r\n                for ( let emotion of user.emotions ) {\r\n                    isSelectedEmotionsNew[emotion.name] = currentEmotions.includes(emotion.name)\r\n                }\r\n\r\n                this.setState({\r\n                    date: entry.date,\r\n                    startTime: entry.startTime,\r\n                    endTime: entry.endTime,\r\n                    createdAt: entry.createdAt,\r\n                    lastEdited: entry.lastEdited,\r\n                    star: entry.star,\r\n                    selectedMood: entry.mood,\r\n                    isSelectedEmotions: isSelectedEmotionsNew,\r\n                    jornalEntry: entry.jornal,\r\n                    address: entry.address,\r\n                    location: entry.location,\r\n                    weather: entry.weather,\r\n                    isMoodUnmarked: false,\r\n                })\r\n                break\r\n    \r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    updateUserData() {\r\n        console.log('UPDATING USER DATA IN \"PostEntryComponent\"...')\r\n        this.setState({isUpdateUserDataLoading: true})\r\n        const user = this.props.appState.user\r\n\r\n        const oldEmotions = Object.keys(this.state.isSelectedEmotions)\r\n        const currentEmotions = user.emotions.map(emotion => emotion.name)\r\n        const newEmotions = currentEmotions.filter(emotion => oldEmotions.includes(emotion))\r\n\r\n        const newEmotionsSelected = buildIsSelectedEmotions(newEmotions)\r\n        oldEmotions.forEach(emotion => { \r\n            if (currentEmotions.includes(emotion)) \r\n                newEmotionsSelected[emotion] = this.state.isSelectedEmotions[emotion]\r\n        })\r\n\r\n        this.setState({\r\n            // user: user,\r\n            isSelectedEmotions: newEmotionsSelected,\r\n            isUpdateUserDataLoading: false\r\n        })\r\n    }\r\n\r\n    saveButton() {\r\n        const isDataLoading = (\r\n            this.state.isFetchingLocationOrWeather |\r\n            this.state.isPostEntryLoading |\r\n            this.state.isSaveEmotionLoading |\r\n            this.state.isDeleteEmotionLoading |\r\n            this.props.appState.isUserDataSyncing |\r\n            this.state.isUpdateUserDataLoading\r\n        )\r\n        var color;\r\n        switch (true) {\r\n            case this.state.isFetchingLocationOrWeather:\r\n                color = 'brown'\r\n                break;\r\n        \r\n            case this.state.isPostEntryLoading:\r\n                color = 'black'\r\n                break;\r\n            case this.state.isSaveEmotionLoading:\r\n                color = 'green'\r\n                break;\r\n            case this.state.isDeleteEmotionLoading:\r\n                color = 'red'\r\n                break;\r\n            case this.props.appState.isUserDataSyncing:\r\n                color = 'blue'\r\n                break;\r\n            case this.state.isUpdateUserDataLoading:\r\n                color = 'green'\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        return(\r\n            <Pressable\r\n            onPress={this.onSaveButtonPress}\r\n            disabled={isDataLoading}\r\n            style={styles.saveButton}\r\n            >\r\n                { isDataLoading ? (\r\n                    <ActivityIndicator size='small' color={color} />\r\n                ) : (\r\n                    <Text style={styles.saveButtonLabel}> Salvar </Text>\r\n                ) }\r\n            </Pressable>\r\n        )\r\n    }\r\n\r\n    onSaveButtonPress() {\r\n        if (!this.state.selectedMood) {\r\n            this.setLoginMsg('Adicione uma avaliação para continuar.')\r\n            this.setState({selectedEntry: 'Avaliação'})\r\n            return\r\n        }\r\n        const currentEntry = this.props.route.params.currentEntry\r\n        var lastEdited = getTime()\r\n        var createdAt, endTime\r\n        switch (currentEntry.type) {\r\n            case 'new':\r\n                endTime = lastEdited\r\n                createdAt = lastEdited\r\n                break;\r\n            case 'custom-date':\r\n                endTime = this.state.endTime // Returns empty string ''.\r\n                createdAt = lastEdited\r\n                break\r\n            case 'edit':\r\n                endTime = this.state.endTime\r\n                createdAt = this.state.createdAt\r\n                break\r\n            default:\r\n                break;\r\n        }\r\n        const newEntryPost = {\r\n            date: this.state.date,\r\n            startTime: this.state.startTime,\r\n            endTime: endTime,\r\n            createdAt: createdAt,\r\n            lastEdited: [ ...this.state.lastEdited, {date: Today(), time: lastEdited}],\r\n            star: this.state.star,\r\n            mood: this.state.selectedMood,\r\n            emotions: this.props.appState.user.emotions.filter( emotion => this.state.isSelectedEmotions[emotion.name] ),\r\n            jornal: this.state.jornalEntry,\r\n            address: this.state.address,\r\n            location: this.state.location,\r\n            weather: this.state.weather,\r\n        }\r\n        this.postNewEntryAsync(newEntryPost)\r\n    }\r\n    \r\n    async postNewEntryAsync(newEntry) {\r\n        this.setState({ isPostEntryLoading: true });\r\n        var user = this.props.appState.user;\r\n        const currentEntry = this.props.route.params.currentEntry\r\n        const editMode = currentEntry.type === 'edit';\r\n        try {\r\n            console.log('POST ENTRY STATUS: Started...')\r\n            var postUserEntryResult = {ok: false, status: '999', statusText: 'Post not fetched yet.'}\r\n            const postUserEntryOpts = { \r\n                method: editMode? 'PUT' : 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify( newEntry ),\r\n            }\r\n            // var postUserEntryResult = await fetch('http://localhost:3000/Users/' + info.username + '/entries', postUserEntryOpts);\r\n            postUserEntryResult = await fetch( appServerURI + 'Users/' + user.username + '/entries' + (editMode ? '/'+currentEntry.entry._id : ''), postUserEntryOpts);\r\n            const postUserEntryStatus = 'Status: ' + postUserEntryResult.status + ', ' + postUserEntryResult.statusText\r\n\r\n            if (postUserEntryResult.ok) {\r\n                console.log('POST ENTRY STATUS: Successful.')\r\n                console.log(postUserEntryStatus)\r\n                    \r\n            } else {\r\n                console.log('POST ENTRY STATUS: Failed. Throwing error...')\r\n                throw new Error(postUserEntryStatus)\r\n            }\r\n\r\n        } catch (error) {\r\n            this.setLoginMsg('Erro no servidor. Tente novamente...')\r\n            console.log('Erro capturado:')\r\n            console.log(error);\r\n\r\n        } finally {\r\n            console.log('POST ENTRY STATUS: Finished.')\r\n            this.setState({ isPostEntryLoading: false });\r\n            if (postUserEntryResult.ok) {\r\n                console.log('proceding to SYNC USER DATA IN RESPONSE TO SUCCESSFUL USER ENTRY POST... ')\r\n                this.props.appState.syncUserData()\r\n                // this.props.route.params.setMainScreenState({\r\n                //     selectedEntryId: null,\r\n                //     selectedDate: currentEntry.type == 'new' ? Today() : this.props.route.params.getMainScreenState().selectedDate,\r\n                // })\r\n                this.props.navigation.navigate('Entrances', {\r\n                    selectedEntryId: null,\r\n                    selectedDate: newEntry.date,\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    async deleteEmotion(emotion) {\r\n        this.setState({ isDeleteEmotionLoading: true });\r\n        var user = this.props.appState.user;\r\n        try {\r\n            console.log('DELETE EMOTION STATUS: Started...')\r\n            var postEmotionResult = {ok: false, status: '999', statusText: 'Post not fetched yet.'}\r\n            const postUserEntryOpts = { \r\n                method: 'DELETE',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n            }\r\n            // var postUserEntryResult = await fetch('http://localhost:3000/Users/' + info.username + '/emotions', postUserEntryOpts);\r\n            postEmotionResult = await fetch( appServerURI + 'Users/' + user.username + '/emotions/' + emotion, postUserEntryOpts);\r\n            const postEmotionStatus = 'Status: ' + postEmotionResult.status + ', ' + postEmotionResult.statusText\r\n\r\n            if (postEmotionResult.ok) {\r\n                console.log('DELETE EMOTION STATUS: Successful.')\r\n                console.log(postEmotionStatus)\r\n                    \r\n            } else {\r\n                console.log('DELETE EMOTION STATUS: Failed. Throwing error...')\r\n                throw new Error(postEmotionStatus)\r\n            }\r\n\r\n        } catch (error) {\r\n            this.setLoginMsg('Erro no servidor. Tente novamente...')\r\n            console.log('Erro capturado:')\r\n            console.log(error);\r\n\r\n        } finally {\r\n            console.log('DELETE EMOTION STATUS: Finished.')\r\n            this.setState({ isDeleteEmotionLoading: false });\r\n            if (postEmotionResult.ok) {\r\n                await this.props.appState.syncUserData();\r\n                this.updateUserData();\r\n            }\r\n        }\r\n    }\r\n\r\n    async fetchWeather() {\r\n        try {\r\n            if (this.state.userCoordinates) {\r\n                console.log('FETCH WEATHER STATUS: STARTED...!')\r\n                const coords = this.state.userCoordinates\r\n                const queryParams = {\r\n                    lat: coords.latitude,\r\n                    lon: coords.longitude,\r\n                    units: 'metric'\r\n                }\r\n                const fetchOptions = {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                    },    \r\n                    body: JSON.stringify({\r\n                        queryParams: queryParams\r\n                    })\r\n                }\r\n                const response = await fetch(appServerURI + 'api/weather', fetchOptions)\r\n                const resStatus = 'Status: ' + response.status + ', Status Text: ' + response.statusText\r\n                if (!response.ok) \r\n                    throw new Error(resStatus)\r\n                else {\r\n                    const weather = await response.json()\r\n                    console.log('FETCH WEATHER STATUS: SUCCESSFUL!')\r\n                    const weatherInfo = {\r\n                        coords: weather.coord,\r\n                        name: weather.name,\r\n                        weather: weather.weather[0],\r\n                        main: weather.main,\r\n                        clouds: weather.clouds,\r\n                        wind: weather.wind,\r\n                        visibility: weather.visibility,\r\n                    }\r\n                    this.setState({weather: weatherInfo})\r\n                }\r\n            } else {\r\n            // this.setLoginMsg('Não foi possível obter as condições do tempo. Tente reabrir essa tela...')\r\n            console.log('FETCH WEATHER STATUS: UNABLE TO START! USER POSITION NOT AVAILABLE.')\r\n            }\r\n        } catch (error) {\r\n            this.setLoginMsg('Não foi possível obter as condições do tempo. Tente reabrir essa tela...')\r\n            console.log('FETCH WEATHER STATUS: ERROR! LOGGING ERROR...')\r\n            console.log(error)\r\n\r\n        } finally {\r\n            console.log('FETCH WEATHER STATUS: FINISHED!')    \r\n        }\r\n    }\r\n\r\n    // Check if device has location services enabled\r\n    async checkIfLocationEnabled () {\r\n\r\n        try{\r\n            console.log('GEOCODING PROCESS (CHECK): CHECKING IF USER HAS SERVICES ENABLED.' )\r\n            let enabled = await Location.hasServicesEnabledAsync();            \r\n\r\n            if (!enabled) {\r\n                console.log('GEOCODING PROCESS (CHECK): CHECKED! USER DOES NOT HAVE SERVICES ENABLED.' )\r\n                this.setLoginMsg('Não foi possível obter sua localização. Habilite o serviço de localização para associar um endereço a essa entrada...')\r\n            } else {\r\n                console.log('GEOCODING PROCESS (CHECK): CHECKED! USER HAS SERVICES ENABLED.')\r\n            }\r\n\r\n        } catch(error) {\r\n            this.setLoginMsg('Não foi possível conferir se o serviço de localização está ativado. Tente reabrir essa tela...')\r\n            console.log(\"GEOCODING PROCESS (CHECK): ERROR IN SERVICES PERMISSION CHECK! COULD'NT CHECK IF USER HAS SERVICES ENABLED.\")\r\n        \r\n        } finally {\r\n            console.log(\"GEOCODING PROCESS (CHECK): FINISHED!\")\r\n        }\r\n    };\r\n\r\n    // Check for permission, get current user position and use reverse geocoding for user coordinates\r\n    async getCurrentLocation() {\r\n\r\n        try {\r\n\r\n            if (this.state.locationPermission === 'granted') {\r\n                console.log('GEOCODING PROCESS (PERMISSION): PERMISSION ALREADY GRANTED. SKIPPING REQUEST...')\r\n            } else {\r\n                console.log('GEOCODING PROCESS (PERMISSION): REQUESTING PERMISSION ASYNC...')\r\n                let { status } = await Location.requestForegroundPermissionsAsync()\r\n                // let { status } = await Location.requestBackgroundPermissionsAsync()        \r\n                this.setState({locationPermission: status})\r\n    \r\n                if (status !== 'granted') {\r\n                    console.log('GEOCODING PROCESS (PERMISSION): PERMISSION NOT GRANTED!')\r\n                    this.setLoginMsg('Permissão de localização não concedida. Permita que o app use os serviços de localização para associar um endereço a essa entrada...')\r\n                    return \r\n    \r\n                } else {\r\n                    console.log('GEOCODING PROCESS (PERMISSION): PERMISSION GRANTED!')\r\n                }\r\n            }\r\n\r\n            console.log('GEOCODING PROCESS (REQUEST): GETTING CURRENT USER POSITION ASYNC...')\r\n            let { coords } = await Location.getCurrentPositionAsync();\r\n            \r\n            if (coords) {   \r\n                console.log(`GEOCODING PROCESS (REQUEST): CURRENT USER POSITION FOUND... Latitude: ${latitude}, Logitude: ${longitude}`)\r\n                console.log('GEOCODING PROCESS (REVERSE GEOCODING): REVERSE GEOCODE ASYNC...')  \r\n                this.setState({userCoordinates: coords})\r\n                const { latitude, longitude } = coords;\r\n                let response = await Location.reverseGeocodeAsync({ latitude, longitude });\r\n        \r\n                if (response) {\r\n                    console.log('GEOCODING PROCESS (REVERSE GEOCODING): REVERSE GEOCODE SUCCESSFUL! UPDATING STATE...')  \r\n                    this.setState({ address: formattedAddress(response[0]), location: { position: coords, address: response[0] } })\r\n\r\n                } else {\r\n                    console.log('GEOCODING PROCESS (REVERSE GEOCODING): REVERSE GEOCODE FAILED! LOGGING RESPONSE...')  \r\n                    console.log(response)\r\n                }\r\n            } else {\r\n                console.log(`GEOCODING PROCESS (REVERSE GEOCODING): USER POSITION NOT FOUND! UNABLE TO PROCEED TO REVERSE GEOCODING...`)\r\n            }\r\n        } catch (error) {\r\n            this.setLoginMsg('Não foi possível obter a localização atual. Tente reabrir essa tela...')\r\n            console.log('GEOCODING PROCESS: ERROR IN USER POSITION REQUEST! LOGGING ERROR...')\r\n            console.log(error)\r\n        \r\n        } finally {\r\n            console.log('GEOCODING PROCESS: USER POSITION REQUEST FINISHED. PROCEEDING TO FETCH WEATHER DATA...')\r\n        }\r\n    };\r\n\r\n    setFontColor() {\r\n        const fontColorDark = this.props.appState.user.settings.fontColorDark\r\n        const fontColor = fontColorDark ? '#000' : '#fff'\r\n        const altFontColor = fontColorDark ? '#fff' : '#000'\r\n        for (let style of ['theme', 'entryTitle']) {\r\n            styles[style] = { ...styles[style], color: fontColor }\r\n        }\r\n        styles.altTheme.color = altFontColor\r\n        styles.altTheme.backgroundColor = altFontColor\r\n    }    \r\n\r\n    render() {\r\n        console.log('Rendering \"PostEntry\" component...')\r\n        this.setFontColor()\r\n        const settings = this.props.appState.user.settings\r\n        const backgroundColor = settings.backgroundColor\r\n        const backgroundImage = settings.backgroundImage\r\n        const imgURI =  settings.displayBackgroundImage ? (backgroundImage ? ( settings.enableHighResolution ? backgroundImage.urls.raw : backgroundImage.urls.regular ) : null ) : null\r\n        return(\r\n            <ImageBackground source={{'uri' : imgURI}} style={[styles.mainView, {backgroundColor: backgroundColor}]}>\r\n                <ScrollView style={styles.scrollView}>\r\n                    <View style={styles.section}>\r\n                            {this.postEntryHeader()}\r\n                            {this.InputCard('Avaliação', 'smiling-face', {justifyContent: 'space-between'}, this.MoodButtons())}\r\n                            {this.InputCard('Emoções', 'checkmark-square-outline', {flexWrap: 'wrap', justifyContent: 'center'}, this.EmotionButtons)}\r\n                            {this.InputCard('Jornal', 'book', {flexDirection: 'column', minHeight: relativeToScreen(130)}, this.JornalInput())}\r\n                    </View>\r\n                </ScrollView>  \r\n                <this.saveButton />\r\n                {this.loginMsg()}\r\n            </ImageBackground>\r\n        )    \r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { View, Text, ImageBackground, TextInput, Pressable, Platform, ActivityIndicator, Switch } from 'react-native';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport NetInfo from \"@react-native-community/netinfo\";\r\nimport * as Device from 'expo-device';\r\nimport { Icon } from 'react-native-eva-icons'\r\n\r\nimport styles, { relativeToScreen } from '../styles/loginStyles'\r\nlet backgroundColor = \"#5926a6\"\r\nlet imgURI = require('../assets/wallpaper.png')\r\n\r\nconst defaultEmotions = require('../shared/emotionsConfig')\r\nconst userScheme = {\r\n  emotions: defaultEmotions,\r\n  entries: [],\r\n  layout: 'grid',\r\n  settings: {\r\n    backgroundColor: \"#5926a6\",\r\n    backgroundImage: require('../shared/defaultWallpaper.json'),\r\n    displayBackgroundImage: true,\r\n    enableHighResolution: false,\r\n    fontColorDark: false,\r\n  }\r\n}\r\n\r\n// App server connection settings\r\nconst appServerURI = 'https://mood-tracker-server.herokuapp.com/'\r\n\r\n// Email Validation settings\r\nconst falseParams = ['validateDNS', 'checkCatchAll', 'checkFree', 'checkDisposable']\r\n\r\nasync function validateEmail(email) {\r\n  console.log('EMAIL VERIFICATION STATUS: Fetching email verification api...')\r\n  var emailStatus = {ok: false, status: 'Email não verificado.'}\r\n  try {\r\n    var queryParams = {\r\n      emailAddress: email,\r\n    }\r\n    falseParams.forEach(param => queryParams[param]='false')\r\n    const fetchOptions = {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        },    \r\n        body: JSON.stringify({\r\n          queryParams: queryParams\r\n        }),\r\n    }\r\n    const apiResp = await fetch(appServerURI + 'api/email', fetchOptions)\r\n  \r\n    if (apiResp.ok) {  \r\n      console.log('EMAIL VERIFICATION STATUS: Api fetch request successful.')\r\n      const apiRespJson = await apiResp.json()\r\n      if ( apiRespJson.formatCheck!='true' ) {\r\n        emailStatus.status = 'Email inválido.'\r\n      } else if ( apiRespJson.smtpCheck!='true' ) {\r\n        emailStatus.status = 'Email não existe.'\r\n      } else {\r\n        emailStatus = {ok: true, status: 'Email válido.'}\r\n      }\r\n      return emailStatus\r\n  \r\n    } else {\r\n      console.log('EMAIL VERIFICATION STATUS: Api fetch request failed. Throwing error...')\r\n      throw new Error('Status: ' + apiResp.status + ', Status Text: ' + apiResp.statusText)\r\n    }\r\n  } finally {\r\n    console.log('EMAIL VERIFICATION STATUS: Concluído')\r\n  }\r\n}\r\n\r\nfunction validatePassword(password) {\r\n  console.log('VALIDATING PASSWORD FOR SIGNUP...')\r\n  const hasMinLength = password.length > 5\r\n  var res\r\n  if (!hasMinLength) {\r\n    res = {ok: false, status: 'A senha deve ter no mínimo 6 caractéres.'}\r\n  } else {\r\n    res = {ok: true, status: 'Senha válida.'}\r\n  }\r\n  return res\r\n}\r\n\r\n// async function fetchUsers() {\r\n//   var UsersResponse = await fetch( appServerURI + 'Users', { method: 'GET' });\r\n//   const UsersStatus = 'Status: ' + UsersResponse.status + ', ' + 'Status Text: ' + UsersResponse.statusText\r\n//   if (UsersResponse.ok) {\r\n//     console.log('fetch GET request for users data at signin successful.');\r\n//     console.log(UsersStatus)\r\n\r\n//     const Users = await UsersResponse.json();\r\n//     return Users\r\n//   } else {\r\n//     console.log('fetch GET request for users data at signin failed. Printing fetch response...')\r\n//     console.log(JSON.stringify(UsersResponse))\r\n//     console.log('Returning null...')\r\n//     return null\r\n//   }\r\n// }\r\n\r\nasync function registerLocallyIfUserIsNewToDevice(user) {\r\n  var localAuthInfo = await AsyncStorage.getItem('LocalAuthenticationInfo')\r\n  localAuthInfo = JSON.parse(localAuthInfo)  \r\n  if ( !localAuthInfo.users.filter(localUser => localUser._id == user._id)[0] ) {\r\n    console.log('SIGNIN STATUS: Primeiro login do usuário nesse aparelho. Adicionando informações do usuário no armazenamento local...')\r\n    const updatedLocalAuthInfo = {\r\n      ...localAuthInfo,\r\n      users: [ \r\n        ...localAuthInfo.users,\r\n        {\r\n          _id: user._id,\r\n          username: user.username,\r\n          email: user.email,\r\n          password: user.password,\r\n        }\r\n      ]\r\n    }\r\n    await AsyncStorage.setItem('LocalAuthenticationInfo', JSON.stringify(updatedLocalAuthInfo))\r\n    console.log('SIGNIN STATUS: Informações do usuário adicionadas no aparelho.')\r\n  } else {\r\n    console.log('SIGNIN STATUS: Informações do usuário já registradas nesse aparelho. Pulando registro do usuário no armazenamento local...')\r\n  } \r\n}\r\n\r\nexport async function keepUserConnectionAlive(id) {\r\n  var localAuthInfo = await AsyncStorage.getItem('LocalAuthenticationInfo')\r\n  localAuthInfo = JSON.parse(localAuthInfo)\r\n\r\n  if ( localAuthInfo.keepConnected.userId != id ) {\r\n    console.log(`SIGNIN STATUS: Usuário optou por ${id ? 'manter conexão ativa. Configurando conexão ativa para o usuário...' : 'desativar conexão ativa. Desativando...' }`)\r\n    const updatedLocalAuthInfo = {\r\n      ...localAuthInfo,\r\n      keepConnected: {\r\n        status: id ? true : false,\r\n        userId: id\r\n      }\r\n    }\r\n    await AsyncStorage.setItem('LocalAuthenticationInfo', JSON.stringify(updatedLocalAuthInfo))\r\n  } else {\r\n    console.log('SIGNIN STATUS: Fazendo login via conexã ativa. Pulando configuração de conexão ativa para o usuário...')\r\n  }\r\n}\r\n\r\nclass LoginScreen extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      userInfo: {\r\n        password: '',\r\n        email: '',\r\n        username: '',\r\n        settings: null,\r\n      },\r\n      keepConnected: true,\r\n      loginMsg: '',\r\n      isUserAuth: false,\r\n      isDataLoading: false,\r\n    }\r\n    this.onChangeText = this.onChangeText.bind(this);\r\n    this.submitButton = this.submitButton.bind(this);\r\n    this.loginMsg = this.loginMsg.bind(this);\r\n    this.setLoginMsg = this.setLoginMsg.bind(this);\r\n    this.onSignIn = this.onSignIn.bind(this);\r\n    this.onSignUp = this.onSignUp.bind(this);\r\n    this.LoginScreen = this.LoginScreen.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    console.log('\"LoginScreen\" component did mount...')\r\n    this.restoreUserToken()\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    console.log('\"LoginScreen\" component will unmount...')\r\n  }\r\n\r\n  LoginIcon() {  \r\n    if (this.state.isDataLoading) {\r\n      return <ActivityIndicator color='#000000' />\r\n    } else {\r\n      return <Icon name='log-in-outline' animation='pulse' fill='#000' width={relativeToScreen(30)} height={relativeToScreen(30)} />\r\n    }\r\n  }\r\n\r\n  setLoginMsg(msg) {\r\n    this.setState({loginMsg: msg})\r\n    setTimeout( () => this.setState({loginMsg: ''}) , 1000 * 5 )\r\n  }\r\n\r\n  loginMsg() {\r\n      return(\r\n        <View style={[styles.login.msgBox, this.state.loginMsg ? {} : {backgroundColor: 'transparent', borderColor: 'transparent'} ]}>\r\n          <Text style={styles.login.msg}>{this.state.loginMsg}</Text>\r\n        </View>\r\n      )\r\n  }\r\n\r\n  onChangeText(textField) {\r\n    function setField(text) {\r\n      this.setState( { userInfo: { ...this.state.userInfo, [textField] : text}} )\r\n    }\r\n    setField = setField.bind(this);\r\n    return setField\r\n  }\r\n\r\n  submitButton(sign) {\r\n    const signIn = sign == 'signin'\r\n    return(\r\n      <Pressable\r\n      disabled={this.state.isDataLoading}\r\n      onPress={signIn ? this.onSignIn : this.onSignUp}\r\n      style={[styles.login.button]}\r\n      >\r\n        <Text style={styles.login.buttonLabel}>{ signIn ? 'Entrar' : 'Cadastrar' }</Text>\r\n      </Pressable>\r\n    )\r\n  }\r\n\r\n  LoginScreen = () => {\r\n  return(\r\n      <ImageBackground\r\n      source={imgURI}\r\n      style={[styles.login.mainView, {backgroundColor: backgroundColor, justifyContent: 'space-evenly'}]}\r\n      >\r\n        \r\n        <View style={styles.login.titleView}>\r\n          <Text style={styles.login.title}>Rastreador de humor</Text>\r\n        </View>\r\n\r\n        <View style={styles.login.card}>\r\n          <View style={styles.login.cardHeader} >\r\n            <Text style={styles.login.cardTitle}>Entrar</Text>\r\n          </View>\r\n          <View style={styles.login.cardSection}>\r\n            <TextInput\r\n            placeholder='Email'\r\n            textContentType='emailAddress'\r\n            style={styles.login.inputField}\r\n            onChangeText={this.onChangeText('email')}\r\n            autoComplete='email'\r\n            importantForAutofill='yes'\r\n            value={this.state.userInfo.email}\r\n            />\r\n            <TextInput\r\n            placeholder='Senha'\r\n            textContentType='password'\r\n            secureTextEntry={true}\r\n            style={styles.login.inputField}\r\n            onChangeText={this.onChangeText('password')}\r\n            autoComplete='password'\r\n            importantForAutofill='yes'\r\n            value={this.state.userInfo.password}\r\n            />\r\n          </View>\r\n          <View style={[styles.login.cardSection, {height: '33.0%'}]}>\r\n            {this.submitButton('signin')}\r\n            {this.submitButton('signup')}\r\n            <View style={{flexDirection: 'row', height: relativeToScreen(48), alignSelf: 'stretch', alignItems: 'center', justifyContent: 'flex-end'}}>\r\n              <Text style={{marginRight: Platform.OS=='web' ? relativeToScreen(10) : null }}>Manter-me conectado</Text>\r\n              <Switch\r\n                disabled={this.state.isDataLoading}\r\n                trackColor={{ false: \"#767577\", true: \"#81b0ff\" }}\r\n                thumbColor={this.state.keepConnected ? \"#f4f3f4\" : \"#f4f3f4\"}\r\n                ios_backgroundColor=\"#3e3e3e\" \r\n                onValueChange={() => this.setState({keepConnected: !this.state.keepConnected})}\r\n                value={this.state.keepConnected}\r\n              />\r\n            </View>\r\n          </View>\r\n          <View style={[styles.login.cardSection, {height: '19.04%', justifyContent: 'center'}]}>\r\n            {this.LoginIcon()}\r\n          </View>\r\n        </View>\r\n\r\n        {this.loginMsg()}\r\n\r\n      </ImageBackground>\r\n    )\r\n  }\r\n\r\n  isInputEmpty() {\r\n    if (!this.state.userInfo.email) {\r\n      const errMsg = 'Insira um endereço de email.'\r\n      this.setLoginMsg(errMsg)\r\n      console.log('SIGNIN STATUS: ' + errMsg)\r\n      return true\r\n    } else if (!this.state.userInfo.password) {\r\n      const errMsg = 'Insira uma senha.'\r\n      this.setLoginMsg(errMsg)\r\n      console.log('SIGNIN STATUS: ' + errMsg)\r\n      return true\r\n    } else return false\r\n  }\r\n\r\n  async restoreUserToken() {\r\n    try {\r\n      console.log('RESTORE USER TOKE STATUS: STARTED...')\r\n      var localAuthInfo = await AsyncStorage.getItem('LocalAuthenticationInfo')\r\n      if (localAuthInfo) {\r\n        console.log('RESTORE USER TOKEN STATUS: LOCAL AUTH INFO ALREADY CONFIGURED. LOGGING CURRENT VALUE...')\r\n        localAuthInfo = JSON.parse(localAuthInfo)\r\n\r\n        if (localAuthInfo.keepConnected.status) {\r\n          console.log(`RESTORE USER TOKEN STATUS: USER CONNECTION IS ALIVE FOR USER ID: ${localAuthInfo.keepConnected.userId}. PROCEDING TO SIGNIN...`)\r\n          const user = localAuthInfo.users.filter(user => user._id == localAuthInfo.keepConnected.userId)[0]\r\n          this.setState({\r\n            userInfo: {\r\n              username: user.username,\r\n              email: user.email,\r\n              password: user.password,\r\n            }\r\n          })\r\n          this.onSignIn()\r\n        }\r\n\r\n        else {\r\n          console.log('RESTORE USER TOKEN STATUS: NO USER CONNECTION ALIVE. PROCEEDING TO SIGNIN/SIGNUP ...')\r\n        }\r\n\r\n      } else {\r\n        console.log('RESTORE USER TOKEN STATUS: NO LOCAL AUTH INFO CONFIGURED IN THIS DEVICE. SETTING DEVICE LOCAL AUTH INFO FOR THE FIRST TIME...')\r\n\r\n        var DEVICE_IP_ADDRESS\r\n        NetInfo.fetch(\"wifi\").then(state => {\r\n          DEVICE_IP_ADDRESS = state.details.ipAddress\r\n          console.log(\"RESTORE USER TOKEN STATUS: IP ADDRESS REQUEST SUCCESSFUL. IP ADDRESS: \" + DEVICE_IP_ADDRESS);\r\n        });\r\n\r\n        const initialLocalAuthInfo = {\r\n          IP_ADDRESS: DEVICE_IP_ADDRESS,\r\n          deviceBrand: Device.brand,\r\n          deviceManufacturer: Device.manufacturer,\r\n          deviceModelName: Device.modelName,\r\n          deviceModelId: Device.modelId,\r\n          deviceOsName: Device.osName,\r\n          deviceOsVersion: Device.osVersion,\r\n          deviceName: Device.deviceName,\r\n          deviceType: await Device.getDeviceTypeAsync(),\r\n          users: [],\r\n          keepConnected: {\r\n            status: false,\r\n            userId: null\r\n          }\r\n        }\r\n        await AsyncStorage.setItem('LocalAuthenticationInfo', JSON.stringify(initialLocalAuthInfo))\r\n        console.log('RESTORE USER TOKEN STATUS: DEVICE LOCAL AUTH INFO CONFIGURED FOR THE FIRST TIME. PROCEEDING TO SIGNIN/SIGNUP ...')\r\n      }\r\n\r\n    } catch(error) {\r\n      console.log('RESTORE USER TOKEN STATUS: ERROR. LOGGING ERROR...')\r\n      console.log(error)\r\n    }\r\n  }  \r\n\r\n  async onSignIn() {\r\n\r\n    console.log('SIGNIN STATUS: Started...')\r\n    var info = this.state.userInfo;\r\n    info.email = info.email.trim()\r\n    this.setState({ isDataLoading: true });\r\n\r\n    try {\r\n\r\n      if (this.isInputEmpty()) return\r\n\r\n      var UsersResult = await fetch( appServerURI + 'Users', { method: 'GET' });\r\n      const UsersStatus = 'Status: ' + UsersResult.status + ', ' + 'Status Text: ' + UsersResult.statusText\r\n      if (UsersResult.ok) {\r\n        console.log('fetch GET request for users data at signin successful.');\r\n        console.log(UsersStatus)\r\n      } else {\r\n        console.log('fetch GET request for users data at signin failed. Printing fetch response...')\r\n        console.log(JSON.stringify(UsersResult))\r\n        console.log('Throwing error...')\r\n        throw new Error(UsersStatus)\r\n      }\r\n\r\n      const Users = await UsersResult.json();\r\n      const user = Users.filter((user) => user.email === info.email)[0]\r\n      \r\n      if ( user ) {          \r\n        \r\n        if ( user.password === info.password ) {\r\n\r\n          await registerLocallyIfUserIsNewToDevice(user)\r\n\r\n          if (this.state.keepConnected) {\r\n            await keepUserConnectionAlive(user._id)\r\n          }\r\n          this.setState( {isUserAuth: true, userInfo: user} )\r\n          const successMsg = 'Login realizado com sucesso!'\r\n          this.setLoginMsg(successMsg)\r\n          console.log('SIGNIN STATUS: Sucesso.')\r\n\r\n        } else {\r\n          const errMsg = 'Senha incorreta.'\r\n          this.setLoginMsg(errMsg)\r\n          console.log('SIGNIN STATUS: ' + errMsg);\r\n        }\r\n\r\n      } else {\r\n        const errMsg = 'Email não cadastrado!'\r\n        this.setLoginMsg(errMsg)\r\n        console.log('SIGNIN STATUS: ' + errMsg)\r\n      }\r\n\r\n    } catch (error) {\r\n      const errMsg = 'Erro no servidor! Tente novamente...'\r\n      this.setLoginMsg(errMsg)\r\n      console.log('Error catched in fetch GET request for users data at signin. Printing Error...')\r\n      console.log('SIGNIN STATUS:' + 'Erro capturado. Imprimindo erro...')\r\n      console.log(error);\r\n\r\n    } finally {\r\n      this.setState({ isDataLoading: false });\r\n      console.log('SIGNIN STATUS: Concluido.')\r\n      if (this.state.isUserAuth) {\r\n        console.log('User authenticated. Navigating to \"HomeScreen\"...')\r\n        this.props.setAppState({isUserAuth: true, user: this.state.userInfo})\r\n        // Parent class component method that authenticates the user and redirects to entrances screen.\r\n      }\r\n    }\r\n  }\r\n\r\n  async onSignUp() {\r\n\r\n    console.log('SIGNUP STATUS: started...')\r\n    var info = this.state.userInfo;\r\n    info.email = info.email.trim()\r\n    this.setState({ isDataLoading: true });\r\n    \r\n    try {\r\n\r\n      var postUserResult = {ok: false}\r\n      if (this.isInputEmpty()) return\r\n\r\n      // Validating email and password\r\n      const emailValidation = await validateEmail(info.email)\r\n      console.log('SING UP STATUS: ' + emailValidation.status)\r\n      if (!emailValidation.ok) {\r\n          this.setLoginMsg(emailValidation.status)\r\n          return\r\n      }\r\n\r\n      // Checking if email is already registerd\r\n      var UsersResult = await fetch( appServerURI + 'Users', { method: 'GET' } );  \r\n      const reqStatus = 'Status: ' + UsersResult.status + ', ' + UsersResult.statusText\r\n      if (UsersResult.ok) {\r\n        console.log('fetch GET request for users data at signup successful.')\r\n        console.log(reqStatus)\r\n      } else {\r\n        console.log('fetch GET request for users data at signup failed. Throwing error...')\r\n        throw new Error(reqStatus)\r\n      }\r\n\r\n      const Users = await UsersResult.json();\r\n      const User = Users.filter((user) => user.email === info.email)[0]\r\n      if ( !User ) {\r\n\r\n        // Validating Password\r\n        const passwordCheck = validatePassword(info.password)\r\n        if (!passwordCheck.ok) {\r\n          console.log('SING UP STATUS: ' + passwordCheck.status)\r\n          this.setLoginMsg(passwordCheck.status)\r\n          return\r\n      }\r\n\r\n        // Registering new user by posting user identification to database\r\n        info.username = info.email.split('@')[0]\r\n        const postUserOpts = {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify({ \r\n            ...info,\r\n            ...userScheme\r\n          })\r\n        }\r\n\r\n        postUserResult = await fetch( appServerURI +  'Users/' + info.username, postUserOpts );\r\n        const postUserStatus = 'Status: ' + postUserResult.status + ', ' + postUserResult.statusText\r\n\r\n        if (postUserResult.ok) {\r\n          const successMsg = 'Cadastro realizado com sucesso!'\r\n          this.setLoginMsg(successMsg)\r\n          console.log('fetch POST request for user data at signup successful.')\r\n          console.log(postUserStatus)\r\n          console.log('SING UP STATUS: ' + successMsg)\r\n\r\n        } else {\r\n          console.log('fetch POST request for user data at signup failed. Throwing error...')\r\n          throw new Error(postUserStatus)\r\n        }\r\n\r\n      } else {\r\n        const errMsg = 'Email já cadastrado.'\r\n        this.setLoginMsg(errMsg)\r\n        console.log('SING UP STATUS: ' + errMsg)\r\n      }\r\n\r\n    } catch (error) {\r\n      const errMsg = 'Erro no servidor, tente novamente...'\r\n      this.setLoginMsg(errMsg)\r\n      console.log('SING UP STATUS: Erro capturado. Imprimindo erro...')\r\n      console.log(error);\r\n\r\n    } finally {\r\n      this.setState({ isDataLoading: false })\r\n      console.log('SING UP STATUS: Concluido.')\r\n      if (postUserResult.ok)  this.onSignIn()\r\n    }\r\n  }\r\n\r\n  render() {\r\n    console.log('Rendering \"LoginScreen\" component...')\r\n    return this.LoginScreen()\r\n  }\r\n}\r\n\r\nexport default LoginScreen;","import React, { Component } from 'react';\r\nimport { ImageBackground, View, Text, Pressable, ScrollView, ActivityIndicator, Switch, StatusBar } from 'react-native';\r\nimport { Icon } from 'react-native-eva-icons';\r\nimport { keepUserConnectionAlive } from './LoginComponent';\r\nimport { relativeToScreen } from '../styles/loginStyles';\r\nimport { capitalize } from './subcomponents/EditEmotions';\r\nimport NativeIcon from 'react-native-vector-icons/MaterialCommunityIcons';\r\n\r\n// cors-midpoint uri (needed to avoid cors' allow-cross-origin error when fetching in web platforms)\r\nconst appServerURI = 'https://mood-tracker-server.herokuapp.com/'\r\n\r\nconst colorList = require('../shared/colorList.json')\r\n\r\nvar styles = {\r\n    background: {\r\n    flex: 1,\r\n    paddingTop: StatusBar.currentHeight,\r\n    alignItems: 'center',\r\n    justifyContent: 'space-between',\r\n  },\r\n  foreground: {\r\n    width: relativeToScreen(350),\r\n  },\r\n  header: {\r\n    height: relativeToScreen(110, 'height'),\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    // borderWidth: 1,\r\n  },\r\n  settingsRow: {\r\n    height: relativeToScreen(60),\r\n    paddingHorizontal: relativeToScreen(10),\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n    justifyContent: 'space-between',\r\n    borderRadius: relativeToScreen(10),\r\n    // borderWidth: 1,\r\n  },\r\n  colorBox: {\r\n    height: relativeToScreen(300),\r\n    paddingHorizontal: 0,\r\n    borderColor: 'rgba(200,200,200,0.2)'\r\n  },\r\n  colorRow: {\r\n    width: '100%',\r\n    height: relativeToScreen(60),\r\n    paddingHorizontal: relativeToScreen(10),\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n    justifyContent: 'space-between',\r\n    borderBottomWidth: 1,\r\n    borderColor: 'rgba(200,200,200,0.2)',\r\n    borderRadius: relativeToScreen(10),\r\n  },\r\n  colorSquare: {\r\n    // marginRight: 0,\r\n    width: relativeToScreen(30),\r\n    height: relativeToScreen(30),\r\n    borderRadius: relativeToScreen(6),\r\n    borderColor: 'white'\r\n  },\r\n  logout: {\r\n    height: relativeToScreen(33),\r\n    width: relativeToScreen(85),\r\n    marginTop: 0,\r\n    marginBottom: relativeToScreen(20),\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    // borderWidth: 1,\r\n    // borderColor: 'red',\r\n  },\r\n  h1: {\r\n    fontSize: relativeToScreen(25),\r\n    color: 'white'\r\n  },\r\n  h2: {\r\n    fontSize: relativeToScreen(20),\r\n    color: 'white',\r\n  },\r\n  h3: {\r\n    fontSize: relativeToScreen(17),\r\n    color: 'white',\r\n  },\r\n  h4: {\r\n    fontSize: relativeToScreen(16),\r\n    color: 'white',\r\n  },\r\n}\r\n\r\nexport function blinkButton(setPressed, timeSpan=200) {\r\n  setPressed(true)\r\n  setTimeout(() => {\r\n    setPressed(false)\r\n  }, timeSpan);\r\n}\r\n\r\nexport async function postSettings(settings, username) {\r\n  // fetch post display background image value to user settings in server\r\n  try {\r\n   console.log('POST SETTINGS STATUS: Started...')\r\n   console.log('POST SETTINGS STATUS: LOGGING NEW SETTING VALUES... ')\r\n   console.log(JSON.stringify(settings))\r\n   var postSettingsResult = {ok: false, status: '999', statusText: 'Post not fetched yet.'}\r\n   const postSettingsOpts = { \r\n     method: 'POST',\r\n     headers: {\r\n         'Content-Type': 'application/json',\r\n     },\r\n     body: JSON.stringify( settings ),\r\n   }\r\n   // var postDisplayResult = await fetch('http://localhost:3000/Users/' + this.context.username + '/settings', postColorSettingOpts);\r\n   postSettingsResult = await fetch( `${appServerURI}Users/${username}/settings`, postSettingsOpts);\r\n   const postSettingsStatus = 'Status: ' + postSettingsResult.status + ', ' + postSettingsResult.statusText\r\n\r\n   if (postSettingsResult.ok) {\r\n     console.log('POST SETTINGS STATUS: Successful.')\r\n     console.log(postSettingsStatus)\r\n         \r\n   } else {\r\n     console.log('POST SETTINGS STATUS: Failed. Throwing error...')\r\n     throw new Error(postSettingsStatus)\r\n   }\r\n } catch (error) {\r\n   alert('Erro no servidor. Tente novamente...')\r\n   console.log('Erro capturado:')\r\n   console.log(error);\r\n\r\n } finally {\r\n   console.log('POST DISPLAY BACKGROUND IMAGE STATUS: Finished.')\r\n   return postSettingsResult\r\n }\r\n} \r\n\r\nexport default class SettingsScreen extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isBackgroundColorSettingsOpen: false,\r\n      selectedColor: null,\r\n\r\n      isDisplayBackgroundImageLoading: false,\r\n      isChangeFontColorLoading: false,\r\n      isEnableHighResolutionLoading: false,\r\n      isRestoreColorLoading: false,\r\n      isSaveColorLoading: false,\r\n    }\r\n    this.syncUserSettings = this.syncUserSettings.bind(this);\r\n    this.setFontColor = this.setFontColor.bind(this);\r\n    this.setBackgroundColor = this.setBackgroundColor.bind(this);\r\n    this.SettingsScreen = this.SettingsScreen.bind(this);\r\n    this.ScreenSettings = this.ScreenSettings.bind(this);\r\n    this.ChooseImageSection = this.ChooseImageSection.bind(this);\r\n    this.DisplayBackgroundImageSection = this.DisplayBackgroundImageSection.bind(this);\r\n    this.ChangeFontColorSection = this.ChangeFontColorSection.bind(this);\r\n    this.EnableHighResolutionSection = this.EnableHighResolutionSection.bind(this);\r\n    this.ChangeBackgroundColorSection = this.ChangeBackgroundColorSection.bind(this);\r\n    this.ColorOptions = this.ColorOptions.bind(this);\r\n    this.ColorControl = this.ColorControl.bind(this);\r\n    this.onLogoutButtonPress = this.onLogoutButtonPress.bind(this);\r\n    this.onColorButtonPressFor = this.onColorButtonPressFor.bind(this);\r\n    this.onSaveColorButtonPress = this.onSaveColorButtonPress.bind(this);\r\n    this.onChangeFontColorSwitch = this.onChangeFontColorSwitch.bind(this);\r\n    this.ColorRow = this.ColorRow.bind(this);\r\n    this.isLoading = this.isLoading.bind(this);\r\n    this.logoutPressable = this.logoutPressable.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    console.log('\"SettingsScreen\" component did mount')\r\n    this.syncUserSettings()\r\n  }\r\n  componentWillUnmount() {\r\n    console.log('\"SettingsScreen\" component will unmount...')\r\n  }\r\n\r\n  syncUserSettings() {\r\n    console.log('SYNC SETTINGS STATUS: INITIALIZING...')\r\n    this.setFontColor()\r\n    this.setBackgroundColor()\r\n  }\r\n\r\n  setFontColor() {\r\n    const settings = this.props.appState.user.settings\r\n    const fontColor = settings.fontColorDark ? '#000' : '#fff'\r\n    for (let h of ['h1', 'h2', 'h3', 'h4']) {\r\n      styles[h] = { ...styles[h], color: fontColor }\r\n    }\r\n  }\r\n\r\n  setBackgroundColor() {\r\n    const settings = this.props.appState.user.settings\r\n    this.setState({\r\n      selectedColor: settings.backgroundColor,\r\n    })\r\n    this.props.navigation.setParams({selectedColor: settings.backgroundColor})  // Necessary to change the tab bar color dinamically in App.js\r\n  }\r\n\r\n  SettingsScreen() {\r\n    const settings = this.props.appState.user.settings\r\n    const backgroundImage = settings.backgroundImage\r\n    const backgroundColor = this.state.selectedColor\r\n    const imgURI = settings.displayBackgroundImage ? (backgroundImage ? ( settings.enableHighResolution ? backgroundImage.urls.raw : backgroundImage.urls.regular ) : null) : null\r\n    return(\r\n      <ImageBackground\r\n      source={{uri : imgURI}}\r\n      style={[ styles.background, {backgroundColor: backgroundColor} ]}\r\n      >\r\n        <ScrollView style={styles.foreground}>\r\n          <View style={styles.header}>\r\n            <Text style={styles.h1}>Configurações</Text>\r\n          </View>\r\n          <this.ScreenSettings />\r\n          <this.logoutPressable />\r\n        </ScrollView>\r\n      </ImageBackground>\r\n    )\r\n  }\r\n\r\n  ScreenSettings() {\r\n    const [isHighResulotionButtonPressed, setIsHighResulotionButtonPressed] = React.useState(false)\r\n    // const isLoading = this.state.isSaveColorLoading | this.state.isDisplayBackgroundImageLoading | this.state.isChangeFontColorLoading\r\n    return (\r\n      <>\r\n        <this.ChooseImageSection />\r\n        <this.DisplayBackgroundImageSection />\r\n        <this.EnableHighResolutionSection />\r\n        <this.ChangeFontColorSection />\r\n        <this.ChangeBackgroundColorSection />\r\n        <this.ColorOptions />\r\n      </>\r\n    )\r\n  }\r\n\r\n  ChooseImageSection() {\r\n    const [isChooseImageButtonPressed, setIsChooseImageButtonPressed] = React.useState(false)\r\n    let fontColor = styles.h1.color\r\n    let fontColorTransp = fontColor + '8'\r\n    return(\r\n      <Pressable\r\n      onPressIn={() => blinkButton(setIsChooseImageButtonPressed)}\r\n      onPress={() => this.props.navigation.navigate('WallpaperTopics')}\r\n      style={[styles.settingsRow, {backgroundColor: isChooseImageButtonPressed ? '#0003' : null }]}\r\n      >\r\n        <View style={{flexDirection: 'row', alignItems: 'center'}}>\r\n          <Icon name='image-outline' width={30} height={30} fill={fontColor} />\r\n          <Text style={[styles.h2, {marginLeft: 10}]}>Papel de parede</Text>\r\n        </View>\r\n        \r\n        <Icon\r\n        width={relativeToScreen(30)} height={relativeToScreen(30)}\r\n        name='arrow-ios-forward-outline'\r\n        fill={ fontColor } />\r\n      </Pressable>\r\n    )\r\n  }\r\n\r\n  DisplayBackgroundImageSection() {\r\n    const [isExposeImageButtonPressed, setIsExposeImageButtonPressed] = React.useState(false)\r\n    const displayBackgroundImageValue = this.props.appState.user.settings.displayBackgroundImage\r\n    const isLoading = this.state.isDisplayBackgroundImageLoading\r\n    return(\r\n      <Pressable\r\n      onPressIn={ () => blinkButton(setIsExposeImageButtonPressed) }\r\n      style={[styles.settingsRow, {backgroundColor: isExposeImageButtonPressed ? '#0003' : null }]}\r\n      >\r\n        <View style={{flexDirection: 'row', alignItems: 'center'}}>\r\n          <Icon name='eye-outline' width={relativeToScreen(30)} height={relativeToScreen(30)} fill={styles.h1.color} />\r\n          <Text style={[styles.h2, {marginLeft: relativeToScreen(10), marginRight: relativeToScreen(20)}]}>Ver papel de parede</Text>\r\n          { isLoading ? <ActivityIndicator color='blue' /> : null }\r\n        </View>\r\n        <Switch\r\n        disabled={isLoading}\r\n        trackColor={{ false: \"#767577\", true: \"#81b0ff\" }}\r\n        thumbColor={displayBackgroundImageValue ? \"#f4f3f4\" : \"#f4f3f4\"}\r\n        ios_backgroundColor=\"#3e3e3e\"\r\n        onValueChange={() => {\r\n          blinkButton(setIsExposeImageButtonPressed)\r\n          this.onDisplayBackgroundImageSwitch(!displayBackgroundImageValue)\r\n        }}\r\n        value={displayBackgroundImageValue}\r\n        />\r\n      </Pressable>\r\n    )\r\n  }\r\n\r\n  EnableHighResolutionSection() {\r\n    const [isEnableHighResolutionButtonPressed, setIsEnableHighResolutionButtonPressed] = React.useState(false)\r\n    const enableHighResolutionValue = this.props.appState.user.settings.enableHighResolution\r\n    const isLoading = this.state.isEnableHighResolutionLoading\r\n    return(\r\n      <Pressable\r\n      onPressIn={ () => blinkButton(setIsEnableHighResolutionButtonPressed)}\r\n      style={[styles.settingsRow, {backgroundColor: isEnableHighResolutionButtonPressed ? '#0003' : null }]}\r\n      >\r\n        <View style={{flexDirection: 'row', alignItems: 'center'}}>\r\n          {/* <Icon name='camera-outline' width={30} height={30} fill={styles.h1.color} /> */}\r\n          <NativeIcon name='high-definition' size={relativeToScreen(30)} color={styles.h1.color} />\r\n          <Text style={[styles.h2, {marginLeft: relativeToScreen(10), marginRight: relativeToScreen(20)}]}>Alta definição</Text>\r\n          { isLoading ? <ActivityIndicator color='blue' /> : null }\r\n        </View>\r\n        <Switch\r\n        disabled={isLoading}\r\n        trackColor={{ false: \"#767577\", true: \"#81b0ff\" }}\r\n        thumbColor={enableHighResolutionValue ? \"#f4f3f4\" : \"#f4f3f4\"}\r\n        ios_backgroundColor=\"#3e3e3e\"\r\n        onValueChange={() => {\r\n          blinkButton(setIsEnableHighResolutionButtonPressed)\r\n          this.onEnableHighResolutionSwitch(!enableHighResolutionValue)\r\n        }}\r\n        value={enableHighResolutionValue}\r\n        />\r\n      </Pressable>    \r\n    )\r\n  }\r\n\r\n  ChangeFontColorSection() {\r\n    const [isChangeFontColorButtonPressed, setIsChangeFontColorButtonPressed] = React.useState(false)\r\n    const changeFontColorValue = this.props.appState.user.settings.fontColorDark\r\n    const isLoading = this.state.isChangeFontColorLoading\r\n    return(\r\n      <Pressable\r\n      onPressIn={ () => blinkButton(setIsChangeFontColorButtonPressed)}\r\n      style={[styles.settingsRow, {backgroundColor: isChangeFontColorButtonPressed ? '#0003' : null }]}\r\n      >\r\n        <View style={{flexDirection: 'row', alignItems: 'center'}}>\r\n          <Icon name='moon-outline' width={relativeToScreen(30)} height={relativeToScreen(30)} fill={styles.h1.color} />\r\n          <Text style={[styles.h2, {marginLeft: relativeToScreen(10), marginRight: relativeToScreen(20)}]}>Texto escuro</Text>\r\n          { isLoading ? <ActivityIndicator color='blue' /> : null }\r\n        </View>\r\n        <Switch\r\n        disabled={isLoading}\r\n        trackColor={{ false: \"#767577\", true: \"#81b0ff\" }}\r\n        thumbColor={changeFontColorValue ? \"#f4f3f4\" : \"#f4f3f4\"}\r\n        ios_backgroundColor=\"#3e3e3e\"\r\n        onValueChange={() => {\r\n          blinkButton(setIsChangeFontColorButtonPressed)\r\n          this.onChangeFontColorSwitch(!changeFontColorValue)\r\n        }}\r\n        value={changeFontColorValue}\r\n        />\r\n      </Pressable>    \r\n    )\r\n  }\r\n\r\n  ChangeBackgroundColorSection() {\r\n    const [isColorButtonPressed, setIsColorButtonPressed] = React.useState(false)\r\n    const newColorUnselected = this.state.selectedColor == this.props.appState.user.settings.backgroundColor\r\n    let fontColor = styles.h1.color\r\n    let fontColorTransp = fontColor + '8'\r\n\r\n    return(\r\n      <Pressable\r\n      onPressIn={() => blinkButton(setIsColorButtonPressed)}\r\n      onPress={() => {\r\n        this.setState({ isBackgroundColorSettingsOpen: !this.state.isBackgroundColorSettingsOpen })\r\n        if (!newColorUnselected) this.syncUserSettings()\r\n      }}\r\n      style={[styles.settingsRow, {backgroundColor: isColorButtonPressed ? '#0003' : null }]}\r\n      >\r\n        <View style={{flexDirection: 'row', alignItems: 'center'} }>\r\n          <Icon name='color-palette-outline' height={relativeToScreen(30)} width={relativeToScreen(30)} fill={styles.h1.color} style={{marginRight: 0}} />\r\n          <Text style={[styles.h2, {marginLeft: relativeToScreen(10)}]}>Tema</Text>\r\n        </View>\r\n        <View style={{flexDirection: 'row', alignItems: 'center'} }>\r\n          <Icon\r\n          width={relativeToScreen(30)} height={relativeToScreen(30)}\r\n          name={this.state.isBackgroundColorSettingsOpen ? 'arrow-ios-upward-outline' : 'arrow-ios-downward-outline' }\r\n          fill={ fontColor } />\r\n        </View>\r\n      </Pressable>    \r\n    )\r\n  }\r\n\r\n  ColorOptions() {\r\n    return(\r\n      this.state.isBackgroundColorSettingsOpen ? (\r\n        <>\r\n          <ScrollView\r\n          nestedScrollEnabled\r\n          style={styles.colorBox}\r\n          >\r\n            { colorList.map(color => {\r\n              return (\r\n                <this.ColorRow color={color} key={'color-' + color} />\r\n              )\r\n            }) }\r\n          </ScrollView>\r\n          <this.ColorControl />\r\n        </>\r\n      ) : (\r\n        null\r\n      )\r\n    )\r\n  }\r\n\r\n  ColorRow({color}) {\r\n    const [isColorRowPressed, setIsColorRowPressed] = React.useState(false)\r\n    const isLoading = this.state.isRestoreColorLoading | this.state.isSaveColorLoading\r\n    return(\r\n      <Pressable\r\n      onPressIn={ () => blinkButton(setIsColorRowPressed, 300) }\r\n      onPress={ this.onColorButtonPressFor(color) }\r\n      disabled={isLoading}\r\n      style={[styles.colorRow, {backgroundColor: isColorRowPressed ? '#0003' : null }]}>\r\n        <Text style={[\r\n          styles.h3,\r\n          this.state.selectedColor == color\r\n          ? {fontStyle: 'italic', textDecorationLine: 'underline' }\r\n          : {fontStyle: 'italic', textDecorationLine: 'none' }\r\n        ]}>{ capitalize(color) }</Text>\r\n        <View style={[ styles.colorSquare, { backgroundColor: color, borderWidth: this.state.selectedColor==color ? 3 : 0 }]} />\r\n      </Pressable>\r\n    )\r\n  }\r\n\r\n  ColorControl() {\r\n    const newColorUnselected = this.state.selectedColor == this.props.appState.user.settings.backgroundColor\r\n    const isLoading = this.state.isRestoreColorLoading | this.state.isSaveColorLoading\r\n    return(\r\n      <View style={[styles.settingsRow, {justifyContent: 'space-between'}]}>\r\n        <Pressable\r\n        disabled={isLoading | newColorUnselected}\r\n        style={{ justifyContent: 'center', alignItems: 'center', width: relativeToScreen(95) }}\r\n        // onPressIn={() => blinkButton((bool) => this.setState({isRestoreColorLoading: bool}))}\r\n        onPress={() => {\r\n          this.setState({isRestoreColorLoading: true})\r\n          this.syncUserSettings()\r\n          this.setState({isRestoreColorLoading: false})\r\n        }}\r\n        >\r\n          <Text\r\n            style={[styles.h2, { \r\n              textAlign: 'center',\r\n              color: isLoading | newColorUnselected ? styles.h1.color + '6' : styles.h1.color\r\n            }]}\r\n          >\r\n            { this.state.isRestoreColorLoading ? <ActivityIndicator color='blue' /> :  'Restaurar' }\r\n          </Text>\r\n        </Pressable>\r\n\r\n        <Pressable\r\n        disabled={isLoading | newColorUnselected}\r\n        onPress={this.onSaveColorButtonPress}\r\n        style={{ justifyContent: 'center', alignItems: 'center', width: relativeToScreen(75) }}\r\n        >\r\n          <Text style={[styles.h2, {width: relativeToScreen(63), textAlign: 'center', color: isLoading | newColorUnselected ? styles.h1.color + '6' : styles.h1.color}]}>\r\n            { this.state.isSaveColorLoading ? <ActivityIndicator color='blue' /> : 'Aplicar' }\r\n          </Text>\r\n        </Pressable>\r\n      </View>\r\n    )\r\n  }\r\n\r\n  isLoading() {\r\n    return (\r\n      this.state.isDisplayBackgroundImageLoading | \r\n      this.state.isChangeFontColorLoading |\r\n      this.state.isRestoreColorLoading |\r\n      this.state.isEnableHighResolutionLoading |\r\n      this.state.isSaveColorLoading\r\n    )\r\n  }\r\n\r\n  logoutPressable() {\r\n    const [ isLogoutButtonPressed, setIsLogoutButtonPressed ] = React.useState(false)\r\n    const isLoading = this.isLoading()\r\n    const logoutColor = isLoading ? styles.h1.color+'8' : 'red'\r\n    return(\r\n      <Pressable   // logout pressable\r\n      onPress={() => {\r\n        blinkButton(setIsLogoutButtonPressed)\r\n        this.onLogoutButtonPress()\r\n      }}\r\n      disabled={isLoading}\r\n      style={[ styles.settingsRow, {\r\n        justifyContent: 'flex-start',\r\n        marginBottom: relativeToScreen(30),\r\n        backgroundColor: isLogoutButtonPressed ? styles.h1.color+'8' : null\r\n      }]}\r\n      >\r\n        <Icon name='log-out' width={relativeToScreen(30)} height={relativeToScreen(30)} fill={logoutColor} />\r\n        <Text style={[styles.h2, { marginLeft: relativeToScreen(10), color: logoutColor }]}>Logout</Text>\r\n      </Pressable>\r\n    )\r\n  }\r\n\r\n  onColorButtonPressFor(color) {\r\n    function onColorButtonPress() {\r\n      this.setState({ selectedColor: color })\r\n      this.props.navigation.setParams({selectedColor: color}) // Necessary to change the tab bar color dinamically in App.js\r\n    }\r\n    return onColorButtonPress.bind(this);\r\n  }\r\n\r\n  async onDisplayBackgroundImageSwitch(value) {\r\n    this.setState({ isDisplayBackgroundImageLoading: true });\r\n    const newSettings = {displayBackgroundImage: value}\r\n    const postDisplayResult = await postSettings(newSettings, this.props.appState.user.username)\r\n    if (postDisplayResult.ok) {\r\n      // sync user data with app or entries component\r\n      await this.props.appState.syncUserData()\r\n    }\r\n    this.setState({ isDisplayBackgroundImageLoading: false });\r\n  }\r\n\r\n  async onChangeFontColorSwitch(value) {\r\n    this.setState({ isChangeFontColorLoading: true });\r\n    const newSettings = {fontColorDark: value}\r\n    const postDisplayResult = await postSettings(newSettings, this.props.appState.user.username)\r\n    if (postDisplayResult.ok) {\r\n      // sync user data with app or entries component\r\n      await this.props.appState.syncUserData()\r\n      // update style variable with new data\r\n      this.setFontColor()\r\n    }\r\n    this.setState({ isChangeFontColorLoading: false });\r\n  }\r\n\r\n  async onEnableHighResolutionSwitch(value)  {\r\n    this.setState({ isEnableHighResolutionLoading: true });\r\n    const newSettings = {enableHighResolution: value}\r\n    const postHighResolutionResult = await postSettings(newSettings, this.props.appState.user.username)\r\n    if (postHighResolutionResult.ok) {\r\n      // sync user data with app or entries component\r\n      await this.props.appState.syncUserData()\r\n      // update style variable with new data\r\n    }\r\n    this.setState({ isEnableHighResolutionLoading: false });\r\n  }\r\n\r\n  async onSaveColorButtonPress() {\r\n    // fetch post selected color to user settings in server\r\n    console.log('POST COLOR STATUS: Started...')\r\n    this.setState({ isSaveColorLoading: true });\r\n    const colorSetting = {\r\n      backgroundColor: this.state.selectedColor\r\n    }\r\n    const postColorResult = await postSettings(colorSetting, this.props.appState.user.username)\r\n    if (postColorResult.ok) {\r\n      if (this.props.appState.user.settings.displayBackgroundImage) {\r\n        await this.onDisplayBackgroundImageSwitch(false)\r\n      } else {\r\n        // sync user data with app or entries component\r\n        await this.props.appState.syncUserData()\r\n      }\r\n      // initialize settings\r\n      this.syncUserSettings()\r\n    }\r\n    console.log('POST COLOR STATUS: Finished.')\r\n    this.setState({ isSaveColorLoading: false });\r\n  }\r\n\r\n  async onLogoutButtonPress() {\r\n    await keepUserConnectionAlive(null); // kills user connection\r\n    // this.props.route.params.logout();\r\n    this.props.appState.logout()\r\n  }\r\n\r\n  render() {\r\n    console.log('Rendering \"SettingsScreen\" component...')\r\n    return (\r\n      <this.SettingsScreen />\r\n    );  \r\n  }\r\n}\r\n","import React, { Component, useState, useEffect } from 'react';\r\nimport { FlatList, Text, SafeAreaView, Pressable, ActivityIndicator, Dimensions, ImageBackground, Platform, StatusBar } from 'react-native';\r\nimport { Icon } from 'react-native-eva-icons';\r\nimport * as Device from 'expo-device';\r\nconst isWindows = Device.osName == 'Windows'\r\nimport { capitalize } from './subcomponents/EditEmotions';\r\n\r\nconst appServerURI = 'https://mood-tracker-server.herokuapp.com/'\r\n\r\nfunction formatTopicName(name){\r\n  return capitalize(name.split('-').join(' '))\r\n}\r\n\r\nfunction buildApiUriParams(params) {\r\n  var uriParams = []\r\n  Object.keys(params).forEach( key => uriParams.push(key+'='+params[key]) )\r\n  return '?' + uriParams.join('&')\r\n}\r\n\r\nconst styles = {\r\n  mainView: {\r\n    height: '100%',\r\n    width: '100%',\r\n    // paddingTop: StatusBar.currentHeight\r\n  },\r\n  photosView: {\r\n    height: '100%',\r\n    width: '100%' ,\r\n  },\r\n  h1: {\r\n    fontSize: 26,\r\n    alignSelf: 'center',\r\n    // borderWidth: 1\r\n  },\r\n  header: {\r\n    position: 'absolute',\r\n    top: 0,\r\n    paddingTop: StatusBar.currentHeight,\r\n    width: '100%',\r\n    height: '20%',\r\n    backgroundColor: 'rgba(255,255,255,0.5)',\r\n    justifyContent: 'space-evenly',\r\n    alignItems: 'center'\r\n  },\r\n  headerLabel: {\r\n    // borderWidth: 1,\r\n    width: '70%',\r\n    fontSize: 22,\r\n    alignSelf: 'center',\r\n    textAlign: 'center',\r\n  },\r\n  status: {\r\n    backgroundColor: 'rgb(230,230,230)',\r\n    width: '100%',\r\n    height: '20%',\r\n    borderRadius: 20,\r\n    alignItems: 'center',\r\n    justifyContent: 'center'\r\n  },\r\n  statusText: {\r\n    fontSize: 18,\r\n    color: 'black'\r\n  },\r\n  image: {\r\n    width: '100%',\r\n    height: '100%',\r\n    alignItems: 'center',\r\n    justifyContent: 'center'\r\n  },\r\n}\r\n\r\nasync function getUnsplash(endpoint, params) {\r\n  console.log('UNSPLASH GET PHOTOS STATUS: STARTED...')\r\n  const reqParams = {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify({\r\n      endpoint: endpoint,\r\n      queryParams: params,\r\n    }),\r\n  }\r\n  var result, result_json, success\r\n  try {\r\n    result = await fetch(appServerURI + 'api/unsplash', reqParams)\r\n    if (result.ok) {\r\n      console.log(`UNSPLASH PHOTOS STATUS: FETCH SUCCESSFULL...`)\r\n\r\n      // let a = 'x-ratelimit-limit'\r\n      // let b = 'x-ratelimit-remaining'\r\n      // const headers = result.headers\r\n      // var limit, remaining\r\n      // switch (Platform.OS) {\r\n      //   case 'android':\r\n      //     limit = headers.map[a]\r\n      //     remaining = headers.map[b]          \r\n      //     break;\r\n      //   case 'web':\r\n      //     limit = headers.get(a)\r\n      //     remaining = headers.get(b)\r\n      //     break\r\n      //   default:\r\n      //     limit = headers.get(a)\r\n      //     remaining = headers.get(b)\r\n      //     break\r\n      // }\r\n      // console.log(`UNSPLASH PHOTOS STATUS:\\n  x-ratelimit-limit: ${limit}\\n  x-ratelimit-remaining: ${remaining}`)\r\n\r\n      result_json = await result.json()\r\n      success = result_json.length\r\n      if (success) {\r\n        console.log(`UNSPLASH PHOTOS STATUS: JSON RESULT SUCCESSFULL. RETRIEVED ${success} PHOTOS...`)\r\n        return result_json\r\n\r\n      } else {\r\n        console.log(`UNSPLASH PHOTOS STATUS: JSON RESULT FAILED. Logging json value...`)\r\n        console.log(result_json)\r\n        return null\r\n      }\r\n    } else {\r\n      console.log(`UNSPLASH GET PHOTOS STATUS: FETCH FAILED. Status code: ${result.status}, Text: ${result.statusText}..`)\r\n    }\r\n  } catch (error) {\r\n    console.log('UNSPLASH GET PHOTOS STATUS: ERROR CATCHED. LOGGING ERROR...')\r\n    console.log(error)\r\n    return null\r\n  }\r\n}\r\n\r\nconst Item = (props) => {\r\n  const topicsScreen = props.route.name == 'WallpaperTopics'\r\n  const photoURI = topicsScreen ? props.item.cover_photo.urls.regular : props.item.urls.regular\r\n  const nextScreenName = topicsScreen ? 'Wallpapers' : 'WallpaperZoom'\r\n  \r\n  const screenHeight = props.windowHeight + (Platform.OS != 'web' ? StatusBar.currentHeight : 0)\r\n  const photoHeight = topicsScreen ? ( isWindows ? screenHeight/3  : screenHeight/4 ) : ( isWindows ? screenHeight/2 : screenHeight/2 )\r\n  const photoWidth = topicsScreen ? ( isWindows ? '33.333333%' : '50%' ) : ( isWindows ? '50%' : '50%' )\r\n  return(\r\n    <Pressable\r\n      onPress={() => props.navigation.navigate( nextScreenName , { selectedImage: props.item })}\r\n      style={[{ minHeight: 70, height: photoHeight, width: photoWidth, margin: 0}]}\r\n    >\r\n      <ImageBackground source={{ uri:  photoURI }} style={styles.image} >\r\n        <Text style={[styles.h1, {width: '80%', color: 'white', textAlign: 'center'}]}>{ topicsScreen ? formatTopicName(props.item.slug) : '' }</Text>\r\n      </ImageBackground>\r\n    </Pressable>\r\n  )\r\n};\r\n\r\nexport class WallpapersComponent extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state={\r\n      photos: null,\r\n      page: null,\r\n      windowHeight: Dimensions.get('window').height,\r\n      isPhotosLoading: false,\r\n      hideHeader: false,\r\n    };\r\n    this.initializePhotosAsync = this.initializePhotosAsync.bind(this);\r\n    this.WallpapersHeaderText = this.WallpapersHeaderText.bind(this);\r\n    this.WallpapersHeader = this.WallpapersHeader.bind(this);\r\n    this.renderItem = this.renderItem.bind(this);\r\n    this.PhotoList = this.PhotoList.bind(this);\r\n    this.ControlButtons = this.ControlButtons.bind(this);\r\n    this.loadNextPagePhotosAsync = this.loadNextPagePhotosAsync.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    console.log('\"Wallpapers\" component did mount...')\r\n    // StatusBar.setStatusBarTranslucent(true)\r\n    this.initializePhotosAsync()\r\n  }\r\n\r\n  async initializePhotosAsync() {\r\n    this.setState({isPhotosLoading: true})\r\n    let route = this.props.route\r\n    if (route.name=='WallpaperTopics') {\r\n      let asyncResult = await getUnsplash(`topics`, {page: 1, per_page: 30, order_by: 'position'})\r\n      this.setState({photos: asyncResult}) \r\n\r\n    } else {\r\n      let endpoint = `topics/${route.params.selectedImage.id}/photos`\r\n      let asyncResult = await getUnsplash(endpoint, {page: 1, per_page: 30, order_by: 'popular', orientation: 'portrait'})\r\n      this.setState({photos: [ route.params.selectedImage.cover_photo, ...asyncResult ], page: 1}) \r\n    }\r\n    this.setState({isPhotosLoading: false}) \r\n  }  \r\n\r\n  async loadNextPagePhotosAsync() {\r\n    console.log('LOAD NEXT PHOTOS PAGE STATUS: STARTED... ')\r\n    this.setState({isPhotosLoading: true})\r\n    let endpoint = `topics/${this.props.route.params.selectedImage.id}/photos`\r\n    let asyncResult = await getUnsplash(endpoint, {page: this.state.page+1, per_page: 30, order_by: 'popular', orientation: 'portrait'})\r\n    if (asyncResult) {\r\n      console.log('LOAD NEXT PHOTOS PAGE STATUS: SUCCESSFUL! ')\r\n      this.setState((prevState) => ({\r\n          photos: [ ...prevState.photos, ...asyncResult ],\r\n          page: prevState.page+1,\r\n        }))   \r\n    } else {\r\n      console.log('LOAD NEXT PHOTOS PAGE STATUS: FAILED! ')\r\n    }\r\n      console.log('LOAD NEXT PHOTOS PAGE STATUS: FINISHED. ')\r\n      this.setState({isPhotosLoading: false})\r\n  }\r\n\r\n  renderItem = ({ item }) => (\r\n    <Item item={item} windowHeight={this.state.windowHeight} {...this.props} />\r\n  );\r\n\r\n  WallpapersHeader () {\r\n    const hideHeader = this.state.hideHeader\r\n    const topicsScreen = this.props.route.name == 'WallpaperTopics'\r\n    return(\r\n      !hideHeader ? (\r\n        <Pressable\r\n        style={[ styles.header, {height: topicsScreen ? '20%' : '23%' } ]}\r\n        onPress={() => {this.setState({ hideHeader: true }); console.log('close button clicked...')}}\r\n        >\r\n          <this.WallpapersHeaderText hideHeader={hideHeader} />\r\n        </Pressable>  \r\n      ) : (\r\n        null\r\n      )\r\n    )\r\n  }\r\n\r\n  WallpapersHeaderText () {\r\n    const topicsScreen = this.props.route.name=='WallpaperTopics'\r\n    return(\r\n      this.state.isPhotosLoading ? (\r\n        <ActivityIndicator size='large' color='black' />\r\n      ) : (\r\n        this.state.photos ? (\r\n          <>\r\n            { !topicsScreen ? <Text style={[styles.h1]}>{ formatTopicName(this.props.route.params.selectedImage.slug) }</Text> : null }\r\n            <Text\r\n            style={[styles.headerLabel, {fontSize: topicsScreen ? 26 : 22 }]}\r\n            >\r\n              { this.props.route.params.headerText }</Text>\r\n          </>\r\n        ) : (\r\n          <Text style={styles.headerLabel}>Erro ao carregar imagems...</Text>\r\n        )\r\n     )\r\n    )\r\n  }\r\n  \r\n  PhotoList = () => {\r\n  \r\n    useEffect(() => {\r\n      const subscription = Dimensions.addEventListener('change', ({ window, screen }) => {\r\n        const windowHeightDifference = Math.abs(this.state.windowHeight-window.height)\r\n        if ( windowHeightDifference > 100) {\r\n          this.setState({windowHeight: window.height})\r\n        }\r\n      });\r\n      return () => subscription?.remove();\r\n    });\r\n\r\n    return(\r\n      <FlatList\r\n        data={ this.state.photos }\r\n        renderItem={ this.renderItem }\r\n        keyExtractor={ item => item.id }\r\n        numColumns={ isWindows ? 3  : 2 }\r\n        initialNumToRender={ null }\r\n        onEndReached={ this.props.route.name == 'WallpaperTopics' ? null : this.loadNextPagePhotosAsync }\r\n        refreshing={ this.state.isPhotosLoading }\r\n        />\r\n    )\r\n  }\r\n\r\n  ControlButtons() {\r\n    const topRight = {\r\n      top: Platform.OS != 'web' ? StatusBar.currentHeight : 0,\r\n      right: 0,\r\n      margin: '1.5%',\r\n      backgroundColor: '#fff0',\r\n    }\r\n\r\n    return(\r\n      !this.state.hideHeader ? (\r\n        <Pressable\r\n        style={[{\r\n          position: 'absolute',\r\n          width: 30,\r\n          height: 30,\r\n          alignItems: 'center',\r\n          justifyContent: 'center',\r\n          borderRadius: 30/2,\r\n        },\r\n        topRight\r\n        ]}\r\n        onPress={() => this.setState({hideHeader: true})}\r\n        >\r\n          <Icon name='close' width={30} height={30} fill='#fff' />\r\n        </Pressable>\r\n      ) : (\r\n        null\r\n      )\r\n    )\r\n  }\r\n\r\n  render() {\r\n    console.log('Rendering \"Wallpapers\" component...')\r\n    const settings = this.props.appState.user.settings\r\n    return (\r\n      <SafeAreaView style={styles.mainView}>\r\n        <SafeAreaView style={[styles.photosView, {backgroundColor: settings.backgroundColor}]}>\r\n          <this.PhotoList />\r\n          <this.WallpapersHeader />\r\n          <this.ControlButtons />\r\n        </SafeAreaView>\r\n      </SafeAreaView>\r\n    );  \r\n  }\r\n\r\n}","import { createContext } from 'react';\r\n\r\nconst UserContext = createContext();\r\n\r\nexport default UserContext","import React, { useContext } from 'react';\r\nimport { View, Text, Image, ImageBackground, Pressable, ActivityIndicator, Platform, Linking } from 'react-native';\r\n// import { postDisplayBackgroundImage } from './SettingsScreen';\r\nimport { postSettings } from './SettingsScreen';\r\nimport UserContext from '../shared/UserContext';\r\n\r\nvar styles = {\r\n  fotter: {\r\n    position: 'absolute',\r\n    bottom: 0,\r\n    height: '22%',\r\n    width: '100%',\r\n    justifyContent: 'space-evenly',\r\n  },\r\n  controlView: {\r\n    // flex: 0.4,\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-evenly',\r\n    alignItems: 'center',\r\n  },\r\n  attributionView: {\r\n    // flex: 0.6,\r\n    flexDirection: 'row',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n  },\r\n controlButton: {\r\n    width: '35%',\r\n    height: 40,\r\n    borderWidth: 1,\r\n    borderRadius: 20,\r\n    backgroundColor: '#f4f3f4',\r\n    alignItems: 'center',\r\n    justifyContent: 'center'\r\n  },\r\n  controlButtonLabel: {\r\n    color: '#000',\r\n    fontSize: 17,\r\n    fontWeight: 'bold'\r\n  },\r\n  userProfileImage: {\r\n    width: 50,\r\n    height: 50,\r\n    borderRadius: 25\r\n  },\r\n  attributionLabel: {\r\n    color: 'white',\r\n    fontSize: 14,\r\n    fontStyle: 'italic',\r\n    paddingLeft: 10,\r\n    textAlign: 'left',\r\n    maxWidth: '78%',\r\n  },\r\n  attributionURL: {\r\n    textDecorationLine: 'underline'\r\n  },\r\n}\r\n\r\nconst openUserProfileFor = (userProfileHtmlLink) => {\r\n  return function () {\r\n    Linking.openURL( userProfileHtmlLink + '?utm_source=Mood-Tracker&utm_medium=referral');\r\n  } \r\n}\r\n\r\nconst openUnsplashURL = () => {\r\n  Linking.openURL('https://unsplash.com/?utm_source=Mood-Tracker&utm_medium=referral')\r\n}\r\n\r\nexport function WallpaperZoom(props) {\r\n\r\n  const appState = useContext(UserContext);\r\n  const settings = appState.user.settings\r\n  const [isSaveImageLoading, setIsSaveImageLoading] = React.useState(false);\r\n\r\n  async function onSaveImageButtonPress() {\r\n    // fetch post selected color to user settings in server\r\n    console.log('POST IMAGE STATUS: Started...');\r\n    setIsSaveImageLoading(true);\r\n    const imageSetting = {\r\n      backgroundImage: props.route.params.selectedImage\r\n    };\r\n\r\n    const postImageResult = await postSettings(imageSetting, appState.user.username)\r\n    if (postImageResult.ok) {\r\n      // sync user data with app or entries component\r\n      if (!settings.displayBackgroundImage) {\r\n        await postSettings({displayBackgroundImage: true}, appState.user.username)\r\n      }\r\n\r\n      await props.appState.syncUserData();\r\n      // navigate back to settings\r\n      setIsSaveImageLoading(false);\r\n      props.navigation.navigate('Settings');\r\n    } else {\r\n      setIsSaveImageLoading(false);\r\n    }\r\n    console.log('POST IMAGE STATUS: Finished.');\r\n  }\r\n\r\n  console.log('Returning \"WallpaperZoom\" component...')\r\n\r\n  const fontColorDark = settings.fontColorDark\r\n  const fontColor = fontColorDark ? '#000' : '#fff'\r\n  const altFontColor = fontColorDark ? '#fff' : '#000'\r\n  for (let label of ['attributionLabel', 'controlButtonLabel']) {\r\n    styles[label] = { ...styles[label], color: fontColor }\r\n  }\r\n  styles.controlButton = { ...styles.controlButton, backgroundColor: altFontColor + '8', borderColor: fontColor + '8' }\r\n  const selectedImage = props.route.params.selectedImage\r\n  const imgURI = settings.enableHighResolution ? selectedImage.urls.raw : selectedImage.urls.regular\r\n  return (\r\n    <ImageBackground\r\n      source={{ uri: imgURI }}\r\n      style={{ flex: 1, backgroundColor: settings.backgroundColor }}\r\n    >\r\n      <View style={styles.fotter}>\r\n        <View style={styles.controlView}>\r\n          <Pressable\r\n            onPress={() => props.navigation.goBack()}\r\n            style={styles.controlButton}\r\n          >\r\n            <Text style={styles.controlButtonLabel}>Voltar</Text>\r\n          </Pressable>\r\n          <Pressable\r\n              onPress={onSaveImageButtonPress}\r\n              style={styles.controlButton}\r\n          >\r\n            {isSaveImageLoading ? (\r\n              <ActivityIndicator color='blue' />\r\n            ) : (\r\n              <Text style={styles.controlButtonLabel}>Aplicar</Text>\r\n            )}\r\n          </Pressable>\r\n        </View>\r\n        <View style={styles.attributionView}>\r\n          <Image\r\n          source={{ uri: selectedImage.user.profile_image.large }}\r\n          style={styles.userProfileImage} />\r\n          <Text style={styles.attributionLabel}>\r\n            {'Photo by '}\r\n            <Text\r\n            onPress={openUserProfileFor(selectedImage.user.links.html)}\r\n            style={styles.attributionURL} >{ selectedImage.user.name }</Text>\r\n            {' on '}\r\n            <Text\r\n            onPress={openUnsplashURL}\r\n            style={styles.attributionURL}>{ 'Unsplash' }</Text>\r\n          </Text>\r\n        </View>\r\n      </View>\r\n    </ImageBackground>\r\n  );\r\n}\r\n","console.log('Importing victory module...')\r\nimport * as Victory from 'victory'\r\nexport default Victory","// 1. Imports\r\n\r\nimport { Today } from \"../components/EntrancesComponent\"\r\nimport dateRange from \"./dateRange\"\r\n\r\n// 2. Definitions\r\n\r\nfunction getUniqueYears() {\r\n    var uniqueYears = []\r\n  for (let date of dateRange) {\r\n    let year = date.slice(0,4)\r\n    if (!uniqueYears.includes(year)) {\r\n      uniqueYears.push(year)\r\n    }\r\n  }\r\n  return uniqueYears\r\n}\r\n\r\nfunction fullDates() {\r\n  var dates = []\r\n  var currentYear = getUniqueYears()[0]\r\n  var currentWeek = 1\r\n  for (let date of dateRange) {\r\n    var newDate = {\r\n      date: date,\r\n      day: new Date(date).getUTCDate(),\r\n      weekday: new Date(date).getUTCDay(),\r\n      week: null ,\r\n      month: new Date(date).getUTCMonth()+1,\r\n      year: new Date(date).getUTCFullYear(),\r\n    }\r\n\r\n    if (newDate.year != currentYear) {\r\n      currentYear = newDate.year\r\n      currentWeek = 1\r\n    } else {\r\n      if (newDate.weekday==0) {\r\n        currentWeek += 1\r\n      }\r\n    }\r\n    newDate.week = currentWeek\r\n    dates.push(newDate)\r\n  }\r\n  return dates\r\n}\r\n\r\nfunction getWeeks() {\r\n    const FullDates = fullDates()\r\n    var weeks = [ {week: FullDates[0].week, year: FullDates[0].year} ]\r\n    for (let fullDate of FullDates) {\r\n      if ( fullDate.week != weeks[weeks.length-1].week ) {\r\n        weeks.push({\r\n            week: fullDate.week,\r\n            year: fullDate.year\r\n        })\r\n      }\r\n    }\r\n    return weeks\r\n}\r\n\r\nfunction getMonths() {\r\n  const FullDates = fullDates()\r\n  var months = [ {month: FullDates[0].month, year: FullDates[0].year} ]\r\n  for (let fullDate of FullDates) {\r\n      if ( fullDate.month != months[months.length-1].month ) {\r\n      months.push({\r\n        month: fullDate.month,\r\n        year: fullDate.year\r\n      })\r\n    }\r\n  }\r\n  return months\r\n}\r\n\r\n// 3. Exports\r\n\r\nexport const Years = getUniqueYears()\r\nexport const FullDates = fullDates()\r\nexport const Weeks = getWeeks()\r\nexport const Months = getMonths()\r\n\r\nexport function fullDateMap(date) {\r\n  return FullDates[dateRange.indexOf(date)]\r\n}\r\n\r\nexport function current(period) {\r\n  return fullDateMap(Today())[period]\r\n}\r\n\r\n","import React, { Component, useState } from 'react';\r\nimport { ImageBackground, View, Text, ScrollView, StatusBar, Pressable } from 'react-native';\r\nimport \"react-native\";\r\nimport { Icon } from 'react-native-eva-icons';\r\n// import VectorIcon from 'react-native-vector-icons/MaterialCommunityIcons';\r\nimport Victory from './victory'\r\n\r\nimport { relativeToScreen } from '../styles/loginStyles';\r\nimport { blinkButton } from './SettingsScreen';\r\nimport { Today, formatDate, oneDigit } from './EntrancesComponent';\r\nimport dateRange from '../shared/dateRange';\r\nimport { current, fullDateMap, FullDates, Weeks, Months, Years } from '../shared/dates';\r\nconst dateCollections = {\r\n  'day': dateRange,\r\n  'week': Weeks,\r\n  'month': Months,\r\n  'year': Years\r\n}\r\n\r\nimport { moodColorsHEX } from './PostEntryComponent';\r\nvar moodColorsObj = {}\r\nmoodColorsHEX.forEach((color, index) => {\r\n  moodColorsObj[index+1] = color\r\n})\r\n\r\nvar styles = {\r\n  background: {\r\n    flex: 1,\r\n    paddingTop: StatusBar.currentHeight,\r\n    alignItems: 'center',\r\n    justifyContent: 'space-between',\r\n  },\r\n  foreground: {\r\n    width: relativeToScreen(350),\r\n    paddingBottom: relativeToScreen(60),\r\n  },\r\n  header: {\r\n    height: relativeToScreen(150, 'height'),\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n  card: {\r\n    marginBottom: '5%',\r\n    paddingVertical: relativeToScreen(5),\r\n    paddingHorizontal: relativeToScreen(10),\r\n    borderRadius: relativeToScreen(20),\r\n    backgroundColor: 'rgba(0,0,0,0.3)',\r\n  },\r\n  cardRow: {\r\n    flexDirection: 'row',\r\n    paddingVertical: relativeToScreen(5),\r\n    alignItems: 'center',\r\n  },\r\n  periodButton: {\r\n    position: 'absolute',\r\n    bottom: '5%',\r\n    alignSelf: 'center',\r\n    width: relativeToScreen(120),\r\n    height: relativeToScreen(30),\r\n    borderRadius: relativeToScreen(15),\r\n    backgroundColor: '#fff',\r\n    justifyContent: 'center',\r\n    alignItems: 'center'\r\n  },\r\n  chartView: {\r\n    marginTop: relativeToScreen(5),\r\n    marginBottom: relativeToScreen(5),\r\n    alignItems: 'center',\r\n    justifyContent: 'center'\r\n  },\r\n  controlRow: {\r\n  width: '100%',\r\n  height: relativeToScreen(55),\r\n  paddingHorizontal: relativeToScreen(5),\r\n  flexDirection: 'row',\r\n  alignItems: 'center',\r\n  justifyContent: 'space-between'\r\n  },\r\n  statsRowItem: {\r\n    width: '25%',\r\n    alignItems: 'center',\r\n    justifyContent: 'center'\r\n  },\r\n  h1: {\r\n    fontSize: relativeToScreen(25),\r\n    color: 'white'\r\n  },\r\n  h2: {\r\n    fontSize: relativeToScreen(20),\r\n    color: 'white',\r\n  },\r\n  h3: {\r\n    fontSize: relativeToScreen(17),\r\n    color: 'white',\r\n  },\r\n  h4: {\r\n    fontSize: relativeToScreen(15),\r\n    color: 'white',\r\n  },\r\n  h5: {\r\n    fontSize: relativeToScreen(13),\r\n    color: 'white',\r\n  },\r\n}\r\n\r\nconst moods = [1,2,3,4,5]\r\nlet moodMap = {\r\n  'Horrível': 1,\r\n  'Mal': 2,\r\n  'Regular': 3,\r\n  'Bem': 4,\r\n  'Ótimo': 5\r\n}\r\n\r\nfunction ChartPanel({imgURI, backgroundColor, entries}) {\r\n  const periods = ['day', 'week', 'month', 'year']\r\n  const periodMap = {\r\n    'day': 'Dia',\r\n    'week': 'Semana',\r\n    'month':'Mês',\r\n    'year': 'Ano'\r\n  }\r\n  const [ period, setPeriod ] = useState('day')\r\n  const [ date, setDate ] = useState({\r\n    'day': Today(),\r\n    'week': { week: current('week'), year: current('year') },\r\n    'month': { month: current('month'), year: current('year') },\r\n    'year': current('year')\r\n  })\r\n\r\n  return(\r\n    <ImageBackground\r\n    source={{uri : imgURI}}\r\n    style={[ styles.background, {backgroundColor: backgroundColor} ]}\r\n    >\r\n      <ScrollView style={{width: '100%'}}>\r\n        <View style={[styles.foreground, {alignSelf: 'center'}]}>\r\n          <View style={styles.header}>\r\n            <Text style={styles.h1}>{'Painel'}</Text>\r\n          </View>\r\n          <NavigationRow date={date} setDate={setDate} period={period} />\r\n          <ChartCard\r\n          title='Avaliações de Hoje'\r\n          Chart={MoodLineCard}\r\n          entries={entries}\r\n          date={date}\r\n          period={period}\r\n          />\r\n          <ChartCard\r\n          title='Proporção das Avaliações'\r\n          Chart={MoodPieCard}\r\n          entries={entries}\r\n          date={date}\r\n          period={period}\r\n          />\r\n        </View>\r\n      </ScrollView>\r\n      <Pressable\r\n      style={styles.periodButton}\r\n      onPress={() => setPeriod(periods[ periods[periods.length-1]==period ? 0 : periods.indexOf(period)+1 ])}\r\n      >\r\n        <Text style={[styles.h3, {color: '#000', fontWeight: 'bold'}]}>{periodMap[period]}</Text>\r\n      </Pressable>\r\n    </ImageBackground>\r\n  )\r\n}\r\n\r\nfunction formatWeek(date) {\r\n  const thisWeek = {week: current('week'), year: current('year')}\r\n  const lastWeek = getNext(thisWeek, 'previous', 'week')\r\n  const isThisWeek = date.week==thisWeek.week && date.year==thisWeek.year\r\n  const isLastWeek = date.week==lastWeek.week && date.year==lastWeek.year\r\n  if (isThisWeek) return `Essa semana, ${date.year}`\r\n  else if (isLastWeek) return `Semana passada, ${date.year}`\r\n  else return `Semana ${date.week}, ${date.year}`\r\n}\r\n\r\nfunction formatMonth(date) {\r\n  const thisMonth = {month: current('month'), year: current('year')}\r\n  const lastMonth = getNext(thisMonth, 'previous', 'month')\r\n  const isThisMonth = date.month==thisMonth.month && date.year==thisMonth.year\r\n  const isLastMonth = date.month==lastMonth.month && date.year==lastMonth.year\r\n  if (isThisMonth) return `Esse mês, ${date.year}`\r\n  else if (isLastMonth) return `Mês passado, ${date.year}`\r\n  else return `Mês ${date.month}, ${date.year}`\r\n}\r\n\r\nfunction NavigationRow({date, setDate, period}) {\r\n  const formatPeriodDate = {\r\n    'day': formatDate,\r\n    'week': formatWeek,\r\n    'month': formatMonth,\r\n    'year': date => `Ano ${date}`\r\n  }\r\n  return(\r\n    <View style={[styles.cardRow, {justifyContent: 'space-between', height: relativeToScreen(80)}]}>\r\n      <DateNavigationButton\r\n      icon='arrow-back'\r\n      next='previous'\r\n      date={date}\r\n      setDate={setDate}\r\n      period={period}\r\n      />\r\n      <Text style={[styles.h2]}>{ formatPeriodDate[period](date[period]) }</Text>                                \r\n      <DateNavigationButton\r\n      icon='arrow-forward'\r\n      next='next'\r\n      date={date}\r\n      setDate={setDate}\r\n      period={period}\r\n      />\r\n    </View>\r\n  )\r\n}\r\n\r\nfunction getNext(date, next='next', period) {\r\n  const dateCollection = dateCollections[period]\r\n  const nDates = dateCollection.length\r\n  var currentIndex\r\n  if (['day', 'year'].includes(period))\r\n    currentIndex = dateCollection.indexOf(date)\r\n  else {\r\n    dateCollection.forEach((collDate, index) => {\r\n      if (collDate[period]==date[period] && collDate.year==date.year )\r\n        currentIndex = index\r\n    })\r\n  }\r\n  const lastDateIndex = next=='next' ? nDates-1 : 0\r\n  const nextIndex = currentIndex==lastDateIndex\r\n  ? ( next=='next' ? 0 : nDates-1 )\r\n  : currentIndex + (next=='next' ? 1 : -1)\r\n  \r\n  return dateCollection[nextIndex]\r\n}\r\n\r\nfunction DateNavigationButton({icon, next, date, setDate, period}) {\r\n  return(\r\n    <Pressable\r\n    onPress={() => setDate({\r\n      ...date,\r\n      [period]: getNext(date[period], next, period)\r\n    })}\r\n    hitSlop={relativeToScreen(15)}\r\n    >\r\n      <Icon\r\n      name={icon}\r\n      width={relativeToScreen(29)}\r\n      height={relativeToScreen(29)}\r\n      fill={'#fff'}\r\n      />\r\n    </Pressable>\r\n  )\r\n}\r\n\r\nconst ChartCard = ({title, Chart, entries, date, period}) => {\r\n\r\n  const filters = {\r\n    'day': entry => entry.date==date[period],\r\n    'week': entry => fullDateMap(entry.date).week==date[period].week && fullDateMap(entry.date).year==date[period].year,\r\n    'month': entry => fullDateMap(entry.date).month==date[period].month && fullDateMap(entry.date).year==date[period].year,\r\n    'year': entry => fullDateMap(entry.date).year==date[period]\r\n  }\r\n  entries = entries.filter(filters[period])\r\n  \r\n  return(\r\n    <View style={styles.card}>\r\n      <View style={[styles.cardRow, {justifyContent: 'space-between'}]}>\r\n        <Text style={styles.h2}>{ title }</Text>\r\n        <Text\r\n        style={styles.h4}\r\n        onPress={() => {}}\r\n        >\r\n          { 'Padrão' }\r\n        </Text>\r\n      </View>\r\n      <View style={styles.chartView}>\r\n        <Chart entries={entries} />\r\n      </View>\r\n    </View>\r\n  )\r\n}\r\n\r\nfunction MoodLineCard({entries}) {\r\n  const [temporal, setTemporal] = useState(false)\r\n  const [interpolation, setInterpolation] = useState('catmullRom')\r\n\r\n  const data = entries.map((entry, index) => ({\r\n    x: index+1,\r\n    y: moodMap[entry.mood],\r\n    startTime: entry.startTime\r\n  }))\r\n\r\n  return(\r\n    <View style={{width: '100%',  alignItems: 'center', justifyContent: 'center'}}>\r\n      <View style={{width: '100%',  alignItems: 'center', justifyContent: 'flex-start'}}>\r\n        { temporal\r\n          ? <MoodLineTemporal data={data} interpolation={interpolation} />\r\n          : <MoodLine data={data} interpolation={interpolation} /> \r\n        }\r\n      </View>\r\n      <MoodLineControls\r\n      temporal={temporal}\r\n      setTemporal={setTemporal}\r\n      interpolation={interpolation}\r\n      setInterpolation={setInterpolation}\r\n      />\r\n    </View>\r\n  )\r\n}\r\n\r\nconst interpolations = [ 'catmullRom', 'natural', 'linear', 'step', 'basis','cardinal' ]\r\nfunction nextInterpolation(current) {\r\n  const index = interpolations.indexOf(current)\r\n  const nextIndex = index==interpolations.length-1 ? 0 : index+1\r\n  return interpolations[nextIndex]\r\n}\r\n\r\nfunction MoodLineControls(props) {\r\n  const [temporalClicked, setTemporalClicked] = useState(false)\r\n  const [interpolationClicked, setInterpolationClicked] = useState(false)\r\n  return(\r\n    <View style={styles.controlRow}>\r\n      <Pressable\r\n      style={{flexDirection: 'row', alignItems: 'center'}}\r\n      onPress={() => {blinkButton(setInterpolationClicked, 100); props.setInterpolation(nextInterpolation(props.interpolation))}}        \r\n      hitSlop={15}\r\n      >\r\n        <Icon\r\n        name='swap-outline'\r\n        width={relativeToScreen(15)}\r\n        height={relativeToScreen(15)}\r\n        fill={interpolationClicked ? '#fff6' : '#fff'}\r\n        />\r\n          <Text\r\n          style={[styles.h4, { fontSize: 16, color: interpolationClicked ? '#fff6' : '#fff' }]}\r\n          >\r\n            { ' ' + props.interpolation }\r\n          </Text>\r\n      </Pressable>\r\n\r\n      <Pressable\r\n      style={{flexDirection: 'row', alignItems: 'center'}}\r\n      onPress={() => {blinkButton(setTemporalClicked, 100); props.setTemporal(!props.temporal)}}\r\n      hitSlop={15}\r\n      >\r\n        <Icon\r\n        name='swap-outline'\r\n        width={relativeToScreen(15)}\r\n        height={relativeToScreen(15)}\r\n        fill={temporalClicked ? '#fff6' : '#fff'}\r\n        />\r\n        <Text\r\n        style={[styles.h4, { fontSize: relativeToScreen(16), color: temporalClicked ? '#fff6' : '#fff' }]}\r\n        >\r\n          { props.temporal ? ' temporal' : ' atemporal' }\r\n        </Text>\r\n      </Pressable>\r\n    </View>\r\n  )\r\n}\r\n\r\nfunction MoodLineTemporal({data, interpolation}) {\r\n  var time, time_s\r\n  var times = []\r\n  data.forEach((entry, index) => {\r\n    time = entry.startTime\r\n    time_s = parseInt(time.slice(0,2))*3600 + parseInt(time.slice(3,5))*60 + parseInt(time.slice(6,8))\r\n    data[index]['time_s'] = time_s\r\n    times.push(time_s)\r\n  })\r\n  data = data.sort((a, b) => {\r\n    return a.time_s - b.time_s;\r\n  })\r\n  var x_domain, x_dif, x_range\r\n  if (data[0]) {\r\n    let x_min = data[0].time_s\r\n    let x_max = data[data.length-1].time_s  \r\n    x_range = x_max - x_min\r\n    x_dif = (x_range/data.length-1)*0.4\r\n    let X_m = x_min - x_dif\r\n    let X_M = x_max + x_dif\r\n    x_domain = [ X_m, X_M ]\r\n    } else {\r\n    x_domain = [0,1]\r\n    x_dif = 0\r\n    x_range = 1\r\n  }\r\n  return(\r\n    <Victory.VictoryChart \r\n    width={relativeToScreen(330)}\r\n    height={relativeToScreen(215)}\r\n    padding={{left: relativeToScreen(40), right: relativeToScreen(20), top: relativeToScreen(0), bottom: relativeToScreen(65)}}\r\n    domain={{x: x_domain, y: [0.5, 5.5]}}\r\n    >\r\n      <Victory.VictoryAxis\r\n      dependentAxis\r\n      domain={[0.5, 5.5]}\r\n      tickFormat={ tick => parseInt(tick) }\r\n      style={{\r\n        axis: {stroke: \"#fff0\"},\r\n        grid: {stroke: \"#fff7\"},\r\n        tickLabels: {fontSize: relativeToScreen(17), padding: relativeToScreen(15) , fill: '#fff'},\r\n      }}\r\n      />\r\n      <Victory.VictoryAxis\r\n      label={ !data[0] ? 'Adicione uma entrada para habilitar\\no modo temporal.' : ''}\r\n      tickValues={data.map(entry => entry.time_s)}\r\n      tickFormat={ tick => {\r\n        let tickEntry = data.filter(entry => entry.time_s==tick)[0]\r\n        if (tickEntry) {\r\n          return tickEntry.startTime.slice(0,5)\r\n        } else return null\r\n      }}\r\n      tickLabelComponent={<Victory.VictoryLabel angle={-90} dx={relativeToScreen(-25)} dy={relativeToScreen(-8)} />}\r\n      style={{\r\n        axis: {stroke: \"#fff0\"},\r\n        grid: {stroke: \"#fff0\"},\r\n        axisLabel: {\r\n          width: '70%',\r\n          fontSize: styles.h3.fontSize,\r\n          fill: '#fff',\r\n          // padding: 0\r\n        },\r\n        tickLabels: {fontSize: relativeToScreen(15), padding: 0, fill: '#fff'},\r\n        ticks: {stroke: data[0] ? \"#fff8\" : '#fff0', size: relativeToScreen(10)},\r\n      }}\r\n      />\r\n      <Victory.VictoryLine\r\n      data={data}\r\n      x='time_s' y='y'\r\n      interpolation={interpolation}\r\n      style={{\r\n        data: {\r\n          stroke: '#fff',\r\n          strokeWidth: 3,\r\n        },\r\n      }}\r\n      />\r\n      <Victory.VictoryScatter\r\n      data={data}\r\n      x='time_s' y='y'\r\n      size={5.7}\r\n      style={{ data: { fill: ({datum}) => moodColorsHEX[datum.y-1] } }}\r\n      />\r\n    </Victory.VictoryChart>\r\n  )\r\n}\r\n\r\nfunction MoodLine({data, interpolation}) {\r\n  return(\r\n    <Victory.VictoryChart \r\n    width={relativeToScreen(330)}\r\n    height={relativeToScreen(150)}\r\n    padding={{left: relativeToScreen(40), right: relativeToScreen(20), top: relativeToScreen(0), bottom: relativeToScreen(0)}}\r\n    domain={{x: [ 0.6, data.length + 0.4 ], y: [0.5, 5.5]}}\r\n    >\r\n      <Victory.VictoryAxis\r\n      dependentAxis\r\n      domain={[0.5, 5.5]}\r\n      tickFormat={ tick => parseInt(tick) }\r\n      style={{\r\n        axis: {stroke: \"#fff0\"},\r\n        grid: {stroke: \"#fff7\"},\r\n        tickLabels: {fontSize: relativeToScreen(17), padding: relativeToScreen(15), fill: '#fff'},\r\n      }}\r\n      />\r\n      <Victory.VictoryLine\r\n      data={data}\r\n      x='x' y='y'\r\n      interpolation={interpolation}\r\n      style={{\r\n        data: {\r\n          stroke: '#fff',\r\n          strokeWidth: 3,\r\n        },\r\n      }}\r\n      />\r\n      <Victory.VictoryScatter\r\n      data={data}\r\n      size={relativeToScreen(5.7)}\r\n      style={{ data: { fill: ({datum}) => moodColorsHEX[datum.y-1] }}}\r\n      />\r\n    </Victory.VictoryChart>\r\n  )\r\n}\r\n\r\nfunction MoodPieCard({entries}) {\r\n  // const entries = entries.filter(entry => entry.date==Today())\r\n  var moodCount = { 1: 0, 2: 0, 3: 0, 4: 0, 5: 0 }\r\n  entries.forEach((entry) => {\r\n    moodCount[moodMap[entry.mood]] += 1\r\n  })\r\n  var moodPieData = []\r\n  moods.forEach(mood => {\r\n    if (moodCount[mood]) {\r\n      moodPieData.push({ x: mood, y: moodCount[mood] })\r\n    }\r\n  })\r\n  return(\r\n    <View style={{width: relativeToScreen(330), height: relativeToScreen(180), flexDirection: 'row', alignItems: 'center', paddingTop: relativeToScreen(5), paddingBottom: relativeToScreen(10)}}>\r\n      { entries[0]\r\n        ? <MoodPie data={moodPieData} />\r\n        : <Text style={[styles.h3, {width: '60%', textAlign: 'center'}]}>Você ainda não fez nenhuma entrada.</Text>\r\n      }\r\n      <MoodPieStats data={moodPieData} nEntries={entries.length} />\r\n    </View>\r\n  )\r\n}\r\n\r\nfunction MoodPie({data}) {\r\n  var colorScale = []\r\n  data.forEach(row => {colorScale.push(moodColorsHEX[row.x-1])})\r\n  return(\r\n    <Victory.VictoryPie\r\n    data={data}\r\n    x='x' y='y'\r\n    width={relativeToScreen(180)}\r\n    height={relativeToScreen(130)}\r\n    padding={{left: 0, right: 0, top: 0, bottom: 0}}\r\n    innerRadius={relativeToScreen(32)}\r\n    padAngle={4}\r\n    cornerRadius={4}\r\n    colorScale={colorScale}\r\n    labels={[]}\r\n    />\r\n  )\r\n}\r\n\r\nfunction MoodPieStats({data, nEntries}) {\r\n  return(\r\n    <View style={{width: relativeToScreen(150), height: relativeToScreen(150), alignItems: 'center', justifyContent: 'space-between'}}>\r\n      {moods.map(mood => (<MoodStat key={mood} mood={mood} data={data} nEntries={nEntries} />))}\r\n    </View>\r\n  )\r\n}\r\n\r\nfunction MoodStat({mood, data, nEntries}) {\r\n  const moodCountObj = data.filter(countObj => countObj.x==mood)[0]\r\n  const moodCount = moodCountObj ? moodCountObj.y : 0\r\n  const moodProp = Math.round(100*moodCount/nEntries)\r\n  return(\r\n    <View style={{width: '100%', height: relativeToScreen(25), flexDirection: 'row', alignItems: 'center', justifyContent: 'space-evenly'}}>\r\n      <View style={styles.statsRowItem}>\r\n        <View style={{alignItems: 'center', justifyContent: 'center', width: relativeToScreen(22), height: relativeToScreen(22), borderRadius: relativeToScreen(11), backgroundColor: moodColorsHEX[mood-1]}}>\r\n          <Text style={[styles.h4, {color: mood==3|mood==4|mood==5 ? '#000' : '#fff'}]}>{mood}</Text>\r\n        </View>\r\n      </View>\r\n      <View style={styles.statsRowItem}>\r\n        <Text style={styles.h4}>{`${moodCount}/${nEntries}` }</Text>\r\n      </View>\r\n      <View style={styles.statsRowItem}>\r\n        <Icon name='arrow-forward-outline' width={relativeToScreen(15)} height={relativeToScreen(15)} fill='#fff' />\r\n      </View>\r\n      <View style={styles.statsRowItem}>\r\n        <Text style={styles.h4}>{ (moodProp ? moodProp : 0) + '%' }</Text>\r\n      </View>\r\n    </View>\r\n  )\r\n}\r\n\r\nexport default class Charts extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {}\r\n    this.ChartsScreen = this.ChartsScreen.bind(this)\r\n  }\r\n\r\n  ChartsScreen() {\r\n    const settings = this.props.appState.user.settings\r\n    const backgroundImage = settings.backgroundImage\r\n    const imgURI =  settings.displayBackgroundImage\r\n    ? ( backgroundImage\r\n      ? ( settings.enableHighResolution\r\n        ? backgroundImage.urls.raw\r\n        : backgroundImage.urls.regular\r\n      ) : null\r\n    ) : null\r\n    const backgroundColor = settings.backgroundColor\r\n    var entries = this.props.appState.user.entries\r\n    return(\r\n      <ChartPanel\r\n      imgURI={imgURI}\r\n      backgroundColor={backgroundColor}\r\n      entries={entries}\r\n      />\r\n    )  \r\n  }\r\n\r\n  render() {\r\n    console.log('Rendering \"Charts\" screen component...')\r\n    return <this.ChartsScreen />\r\n  }\r\n}","import React, { Component, createContext, useContext } from 'react';\nimport { ImageBackground, Text, ActivityIndicator, Platform } from 'react-native';\nimport { Icon } from 'react-native-eva-icons'\n// import AsyncStorage from '@react-native-async-storage/async-storage';\nimport { LinearGradient } from 'expo-linear-gradient';\nimport { Today } from './components/EntrancesComponent';\nimport { NavigationContainer, DefaultTheme, DarkTheme } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\n//import { createDrawerNavigator } from '@react-navigation/drawer';\n\nimport EntrancesScreen from './components/EntrancesComponent';\nimport PostEntranceScreen from './components/PostEntryComponent';\nimport LoginScreen from './components/LoginComponent'\nimport SettingsScreen from './components/SettingsScreen';\nimport { WallpapersComponent } from './components/WallpapersComponent';\nimport { WallpaperZoom } from './components/WallpaperZoomComponent';\nimport Charts from './components/Charts'\nimport UserContext from './shared/UserContext';\n\nimport * as Linking from 'expo-linking';\nconst linking = {\n  prefixes: [Linking.createURL('/')],//, 'https://luisresende13.github.io/Mood-Tracker'],\n  config: {\n    screens: {\n      Home: {\n        screens: {\n          Entrances: 'Entrances',\n          Settings: 'Settings',\n        },\n      },\n      PostEntrance: 'PostEntrance',\n      WallpaperTopics: 'WallpaperTopics',\n      Wallpapers: 'Wallpapers',\n      WallpaperZoom: 'WallpaperZoom'\n    }\n  }\n};\nconst loginLinking = {\n  prefixes: [Linking.createURL('/')],//, 'https://luisresende13.github.io/Mood-Tracker'],\n  config: {\n    screens: {\n      Login: 'Login'\n    }\n  }\n};\nconsole.log('CREATE URL: ' + Linking.createURL('/'))\n\n// cors-midpoint uri (needed to avoid cors' allow-cross-origin error when fetching in web platforms)\nconst appServerURI = 'https://mood-tracker-server.herokuapp.com/'\n\nconst LoadingScreen = () => (\n  <ImageBackground source={require('./assets/wallpaper.png')} style={{flex: 1, alignItems: 'center', justifyContent: 'center'}}>\n    <ActivityIndicator size='large' color='#fff' />\n  </ImageBackground>\n)\n\nconst SettingsScreenProvider = (props) => {\n  const appState = useContext(UserContext)\n  return(\n    <SettingsScreen  appState={appState} {...props} />\n  )\n}\n\nconst EntrancesScreenProvider = (props) => {\n  const appState = useContext(UserContext)\n  return(\n    <EntrancesScreen  appState={appState} {...props} />\n  )\n}\n\nconst PostEntranceScreenProvider = (props) => {\n  const appState = useContext(UserContext)\n  return(\n    <PostEntranceScreen  appState={appState} {...props} />\n  )\n}\n\nconst WallpapersScreenProvider = (props) => {\n  const appState = useContext(UserContext)\n  return(\n    <WallpapersComponent  appState={appState} {...props} />\n  )\n}\n\nconst WallpaperZoomScreenProvider = (props) => {\n  const appState = useContext(UserContext)\n  return(\n    <WallpaperZoom appState={appState} {...props} />\n  )\n}\n\nconst ChartsScreenProvider = (props) => {\n  const appState = useContext(UserContext)\n  return(\n    <Charts appState={appState} {...props} />\n  )\n}\n\nconst Stack = createNativeStackNavigator();\nconst Tab = createBottomTabNavigator();\n\nfunction tabBarIcon(iconName) {\n  const iconFunc = ({ focused, color, size }) => {\n    let newIconName = focused\n    ? iconName + '-outline'\n    : iconName + '-outline';\n    return <Icon name={newIconName} width={size} height={size} fill={ focused ? 'rgba(0,0,0,1)' : 'rgba(0,0,0,0.6)' } />\n  }\n  return iconFunc\n}\n\nconst HomeTab = (props) => {\n  const appState = useContext(UserContext)\n  const mainScreenOptions = ({ route }) => ({\n    headerShown: false,\n    tabBarShowLabel: false,\n    tabBarHideOnKeyboard: true,\n    tabBarBackground: () => (\n      <LinearGradient\n        colors={['#f4f3f4', route.name=='Settings' ? route.params.selectedColor : appState.user.settings.backgroundColor, '#f4f3f4']}\n        start={[route.name=='Entrances' ? -0.5 : 1.5, 1]}\n        end={[route.name=='Entrances' ? 1 : 0, 1]}\n        location={[0, 0.5, 1]}\n        style={{flex: 1}}\n      />\n    ),\n  })\n\n  return(\n    <Tab.Navigator\n    initialRouteName='Entrances'\n    screenOptions={mainScreenOptions}\n    >\n      <Tab.Screen\n      name=\"Entrances\"\n      component={EntrancesScreenProvider}\n      initialParams={{\n        selectedDate: Today(),\n        selectedEntryId: null,\n      }}\n      options={{\n        tabBarIcon: tabBarIcon('inbox')\n      }}\n      />\n      <Tab.Screen\n      name=\"Charts\"\n      component={ChartsScreenProvider}\n      options={{\n        tabBarIcon: tabBarIcon('bar-chart')\n      }}\n      />\n      <Tab.Screen\n      name=\"Settings\"\n      component={SettingsScreenProvider}\n      initialParams={{\n        selectedColor: appState.user.settings.selectedColor\n      }}\n      options={{\n        tabBarIcon: tabBarIcon('settings-2')\n      }}\n      />\n    </Tab.Navigator>    \n  )\n}\n\nconst HomeStack = () => {\n\n  console.log('Returning \"HomeScreen\" component...')\n  return(\n    <Stack.Navigator \n    initialRouteName='Home'\n    screenOptions={{\n      headerShown: false,\n    }}\n    >\n      <Stack.Screen\n      name=\"Home\"\n      component={HomeTab}\n      />\n      <Stack.Screen\n      name=\"PostEntrance\"\n      component={PostEntranceScreenProvider}\n      initialParams={{\n        currentEntry: {type: 'new', date: Today(), entry: null},\n      }}\n      />\n      <Stack.Screen\n      name=\"WallpaperTopics\"\n      component={WallpapersScreenProvider}\n      initialParams={{\n        headerText: 'Tópicos',\n      }}\n      />\n      <Stack.Screen\n      name=\"Wallpapers\"\n      component={WallpapersScreenProvider}\n      initialParams={{\n        headerText: 'Clique em uma imagem para ampliar',\n      }}\n      />\n      <Stack.Screen\n      name=\"WallpaperZoom\"\n      component={WallpaperZoomScreenProvider}\n      />\n    </Stack.Navigator>\n  )  \n}\n\nexport default class App extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      user: null,\n      isUserAuth: false,\n      isUserDataSyncing: false,\n    };\n\n    this.logout = this.logout.bind(this);\n    this.getAppState = this.getAppState.bind(this);\n    this.syncUserData = this.syncUserData.bind(this);\n    this.Login = this.Login.bind(this);\n    this.LoginContainer = this.LoginContainer.bind(this);\n    this.ContextProvider = this.ContextProvider.bind(this);\n  }\n\n  componentDidMount() {\n    console.log('App component did mount...')\n  }\n\n  logout() {\n    console.log('User logged out. Navigating to \"LoginScreen\"...')\n    this.setState({isUserAuth: false, user: null})\n  }\n\n  getAppState() {\n    return this.state\n  }\n\n  async syncUserData() {\n    console.log('SYNC USER DATA STATUS: Started...')\n    this.setState({ isUserDataSyncing: true });\n    try {\n        var UserResult = await fetch( appServerURI + 'Users/' + this.state.user.username, { method: 'GET' });\n        const userStatus =  'Status: ' + UserResult.status + ', ' + UserResult.statusText\n        if (UserResult.ok) {\n            console.log('fetch GET request for user DATA successful.')\n            console.log(userStatus)\n            console.log('SYNC USER DATA STATUS: Successful.')\n            const user = await UserResult.json();\n            this.setState({user: user})\n\n        } else {\n            console.log( new Error('\"fetch\" GET request for user DATA failed. Throwing error...') )\n            throw new Error(userStatus)\n        }\n    } catch (error) {\n            console.log('SYNC USER DATA STATUS: Error captured. Printing error...')\n            console.log(error);\n            alert('Não foi possível sincronizar as entradas. Por favor, aguarde..')\n\n    } finally {\n        this.setState({ isUserDataSyncing: false });\n        console.log('SYNC USER DATA STATUS: Finished.')\n    }    \n  }\n\n  Login() {\n    return(\n      <LoginScreen\n      user={this.state.user}\n      getAppState={this.getAppState}\n      setAppState={this.setState.bind(this)}\n      />\n    )\n  }\n\n  LoginContainer() {\n    return(\n      <NavigationContainer\n      linking={loginLinking}\n      fallback={<LoadingScreen />}\n      >\n        <Stack.Navigator \n        initialRouteName='Login'\n        screenOptions={{\n          headerShown: false,\n        }}\n        >\n          <Stack.Screen\n          name=\"Login\"\n          component={this.Login}\n          />\n        </Stack.Navigator>\n      </NavigationContainer>    \n    )\n  }\n\n  ContextProvider() {\n    return(\n      <UserContext.Provider\n      value={{\n        ...this.state,\n        logout: this.logout,\n        setAppState: this.setState.bind(this),\n        syncUserData: this.syncUserData\n      }}>\n          <NavigationContainer\n          linking={linking}\n          fallback={<LoadingScreen />}\n          >\n            <HomeStack />\n          </NavigationContainer>    \n      </UserContext.Provider>\n    )\n  }\n  render() {\n    console.log('Rendering \"App\" component...')\n    \n    return !this.state.isUserAuth ? (\n      <this.LoginContainer />\n    ) : (\n      <this.ContextProvider />\n    );  \n\n    // if (this.state.isUserAuth) {\n    //     return <this.ContextProvider />\n    // } else {\n    //     return <this.LoginContainer />\n    // }\n\n    // switch (this.state.isUserAuth) {\n    //   case true:\n    //     return <this.ContextProvider />\n    //   default:\n    //     return <this.LoginContainer />\n    // }\n  }\n}","// Emotion configs\r\nconst emotionGroupsNames = [ 'Bem & Calmo', 'Bem & Energizado', 'Mal & Calmo', 'Mal & Energizado' ]\r\nconst goodEnergizedEmotions = ['Animação', 'Concentração', 'Desinibição', 'Motivação', 'Euforia']\r\nconst goodCalmEmotions = ['Alívio', 'Calma', 'Conforto', 'Despreocupação', 'Inspiração', 'Orgulho', 'Paz', 'Relaxamento', 'Satisfação', 'Segurança', 'Criatividade']\r\nconst badEnergizedEmotions = ['Inquietação', 'Ansiedade', 'Desespero', 'Frustração', 'Insatisfação', 'Irritação', 'Medo', 'Vergonha', 'Preocupação', 'Impaciência', 'Sobrecarregado(a)', 'Tensão']\r\nconst badCalmEmotions = ['Depressão', 'Timidez', 'Cansaço', 'Tristeza','Confusão', 'Desanimo', 'Insegurança', 'Solidão', 'Tédio']\r\n// const badEnergizedEmotions = ['Agitação', 'Ansiedade', 'Tristeza', 'Decepção', 'Depressão', 'Desespero', 'Frustração', 'Insatisfação', 'Irritação', 'Medo', 'Paranoia', 'Preocupação', 'Impaciencia', 'Raiva', 'Revolta', 'Sobrecarregado(a)', 'Tensão', 'Nojo']\r\n\r\nconst emotionGroups = [ goodCalmEmotions.sort(), goodEnergizedEmotions.sort(), badCalmEmotions.sort(), badEnergizedEmotions.sort() ]\r\nconst basicEmotions = [ ...emotionGroups[0], ...emotionGroups[1], ...emotionGroups[2], ...emotionGroups[3] ]\r\n\r\nconst emotionTypes = ['Positiva', 'Negativa']\r\nconst emotionEnergy = ['Calmo(a)', 'Energizado(a)']\r\n\r\nvar defaultEmotions = []\r\nvar type, energy\r\n\r\nfor (let emotion of basicEmotions) {\r\n    type = emotionGroups[0].includes(emotion) || emotionGroups[1].includes(emotion) ? emotionTypes[0] : emotionTypes[1]\r\n    energy = emotionGroups[0].includes(emotion) || emotionGroups[2].includes(emotion) ? emotionEnergy[0] : emotionEnergy[1]\r\n    defaultEmotions.push({name: emotion, type: type, energy: energy})\r\n}\r\n\r\n// console.log(defaultEmotions);\r\n\r\nmodule.exports = defaultEmotions;"],"sourceRoot":""}