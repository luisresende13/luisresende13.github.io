{"version":3,"sources":["assets/wallpaper.jpg","styles/entrancesStyles.js","components/subcomponents/UserEntryCards.js","shared/dateRange.js","components/EntrancesComponent.js","styles/postEntryStyles.js","components/subcomponents/EditEmotions.js","components/subcomponents/GoogleMapsAPI.js","components/subcomponents/OpenWeatherMapAPI.js","components/PostEntryComponent.js","styles/loginStyles.js","components/LoginComponent.js","App.js","shared/emotionsConfig.js"],"names":["module","exports","styles","mainView","flex","postButton","position","height","width","borderRadius","bottom","alignSelf","backgroundColor","justifyContent","postButtonLabel","scrollView","borderWidth","section","paddingVertical","borderBottomWidth","borderColor","sectionTitle","fontSize","color","fontWeight","card","marginTop","paddingHorizontal","cardRow","flexDirection","alignItems","moodBadge","textAlign","emotionBadge","marginRight","textBadge","paddingTop","paddingBottom","lineHeight","textAlignVertical","text","spaceBetween","icon","entryIcon","paddingRight","editButtonsView","editButton","editButtonLabel","msgBox","msg","corsURI","Platform","OS","moodColors","monthDict","MoodHeader","entry","View","style","Text","mood","star","name","fill","weather","Image","source","uri","main","temp","toString","slice","startTime","Address","useState","isCollapsed","setIsCollapsed","address","numberOfLines","onPress","top","Emotions","emotions","length","flexWrap","PaddingBottom","map","emotion","index","Jornal","jornal","left","EmptyCard","props","today","date","now","Date","split","join","Today","navigateParams","user","currentEntry","type","syncUserData","passUserData","textStyle","Pressable","navigation","navigate","CardsLoadingMessage","UserEntryCards","state","isLoading","EntryCard","bind","EditEntryButtons","editUserEntry","deleteUserEntry","console","log","setInterval","updateIfPosted","this","posted","status","forgetPosted","setSelectedEntryId","selectedEntryId","_id","entryId","selDateEntries","entries","filter","reverse","isUserDataSyncing","onButtonPress","isButtonPressed","setIsButtonPressed","label","disabled","onPressIn","onPressOut","selectedEntry","a","async","setState","UsersResult","ok","fetch","username","method","usersStatus","statusText","Error","setAlertMsg","UserEntryCardsList","Component","dateRange","englishMonthSigs","portugueseMonthSigs","englishWeekDayMap","getNextDate","next","nextDate","indexOf","formatDate","selDate","ymd","yesterday","englishWeekDay","weekDay","prefix","i","oneDigit","stringNumber","EntrancesScreen","DateNavigationButton","buttonColor","onNextButtonPress","route","params","time","selectedDate","entriesLoading","userDataSynced","alertMsg","setUserInfo","setParams","id","setSelectedDate","setTimeout","json","users","email","ImageBackground","require","ScrollView","login","StatusBar","currentHeight","entrances","content","flexGrow","contentRow","padding","entryTitle","paddingLeft","postButtonView","moodButtonView","moodButton","jornalText","saveButton","borderTopLeftRadius","borderTopRightRadius","saveButtonLabel","marginVertical","marginHorizontal","entryCardEmotionBadge","datetimeTitle","EditEmotions","showEditMenu","showExpandMenuButton","mode","newEmotionName","selectedEmotionType","selectedEmotionEnergy","EditEmotionsButtons","EditEmotionsSection","onSaveEmotionButtonPress","newEmotion","energy","postEmotionResult","postUserEntryOpts","headers","body","JSON","stringify","postEmotionStatus","updateUserData","setDeleteMode","inputSectionStyle","marginBottom","tagStyle","createEmotionViewStyle","borderTopWidth","borderTopColor","TextInput","placeholder","onChangeText","value","typeSelected","hidden","anyOpen","marginLeft","GoogleMapsAPI","GoogleMapsJavascriptAPIkey","GoogleMapsGeocodingAPIKey","OpenWeatherMapAPI","KEY","Location","moods","moodColorsRGBA","moodIcons","emotionGroupsNames","emotionTypes","emotionGroups","sort","buildIsSelectedEmotions","isSelectedEmotions","monthSigs","months","monthNameMap","monthSig","getTime","formatPostEntryDatetimeTitle","m","PostEntranceScreen","endTime","createdAt","lastEdited","selectedMood","jornalEntry","location","isMoodUnmarked","isFetchingLocationOrWeather","deleteMode","locationServiceEnabled","userCoordinates","loginMsg","initializeEntry","onSaveButtonPress","setLoginMsg","EmotionButtons","MoodButtons","postEntryHeader","onEmotionButtonPress","onMoodButtonPress","inputCardBody","setSelectedEntry","InputCard","JornalInput","postNewEntryAsync","deleteEmotion","onEmotionButtonLongPress","goBack","item","alpha","selected","selColor","size","selectMood","title","onLongPress","selectEmotion","multiline","scrollEnabled","placeholderTextColor","sectionName","cardBodyStyle","cardBodyContent","layout","userEmotionGroups","emotionLabels","mapEmotions","setSelected","checkIfLocationEnabled","getCurrentLocation","fetchWeather","currentEmotions","isSelectedEmotionsNew","includes","oldEmotions","Object","keys","newEmotionsSelected","forEach","isDataLoading","ActivityIndicator","newEntryPost","error","newEntry","editMode","postUserEntryResult","postUserEntryStatus","coords","lat","latitude","lng","longitude","then","res","resStatus","weatherInfo","coord","clouds","wind","visibility","enabled","LocationServiceEnabled","alert","response","addressObj","street","streetNumber","district","subregion","region","isoCountryCode","minHeight","titleView","titleIcon","cardHeader","cardTitle","cardSection","loadingIcon","inputField","button","buttonLabel","defaultEmotions","falseParams","appendValueToUri","validateEmail","emailStatus","apiResp","apiRespJson","formatCheck","smtpCheck","LoginScreen","textContentType","autoComplete","importantForAutofill","secureTextEntry","submitButton","LoginIcon","userInfo","password","isUserAuth","onSignIn","onSignUp","animation","textField","setField","sign","signIn","errMsg","info","isInputEmpty","UsersStatus","Users","authUser","postUserResult","emailValidation","reqStatus","passwordCheck","postUserOpts","postUserStatus","successMsg","Stack","createNativeStackNavigator","HomeScreen","Navigator","initialRouteName","screenOptions","headerShown","Screen","component","options","initialParams","App","NavigationContainer","emotionEnergy","push"],"mappings":"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K/B,MAAM+D,YAAY,8DA1BnC,yBA6BQhC,KAAKuB,SAAS,CAAEjC,WAAW,IAC3BU,KAAK/B,MAAMmC,mBAAmB,MAC9BR,QAAQC,IAA6D,sCACjE2B,EAAYC,IAAKzB,KAAK/B,MAAMY,eAhCxC,sF,oBAoCA,WAEI,OAAOmB,KAAKiC,yB,GA9IwBC,aC4Y7BC,EApiBG,CACd,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,c,+aCrhBJ,IAIMzG,EAAY,CAAC,IAAO,KAAM,IAAO,KAAM,IAAO,KAAM,IAAO,KAAM,IAAO,KAAM,IAAO,KAAM,IAAO,KAAM,IAAO,KAAM,IAAO,KAAM,IAAO,KAAM,IAAO,KAAM,IAAO,MACnK0G,EAAmB,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OACjGC,EAAsB,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OACpGC,EAAoB,CAAC,IAAO,MAAO,IAAO,MAAO,IAAO,MAAO,IAAO,MAAO,IAAO,MAAO,IAAO,MAAO,IAAO,OAGtH,SAAS9D,KACL,IAAMJ,EAAMC,OAAO3B,WAAW4B,MAAM,KAEpC,MADc,CAAEF,EAAI,GAAI1C,EAAU0C,EAAI,IAAKA,EAAI,IAAKG,KAAK,KAG7D,SAASgE,GAAYpE,GAAoB,IAAdqE,EAAa,uDAAR,OACtBC,EAAWN,EAAUA,EAAUO,QAAQvE,IAAe,YAANqE,GAAoB,EAAI,IAC9E,OAAOC,EASX,SAASE,GAAWC,GAEhB,IAAIC,EAAMD,EAAQtE,MAAM,KAClBwE,EAAYP,GAAY/D,KAAS,Y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","file":"static/js/app.cb87d740.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/wallpaper.9987c866.jpg\";","import { StatusBar } from 'expo-status-bar';\r\n\r\n//import StatusBar from 'react-native'\r\n// import { Platform } from 'react-native';\r\n\r\n// import { Dimensions } from 'react-native';\r\n// var windowWidth = Dimensions.get('window').width;\r\n// var windowHeight = Dimensions.get('window').height;\r\n\r\n// import DeviceInfo from 'react-native-device-info';\r\n// import AsyncStorage from '@react-native-community/async-storage';\r\n\r\n// // how can i do some code that will gives me if its \"Handset\"=> Smartphone , \r\n// //if its \"unknown\"=> Laptop/Computer \r\n// //and it will be saved as well in my async-storage.\r\n\r\n// //this some example that i wanna get it works well coz now its not work good\r\n\r\n// const funct1=  (type) => {\r\n// let type = DeviceInfo.getDeviceType();\r\n\r\n// if type==='Handset'{\r\n//   AsyncStorage.setItem('PLATFORM-TYPE', 'Smartphone');\r\n// }\r\n// if type==='unknown'{\r\n//   AsyncStorage.setItem('PLATFORM-TYPE', 'Laptop/Computer');\r\n// }\r\n// };\r\n\r\nconst styles = {\r\n    mainView: {\r\n        flex: 1,                 \r\n        // marginTop: StatusBar.currentHeight,\r\n    },\r\n    postButton: {\r\n        position: 'absolute',\r\n        height: 60,\r\n        width: 60,\r\n        borderRadius: 30,\r\n        bottom: '2%',\r\n        alignSelf: 'center',\r\n        backgroundColor: 'rgba(0,0,0,1)',\r\n        justifyContent: 'center',  \r\n    },\r\n    postButtonLabel: {\r\n        alignSelf: 'center',\r\n    },\r\n    scrollView: {\r\n        // paddingHorizontal: Platform.OS != 'web' ? '5%' : '5%',\r\n        flex: 1,\r\n        // height: '100%',\r\n        // width: '100%',\r\n        borderWidth: 1\r\n        // alignSelf: 'center',\r\n    },\r\n    section: {\r\n        width: 350,\r\n        paddingVertical: '16%',\r\n        borderBottomWidth: 1,\r\n        borderColor: 'rgba(155,155,155,0.3)',\r\n        alignSelf: 'center',\r\n    },\r\n    sectionTitle: {\r\n        paddingVertical: 7.5,\r\n        fontSize: 18,\r\n        color: 'white',\r\n        fontWeight: '400',\r\n    },\r\n    card: {\r\n        marginTop: '5%',\r\n        paddingVertical: 5,\r\n        paddingHorizontal: 10,\r\n        borderRadius: 20,\r\n        backgroundColor: 'rgba(0,0,0,0.2)',\r\n    },\r\n    cardRow: {\r\n        flexDirection: 'row',\r\n        paddingVertical: 5,\r\n        alignItems: 'center',\r\n    },\r\n    moodBadge: {\r\n        // fontFamily: 'sans-serif',\r\n        backgroundColor: 'green',\r\n        borderRadius: 30,\r\n        paddingVertical: 6,\r\n        width: 130,\r\n        fontSize: 15,\r\n        textAlign: 'center',\r\n    },\r\n    emotionBadge: {\r\n        // fontFamily: 'sans-serif',\r\n        backgroundColor: 'aliceblue',\r\n        borderRadius: 18,\r\n        paddingVertical: 6,\r\n        paddingHorizontal: 12.5,\r\n        marginRight: 6,\r\n        fontSize: 14,\r\n        textAlign: 'center',\r\n    },\r\n    textBadge: {\r\n        backgroundColor: 'aliceblue',\r\n        borderRadius: 17,\r\n        paddingTop: 5,\r\n        paddingBottom: 8,\r\n        paddingHorizontal: 11,\r\n        width: '100%',\r\n        fontSize: 15,\r\n        lineHeight: 22,\r\n        textAlign: 'left',\r\n        textAlignVertical: 'top',\r\n},\r\n    text: {\r\n        // fontFamily: 'sans-serif',\r\n        fontSize: 14,\r\n        color: 'white'\r\n    },\r\n    spaceBetween: {\r\n        justifyContent: 'space-between',\r\n    },\r\n    icon: {\r\n        paddingHorizontal: 12,\r\n    },\r\n    entryIcon: {\r\n        paddingRight: 0,\r\n        borderWidth: 1,\r\n    },\r\n    editButtonsView: {\r\n        flexDirection: 'row',\r\n        height: 50,\r\n        paddingBottom: 5,\r\n        alignItems: 'flex-end',\r\n        justifyContent: 'space-between'\r\n    },\r\n    editButton: {\r\n        height: 34,\r\n        width: 102,\r\n        borderWidth: 1,\r\n        borderColor: 'aliceblue',\r\n        borderRadius: 17,\r\n        alignItems: 'center',\r\n        justifyContent: 'center'\r\n    },\r\n    editButtonLabel: {\r\n        fontSize: 15,\r\n        fontWeight: '400',\r\n        color: 'white',\r\n    },\r\n    msgBox: {\r\n        position: 'absolute',\r\n        alignSelf: 'center',\r\n        bottom: 110,\r\n        width: 300,\r\n        height: 36,\r\n        justifyContent: 'center',\r\n        backgroundColor: 'rgb(30,30,30)',\r\n        borderWidth: 1,\r\n        borderColor: 'rgb(40,40,40)',\r\n        \r\n    },\r\n    msg: {\r\n        textAlign: 'center',\r\n        color: 'white',\r\n        // paddingHorizontal: 20,\r\n    },\r\n};\r\n\r\nexport default styles;","// Module import\r\nimport React, { Component, useState } from 'react';\r\nimport { Platform, View, Text, Pressable, Image } from 'react-native';\r\nimport { Icon } from 'react-native-eva-icons'\r\n\r\n// Local import\r\nimport styles from '../../styles/entrancesStyles'\r\n\r\n// cors-midpoint uri (needed to avoid cors' allow-cross-origin error when fetching in web platforms)\r\nconst corsURI = Platform.OS == 'web' ? 'https://morning-journey-78874.herokuapp.com/' : ''\r\nconst appServerURI = 'https://mood-tracker-server.herokuapp.com/'\r\n\r\n// OpenWeatherMap API weather icons URI:\r\nfunction openWeatherMapIconsURI (icon) {\r\n    if (Platform.OS === 'android') {\r\n        return `http://openweathermap.org/img/wn/${icon}@2x.png`\r\n\r\n    } else if (Platform.OS === 'web') {\r\n        return `https://openweathermap.org/img/wn/${icon}@2x.png`\r\n    }\r\n}\r\n\r\n// Defining mood colors schema\r\n// const moodColors = ['#ff3333', '#0099cc', '#add8e6', '#ffff33', '#00cc00']\r\nconst moodColors = {'Horrível': '#ff3333', 'Mal': '#0099cc', 'Regular': '#add8e6', 'Bem': '#ffff33', 'Ótimo': '#00cc00'};\r\n\r\nconst monthDict = {'Jan': '01', 'Feb': '02', 'Mar': '03', 'Apr': '04', 'May': '05', 'Jun': '06', 'Jul': '07', 'Ago': '08', 'Sep': '09', 'Oct': '10', 'Nov': '11', 'Dec': '12'}\r\nfunction Today() {\r\n    const now = Date().toString().split(' ')\r\n    const today = [ now[3], monthDict[now[1]], now[2] ].join('-')\r\n    return today\r\n}\r\n\r\nfunction MoodHeader({entry}) {\r\n    return(\r\n        <View style={ [styles.cardRow, styles.spaceBetween] }>\r\n            <View style={ [{flexDirection: 'row', alignItems: 'center'} ] }>\r\n                <Text style={[styles.moodBadge, {backgroundColor: moodColors[entry.mood]}]}>{entry.mood}</Text>\r\n                    { entry.star ? (\r\n                    <View style={{height: 30, width: 42, alignItems: 'flex-end', justifyContent: 'center'}}>\r\n                        <Icon name='star' fill='gold' width={28} height={28} style={{}} />\r\n                    </View>\r\n                    ) : <></> }                    \r\n                    { entry.weather ? (\r\n                        <View style={{height: 30, width: 50, alignItems: 'flex-end', justifyContent: 'center'}}>\r\n                            <Image source={{uri: openWeatherMapIconsURI(entry.weather.weather.icon)}} style={{width: 40, height: 40}} />\r\n                        </View>\r\n                    ) : <></> }                    \r\n                    { entry.weather ? (\r\n                        <View style={{height: 30, width: 40, alignItems: 'flex-end', justifyContent: 'center'}}>\r\n                            <Text style={{fontSize: 14, fontWeight: '500', color:'#fffd'}}> { entry.weather.main.temp.toString().slice(0,2) + '°C' } </Text>\r\n                        </View>\r\n                    ) : <></> }                \r\n                \r\n            </View>\r\n            <View style={[styles.cardRow]}>\r\n                <Icon name='edit' height={18} width={18} fill='rgba(255,255,255,0.75)' style={{marginRight: 6}} />\r\n                <Text style={styles.text}>{entry.startTime.slice(0,5)}</Text>\r\n            </View>\r\n        </View>\r\n\r\n    )\r\n}\r\n\r\nfunction Address ({entry}) {\r\n\r\n    const [isCollapsed, setIsCollapsed] = useState( 1 );\r\n    if (entry.address) {\r\n        return(\r\n            <View style={styles.cardRow}>\r\n                <Text numberOfLines={ isCollapsed } onPress={ () => { setIsCollapsed( isCollapsed ? 0 : 1 ) }} style={styles.text}>\r\n                    <Icon name='pin' height={17} width={17} fill='rgba(255,255,255,0.75)' style={{position: 'relative', marginRight: 5, top: 2}} />\r\n                    {entry.address}\r\n                </Text>\r\n            </View>        \r\n        )\r\n    } else {\r\n        return <></>\r\n    }\r\n}\r\n\r\nfunction Emotions ({entry}) {\r\n    if (entry.emotions.length>0) {\r\n        return (\r\n            <View style={[styles.cardRow, {flexWrap: 'wrap', justifyContent: 'flex-start', paddingTop: 2, PaddingBottom: 0}]}>\r\n                { entry.emotions.map((emotion, index) => {\r\n                    if (emotion.name) {\r\n                        emotion = emotion.name\r\n                    }\r\n                    return(\r\n                        <View key={'emotion-' + emotion} style={{paddingVertical: 5, paddingHorizontal: 2}}>\r\n                            <Text style={[styles.emotionBadge]}>{emotion}</Text>\r\n                        </View>\r\n                    )\r\n                })}\r\n            </View>\r\n        )\r\n    } else {\r\n        return (\r\n            <></>\r\n        )\r\n    }\r\n}\r\n\r\nfunction Jornal({ entry }) {\r\n    if (entry.jornal) {\r\n        return(\r\n            <View style={styles.cardRow}>\r\n                <Text style={styles.textBadge}>\r\n                    <Icon name='book-open' height={20} width={20} fill='rgba(0,0,0,0.25)' style={{position: 'relative', top: 4, left: 1, marginRight: 6}} />\r\n                    {entry.jornal}\r\n                </Text>\r\n            </View>\r\n        )\r\n    } else {\r\n        return <></>\r\n    }\r\n}\r\n\r\nfunction EmptyCard(props) {\r\n    const today = props.date == Today()\r\n    const navigateParams = {\r\n        user: props.user,\r\n        currentEntry: {\r\n            type: today ? 'new' : 'custom-date',\r\n            date: props.date,\r\n            entry: null\r\n        },\r\n        syncUserData: props.syncUserData,\r\n        passUserData: props.passUserData,\r\n    }\r\n    const textStyle = {fontSize: 16, color: 'white', marginTop: 7}\r\n    return (\r\n        <Pressable\r\n        onPress={ () => props.navigation.navigate('PostEntrance', navigateParams) }\r\n        style={[styles.card, {alignItems: 'center', justifyContent: 'center', fontSize: 16, height: 145}]}\r\n        >\r\n            <Icon name='inbox' fill='rgba(255,255,255,0.3)' width={25} height={25} />\r\n            <Text style={textStyle}> Nenhuma entrada encontrada. </Text>\r\n            <Text style={textStyle}> Pressione aqui para adicionar uma a este dia! </Text>\r\n        </Pressable>\r\n    );\r\n}\r\n\r\nfunction CardsLoadingMessage() {\r\n    return(\r\n        <View style={[styles.card, {alignItems: 'center', justifyContent: 'center', height: 145}]}>\r\n            <Icon name='sync-outline' fill='rgba(0,0,0,0.3)' width={25} height={25} />\r\n        </View>\r\n    )\r\n}\r\n\r\nexport default class UserEntryCards extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isLoading: false,\r\n        };\r\n        this.EntryCard = this.EntryCard.bind(this);\r\n        // this.onEntryCardPress = this.onEntryCardPress.bind(this);\r\n        this.EditEntryButtons = this.EditEntryButtons.bind(this);\r\n        this.editUserEntry = this.editUserEntry.bind(this);\r\n        this.deleteUserEntry = this.deleteUserEntry.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log('Subcomponent \"UserEntryCards\" did mount...')\r\n        setInterval( () => { this.updateIfPosted() }, 1000 * 3 )\r\n        // setInterval( () => { console.log('Default auto syncing started...'); this.syncUserData() }, 1000 * 10 )\r\n        \r\n    }\r\n\r\n    updateIfPosted () {\r\n        if (this.props.posted.status) {\r\n            console.log('JUST POSTED STATUS: POSTED. Redirecting date and syncing entries ...');\r\n            this.props.forgetPosted();\r\n            this.props.syncUserData();\r\n            }\r\n    }\r\n\r\n    EntryCard({ entry }) {\r\n        function onEntryCardPress() {\r\n            this.props.setSelectedEntryId(this.props.selectedEntryId === entry._id ? null : entry._id)\r\n        }\r\n        return (\r\n        <Pressable onPress={onEntryCardPress.bind(this)} style={styles.card}>\r\n            <MoodHeader entry={entry} />\r\n            <Emotions entry={entry} />\r\n            <Address entry={entry} />\r\n            <Jornal entry={entry} />\r\n            <this.EditEntryButtons entryId={entry._id} />\r\n        </Pressable>\r\n        );\r\n    }    \r\n\r\n    UserEntryCardsList() {\r\n        const selDateEntries = this.props.user.entries.filter( (entry) => entry.date === this.props.date ).reverse()\r\n\r\n        if (selDateEntries.length) {\r\n            return selDateEntries.map( entry => <this.EntryCard key={'entry-card-'+entry.startTime} entry={entry} />)\r\n        \r\n        } else if (this.props.isUserDataSyncing) {    \r\n            return <CardsLoadingMessage />\r\n\r\n        } else {\r\n            return <EmptyCard {...this.props} />\r\n        }\r\n    }\r\n\r\n    EditEntryButtons(props) {\r\n        const buttonLabels = ['Editar', 'Excluir']\r\n        const onButtonPress = { 'Editar': this.editUserEntry, 'Excluir': this.deleteUserEntry }\r\n\r\n        const [isButtonPressed, setIsButtonPressed] = useState({\r\n            'Editar': false,\r\n            'Excluir': false,\r\n        })\r\n\r\n        if (this.props.selectedEntryId == props.entryId) {\r\n            return(\r\n                <View style={styles.editButtonsView}>\r\n                    { buttonLabels.map( (label) => (\r\n                        <Pressable\r\n                        key={`èdit-${label}-${props.entryId}`}\r\n                        style={[styles.editButton,  {backgroundColor: isButtonPressed[label] ? (label=='Excluir' ? '#000f' : '#fff2') : '#0000', borderColor: label=='Excluir' ? 'red' : 'white' }]}\r\n                        disabled={ this.state.isLoading | this.props.isUserDataSyncing }\r\n                        onPress={ onButtonPress[label] }\r\n                        onPressIn={() => setIsButtonPressed({ ...isButtonPressed, [label]: !isButtonPressed[label] })}\r\n                        onPressOut={() => setIsButtonPressed({ ...isButtonPressed, [label]: !isButtonPressed[label] })}\r\n                        >\r\n                            <Text style={[styles.editButtonLabel, {color: label=='Excluir' ? 'red' : 'white' }]}>{label}</Text>                    \r\n                        </Pressable>\r\n                    )) }\r\n            </View>\r\n            )\r\n        } else {\r\n            return null\r\n        }\r\n    }\r\n\r\n    editUserEntry() {\r\n        const selectedEntry = this.props.user.entries.filter( (entry) => entry._id == this.props.selectedEntryId )[0]\r\n        const navigateParams = {\r\n            user: this.props.user,\r\n            currentEntry: {\r\n                type: 'edit',\r\n                date: selectedEntry.date,\r\n                entry: selectedEntry\r\n            },\r\n            syncUserData: this.props.syncUserData,\r\n            passUserData: this.props.passUserData,\r\n        }\r\n        this.props.navigation.navigate('PostEntrance', navigateParams)\r\n    }\r\n\r\n    async deleteUserEntry() {\r\n\r\n        console.log('DELETE USER ENTRY STATUS: Started...')\r\n        this.setState({ isLoading: true });\r\n        // prompt()\r\n\r\n        try {\r\n            var UsersResult = {ok: false, status: 999}\r\n            UsersResult = await fetch( corsURI + appServerURI + 'Users/' + this.props.user.username + '/entries/' + this.props.selectedEntryId, { method: 'DELETE' });\r\n            // var UsersResult = await fetch( 'https://localhost:3000/' + 'Users/' + this.props.user.username + '/entries/' + this.props.selectedEntryId, { method: 'DELETE' });\r\n            const usersStatus =  'Status ' + UsersResult.status + ', ' + UsersResult.statusText\r\n\r\n            if (UsersResult.ok) {\r\n                // const users = await UsersResult.json();\r\n                console.log('fetch DELETE request for user entry successful.')\r\n                console.log(usersStatus)\r\n                console.log('DELETE USER ENTRY STATUS: Successful.')\r\n\r\n            } else {\r\n                console.log( new Error('\"fetch\" DELETE request for user entry failed. Throwing error...') )\r\n                throw new Error(usersStatus)\r\n            }\r\n    \r\n        } catch (error) {\r\n                console.log('DELETE USER ENTRY STATUS: Error captured. Printing error...')\r\n                console.log(error);\r\n                this.props.setAlertMsg('Não foi possível deletar a entrada. Tente novamente.')\r\n\r\n        } finally {\r\n            this.setState({ isLoading: false});\r\n            this.props.setSelectedEntryId(null)\r\n            console.log('DELETE USER ENTRY STATUS: FINISHED.' + UsersResult.ok ? 'Proceeding to sync user entries...' : 'Delete failed, skipping sync of user entries...')\r\n            if (UsersResult.ok) {this.props.syncUserData()}\r\n        }    \r\n    }\r\n\r\n    render() {\r\n        // console.log('\"Rendering \"UserEntryCards\" subcomponent...\"')\r\n        return this.UserEntryCardsList()\r\n    }\r\n}","const dateRange = [\r\n    \"2021-01-01\",\r\n    \"2021-01-02\",\r\n    \"2021-01-03\",\r\n    \"2021-01-04\",\r\n    \"2021-01-05\",\r\n    \"2021-01-06\",\r\n    \"2021-01-07\",\r\n    \"2021-01-08\",\r\n    \"2021-01-09\",\r\n    \"2021-01-10\",\r\n    \"2021-01-11\",\r\n    \"2021-01-12\",\r\n    \"2021-01-13\",\r\n    \"2021-01-14\",\r\n    \"2021-01-15\",\r\n    \"2021-01-16\",\r\n    \"2021-01-17\",\r\n    \"2021-01-18\",\r\n    \"2021-01-19\",\r\n    \"2021-01-20\",\r\n    \"2021-01-21\",\r\n    \"2021-01-22\",\r\n    \"2021-01-23\",\r\n    \"2021-01-24\",\r\n    \"2021-01-25\",\r\n    \"2021-01-26\",\r\n    \"2021-01-27\",\r\n    \"2021-01-28\",\r\n    \"2021-01-29\",\r\n    \"2021-01-30\",\r\n    \"2021-01-31\",\r\n    \"2021-02-01\",\r\n    \"2021-02-02\",\r\n    \"2021-02-03\",\r\n    \"2021-02-04\",\r\n    \"2021-02-05\",\r\n    \"2021-02-06\",\r\n    \"2021-02-07\",\r\n    \"2021-02-08\",\r\n    \"2021-02-09\",\r\n    \"2021-02-10\",\r\n    \"2021-02-11\",\r\n    \"2021-02-12\",\r\n    \"2021-02-13\",\r\n    \"2021-02-14\",\r\n    \"2021-02-15\",\r\n    \"2021-02-16\",\r\n    \"2021-02-17\",\r\n    \"2021-02-18\",\r\n    \"2021-02-19\",\r\n    \"2021-02-20\",\r\n    \"2021-02-21\",\r\n    \"2021-02-22\",\r\n    \"2021-02-23\",\r\n    \"2021-02-24\",\r\n    \"2021-02-25\",\r\n    \"2021-02-26\",\r\n    \"2021-02-27\",\r\n    \"2021-02-28\",\r\n    \"2021-03-01\",\r\n    \"2021-03-02\",\r\n    \"2021-03-03\",\r\n    \"2021-03-04\",\r\n    \"2021-03-05\",\r\n    \"2021-03-06\",\r\n    \"2021-03-07\",\r\n    \"2021-03-08\",\r\n    \"2021-03-09\",\r\n    \"2021-03-10\",\r\n    \"2021-03-11\",\r\n    \"2021-03-12\",\r\n    \"2021-03-13\",\r\n    \"2021-03-14\",\r\n    \"2021-03-15\",\r\n    \"2021-03-16\",\r\n    \"2021-03-17\",\r\n    \"2021-03-18\",\r\n    \"2021-03-19\",\r\n    \"2021-03-20\",\r\n    \"2021-03-21\",\r\n    \"2021-03-22\",\r\n    \"2021-03-23\",\r\n    \"2021-03-24\",\r\n    \"2021-03-25\",\r\n    \"2021-03-26\",\r\n    \"2021-03-27\",\r\n    \"2021-03-28\",\r\n    \"2021-03-29\",\r\n    \"2021-03-30\",\r\n    \"2021-03-31\",\r\n    \"2021-04-01\",\r\n    \"2021-04-02\",\r\n    \"2021-04-03\",\r\n    \"2021-04-04\",\r\n    \"2021-04-05\",\r\n    \"2021-04-06\",\r\n    \"2021-04-07\",\r\n    \"2021-04-08\",\r\n    \"2021-04-09\",\r\n    \"2021-04-10\",\r\n    \"2021-04-11\",\r\n    \"2021-04-12\",\r\n    \"2021-04-13\",\r\n    \"2021-04-14\",\r\n    \"2021-04-15\",\r\n    \"2021-04-16\",\r\n    \"2021-04-17\",\r\n    \"2021-04-18\",\r\n    \"2021-04-19\",\r\n    \"2021-04-20\",\r\n    \"2021-04-21\",\r\n    \"2021-04-22\",\r\n    \"2021-04-23\",\r\n    \"2021-04-24\",\r\n    \"2021-04-25\",\r\n    \"2021-04-26\",\r\n    \"2021-04-27\",\r\n    \"2021-04-28\",\r\n    \"2021-04-29\",\r\n    \"2021-04-30\",\r\n    \"2021-05-01\",\r\n    \"2021-05-02\",\r\n    \"2021-05-03\",\r\n    \"2021-05-04\",\r\n    \"2021-05-05\",\r\n    \"2021-05-06\",\r\n    \"2021-05-07\",\r\n    \"2021-05-08\",\r\n    \"2021-05-09\",\r\n    \"2021-05-10\",\r\n    \"2021-05-11\",\r\n    \"2021-05-12\",\r\n    \"2021-05-13\",\r\n    \"2021-05-14\",\r\n    \"2021-05-15\",\r\n    \"2021-05-16\",\r\n    \"2021-05-17\",\r\n    \"2021-05-18\",\r\n    \"2021-05-19\",\r\n    \"2021-05-20\",\r\n    \"2021-05-21\",\r\n    \"2021-05-22\",\r\n    \"2021-05-23\",\r\n    \"2021-05-24\",\r\n    \"2021-05-25\",\r\n    \"2021-05-26\",\r\n    \"2021-05-27\",\r\n    \"2021-05-28\",\r\n    \"2021-05-29\",\r\n    \"2021-05-30\",\r\n    \"2021-05-31\",\r\n    \"2021-06-01\",\r\n    \"2021-06-02\",\r\n    \"2021-06-03\",\r\n    \"2021-06-04\",\r\n    \"2021-06-05\",\r\n    \"2021-06-06\",\r\n    \"2021-06-07\",\r\n    \"2021-06-08\",\r\n    \"2021-06-09\",\r\n    \"2021-06-10\",\r\n    \"2021-06-11\",\r\n    \"2021-06-12\",\r\n    \"2021-06-13\",\r\n    \"2021-06-14\",\r\n    \"2021-06-15\",\r\n    \"2021-06-16\",\r\n    \"2021-06-17\",\r\n    \"2021-06-18\",\r\n    \"2021-06-19\",\r\n    \"2021-06-20\",\r\n    \"2021-06-21\",\r\n    \"2021-06-22\",\r\n    \"2021-06-23\",\r\n    \"2021-06-24\",\r\n    \"2021-06-25\",\r\n    \"2021-06-26\",\r\n    \"2021-06-27\",\r\n    \"2021-06-28\",\r\n    \"2021-06-29\",\r\n    \"2021-06-30\",\r\n    \"2021-07-01\",\r\n    \"2021-07-02\",\r\n    \"2021-07-03\",\r\n    \"2021-07-04\",\r\n    \"2021-07-05\",\r\n    \"2021-07-06\",\r\n    \"2021-07-07\",\r\n    \"2021-07-08\",\r\n    \"2021-07-09\",\r\n    \"2021-07-10\",\r\n    \"2021-07-11\",\r\n    \"2021-07-12\",\r\n    \"2021-07-13\",\r\n    \"2021-07-14\",\r\n    \"2021-07-15\",\r\n    \"2021-07-16\",\r\n    \"2021-07-17\",\r\n    \"2021-07-18\",\r\n    \"2021-07-19\",\r\n    \"2021-07-20\",\r\n    \"2021-07-21\",\r\n    \"2021-07-22\",\r\n    \"2021-07-23\",\r\n    \"2021-07-24\",\r\n    \"2021-07-25\",\r\n    \"2021-07-26\",\r\n    \"2021-07-27\",\r\n    \"2021-07-28\",\r\n    \"2021-07-29\",\r\n    \"2021-07-30\",\r\n    \"2021-07-31\",\r\n    \"2021-08-01\",\r\n    \"2021-08-02\",\r\n    \"2021-08-03\",\r\n    \"2021-08-04\",\r\n    \"2021-08-05\",\r\n    \"2021-08-06\",\r\n    \"2021-08-07\",\r\n    \"2021-08-08\",\r\n    \"2021-08-09\",\r\n    \"2021-08-10\",\r\n    \"2021-08-11\",\r\n    \"2021-08-12\",\r\n    \"2021-08-13\",\r\n    \"2021-08-14\",\r\n    \"2021-08-15\",\r\n    \"2021-08-16\",\r\n    \"2021-08-17\",\r\n    \"2021-08-18\",\r\n    \"2021-08-19\",\r\n    \"2021-08-20\",\r\n    \"2021-08-21\",\r\n    \"2021-08-22\",\r\n    \"2021-08-23\",\r\n    \"2021-08-24\",\r\n    \"2021-08-25\",\r\n    \"2021-08-26\",\r\n    \"2021-08-27\",\r\n    \"2021-08-28\",\r\n    \"2021-08-29\",\r\n    \"2021-08-30\",\r\n    \"2021-08-31\",\r\n    \"2021-09-01\",\r\n    \"2021-09-02\",\r\n    \"2021-09-03\",\r\n    \"2021-09-04\",\r\n    \"2021-09-05\",\r\n    \"2021-09-06\",\r\n    \"2021-09-07\",\r\n    \"2021-09-08\",\r\n    \"2021-09-09\",\r\n    \"2021-09-10\",\r\n    \"2021-09-11\",\r\n    \"2021-09-12\",\r\n    \"2021-09-13\",\r\n    \"2021-09-14\",\r\n    \"2021-09-15\",\r\n    \"2021-09-16\",\r\n    \"2021-09-17\",\r\n    \"2021-09-18\",\r\n    \"2021-09-19\",\r\n    \"2021-09-20\",\r\n    \"2021-09-21\",\r\n    \"2021-09-22\",\r\n    \"2021-09-23\",\r\n    \"2021-09-24\",\r\n    \"2021-09-25\",\r\n    \"2021-09-26\",\r\n    \"2021-09-27\",\r\n    \"2021-09-28\",\r\n    \"2021-09-29\",\r\n    \"2021-09-30\",\r\n    \"2021-10-01\",\r\n    \"2021-10-02\",\r\n    \"2021-10-03\",\r\n    \"2021-10-04\",\r\n    \"2021-10-05\",\r\n    \"2021-10-06\",\r\n    \"2021-10-07\",\r\n    \"2021-10-08\",\r\n    \"2021-10-09\",\r\n    \"2021-10-10\",\r\n    \"2021-10-11\",\r\n    \"2021-10-12\",\r\n    \"2021-10-13\",\r\n    \"2021-10-14\",\r\n    \"2021-10-15\",\r\n    \"2021-10-16\",\r\n    \"2021-10-17\",\r\n    \"2021-10-18\",\r\n    \"2021-10-19\",\r\n    \"2021-10-20\",\r\n    \"2021-10-21\",\r\n    \"2021-10-22\",\r\n    \"2021-10-23\",\r\n    \"2021-10-24\",\r\n    \"2021-10-25\",\r\n    \"2021-10-26\",\r\n    \"2021-10-27\",\r\n    \"2021-10-28\",\r\n    \"2021-10-29\",\r\n    \"2021-10-30\",\r\n    \"2021-10-31\",\r\n    \"2021-11-01\",\r\n    \"2021-11-02\",\r\n    \"2021-11-03\",\r\n    \"2021-11-04\",\r\n    \"2021-11-05\",\r\n    \"2021-11-06\",\r\n    \"2021-11-07\",\r\n    \"2021-11-08\",\r\n    \"2021-11-09\",\r\n    \"2021-11-10\",\r\n    \"2021-11-11\",\r\n    \"2021-11-12\",\r\n    \"2021-11-13\",\r\n    \"2021-11-14\",\r\n    \"2021-11-15\",\r\n    \"2021-11-16\",\r\n    \"2021-11-17\",\r\n    \"2021-11-18\",\r\n    \"2021-11-19\",\r\n    \"2021-11-20\",\r\n    \"2021-11-21\",\r\n    \"2021-11-22\",\r\n    \"2021-11-23\",\r\n    \"2021-11-24\",\r\n    \"2021-11-25\",\r\n    \"2021-11-26\",\r\n    \"2021-11-27\",\r\n    \"2021-11-28\",\r\n    \"2021-11-29\",\r\n    \"2021-11-30\",\r\n    \"2021-12-01\",\r\n    \"2021-12-02\",\r\n    \"2021-12-03\",\r\n    \"2021-12-04\",\r\n    \"2021-12-05\",\r\n    \"2021-12-06\",\r\n    \"2021-12-07\",\r\n    \"2021-12-08\",\r\n    \"2021-12-09\",\r\n    \"2021-12-10\",\r\n    \"2021-12-11\",\r\n    \"2021-12-12\",\r\n    \"2021-12-13\",\r\n    \"2021-12-14\",\r\n    \"2021-12-15\",\r\n    \"2021-12-16\",\r\n    \"2021-12-17\",\r\n    \"2021-12-18\",\r\n    \"2021-12-19\",\r\n    \"2021-12-20\",\r\n    \"2021-12-21\",\r\n    \"2021-12-22\",\r\n    \"2021-12-23\",\r\n    \"2021-12-24\",\r\n    \"2021-12-25\",\r\n    \"2021-12-26\",\r\n    \"2021-12-27\",\r\n    \"2021-12-28\",\r\n    \"2021-12-29\",\r\n    \"2021-12-30\",\r\n    \"2021-12-31\",\r\n    \"2022-01-01\",\r\n    \"2022-01-02\",\r\n    \"2022-01-03\",\r\n    \"2022-01-04\",\r\n    \"2022-01-05\",\r\n    \"2022-01-06\",\r\n    \"2022-01-07\",\r\n    \"2022-01-08\",\r\n    \"2022-01-09\",\r\n    \"2022-01-10\",\r\n    \"2022-01-11\",\r\n    \"2022-01-12\",\r\n    \"2022-01-13\",\r\n    \"2022-01-14\",\r\n    \"2022-01-15\",\r\n    \"2022-01-16\",\r\n    \"2022-01-17\",\r\n    \"2022-01-18\",\r\n    \"2022-01-19\",\r\n    \"2022-01-20\",\r\n    \"2022-01-21\",\r\n    \"2022-01-22\",\r\n    \"2022-01-23\",\r\n    \"2022-01-24\",\r\n    \"2022-01-25\",\r\n    \"2022-01-26\",\r\n    \"2022-01-27\",\r\n    \"2022-01-28\",\r\n    \"2022-01-29\",\r\n    \"2022-01-30\",\r\n    \"2022-01-31\",\r\n    \"2022-02-01\",\r\n    \"2022-02-02\",\r\n    \"2022-02-03\",\r\n    \"2022-02-04\",\r\n    \"2022-02-05\",\r\n    \"2022-02-06\",\r\n    \"2022-02-07\",\r\n    \"2022-02-08\",\r\n    \"2022-02-09\",\r\n    \"2022-02-10\",\r\n    \"2022-02-11\",\r\n    \"2022-02-12\",\r\n    \"2022-02-13\",\r\n    \"2022-02-14\",\r\n    \"2022-02-15\",\r\n    \"2022-02-16\",\r\n    \"2022-02-17\",\r\n    \"2022-02-18\",\r\n    \"2022-02-19\",\r\n    \"2022-02-20\",\r\n    \"2022-02-21\",\r\n    \"2022-02-22\",\r\n    \"2022-02-23\",\r\n    \"2022-02-24\",\r\n    \"2022-02-25\",\r\n    \"2022-02-26\",\r\n    \"2022-02-27\",\r\n    \"2022-02-28\",\r\n    \"2022-03-01\",\r\n    \"2022-03-02\",\r\n    \"2022-03-03\",\r\n    \"2022-03-04\",\r\n    \"2022-03-05\",\r\n    \"2022-03-06\",\r\n    \"2022-03-07\",\r\n    \"2022-03-08\",\r\n    \"2022-03-09\",\r\n    \"2022-03-10\",\r\n    \"2022-03-11\",\r\n    \"2022-03-12\",\r\n    \"2022-03-13\",\r\n    \"2022-03-14\",\r\n    \"2022-03-15\",\r\n    \"2022-03-16\",\r\n    \"2022-03-17\",\r\n    \"2022-03-18\",\r\n    \"2022-03-19\",\r\n    \"2022-03-20\",\r\n    \"2022-03-21\",\r\n    \"2022-03-22\",\r\n    \"2022-03-23\",\r\n    \"2022-03-24\",\r\n    \"2022-03-25\",\r\n    \"2022-03-26\",\r\n    \"2022-03-27\",\r\n    \"2022-03-28\",\r\n    \"2022-03-29\",\r\n    \"2022-03-30\",\r\n    \"2022-03-31\",\r\n    \"2022-04-01\",\r\n    \"2022-04-02\",\r\n    \"2022-04-03\",\r\n    \"2022-04-04\",\r\n    \"2022-04-05\",\r\n    \"2022-04-06\",\r\n    \"2022-04-07\",\r\n    \"2022-04-08\",\r\n    \"2022-04-09\",\r\n    \"2022-04-10\",\r\n    \"2022-04-11\",\r\n    \"2022-04-12\",\r\n    \"2022-04-13\",\r\n    \"2022-04-14\",\r\n    \"2022-04-15\",\r\n    \"2022-04-16\",\r\n    \"2022-04-17\",\r\n    \"2022-04-18\",\r\n    \"2022-04-19\",\r\n    \"2022-04-20\",\r\n    \"2022-04-21\",\r\n    \"2022-04-22\",\r\n    \"2022-04-23\",\r\n    \"2022-04-24\",\r\n    \"2022-04-25\",\r\n    \"2022-04-26\",\r\n    \"2022-04-27\",\r\n    \"2022-04-28\",\r\n    \"2022-04-29\",\r\n    \"2022-04-30\",\r\n    \"2022-05-01\",\r\n    \"2022-05-02\",\r\n    \"2022-05-03\",\r\n    \"2022-05-04\",\r\n    \"2022-05-05\",\r\n    \"2022-05-06\",\r\n    \"2022-05-07\",\r\n    \"2022-05-08\",\r\n    \"2022-05-09\",\r\n    \"2022-05-10\",\r\n    \"2022-05-11\",\r\n    \"2022-05-12\",\r\n    \"2022-05-13\",\r\n    \"2022-05-14\",\r\n    \"2022-05-15\",\r\n    \"2022-05-16\",\r\n    \"2022-05-17\",\r\n    \"2022-05-18\",\r\n    \"2022-05-19\",\r\n    \"2022-05-20\",\r\n    \"2022-05-21\",\r\n    \"2022-05-22\",\r\n    \"2022-05-23\",\r\n    \"2022-05-24\",\r\n    \"2022-05-25\",\r\n    \"2022-05-26\",\r\n    \"2022-05-27\",\r\n    \"2022-05-28\",\r\n    \"2022-05-29\",\r\n    \"2022-05-30\",\r\n    \"2022-05-31\",\r\n    \"2022-06-01\",\r\n    \"2022-06-02\",\r\n    \"2022-06-03\",\r\n    \"2022-06-04\",\r\n    \"2022-06-05\",\r\n    \"2022-06-06\",\r\n    \"2022-06-07\",\r\n    \"2022-06-08\",\r\n    \"2022-06-09\",\r\n    \"2022-06-10\",\r\n    \"2022-06-11\",\r\n    \"2022-06-12\",\r\n    \"2022-06-13\",\r\n    \"2022-06-14\",\r\n    \"2022-06-15\",\r\n    \"2022-06-16\",\r\n    \"2022-06-17\",\r\n    \"2022-06-18\",\r\n    \"2022-06-19\",\r\n    \"2022-06-20\",\r\n    \"2022-06-21\",\r\n    \"2022-06-22\",\r\n    \"2022-06-23\",\r\n    \"2022-06-24\",\r\n    \"2022-06-25\",\r\n    \"2022-06-26\",\r\n    \"2022-06-27\",\r\n    \"2022-06-28\",\r\n    \"2022-06-29\",\r\n    \"2022-06-30\"\r\n]\r\nexport default dateRange;","// Module imports\r\nimport React, { Component } from 'react';\r\nimport { View, Text, ImageBackground, Pressable, ScrollView } from 'react-native';\r\nimport { Icon } from 'react-native-eva-icons'\r\n\r\n// Component imports\r\nimport UserEntryCards from './subcomponents/UserEntryCards';\r\n\r\n// Local imports\r\nimport dateRange from '../shared/dateRange';\r\nimport styles from '../styles/entrancesStyles';\r\n\r\n// cors-midpoint uri (needed to avoid cors' allow-cross-origin error when fetching)\r\nconst corsURI = 'https://morning-journey-78874.herokuapp.com/';\r\nconst appServerURI = 'https://mood-tracker-server.herokuapp.com/'\r\n\r\n// Defining pertinent constants\r\nconst monthDict = {'Jan': '01', 'Feb': '02', 'Mar': '03', 'Apr': '04', 'May': '05', 'Jun': '06', 'Jul': '07', 'Ago': '08', 'Sep': '09', 'Oct': '10', 'Nov': '11', 'Dec': '12'}\r\nconst englishMonthSigs = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dec']\r\nconst portugueseMonthSigs = ['Jan', 'Fev', 'Mar', 'Abr', 'Mai', 'Jun', 'Jul', 'Ago', 'Set', 'Out', 'Nov', 'Dez']\r\nconst englishWeekDayMap = {'Mon': 'Seg', 'Tue': 'Ter', 'Wed': 'Qua', 'Thu': 'Qui', 'Fri': 'Sex', 'Sat': 'Sab', 'Sun': 'Dom'}\r\n\r\n// Defining pertinent functions\r\nfunction Today() {\r\n    const now = Date().toString().split(' ')\r\n    const today = [ now[3], monthDict[now[1]], now[2] ].join('-')\r\n    return today\r\n}\r\nfunction getNextDate(date, next='next') {\r\n    const nextDate = dateRange[dateRange.indexOf(date) + (next=='previous' ? -1 : 1)]\r\n    return nextDate\r\n}\r\nfunction getTime() {\r\n    //Wed,Jan,26,2022,15:12:37,GMT-0300,(Horário,Padrão,de,Brasília)\r\n    const now = Date().toString().split(' ')\r\n    const time = now[4]\r\n    // const time = new Date().toLocaleTimeString()\r\n    return time\r\n}\r\nfunction formatDate(selDate) {\r\n    \r\n    var ymd = selDate.split('-')\r\n    const yesterday = getNextDate(Today(), 'previous')\r\n    const englishWeekDay = new Date(ymd[0], ymd[1], ymd[2]).toString().split(' ')[0]\r\n    const weekDay = englishWeekDayMap[englishWeekDay]\r\n    var prefix = ''\r\n\r\n    if (selDate === Today()) prefix = 'Hoje, '\r\n    else if (selDate === yesterday) prefix = 'Ontem, '\r\n    else prefix = weekDay + ', '\r\n    \r\n    for (var i=0; i<12; i++) {\r\n        if (monthDict[ englishMonthSigs[i] ] == ymd[1]) {\r\n            return prefix + oneDigit(ymd[2]) + '° ' + portugueseMonthSigs[i]\r\n        }\r\n    }\r\n}\r\nfunction oneDigit(stringNumber) {\r\n    if (stringNumber[0] == '0') return stringNumber.slice(1, stringNumber.length)\r\n    else return stringNumber\r\n}\r\n\r\nexport default class EntrancesScreen extends Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            \r\n            user: this.props.route.params.user,\r\n            date: Today(),\r\n            time: getTime(),\r\n            selectedDate: Today(),\r\n            entriesLoading: false,\r\n            userDataSynced: false,\r\n            isUserDataSyncing: false,\r\n            alertMsg: '',\r\n        };\r\n        this.onNextButtonPress = this.onNextButtonPress.bind(this);\r\n        this.forgetPosted = this.forgetPosted.bind(this);\r\n        this.setAlertMsg = this. setAlertMsg.bind(this);\r\n        this.setSelectedEntryId = this.setSelectedEntryId.bind(this);\r\n        this.setUserInfo = this.setUserInfo.bind(this);\r\n        this.syncUserData = this.syncUserData.bind(this);\r\n        this.passUserData = this.passUserData.bind(this);\r\n    }\r\n    \r\n    componentDidMount() {\r\n        console.log('\"Entries\" screen component did mount...')      \r\n        this.props.navigation.setParams({posted: {status: false, entry: null}});\r\n        // this.syncUserData()\r\n\r\n    }\r\n\r\n    setSelectedEntryId(id) {\r\n        this.setState({selectedEntryId: id})\r\n    }\r\n\r\n    onNextButtonPress(next='next') {\r\n        function setSelectedDate() {\r\n            this.setState({\r\n                selectedEntryId: null,\r\n                selectedDate: getNextDate(this.state.selectedDate, next),\r\n            })\r\n        }\r\n        return setSelectedDate.bind(this);\r\n    }\r\n\r\n    forgetPosted() {\r\n        this.setState({\r\n            selectedEntryId: null,\r\n            selectedDate: this.props.route.params.posted.entry.type == 'new' ? Today() : this.state.selectedDate,\r\n        });\r\n        this.props.navigation.setParams({posted: {status: false, entry: null}});\r\n    }\r\n\r\n    setAlertMsg(msg) {\r\n        this.setState({alertMsg: msg})\r\n        setTimeout( () => this.setState({alertMsg: ''}) , 1000 * 5 )\r\n    }\r\n    \r\n    alertMsg() {\r\n        return(\r\n            <View style={[styles.msgBox, this.state.alertMsg ? {} : {backgroundColor: 'transparent', borderColor: 'transparent'} ]}>\r\n                <Text style={styles.msg}>{this.state.alertMsg}</Text>\r\n            </View>\r\n        )\r\n    }\r\n\r\n    DateNavigationButton = ({next, today}) => {\r\n        const buttonColor = next=='next' ? (today ? 'rgba(255,255,255,0.1)' : 'white') : 'white'\r\n        return(\r\n            <Pressable onPress={ this.onNextButtonPress(next) } disabled={ next=='next' & today }>\r\n                <Icon name={ next=='next' ? 'arrow-forward' : 'arrow-back'} width={35} height={35} fill={buttonColor} />\r\n            </Pressable>\r\n        )\r\n    }\r\n\r\n    setUserInfo(user) {\r\n        this.setState({user: user, userDataSynced: true})\r\n    }\r\n\r\n    passUserData() {\r\n        return this.state.user\r\n    }\r\n\r\n    async syncUserData() {\r\n\r\n        console.log('SYNC ENTRIES STATUS: Started...')\r\n        this.setState({ isUserDataSyncing: true });\r\n    \r\n        try {\r\n\r\n            var UsersResult = await fetch( corsURI + appServerURI + 'Users', { method: 'GET' });\r\n            const usersStatus =  'Status: ' + UsersResult.status + ', ' + UsersResult.statusText\r\n\r\n            if (UsersResult.ok) {\r\n                const users = await UsersResult.json();\r\n                const user = users.filter((user) => user.email === this.state.user.email)[0]\r\n                console.log('fetch GET request for user entries successful.')\r\n                console.log(usersStatus)\r\n\r\n                this.setState({user: user, userDataSynced: true})\r\n                console.log('SYNC ENTRIES STATUS: Successful.')\r\n\r\n            } else {\r\n                console.log( new Error('\"fetch\" GET request for user entries failed. Throwing error...') )\r\n                throw new Error(usersStatus)\r\n            }\r\n    \r\n        } catch (error) {\r\n                console.log('SYNC ENTRIES STATUS: Error captured. Printing error...')\r\n                console.log(error);\r\n                this.props.setAlertMsg('Não foi possível sincronizar as entradas. Por favor, aguarde..')\r\n\r\n        } finally {\r\n            this.setState({ isUserDataSyncing: false });\r\n            console.log('SYNC ENTRIES STATUS: Finished.')\r\n        }    \r\n    }\r\n\r\n    render() {\r\n        // console.log('Rendering \"Entries\" screen...')\r\n        const today = this.state.selectedDate === Today()\r\n        const navigateParams = {\r\n            user: this.state.user,\r\n            currentEntry: {type: 'new', date: Today(), entry: null},\r\n            syncUserData: this.syncUserData,\r\n            passUserData: this.passUserData,\r\n        }\r\n        return(\r\n            <ImageBackground source={require('../assets/wallpaper.jpg')} style={[styles.mainView]}>\r\n                \r\n                <ScrollView style={styles.scrollView}>\r\n                    <View style={styles.section}>\r\n                        <View style={[styles.cardRow, {justifyContent: 'space-between'}]}>\r\n                            <this.DateNavigationButton icon='arrow-back' next='previous' />\r\n                            <Text style={styles.sectionTitle}> {'Suas entradas  •  ' + formatDate(this.state.selectedDate)} </Text>                                \r\n                            <this.DateNavigationButton icon='arrow-forward' next='next' today={today} />\r\n                        </View>\r\n                        <UserEntryCards\r\n                        date={this.state.selectedDate}\r\n                        selectedEntryId={this.state.selectedEntryId}\r\n                        posted={this.props.route.params.posted}\r\n                        user={this.state.user}\r\n                        isUserDataSyncing={this.state.isUserDataSyncing}\r\n                        setUserInfo={this.setUserInfo}\r\n                        syncUserData={this.syncUserData}\r\n                        passUserData={this.passUserData}\r\n                        setSelectedEntryId={this.setSelectedEntryId}\r\n                        forgetPosted={this.forgetPosted}\r\n                        setAlertMsg = {this.setAlertMsg}\r\n                        navigation = {this.props.navigation}\r\n                        />\r\n                    </View>\r\n                </ScrollView>\r\n\r\n                <Pressable onPress={() => {this.props.navigation.navigate( 'PostEntrance', navigateParams )}}  style={[styles.postButton]}>\r\n                    <Icon name='plus-circle' width={72} height={72} fill='white' style={styles.postButtonLabel}/>\r\n                </Pressable>\r\n\r\n                {this.alertMsg()}\r\n  \r\n            </ImageBackground>\r\n            )\r\n\r\n    }\r\n  }\r\n","import { StatusBar } from 'expo-status-bar';\r\n// import { Platform } from 'react-native';\r\n\r\nconst styles = {\r\n  login: {\r\n    msgBox: {\r\n      position: 'absolute',\r\n      bottom: '10%',\r\n      width: 300,\r\n      alignSelf: 'center',\r\n      // width: 350,\r\n      height: 36,\r\n      justifyContent: 'center',\r\n      backgroundColor: 'rgb(30,30,30)',\r\n      borderWidth: 1,\r\n      borderColor: 'rgb(40,40,40)',\r\n    },\r\n    msg: {\r\n        textAlign: 'center',\r\n        color: 'white',\r\n        // paddingHorizontal: 15,\r\n    },\r\n  },\r\n  mainView: {\r\n    flex: 1,                 \r\n    marginTop: StatusBar.currentHeight,\r\n  },\r\n  entrances: {\r\n    marginTop: StatusBar.currentHeight,\r\n    borderWidth: 0,\r\n    flex:1,\r\n    justifyContent: 'space-between',\r\n    alignItems: 'flex-start',\r\n  },\r\n  scrollView: {\r\n    // paddingHorizontal: Platform.OS != 'web' ? '5%' : '5%',\r\n    width: '100%',\r\n    alignSelf: 'center',\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    paddingBottom: '0%',\r\n    paddingHorizontal: '5%',\r\n    alignSelf: 'stretch',\r\n    borderColor: 'black',\r\n  },\r\n  section: {\r\n    width: 350,\r\n    paddingVertical: '16%',\r\n    borderBottomWidth: 1,\r\n    borderColor: 'rgba(155,155,155,0.3)',\r\n    alignSelf: 'center',\r\n  },\r\n  contentRow: {\r\n    flexDirection: 'column',\r\n    padding: 10,\r\n    marginTop: 22,\r\n    borderWidth: 1,\r\n    borderColor: 'rgba(155,155,155, 0.4)',\r\n    borderRadius: 30,\r\n    backgroundColor: 'rgba(255,255,255, 0.3)',\r\n\r\n  },\r\n  entryTitle: {\r\n    paddingVertical: 3,\r\n    paddingLeft: 4,\r\n    fontSize: 19,\r\n    color: 'white',\r\n  },\r\n  entryIcon: {\r\n    paddingRight: 0,\r\n  },\r\n  postButtonView: {\r\n    height: 60,\r\n    width: 60,\r\n    borderRadius: 30,\r\n    alignSelf: 'center',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    backgroundColor: 'white',\r\n  },\r\n  postButtonLabel: {\r\n    fontSize: 45,\r\n    fontWeight: 'bold',\r\n  },\r\n  moodButtonView: {\r\n    width: 65,\r\n    height: 65,\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    borderWidth: 1,\r\n  },\r\n  moodButton: {\r\n    width: 65,\r\n    height: 65,\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n  date: {\r\n    position: 'relative',\r\n    left: '60%',\r\n    paddingVertical: 8,\r\n    paddingHorizontal: 10,\r\n    fontSize: 15,\r\n    alignSelf: 'center',\r\n    backgroundColor: 'white',\r\n    borderRadius: 20\r\n  },\r\n  jornalText: {\r\n    paddingVertical: 5,\r\n    paddingHorizontal: 12,\r\n    flex: 1,\r\n    textAlignVertical: 'top',\r\n    width: '100%',\r\n    borderRadius: 20,\r\n    color: 'white',\r\n    fontSize: 16,\r\n  },\r\n  saveButton: {\r\n    height: 50,\r\n    width: '100%',\r\n    borderTopLeftRadius: 30,\r\n    borderTopRightRadius: 30,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    backgroundColor: 'white'\r\n  },\r\n  saveButtonLabel: {\r\n    fontWeight:'bold',\r\n    fontSize: 19\r\n  },\r\n  card: {\r\n    marginTop: '5%',\r\n    paddingVertical: 5,\r\n    paddingHorizontal: 10,\r\n    borderRadius: 20,\r\n    backgroundColor: 'rgba(0,0,0,0.2)',\r\n  },\r\n  cardRow: {\r\n      flexDirection: 'row',\r\n      paddingVertical: 5,\r\n      alignItems: 'center',\r\n  },\r\n  moodBadge: {\r\n      backgroundColor: 'green',\r\n      borderRadius: 30,\r\n      paddingVertical: 6,\r\n      width: 130,\r\n      fontSize: 16,\r\n      textAlign: 'center',\r\n  },\r\n  emotionBadge: {\r\n      backgroundColor: 'rgba(1,1,1,0.5)',\r\n      borderRadius: 30,\r\n      paddingVertical: 6,\r\n      paddingHorizontal: 12.5,\r\n      fontSize: 15,\r\n      textAlign: 'center',\r\n      marginVertical: 5,\r\n      marginHorizontal: 5\r\n  },\r\n  entryCardEmotionBadge: {\r\n    backgroundColor: 'aliceblue',\r\n    borderRadius: 30,\r\n    paddingVertical: 7,\r\n    paddingHorizontal: 12.5,\r\n    marginRight: 6,\r\n    fontSize: 15,\r\n    textAlign: 'center',\r\n  },\r\n  datetimeTitle: {\r\n    fontSize: 16,\r\n    marginRight: 3,\r\n  },\r\n  editButtonsView: {\r\n    flexDirection: 'row',\r\n    height: 55,\r\n    paddingVertical: 5,\r\n    alignItems: 'flex-end',\r\n    justifyContent: 'space-between'\r\n  },\r\n  editButton: {\r\n    height: 34,\r\n    width: 102,\r\n    borderWidth: 1,\r\n    borderColor: 'aliceblue',\r\n    borderRadius: 19,\r\n    alignItems: 'center',\r\n    justifyContent: 'center'\r\n  },\r\n  editButtonLabel: {\r\n      fontSize: 15,\r\n      fontWeight: '400',\r\n      color: 'white',\r\n  },\r\n}\r\n\r\nexport default styles;","import React, { Component, useState } from 'react';\r\nimport { View, Text,  Pressable, TextInput, ActivityIndicator, Platform } from 'react-native';\r\nimport { Icon } from 'react-native-eva-icons'\r\nimport VectorIcon from 'react-native-vector-icons/MaterialCommunityIcons';\r\nimport styles from '../../styles/postEntryStyles'\r\n\r\n// cors-midpoint uri (needed to avoid cors' allow-cross-origin error when fetching in web platforms)\r\nconst corsURI = Platform.OS == 'web' ? 'https://morning-journey-78874.herokuapp.com/' : ''\r\nconst appServerURI = 'https://mood-tracker-server.herokuapp.com/'\r\n\r\nexport default class EditEmotions extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            showEditMenu: false,\r\n            showExpandMenuButton: true,\r\n            mode: 'hidden',\r\n            newEmotionName: '',\r\n            selectedEmotionType: null,\r\n            selectedEmotionEnergy: null,\r\n            isLoading: false,\r\n        }\r\n        this.EditEmotionsButtons = this.EditEmotionsButtons.bind(this);\r\n        this.EditEmotionsSection = this.EditEmotionsSection.bind(this);\r\n        this.onSaveEmotionButtonPress = this.onSaveEmotionButtonPress.bind(this);\r\n    }\r\n\r\n    async onSaveEmotionButtonPress() {\r\n        this.setState({ isLoading: true });\r\n        var user = this.props.user;\r\n        const newEmotion = {\r\n            name: this.state.newEmotionName,\r\n            type: this.state.selectedEmotionType,\r\n            energy: this.state.selectedEmotionEnergy,\r\n        }\r\n        try {\r\n            console.log('POST EMOTION STATUS: Started...')\r\n            var postEmotionResult = {ok: false, status: '999', statusText: 'Post not fetched yet.'}\r\n            const postUserEntryOpts = { \r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify( newEmotion ),\r\n            }\r\n            // var postUserEntryResult = await fetch('http://localhost:3000/Users/' + info.username + '/emotions', postUserEntryOpts);\r\n            postEmotionResult = await fetch( corsURI + appServerURI + 'Users/' + user.username + '/emotions', postUserEntryOpts);\r\n            const postEmotionStatus = 'Status: ' + postEmotionResult.status + ', ' + postEmotionResult.statusText\r\n\r\n            if (postEmotionResult.ok) {\r\n                console.log('POST EMOTION STATUS: Successful.')\r\n                console.log(postEmotionStatus)\r\n                this.setState({\r\n                    showEditMenu: true,\r\n                    showExpandMenuButton: true,\r\n                    mode: 'hidden',\r\n                    newEmotionName: '',\r\n                    selectedEmotionType: null,\r\n                    selectedEmotionEnergy: null,        \r\n                })\r\n                    \r\n            } else {\r\n                console.log('POST EMOTION STATUS: Failed. Throwing error...')\r\n                throw new Error(postEmotionStatus)\r\n            }\r\n\r\n        } catch (error) {\r\n            this.props.setAlertMsg('Erro no servidor. Tente novamente...')\r\n            console.log('Erro capturado:')\r\n            console.log(error);\r\n\r\n        } finally {\r\n            console.log('POST EMOTION STATUS: Finished.')\r\n            this.setState({ isLoading: false });\r\n            if (postEmotionResult.ok) {\r\n                await this.props.syncUserData();\r\n                this.props.updateUserData();\r\n            }\r\n        }\r\n \r\n    }\r\n\r\n    onDeleteEmotionsButtonPress() {\r\n        this.props.setDeleteMode()\r\n    }\r\n\r\n    EditEmotionsSection() {\r\n\r\n        const emotionTypes = ['Positiva', 'Negativa']\r\n        const emotionEnergy = ['Calmo(a)', 'Energizado(a)']\r\n\r\n        const inputSectionStyle = {marginTop: 0, marginBottom: 0, alignItems: 'center'}\r\n        const textStyle = {color: 'white', fontSize: 16, alignSelf: 'center', marginBottom: 8}\r\n        const inputStyle = {width: '55%', height: 30, borderRadius: 16.5, color: 'white', backgroundColor: 'rgba(0,0,0,0.3)', fontSize: 15, textAlign: 'center' }\r\n        const tagStyle = {width: '45%', height: 28, borderRadius: 13.5,  marginBottom: 7, color: 'white', alignItems: 'center', justifyContent: 'center'}\r\n        const createEmotionViewStyle = {height: 420, marginTop: 25, paddingVertical: 0, justifyContent: 'space-evenly', borderTopWidth: 1, borderTopColor: 'rgba(255,255,255,0.2)'}\r\n\r\n        switch (this.state.mode) {\r\n            case 'hidden':\r\n                return null\r\n                // break;\r\n\r\n            case 'create':\r\n\r\n                return(\r\n                    <View style={createEmotionViewStyle}>\r\n                        <Text style={{color: 'white', fontSize: 22, alignSelf: 'center'}}>Criar emoção</Text>\r\n                        <View style={inputSectionStyle}>\r\n                            <Text style={textStyle}>Nome</Text>\r\n                            <TextInput\r\n                            placeholder='Nome da emoção...'\r\n                            style={inputStyle}\r\n                            onChangeText={text => this.setState({newEmotionName: text})}\r\n                            value={this.state.newEmotionName}\r\n                            />\r\n                        </View>\r\n                        <View style={inputSectionStyle}>\r\n                            <Text style={textStyle}>Tipo</Text>\r\n                            { emotionTypes.map((type) => {\r\n                                const typeSelected = this.state.selectedEmotionType === type\r\n                                return(\r\n                                    <Pressable\r\n                                    key={'emotion-'+type}\r\n                                    onPress={() => this.setState({selectedEmotionType: typeSelected ? null : type })}\r\n                                    style={[tagStyle, {backgroundColor: typeSelected ? 'rgba(0,0,0,0.8)' : 'rgba(0,0,0,0.3)'}]}>\r\n                                        <Text style={[{fontSize: 15, color: 'white'}]}>{type}</Text>\r\n                                    </Pressable>\r\n                                )\r\n                            }) }\r\n                        </View>\r\n                        <View style={inputSectionStyle}>\r\n                            <Text style={textStyle}>Energia</Text>\r\n                            { emotionEnergy.map((type) => {\r\n                                const typeSelected = this.state.selectedEmotionEnergy === type\r\n                                return(\r\n                                    <Pressable\r\n                                    key={'emotion-'+type}\r\n                                    onPress={() => this.setState({selectedEmotionEnergy: typeSelected ? null : type })}\r\n                                    style={[tagStyle, {backgroundColor: typeSelected ? 'rgba(0,0,0,0.8)' : 'rgba(0,0,0,0.3)'}]}>\r\n                                        <Text style={[{fontSize: 15, color: 'white'}]}>{type}</Text>\r\n                                    </Pressable>\r\n                                )\r\n                            }) }\r\n                        </View>\r\n                        <View style={[styles.cardRow, {justifyContent: 'space-evenly'}]}>\r\n                            <Pressable onPress={this.onSaveEmotionButtonPress} style={[styles.editButton, {alignSelf: 'center'}]}>\r\n                                <Text style={styles.editButtonLabel}>Salvar</Text>\r\n                            </Pressable>\r\n                            <Pressable onPress={() => this.setState({showEditMenu: true, showExpandMenuButton: true, mode: 'hidden'}) } style={[styles.editButton, {alignSelf: 'center', borderColor: 'white'}]}>\r\n                                <Text style={[styles.editButtonLabel, {color: 'white'}]}>Cancelar</Text>\r\n                            </Pressable>\r\n                            </View>\r\n                    </View>\r\n                )\r\n                break\r\n\r\n            case 'delete':\r\n                return(\r\n                    <View style={[createEmotionViewStyle, {height: 150}]}>\r\n                        <Text style={{color: 'white', fontSize: 22, alignSelf: 'center'}}>Excluir emoções</Text>\r\n                        <Text style={{color: 'white', fontSize: 16, textAlign: 'center'}}>Pressione e segure para excluir uma emoção.</Text>\r\n                        <View style={[styles.cardRow, {justifyContent: 'space-evenly'}]}>\r\n                            <Pressable\r\n                            onPress={() => {this.props.setDeleteMode(); this.setState({showEditMenu: true, showExpandMenuButton: true, mode: 'hidden'})}}\r\n                            style={[styles.editButton, {alignSelf: 'center', borderColor: 'white'}]}\r\n                            >\r\n                                <Text style={[styles.editButtonLabel, {color: 'white'}]}>Terminar</Text>\r\n                            </Pressable>\r\n                        </View>\r\n                    </View>\r\n                )\r\n                break\r\n\r\n            default:\r\n                return null\r\n\r\n        }\r\n\r\n    }\r\n\r\n    EditEmotionsButtons() {\r\n\r\n        const buttonLabels = ['Criar', 'Excluir', 'Layout']\r\n        const onButtonPress = { \r\n            'Criar': () => this.setState({showEditMenu: false, showExpandMenuButton: false, mode: 'create'}),\r\n            'Excluir': () => {this.setState({showEditMenu: false , showExpandMenuButton: false, mode: 'delete'}); this.props.setDeleteMode()},\r\n            'Layout': () => {}\r\n        }\r\n        const [isButtonPressed, setIsButtonPressed] = useState({\r\n            'Criar': false,\r\n            'Excluir': false,\r\n            'Layout': false,\r\n        })\r\n        const showEditMenu =  this.state.showEditMenu\r\n        const showExpandMenuButton = this.state.showExpandMenuButton\r\n        const hidden = this.state.mode=='hidden'\r\n        const anyOpen = showEditMenu || !hidden\r\n\r\n        return(\r\n            <>\r\n                { this.state.showExpandMenuButton ? (\r\n                    <View style={[styles.cardRow, {height: 50, marginTop: 25, paddingTop: 10, justifyContent: showEditMenu ? 'space-between' : 'center', borderTopWidth: 1, borderTopColor: 'rgba(255,255,255,0.2)'}]}>\r\n                        { showEditMenu ? ( \r\n                            buttonLabels.map((label) => (\r\n                                <Pressable\r\n                                key={`emotion-${label}`}\r\n                                style={[styles.editButton,  {backgroundColor: isButtonPressed[label] ? '#fff2' : '#0000', width: 75}]}\r\n                                disabled={ this.state.isLoading }\r\n                                onPress={ onButtonPress[label] }\r\n                                onPressIn={() => setIsButtonPressed({ ...isButtonPressed, [label]: !isButtonPressed[label] })}\r\n                                onPressOut={() => setIsButtonPressed({ ...isButtonPressed, [label]: !isButtonPressed[label] })}\r\n                                >\r\n                                    <Text style={[styles.editButtonLabel, {color:  'white' }]}>{label}</Text>                    \r\n                                </Pressable>\r\n                            ))\r\n                        ) : null }\r\n                        <Pressable\r\n                        onPress={() => this.setState({ showEditMenu:  !showEditMenu })}\r\n                        style={{flexDirection: 'row', alignItems: 'center', justifyContent: 'center', paddingVertical: 5, width: 75}}>\r\n                            <Icon name={ !showEditMenu ? 'more-horizontal-outline' : 'arrow-back-outline' } fill='white' width={20} height={20} />\r\n                            <Text style={{color: 'white', fontSize: 16, marginLeft: 0}}> {anyOpen ? 'menos' : 'mais'}</Text>\r\n                        </Pressable>\r\n                    </View> \r\n                ) :  null  }\r\n            </>\r\n\r\n        )\r\n    }\r\n        \r\n    render() {\r\n        \r\n        return(\r\n            <>\r\n                <this.EditEmotionsSection />\r\n                <this.EditEmotionsButtons />\r\n            </>\r\n        )\r\n    }\r\n\r\n}","const GoogleMapsAPI = {\r\n    GoogleMapsJavascriptAPIkey: \"AIzaSyBVWbOwPAMRyz2bS6rYHrDftVeihQ8WMCo\",\r\n    GoogleMapsGeocodingAPIKey: \"AIzaSyB6O-DpvulBC0rom1mGy-mBcstIbPlDPHA\",\r\n}\r\n\r\nexport default GoogleMapsAPI","const OpenWeatherMapAPI = {\r\n    KEY: \"de9e6896f84109d7920528172207411a\",\r\n}\r\nexport default OpenWeatherMapAPI\r\n","import React, { Component } from 'react';\r\nimport { View, Text, ImageBackground, Pressable, ScrollView, Platform, TextInput, ActivityIndicator } from 'react-native';\r\n\r\nimport { Icon } from 'react-native-eva-icons'\r\nimport VectorIcon from 'react-native-vector-icons/MaterialCommunityIcons';\r\nimport EditEmotions from './subcomponents/EditEmotions'\r\nimport styles from '../styles/postEntryStyles'\r\n\r\n// Geocoding and weather dependencies and APIs\r\nimport * as Location from 'expo-location';\r\nimport GoogleMapsAPI from './subcomponents/GoogleMapsAPI'\r\nLocation.setGoogleApiKey(GoogleMapsAPI.GoogleMapsGeocodingAPIKey)\r\nimport OpenWeatherMapAPI from './subcomponents/OpenWeatherMapAPI';\r\n\r\n// cors-midpoint uri (needed to avoid cors' allow-cross-origin error when fetching in web platforms)\r\nconst corsURI = Platform.OS == 'web' ? 'https://morning-journey-78874.herokuapp.com/' : ''\r\nconst appServerURI = 'https://mood-tracker-server.herokuapp.com/'\r\n\r\n// Date() => wed jan 91 2022 07:46:57 ...\r\nconst now = new Date().toString().split(' ')\r\nconst datetime = now[2] + ' ' + now[1] + ' ' + now[3] + ' - ' + now[4].slice(0, 5)\r\n\r\n// Mood configs\r\nconst moods = ['Horrível', 'Mal', 'Regular', 'Bem', 'Ótimo']\r\nconst moodColorsHEX = ['#ff3333', '#0099cc', '#add8e6', '#ffff33', '#00cc00']\r\nconst moodColorsRGBA = ['rgba(255, 51, 51, 1)', 'rgba(0, 153, 204, 1)', 'rgba(173, 216, 230, 1)', 'rgba(255, 255, 51, 1)', 'rgba(0, 204, 0, 1)']\r\nconst moodColorsTransp = (alpha) => [`rgba(255, 51, 51, ${alpha})`, `rgba(0, 153, 204, ${alpha})`, `rgba(173, 216, 230, ${alpha})`, `rgba(255, 255, 51, ${alpha})`, `rgba(0, 204, 0, ${alpha})`]\r\nconst moodIcons = ['emoticon-dead', 'emoticon-sad', 'emoticon-neutral', 'emoticon-happy', 'emoticon-excited']\r\n\r\n// Emotion configs\r\nconst emotionGroupsNames = [ 'Bem & Calmo(a)', 'Bem & Energizado(a)', 'Mal & Calmo(a)', 'Mal & Energizado(a)' ]\r\nconst goodEnergizedEmotions = ['Animação', 'Concentração', 'Desinibição', 'Motivação', 'Euforia']\r\nconst goodCalmEmotions = ['Alívio', 'Calma', 'Conforto', 'Despreocupação', 'Inspiração', 'Orgulho', 'Paz', 'Relaxamento', 'Satisfação', 'Segurança', 'Criatividade']\r\nconst badEnergizedEmotions = ['Inquietação', 'Ansiedade', 'Desespero', 'Frustração', 'Insatisfação', 'Irritação', 'Medo', 'Vergonha', 'Preocupação', 'Impaciência', 'Sobrecarregado(a)', 'Tensão']\r\nconst badCalmEmotions = ['Depressão', 'Timidez', 'Cansaço', 'Tristeza','Confusão', 'Desanimo', 'Insegurança', 'Solidão', 'Tédio']\r\n// const badEnergizedEmotions = ['Agitação', 'Ansiedade', 'Tristeza', 'Decepção', 'Depressão', 'Desespero', 'Frustração', 'Insatisfação', 'Irritação', 'Medo', 'Paranoia', 'Preocupação', 'Impaciencia', 'Raiva', 'Revolta', 'Sobrecarregado(a)', 'Tensão', 'Nojo']\r\n\r\nconst emotionTypes = ['Positiva', 'Negativa']\r\nconst emotionEnergy = ['Calmo(a)', 'Energizado(a)']\r\n\r\nconst emotionGroups = [ goodCalmEmotions.sort(), goodEnergizedEmotions.sort(), badCalmEmotions.sort(), badEnergizedEmotions.sort() ]\r\nconst basicEmotions = [ ...emotionGroups[0], ...emotionGroups[1], ...emotionGroups[2], ...emotionGroups[3] ]\r\n\r\nfunction buildIsSelectedEmotions(emotions) {\r\n    var isSelectedEmotions = {}\r\n    for ( let emotion of emotions) {\r\n        isSelectedEmotions[emotion.name] = false\r\n    }\r\n    return isSelectedEmotions\r\n    \r\n}\r\n\r\n\r\n// Date config\r\nconst monthSigs = ['Jan', 'Feb', 'Mar', 'Apr', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dec']\r\nconst months = ['01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12']\r\n\r\nconst monthNameMap = {\r\n    '01': 'Janeiro',\r\n    '02': 'Fevereiro',\r\n    '03': 'Março',\r\n    '04': 'Abril',\r\n    '05': 'Maio',\r\n    '06': 'Junho',\r\n    '07': 'Julho',\r\n    '08': 'Agosto',\r\n    '09': 'Setembro',\r\n    '10': 'Outubro',\r\n    '11': 'Novembro',\r\n    '12': 'Dezembro',\r\n}\r\n\r\n// Functions\r\n\r\nfunction convertMonthSig(monthSig) {\r\n    const thisMonth = months[monthSigs.indexOf(monthSig)]\r\n    return thisMonth\r\n}\r\n\r\nfunction Today() {\r\n    const now = Date().toString().split(' ')\r\n    const today = [ now[3], convertMonthSig(now[1]), now[2] ].join('-')\r\n    return today\r\n}\r\n\r\nfunction getTime() {\r\n    //Wed,Jan,26,2022,15:12:37,GMT-0300,(Horário,Padrão,de,Brasília)\r\n    const now = Date().toString().split(' ')\r\n    const time = now[4]\r\n    return time\r\n}\r\n\r\nfunction oneDigit(stringNumber) {\r\n    if (stringNumber[0] == '0') return stringNumber.slice(1, stringNumber.length)\r\n    else return stringNumber\r\n}\r\n\r\nfunction formatPostEntryDatetimeTitle(date, time) {\r\n    const ymd = date.split('-')\r\n    const m = monthNameMap[ ymd[1] ]\r\n    return oneDigit( ymd[2] ) + ' ' + m + ' ' + ymd[0] + (time ? ' - ' : '') + time.slice(0,5)\r\n}\r\n\r\nfunction formattedAddress(addressObj) {\r\n    return addressObj.street + ', ' + addressObj.streetNumber + ' - ' + addressObj.district + ', ' + addressObj.subregion + '. ' + addressObj.region + ', ' + addressObj.isoCountryCode + '.'\r\n}\r\n\r\nfunction mapEmotions(emotions, layout='grid') {\r\n    var userEmotionGroups = layout=='grid' ? [[],[],[],[]] : [[],[]]\r\n    var emotionLabels = layout=='grid' ? emotionGroupsNames : emotionTypes\r\n    for (let emotion of emotions) {\r\n        if (layout=='grid') {\r\n            if (emotion.type=='Positiva') {\r\n                if (emotion.energy=='Calmo(a)')\r\n                userEmotionGroups[0] = [ ...userEmotionGroups[0], emotion]\r\n                else if (emotion.energy=='Energizado(a)')\r\n                userEmotionGroups[1] = [ ...userEmotionGroups[1], emotion]\r\n            } else if (emotion.type=='Negativa') {\r\n                if (emotion.energy=='Calmo(a)')\r\n                userEmotionGroups[2] = [ ...userEmotionGroups[2], emotion]\r\n                else if (emotion.energy=='Energizado(a)')\r\n                userEmotionGroups[3] = [ ...userEmotionGroups[3], emotion]\r\n            }   \r\n        } else if (layout=='type') {\r\n            if (emotion.type=='Positivo')\r\n            userEmotionGroups[0] = [ ...userEmotionGroups[0], emotion]\r\n            else if (emotion.type=='Negativo')\r\n            userEmotionGroups[1] = [ ...userEmotionGroups[1], emotion]\r\n        }\r\n    }\r\n    return [userEmotionGroups, emotionLabels]\r\n}\r\n\r\nexport default class PostEntranceScreen extends Component {\r\n  \r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            user: this.props.route.params.user,\r\n\r\n            date: '',\r\n            startTime: '',\r\n            endTime: '',\r\n            createdAt: '',\r\n            lastEdited: [],\r\n\r\n            star: false,\r\n            selectedMood: '',\r\n            emotions: [],\r\n            jornalEntry: '',    \r\n            address: '',\r\n            location: null,\r\n            weather: null,\r\n\r\n            selectedEntry: 'Avaliação',\r\n            isMoodUnmarked: true,\r\n            isSelectedEmotions: buildIsSelectedEmotions(this.props.route.params.user.emotions),\r\n            isLoading: false,\r\n            isFetchingLocationOrWeather: false,\r\n            deleteMode: false,\r\n\r\n            locationServiceEnabled: null,\r\n            userCoordinates: null,\r\n\r\n            loginMsg: '',\r\n        };\r\n\r\n        this.initializeEntry = this.initializeEntry.bind(this);\r\n        this.onSaveButtonPress = this.onSaveButtonPress.bind(this);\r\n        this.saveButton = this.saveButton.bind(this);\r\n        this.setLoginMsg = this.setLoginMsg.bind(this);\r\n        this.EmotionButtons = this.EmotionButtons.bind(this);\r\n        this.MoodButtons = this.MoodButtons.bind(this);\r\n        this.postEntryHeader = this.postEntryHeader.bind(this);\r\n        this.onEmotionButtonPress = this.onEmotionButtonPress.bind(this);\r\n        this.onMoodButtonPress = this.onMoodButtonPress.bind(this);\r\n        this.inputCardBody = this.inputCardBody.bind(this);\r\n        this.setSelectedEntry = this.setSelectedEntry.bind(this);\r\n        this.InputCard = this.InputCard.bind(this);\r\n        this.JornalInput = this.JornalInput.bind(this);\r\n        this.postNewEntryAsync = this.postNewEntryAsync.bind(this);\r\n        this.updateUserData = this.updateUserData.bind(this);\r\n        this.setDeleteMode = this.setDeleteMode.bind(this);\r\n        this.deleteEmotion = this.deleteEmotion.bind(this);\r\n        this.onEmotionButtonLongPress = this.onEmotionButtonLongPress.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log('\"PostEntryComponent\" did mount.')\r\n        this.initializeEntry()\r\n    }\r\n\r\n    postEntryHeader() {\r\n        return(\r\n            <View style={[styles.cardRow, {justifyContent: 'space-between'}]}>\r\n                <Pressable onPress={() => {this.props.navigation.goBack()}}  style={styles.postButton}>\r\n                    <Icon name='arrow-back' fill='white' height={30} width={30}/>\r\n                </Pressable>\r\n                <View style={[styles.entryCardEmotionBadge, {flexDirection: 'row', alignItems: 'center'}]}>\r\n                    <Text style={styles.datetimeTitle}> { formatPostEntryDatetimeTitle(this.props.route.params.currentEntry.date, this.state.startTime) } </Text>\r\n                    <Icon name='edit' fill='rgba(75,75,75,1)' height={20} width={20}/>\r\n                </View>\r\n                <Pressable onPress={() => {this.setState({star: !this.state.star})}}  style={styles.postButton}>\r\n                    <Icon name={this.state.star ? 'star' : 'star-outline'} fill='rgba(245,245,245,0.7)' height={30} width={30}/>\r\n                </Pressable>\r\n            </View>\r\n        )\r\n    }\r\n\r\n    MoodButtons() {\r\n        return moods.map((item, index) => {\r\n            const selected = this.state.selectedMood == item\r\n            const isMoodUnmarked = this.state.isMoodUnmarked\r\n            const selColor = moodColorsRGBA[index]\r\n            return(\r\n                <View key={'mood '+index} style={styles.moodButton}>\r\n                    <VectorIcon\r\n                    name={moodIcons[index]}\r\n                    size={isMoodUnmarked ? 52 : (selected ? 57 : 50) }\r\n                    color={ isMoodUnmarked ? selColor : (selected ? selColor : moodColorsTransp(0.5)[index]) }\r\n                    onPress={this.onMoodButtonPress(item)}\r\n                    />\r\n                </View>\r\n            )\r\n        })\r\n    }\r\n\r\n    onMoodButtonPress(item) {\r\n        function selectMood() {\r\n            if (this.state.selectedMood==item) {\r\n                this.setState({selectedMood: null, isMoodUnmarked: true})\r\n            } else {\r\n                this.setState({selectedMood: item, isMoodUnmarked: false})\r\n            }\r\n        }\r\n        selectMood = selectMood.bind(this);\r\n        return selectMood\r\n    }\r\n\r\n    EmotionButtons(emotions) {\r\n        return(\r\n            emotions.map( emotion => (\r\n                <Pressable\r\n                key={'emotion-' + emotion.name}\r\n                title={emotion.name}\r\n                onPress={this.onEmotionButtonPress(emotion.name)}\r\n                onLongPress={this.onEmotionButtonLongPress(emotion.name)}\r\n                >\r\n                    <Text style={[styles.emotionBadge, {backgroundColor: this.state.isSelectedEmotions[emotion.name] ? 'lightblue' : 'aliceblue' }]}>{emotion.name}</Text>\r\n                </Pressable>\r\n            ))\r\n        )\r\n    }\r\n\r\n    onEmotionButtonPress(emotion) {\r\n        function selectEmotion () {\r\n            this.setState({\r\n                isSelectedEmotions: {\r\n                    ...this.state.isSelectedEmotions,\r\n                    [emotion]: !this.state.isSelectedEmotions[emotion]\r\n                }\r\n            })    \r\n        }\r\n        selectEmotion = selectEmotion.bind(this);\r\n        return selectEmotion\r\n    }\r\n\r\n    onEmotionButtonLongPress(emotion) { \r\n        function selectEmotion () {\r\n            if (this.state.deleteMode) {\r\n                this.deleteEmotion(emotion)\r\n            }\r\n        }\r\n        selectEmotion = selectEmotion.bind(this);\r\n        return selectEmotion\r\n    }\r\n\r\n    JornalInput() {\r\n        return(\r\n            <TextInput\r\n            multiline\r\n            scrollEnabled\r\n            placeholder='Escreva aqui...'\r\n            placeholderTextColor='rgba(255,255,255,0.6)'\r\n            onChangeText={text => this.setState({jornalEntry: text})}\r\n            value={this.state.jornalEntry}\r\n            style={styles.jornalText}\r\n            >\r\n            </TextInput>\r\n        )\r\n    }\r\n\r\n    inputCardBody(sectionName, cardBodyStyle, cardBodyContent) {\r\n        if (this.state.selectedEntry === sectionName) {\r\n            if (sectionName == 'Emoções') {\r\n\r\n                const [userEmotionGroups, emotionLabels] = mapEmotions(this.state.user.emotions)\r\n                return(\r\n                    <>\r\n                        { userEmotionGroups.map((emotions, index) => (\r\n                            <View key={'emotion-group-' + index} style={{width: '100%', alignItems: 'center', marginVertical: 10}}>\r\n                                <Text style={{fontSize: 15, color: 'white', marginVertical: 8}}>{emotionLabels[index]}</Text>\r\n                                <View key={index} style={[styles.cardRow, cardBodyStyle]}>\r\n                                    {cardBodyContent(emotions)}\r\n                                </View>\r\n                            </View>\r\n                        )) }\r\n                        <EditEmotions\r\n                        user={this.props.route.params.user}\r\n                        syncUserData={this.props.route.params.syncUserData}\r\n                        updateUserData={this.updateUserData}\r\n                        deleteMode={this.state.deleteMode}\r\n                        setDeleteMode={this.setDeleteMode}\r\n                        setAlertMsg={this.setLoginMsg}\r\n                        isLoading={this.state.isLoading}\r\n                        />\r\n                    </>\r\n    \r\n                )\r\n            } else {\r\n                return(\r\n                    <View style={[styles.cardRow, cardBodyStyle]}>\r\n                        {cardBodyContent}\r\n                    </View>\r\n                )    \r\n            }\r\n        } else {\r\n            return(\r\n                <></>\r\n            )\r\n        }\r\n    }\r\n\r\n    InputCard(sectionName, icon, cardBodyStyle, cardBodyContent) {\r\n        return(\r\n            <View style={[styles.card]} >\r\n                <Pressable style={styles.cardRow} onPress={this.setSelectedEntry(sectionName)} >\r\n                    <Icon name={icon} fill='rgba(255,255,255,0.75)' height={28} width={28} style={styles.entryIcon} />\r\n                    <Text style={styles.entryTitle}> {sectionName} </Text>\r\n                </Pressable>    \r\n                {this.inputCardBody(sectionName, cardBodyStyle, cardBodyContent)}  \r\n            </View>   \r\n        )\r\n    }\r\n\r\n    setSelectedEntry (entry) {\r\n        function setSelected() {\r\n            this.setState( {selectedEntry:  this.state.selectedEntry === entry ? null : entry  } )\r\n        }\r\n        setSelected = setSelected.bind(this);\r\n        return setSelected\r\n    }\r\n\r\n    loginMsg() {\r\n        return(\r\n          <View style={[styles.login.msgBox, this.state.loginMsg ? {} : {backgroundColor: 'transparent', borderColor: 'transparent'} ]}>\r\n            <Text style={styles.login.msg}>{this.state.loginMsg}</Text>\r\n          </View>\r\n        )\r\n    }\r\n\r\n    setLoginMsg(msg) {\r\n        this.setState({loginMsg: msg})\r\n        setTimeout( () => this.setState({loginMsg: ''}) , 1000 * 5 )\r\n    }    \r\n\r\n    async initializeEntry() {\r\n        const currentEntry = this.props.route.params.currentEntry\r\n        const user = this.state.user\r\n        switch (currentEntry.type) {\r\n            case 'new':\r\n                console.log('POST ENTRY STATUS: INITIATING BLANK NEW ENTRY! FETCHING LOCATION AND WEATHER DATA...')\r\n                this.setState({\r\n                    date: currentEntry.date,\r\n                    startTime: getTime(),\r\n                    endTime: '',\r\n                    isFetchingLocationOrWeather: true\r\n                })\r\n                await this.checkIfLocationEnabled();\r\n                await this.getCurrentLocation();                    \r\n                await this.fetchWeather()\r\n            break;\r\n        \r\n            case 'custom-date':\r\n                console.log('POST ENTRY STATUS: INITIALIZING CUSTOM DATE ENTRY! SETTING DATE TO: ' + currentEntry.date)\r\n                this.setState({\r\n                    date: currentEntry.date,\r\n                    startTime: '',\r\n                    endTime: '',\r\n                })\r\n                break\r\n\r\n            case 'edit':\r\n                const entry = currentEntry.entry\r\n                const currentEmotions = entry.emotions.map(emotion => emotion.name)\r\n                var isSelectedEmotionsNew = {}\r\n                for ( let emotion of user.emotions ) {\r\n                    isSelectedEmotionsNew[emotion.name] = currentEmotions.includes(emotion.name)\r\n                }\r\n                this.setState({\r\n                    date: entry.date,\r\n                    startTime: entry.startTime,\r\n                    endTime: entry.endTime,\r\n                    createdAt: entry.createdAt,\r\n                    lastEdited: entry.lastEdited,\r\n                    star: entry.star,\r\n                    selectedMood: entry.mood,\r\n                    isSelectedEmotions: isSelectedEmotionsNew,\r\n                    jornalEntry: entry.jornal,\r\n                    address: entry.address,\r\n                    location: entry.location,\r\n                    weather: entry.weather,\r\n                    isMoodUnmarked: false,\r\n                })\r\n                break\r\n    \r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    updateUserData() {\r\n        console.log('UPDATING USER DATA IN \"PostEntryComponent\"...')\r\n        const user = this.props.route.params.passUserData()\r\n\r\n        const oldEmotions = Object.keys(this.state.isSelectedEmotions)\r\n        const currentEmotions = user.emotions.map(emotion => emotion.name)\r\n        const newEmotions = currentEmotions.filter(emotion => oldEmotions.includes(emotion))\r\n\r\n        const newEmotionsSelected = buildIsSelectedEmotions(newEmotions)\r\n        oldEmotions.forEach(emotion => { if (currentEmotions.includes(emotion)) newEmotionsSelected[emotion] = this.state.isSelectedEmotions[emotion] })\r\n\r\n        this.setState({\r\n            user: user,\r\n            isSelectedEmotions: newEmotionsSelected\r\n        })\r\n    }\r\n\r\n    saveButton() {\r\n        const isDataLoading = this.state.isFetchingLocationOrWeather | this.state.isLoading\r\n        return(\r\n            <Pressable\r\n            onPress={this.onSaveButtonPress}\r\n            disabled={isDataLoading}\r\n            style={styles.saveButton}\r\n            >\r\n                { isDataLoading ? (\r\n                    <ActivityIndicator size='small' color='#000000' /> // <Icon name={'sync-outline'} fill='black' width={28} height={28} />\r\n                ) : (\r\n                    <Text style={styles.saveButtonLabel}> Salvar </Text>\r\n                ) }\r\n            </Pressable>\r\n        )\r\n    }\r\n\r\n    onSaveButtonPress() {\r\n        if (!this.state.selectedMood) {\r\n            this.setLoginMsg('Necessário adicionar uma avaliação.')\r\n            this.setState({selectedEntry: 'Avaliação'})\r\n\r\n        } else {\r\n            try {\r\n                const currentEntry = this.props.route.params.currentEntry\r\n                var createdAt, endTime\r\n                var lastEdited = getTime()\r\n                switch (currentEntry.type) {\r\n                    case 'new':\r\n                        endTime = lastEdited\r\n                        createdAt = lastEdited\r\n                        break;\r\n                    \r\n                    case 'custom-date':\r\n                        endTime = this.state.endTime // Returns empty string ''.\r\n                        createdAt = lastEdited\r\n                        break\r\n                    \r\n                    case 'edit':\r\n                        endTime = this.state.endTime\r\n                        createdAt = this.state.createdAt\r\n                        break\r\n                \r\n                    default:\r\n                        break;\r\n                }\r\n\r\n                const newEntryPost = {\r\n                    date: this.state.date,\r\n                    startTime: this.state.startTime,\r\n                    endTime: endTime,\r\n                    createdAt: createdAt,\r\n                    lastEdited: [ ...this.state.lastEdited, {date: Today(), time: lastEdited}],\r\n                    star: this.state.star,\r\n                    mood: this.state.selectedMood,\r\n                    emotions: this.state.user.emotions.filter( emotion => this.state.isSelectedEmotions[emotion.name] ),\r\n                    jornal: this.state.jornalEntry,\r\n                    address: this.state.address,\r\n                    location: this.state.location,\r\n                    weather: this.state.weather,\r\n                }\r\n                this.postNewEntryAsync(newEntryPost)\r\n\r\n            } catch (error) {\r\n                // alert('Não foi possível postar sua entrada. Tente novamente...')\r\n                this.setLoginMsg('Não foi possível postar a entrada. Tente novamente...')\r\n                console.log('Error when attempting to post user entry. Logging error...')\r\n                console.log(error)\r\n            }\r\n        }\r\n    }\r\n\r\n    async postNewEntryAsync(newEntry) {\r\n        this.setState({ isLoading: true });\r\n        var user = this.props.route.params.user;\r\n        const currentEntry = this.props.route.params.currentEntry\r\n        const editMode = currentEntry.type === 'edit';\r\n        try {\r\n            console.log('POST ENTRY STATUS: Started...')\r\n            var postUserEntryResult = {ok: false, status: '999', statusText: 'Post not fetched yet.'}\r\n            const postUserEntryOpts = { \r\n                method: editMode? 'PUT' : 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify( newEntry ),\r\n            }\r\n            // var postUserEntryResult = await fetch('http://localhost:3000/Users/' + info.username + '/entries', postUserEntryOpts);\r\n            postUserEntryResult = await fetch( corsURI + appServerURI + 'Users/' + user.username + '/entries' + (editMode ? '/'+currentEntry.entry._id : ''), postUserEntryOpts);\r\n            const postUserEntryStatus = 'Status: ' + postUserEntryResult.status + ', ' + postUserEntryResult.statusText\r\n\r\n            if (postUserEntryResult.ok) {\r\n                console.log('POST ENTRY STATUS: Successful.')\r\n                console.log(postUserEntryStatus)\r\n                    \r\n            } else {\r\n                console.log('POST ENTRY STATUS: Failed. Throwing error...')\r\n                throw new Error(postUserEntryStatus)\r\n            }\r\n\r\n        } catch (error) {\r\n            console.log('Erro capturado:')\r\n            console.log(error);\r\n\r\n        } finally {\r\n            console.log('POST ENTRY STATUS: Finished.')\r\n            this.setState({ isLoading: false });\r\n            if (postUserEntryResult.ok) this.props.navigation.navigate('Entrances', {posted: {status: true, entry: currentEntry} } )\r\n        }\r\n    }\r\n\r\n    setDeleteMode() {\r\n        this.setState({deleteMode: !this.state.deleteMode})\r\n    }\r\n\r\n    async deleteEmotion(emotion) {\r\n        this.setState({ isLoading: true });\r\n        var user = this.state.user;\r\n        try {\r\n            console.log('DELETE EMOTION STATUS: Started...')\r\n            var postEmotionResult = {ok: false, status: '999', statusText: 'Post not fetched yet.'}\r\n            const postUserEntryOpts = { \r\n                method: 'DELETE',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n            }\r\n            // var postUserEntryResult = await fetch('http://localhost:3000/Users/' + info.username + '/emotions', postUserEntryOpts);\r\n            postEmotionResult = await fetch( corsURI + appServerURI + 'Users/' + user.username + '/emotions/' + emotion, postUserEntryOpts);\r\n            const postEmotionStatus = 'Status: ' + postEmotionResult.status + ', ' + postEmotionResult.statusText\r\n\r\n            if (postEmotionResult.ok) {\r\n                console.log('DELETE EMOTION STATUS: Successful.')\r\n                console.log(postEmotionStatus)\r\n                    \r\n            } else {\r\n                console.log('DELETE EMOTION STATUS: Failed. Throwing error...')\r\n                throw new Error(postEmotionStatus)\r\n            }\r\n\r\n        } catch (error) {\r\n            this.setAlertMsg('Erro no servidor. Tente novamente...')\r\n            console.log('Erro capturado:')\r\n            console.log(error);\r\n\r\n        } finally {\r\n            console.log('DELETE EMOTION STATUS: Finished.')\r\n            this.setState({ isLoading: false });\r\n            if (postEmotionResult.ok) {\r\n                await this.props.route.params.syncUserData();\r\n                this.updateUserData();\r\n            }\r\n        }\r\n \r\n    }\r\n\r\n    async fetchWeather() {\r\n\r\n        try {\r\n            if (this.state.userCoordinates) {\r\n\r\n                console.log('FETCH WEATHER STATUS: STARTED...!')\r\n                const coords = this.state.userCoordinates\r\n                const lat = coords.latitude\r\n                const lng = coords.longitude\r\n                \r\n                await fetch(\r\n                    `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lng}&APPID=${OpenWeatherMapAPI.KEY}&units=metric`\r\n                )\r\n                .then(res => {\r\n                    const resStatus = 'Status: ' + res.status + ', Status Text: ' + res.statusText\r\n                    if (!res.ok) \r\n                        throw new Error(resStatus)\r\n                    else {\r\n                        return res.json()\r\n                    }\r\n                })\r\n                .then(weather => {\r\n                    console.log('FETCH WEATHER STATUS: SUCCESSFUL!')\r\n                    // console.log(weather);\r\n\r\n                    const weatherInfo = {\r\n                        coords: weather.coord,\r\n                        name: weather.name,\r\n                        weather: weather.weather[0],\r\n                        main: weather.main,\r\n                        clouds: weather.clouds,\r\n                        wind: weather.wind,\r\n                        visibility: weather.visibility,\r\n                    }\r\n\r\n                    this.setState({weather: weatherInfo})\r\n                });\r\n        \r\n            } else {\r\n                console.log('FETCH WEATHER STATUS: UNABLE TO START! USER POSITION NOT AVAILABLE.')\r\n            }\r\n\r\n        } catch(error) {\r\n            console.log('FETCH WEATHER STATUS: ERROR! LOGGING ERROR...')\r\n            console.log(error)\r\n\r\n        } finally {\r\n            console.log('FETCH WEATHER STATUS: FINISHED!')    \r\n            this.setState({isFetchingLocationOrWeather: false})\r\n        }\r\n    }\r\n\r\n    // Check if device has location services enabled\r\n    async checkIfLocationEnabled () {\r\n\r\n        if ( !this.state.locationServiceEnabled ) {\r\n            try{\r\n                console.log('GEOCODING PROCESS (CHECK): CHECKING IF USER HAS SERVICES ENABLED.' )\r\n                let enabled = await Location.hasServicesEnabledAsync();\r\n            \r\n                if (!enabled) {\r\n                    console.log('GEOCODING PROCESS (CHECK): CHECKED! USER DOES NOT HAVE SERVICES ENABLED.' )\r\n                    alert('Location Service not enabled. Please enable your location services.')\r\n                } else {\r\n                    console.log('GEOCODING PROCESS (CHECK): CHECKED! USER HAS SERVICES ENABLED.')\r\n                    this.setState({LocationServiceEnabled: enabled});\r\n                }\r\n\r\n            } catch(error) {\r\n                console.log(\"GEOCODING PROCESS (CHECK): ERROR IN SERVICES PERMISSION CHECK! COULD'NT CHECK IF USER HAS SERVICES ENABLED.\")\r\n            \r\n            } finally {\r\n                console.log(\"GEOCODING PROCESS (CHECK): FINISHED!\")\r\n            }\r\n        \r\n        } else {\r\n                console.log(\"GEOCODING PROCESS (CHECK): SKIPPING! USER ALREADY HAS SERVICES ENABLED.\")\r\n        } \r\n\r\n    };\r\n\r\n    // Check for permission, get current user position and use reverse geocoding for user coordinates\r\n    async getCurrentLocation() {\r\n\r\n        try {\r\n            console.log('GEOCODING PROCESS (PERMISSION): REQUEST PERMISSION ASYNC...')\r\n            let { status } = await Location.requestForegroundPermissionsAsync()\r\n            // let { status } = await Location.requestBackgroundPermissionsAsync()\r\n        \r\n            if (status !== 'granted') {\r\n                console.log('GEOCODING PROCESS (PERMISSION): PERMISSION NOT GRANTED!')\r\n                alert('Permission not granted. Allow the app to use location service.');\r\n\r\n            } else {\r\n                console.log('GEOCODING PROCESS (PERMISSION): PERMISSION GRANTED!')\r\n            }\r\n        \r\n            console.log('GEOCODING PROCESS (REQUEST): GETTING CURRENT USER POSITION ASYNC...')\r\n            let { coords } = await Location.getCurrentPositionAsync();\r\n            \r\n            if (coords) {   \r\n                const { latitude, longitude } = coords;\r\n                this.setState({userCoordinates: coords})\r\n                console.log(`GEOCODING PROCESS (REQUEST): CURRENT USER POSITION FOUND... Latitude: ${latitude}, Logitude: ${longitude}`)\r\n                console.log('GEOCODING PROCESS (REVERSE GEOCODING): REVERSE GEOCODE ASYNC...')  \r\n                let response = await Location.reverseGeocodeAsync({ latitude, longitude });\r\n        \r\n                if (response) {\r\n                    this.setState({ address: formattedAddress(response[0]), location: { position: coords, address: response[0] } })\r\n                    console.log('GEOCODING PROCESS (REVERSE GEOCODING): REVERSE GEOCODE SUCCESSFUL! UPDATING STATE...')  \r\n\r\n                } else {\r\n                    console.log('GEOCODING PROCESS (REVERSE GEOCODING): REVERSE GEOCODE FAILED! LOGGING RESPONSE...')  \r\n                    console.log(response)\r\n                }\r\n        \r\n            } else {\r\n                console.log(`GEOCODING PROCESS (REVERSE GEOCODING): USER POSITION NOT FOUND! UNABLE TO PROCEED TO REVERSE GEOCODING...`)\r\n            }\r\n\r\n        } catch (error) {\r\n            console.log('GEOCODING PROCESS: ERROR IN USER POSITION REQUEST! LOGGING ERROR...')\r\n            console.log(error)\r\n        \r\n        } finally {\r\n            console.log('GEOCODING PROCESS: USER POSITION REQUEST FINISHED. PROCEEDING TO FETCH WEATHER DATA...')\r\n        }\r\n    };\r\n\r\n    render() {\r\n        // console.log('Rendering \"Post Entry\" screen...')\r\n        return(\r\n            <ImageBackground source={require('../assets/wallpaper.jpg')} style={styles.mainView}>\r\n\r\n                <ScrollView style={styles.scrollView}>\r\n                    <View style={styles.section}>\r\n                            {this.postEntryHeader()}\r\n                            {this.InputCard('Avaliação', 'smiling-face', {justifyContent: 'space-between'}, this.MoodButtons())}\r\n                            {this.InputCard('Emoções', 'checkmark-square-outline', {flexWrap: 'wrap', justifyContent: 'center'}, this.EmotionButtons)}\r\n                            {this.InputCard('Jornal', 'book', {flexDirection: 'column', minHeight: 130}, this.JornalInput())}\r\n                    </View>\r\n                </ScrollView>  \r\n\r\n                <this.saveButton />\r\n\r\n                {this.loginMsg()}\r\n\r\n            </ImageBackground>\r\n        )    \r\n    }\r\n}","var styles = {\r\n    login: {\r\n        mainView: {\r\n            flex: 1,\r\n            justifyContent: 'center',\r\n            alignItems: 'center',\r\n            // paddingHorizontal: Platform.OS != 'web' ? '5%' : '5%',\r\n        },\r\n        titleView: {\r\n            flexDirection: 'row',\r\n            justifyContent: 'center',\r\n            alignItems: 'center',\r\n            minHeight: 60,\r\n        },\r\n        title: {\r\n            fontSize: 30,\r\n            fontWeight: 'bold',\r\n            color: 'white',\r\n            alignSelf: 'center',\r\n        },\r\n        titleIcon: {\r\n            width: 30,\r\n            height: 30,\r\n            marginLeft: 6,\r\n            paddingTop: 3,\r\n        },\r\n        card: {\r\n            height: '55%',\r\n            minHeight: 390,\r\n            width: 350,\r\n            paddingHorizontal: 10,\r\n            paddingVertical: 10,\r\n            borderWidth: 1,\r\n            borderRadius: 10,\r\n            backgroundColor: 'azure',\r\n        },\r\n        cardHeader: {\r\n            height: '25%',\r\n            width: '100%',\r\n        },\r\n        cardTitle: {\r\n            position: 'relative',\r\n            top: '30%',\r\n            left: '5%',\r\n            fontSize: 24,\r\n            fontWeight: 'bold',\r\n            color: 'black',\r\n        },\r\n        cardSection: {\r\n            height: '25%',\r\n            justifyContent: 'space-evenly',\r\n            alignItems: 'center',\r\n        },\r\n        loadingIcon: {\r\n            alignSelf: 'center'\r\n        },\r\n        inputField: {\r\n            minHeight: 40,\r\n            width: '100%',\r\n            paddingLeft: 10,\r\n            fontSize: 14,\r\n            borderWidth: 1,\r\n            borderRadius: 5,\r\n            backgroundColor: 'white'\r\n        },\r\n        button: {\r\n            height: 40,\r\n            width: '100%',\r\n            textAlign: 'center',\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n            borderWidth: 1,\r\n            borderRadius: 5,\r\n            borderColor: 'white',\r\n            backgroundColor: 'lightblue',        \r\n        },\r\n        buttonLabel: {\r\n            fontSize: 15,\r\n            fontWeight: 'bold',\r\n            color: 'black',\r\n        },\r\n        text: {\r\n            fontSize: 15,\r\n            textAlign: 'center',\r\n        },\r\n        msgBox: {\r\n            width: 300,\r\n            height: 36,\r\n            justifyContent: 'center',\r\n            backgroundColor: 'rgb(30,30,30)',\r\n            borderWidth: 1,\r\n            borderColor: 'rgb(40,40,40)',\r\n        },\r\n        msg: {\r\n            textAlign: 'center',\r\n            color: 'white',\r\n            // paddingHorizontal: 20,\r\n        },\r\n    }\r\n};\r\nexport default styles;","// import Icon from 'react-native-vector-icons/FontAwesome';\r\n// import { Ionicons } from '@expo/vector-icons';\r\nimport { Icon } from 'react-native-eva-icons'\r\n// import { WiDaySunny } from \"weather-icons-react\";\r\n\r\nimport React, { Component } from 'react';\r\nimport { View, Text, ImageBackground, TextInput, Pressable, Platform, ActivityIndicator } from 'react-native';\r\nconst defaultEmotions = require('../shared/emotionsConfig')\r\nimport styles from '../styles/loginStyles'\r\n\r\n// App server connection settings\r\nconst corsURI = Platform.OS == 'web' ? 'https://morning-journey-78874.herokuapp.com/' : ''\r\nconst appServerURI = 'https://mood-tracker-server.herokuapp.com/'\r\n\r\n// Email Validation settings\r\n\r\n// const Verifier = require('email-verifier')\r\nconst emailVerification_APIKEY = \"at_TPKXmSQnStekLzTbstLO9GyHvd7or\"\r\n// let verifier = new Verifier(emailVerification_APIKEY);\r\nconst emailVerification_APIURI = (emailAddress) => `https://emailverification.whoisxmlapi.com/api/v2?apiKey=${emailVerification_APIKEY}&emailAddress=${emailAddress}`\r\nconst falseParams = ['validateDNS', 'checkCatchAll', 'checkFree', 'checkDisposable']\r\nfunction appendValueToUri(uri, params, value) {\r\n  for (let param of params) {\r\n    uri += '&' + param + '=' + value\r\n  }\r\n  return uri\r\n}\r\n\r\nasync function validateEmail(email) {\r\n\r\n  console.log('EMAIL VERIFICATION STATUS: Fetching email verification api...')\r\n\r\n  try {\r\n\r\n    var uri = emailVerification_APIURI(email)\r\n    uri = appendValueToUri(uri, falseParams, '0')\r\n    var emailStatus = {ok: false, status: 'Email não verificado.'}\r\n    const apiResp = await fetch( uri , { method: 'GET' } )\r\n  \r\n    if (apiResp.ok) {\r\n  \r\n      console.log('EMAIL VERIFICATION STATUS: Api fetch request successful.')\r\n      const apiRespJson = await apiResp.json()\r\n  \r\n      if ( apiRespJson.formatCheck=='false' ) {\r\n        emailStatus.status = 'Email inválido.'\r\n      } else if ( apiRespJson.smtpCheck=='false' ) {\r\n        emailStatus.status = 'Email não existe.'\r\n      } else {\r\n        emailStatus = {ok: true, status: 'Email válido.'}\r\n      }\r\n      \r\n      return emailStatus\r\n  \r\n    } else {\r\n      console.log('EMAIL VERIFICATION STATUS: Api fetch request failed. Throwing error...')\r\n      throw new Error('Status: ' + apiResp.status + ', Status Text: ' + apiResp.statusText)\r\n    }  \r\n\r\n  } finally {\r\n    console.log('EMAIL VERIFICATION STATUS: Concluído')\r\n\r\n  }\r\n  // Use the email verification api using its module...\r\n  // verifier.verify(email, (err, data) => {\r\n  //   if (err) throw err;\r\n  //   console.log(data);\r\n  // });\r\n}\r\n\r\nfunction validatePassword(password) {\r\n  console.log('VALIDATING PASSWORD FOR SIGNUP...')\r\n\r\n  const hasMinLength = password.length > 6\r\n  var res\r\n  if (!hasMinLength) {\r\n    res = {ok: false, status: 'A senha deve ter no mínimo 6 caractéres.'}\r\n  } else {\r\n    res = {ok: true, status: 'Senha válida.'}\r\n  }\r\n  return res\r\n}\r\n\r\nclass LoginScreen extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      userInfo: {\r\n        password: '',\r\n        email: '',\r\n        username: '',\r\n      },\r\n      loginMsg: '',\r\n      isUserAuth: false,\r\n      isDataLoading: false,\r\n    }\r\n    this.onChangeText = this.onChangeText.bind(this);\r\n    this.submitButton = this.submitButton.bind(this);\r\n    this.loginMsg = this.loginMsg.bind(this);\r\n    this.setLoginMsg = this.setLoginMsg.bind(this);\r\n    this.onSignIn = this.onSignIn.bind(this);\r\n    this.onSignUp = this.onSignUp.bind(this);\r\n  }\r\n\r\n  LoginIcon() {  \r\n    if (this.state.isDataLoading) {\r\n      return <ActivityIndicator color='#000000' />\r\n    } else {\r\n      return <Icon name='log-in-outline' animation='pulse' fill='#000' width={30} height={30} />\r\n    }\r\n  }\r\n\r\n  setLoginMsg(msg) {\r\n    this.setState({loginMsg: msg})\r\n    setTimeout( () => this.setState({loginMsg: ''}) , 1000 * 5 )\r\n  }\r\n\r\n  loginMsg() {\r\n      return(\r\n        <View style={[styles.login.msgBox, this.state.loginMsg ? {} : {backgroundColor: 'transparent', borderColor: 'transparent'} ]}>\r\n          <Text style={styles.login.msg}>{this.state.loginMsg}</Text>\r\n        </View>\r\n      )\r\n  }\r\n\r\n  onChangeText(textField) {\r\n    function setField(text) {\r\n      this.setState( { userInfo: { ...this.state.userInfo, [textField] : text}} )\r\n    }\r\n    setField = setField.bind(this);\r\n    return setField\r\n  }\r\n\r\n  submitButton(sign) {\r\n    const signIn = sign == 'signin'\r\n    return(\r\n      <Pressable disabled={this.state.isDataLoading} onPress={signIn ? this.onSignIn : this.onSignUp} style={[styles.login.button]}>\r\n        <Text style={styles.login.buttonLabel}>{ signIn ? 'Entrar' : 'Cadastrar' }</Text>\r\n      </Pressable>\r\n    )\r\n  }\r\n\r\n  LoginScreen = () => {\r\n    return(\r\n      <ImageBackground source={require('../assets/wallpaper.jpg')} style={[styles.login.mainView ,{justifyContent: 'space-evenly'}]}>\r\n        \r\n        <View style={styles.login.titleView}>\r\n          <Text style={styles.login.title}>Mood Tracker</Text>\r\n        </View>\r\n\r\n        <View style={styles.login.card}>\r\n          <View style={styles.login.cardHeader} >\r\n            <Text style={styles.login.cardTitle}>Entrar</Text>\r\n          </View>\r\n          <View style={styles.login.cardSection}>\r\n            <TextInput\r\n            placeholder='Email'\r\n            textContentType='emailAddress'\r\n            style={styles.login.inputField}\r\n            onChangeText={this.onChangeText('email')}\r\n            autoComplete='email'\r\n            importantForAutofill='yes'\r\n            >\r\n            </TextInput>\r\n            <TextInput\r\n            placeholder='Senha'\r\n            textContentType='password'\r\n            secureTextEntry={true}\r\n            style={styles.login.inputField}\r\n            onChangeText={this.onChangeText('password')}\r\n            autoComplete='password'\r\n            importantForAutofill='yes'\r\n            >\r\n            </TextInput>\r\n          </View>\r\n          <View style={styles.login.cardSection}>\r\n            {this.submitButton('signin')}\r\n            {this.submitButton('signup')}\r\n          </View>\r\n          <View style={[styles.login.cardSection]}>\r\n            {this.LoginIcon()}\r\n          </View>\r\n        </View>\r\n\r\n        {this.loginMsg()}\r\n\r\n      </ImageBackground>\r\n    )\r\n  }\r\n\r\n  isInputEmpty() {\r\n    if (!this.state.userInfo.email) {\r\n      const errMsg = 'Insira um endereço de email.'\r\n      this.setLoginMsg(errMsg)\r\n      console.log('SIGNIN STATUS: ' + errMsg)\r\n      return true\r\n    } else if (!this.state.userInfo.password) {\r\n      const errMsg = 'Insira uma senha.'\r\n      this.setLoginMsg(errMsg)\r\n      console.log('SIGNIN STATUS: ' + errMsg)\r\n      return true\r\n    } else return false\r\n  }\r\n\r\n  async onSignIn() {\r\n\r\n    console.log('SIGNIN STATUS: Started...')\r\n    var info = this.state.userInfo;\r\n    this.setState({ isDataLoading: true });\r\n\r\n    try {\r\n\r\n      if (this.isInputEmpty()) return\r\n\r\n      var UsersResult = await fetch( corsURI + appServerURI + 'Users', { method: 'GET' });\r\n      const UsersStatus = 'Status: ' + UsersResult.status + ', ' + 'Status Text: ' + UsersResult.statusText\r\n      if (UsersResult.ok) {\r\n        console.log('fetch GET request for users data at signin successful.');\r\n        console.log(UsersStatus)\r\n      } else {\r\n        console.log('fetch GET request for users data at signin failed. Printing fetch response...')\r\n        console.log(JSON.stringify(UsersResult))\r\n        console.log('Throwing error...')\r\n        throw new Error(UsersStatus)\r\n      }\r\n\r\n      const Users = await UsersResult.json();\r\n      const user = Users.filter((user) => user.email === info.email)[0]\r\n      \r\n      if ( user ) {          \r\n        \r\n        if (user.password === info.password) {\r\n          this.setState( {isUserAuth: true, userInfo: user} )\r\n          const successMsg = 'Login realizado com sucesso!'\r\n          this.setLoginMsg(successMsg)\r\n          console.log('SIGNIN STATUS: Sucesso.')\r\n\r\n        } else {\r\n          const errMsg = 'Senha incorreta.'\r\n          this.setLoginMsg(errMsg)\r\n          console.log('SIGNIN STATUS: ' + errMsg);\r\n        }\r\n\r\n      } else {\r\n        const errMsg = 'Email não cadastrado!'\r\n        this.setLoginMsg(errMsg)\r\n        console.log('SIGNIN STATUS: ' + errMsg)\r\n      }\r\n\r\n    } catch (error) {\r\n      const errMsg = 'Erro no servidor! Tente novamente...'\r\n      this.setLoginMsg(errMsg)\r\n      console.log('Error catched in fetch GET request for users data at signin. Printing Error...')\r\n      console.log('SIGNIN STATUS:' + 'Erro capturado. Imprimindo erro...')\r\n      console.log(error);\r\n\r\n    } finally {\r\n      this.setState({ isDataLoading: false });\r\n      console.log('SIGNIN STATUS: Concluido.')\r\n      if (this.state.isUserAuth) this.props.authUser(this.state.userInfo)        // Father class component method that authenticates the user and redirects to entrances screen.\r\n    }\r\n  }\r\n\r\n  async onSignUp() {\r\n\r\n    console.log('SIGNUP STATUS: started...')\r\n    var info = this.state.userInfo;\r\n    this.setState({ isDataLoading: true });\r\n    \r\n    try {\r\n\r\n      var postUserResult = {ok: false}\r\n      if (this.isInputEmpty()) return\r\n\r\n      // Validating email and password\r\n      const emailValidation = await validateEmail(info.email)\r\n      console.log('SING UP STATUS: ' + emailValidation.status)\r\n      if (!emailValidation.ok) {\r\n          this.setLoginMsg(emailValidation.status)\r\n          return\r\n      }\r\n\r\n      // Checking if email is already registerd\r\n      var UsersResult = await fetch( corsURI + appServerURI + 'Users', { method: 'GET' } );  \r\n      const reqStatus = 'Status: ' + UsersResult.status + ', ' + UsersResult.statusText\r\n      if (UsersResult.ok) {\r\n        console.log('fetch GET request for users data at signup successful.')\r\n        console.log(reqStatus)\r\n      } else {\r\n        console.log('fetch GET request for users data at signup failed. Throwing error...')\r\n        throw new Error(reqStatus)\r\n      }\r\n\r\n      const Users = await UsersResult.json();\r\n      const User = Users.filter((user) => user.email === info.email)[0]\r\n      if ( !User ) {\r\n\r\n        // Validating Password\r\n        const passwordCheck = validatePassword(info.password)\r\n        if (!passwordCheck.ok) {\r\n          console.log('SING UP STATUS: ' + passwordCheck.status)\r\n          this.setLoginMsg(passwordCheck.status)\r\n          return\r\n      }\r\n\r\n        // Registering new user by posting user identification to database\r\n        info.username = info.email.split('@')[0]\r\n        const postUserOpts = {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify( { ...info, emotions: defaultEmotions, entries: [] } )\r\n        }\r\n\r\n        postUserResult = await fetch( corsURI + appServerURI +  'Users/' + info.username, postUserOpts );\r\n        const postUserStatus = 'Status: ' + postUserResult.status + ', ' + postUserResult.statusText\r\n\r\n        if (postUserResult.ok) {\r\n          const successMsg = 'Cadastro realizado com sucesso!'\r\n          this.setLoginMsg(successMsg)\r\n          console.log('fetch POST request for user data at signup successful.')\r\n          console.log(postUserStatus)\r\n          console.log('SING UP STATUS: ' + successMsg)\r\n\r\n        } else {\r\n          console.log('fetch POST request for user data at signup failed. Throwing error...')\r\n          throw new Error(postUserStatus)\r\n        }\r\n\r\n      } else {\r\n        const errMsg = 'Email já cadastrado.'\r\n        this.setLoginMsg(errMsg)\r\n        console.log('SING UP STATUS: ' + errMsg)\r\n      }\r\n\r\n    } catch (error) {\r\n      const errMsg = 'Erro no servidor, tente novamente...'\r\n      this.setLoginMsg(errMsg)\r\n      console.log('SING UP STATUS: Erro capturado. Imprimindo erro...')\r\n      console.log(error);\r\n\r\n    } finally {\r\n      this.setState({ isDataLoading: false })\r\n      console.log('SING UP STATUS: Concluido.')\r\n      if (postUserResult.ok)  this.onSignIn()\r\n    }\r\n  }\r\n\r\n  render() {\r\n\r\n    // console.log('Rendering \"LoginComponent\" screen...')\r\n    return this.LoginScreen()\r\n  \r\n  }\r\n}\r\n\r\nexport default LoginScreen;","import React, { Component } from 'react';\nimport { Text, ImageBackground} from 'react-native';\n\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\n// import { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\n//import { createDrawerNavigator } from '@react-navigation/drawer';\n\nimport EntrancesScreen from './components/EntrancesComponent';\nimport PostEntranceScreen from './components/PostEntryComponent';\nimport LoginScreen from './components/LoginComponent'\n\nconst Stack = createNativeStackNavigator();\n// const Tab = createBottomTabNavigator();\n\nconst HomeScreen = (props) => {\n\n  // console.log('Returning \"HomeScreen\" Component...')\n  return(\n    <Stack.Navigator \n    initialRouteName='Entrances'\n    screenOptions={{\n      headerShown: false,\n    }}\n    >\n      <Stack.Screen\n      name=\"Entrances\"\n      component={EntrancesScreen}\n      options={{title: 'Suas entradas'}}\n      initialParams={{user: props.user}}\n      // initialParams={{userInfo: props.route.params.userInfo}}\n      />\n      <Stack.Screen\n      name=\"PostEntrance\"\n      component={PostEntranceScreen}\n      options={{title: 'Adicione uma  entrada'}}\n      initialParams={{user: props.user}}\n      // initialParams={{userInfo: props.route.params.userInfo}}\n      />\n    </Stack.Navigator>\n  )  \n}\n\n// function SettingsScreen() {\n//   return(\n//     <ImageBackground source={require('./assets/wallpaper.jpg')} style={{width: '100%', height: '100%'}}>\n//       <Text>Settings</Text>\n//     </ImageBackground>\n//   )\n// }\n\n// const mainScreenOptions = ({ route }) => ({\n//   headerShown: false,\n//   tabBarActiveTintColor: 'tomato',\n//   tabBarInactiveTintColor: 'gray',\n//   tabBarHideOnKeyboard: true,\n//   tabBarIcon: ({ focused, color, size }) => {\n//     let iconName;\n//     if (route.name === 'Home') {\n//       iconName = focused\n//         ? 'home'\n//         : 'home-outline';\n//     } else if (route.name === 'Settings') {\n//       iconName = focused ? 'settings' : 'settings-outline';\n//     }\n//     // You can return any component that you like here!\n//     return <Icon name={iconName} width={size} height={size} fill='rgb(35,35,35)'></Icon>\n//   },\n// })\n\nexport default class App extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isUserAuth: false,\n      user: null,\n    };\n    this.authUser = this.authUser.bind(this);\n  }\n\n  authUser(user) {\n    console.log('User authenticated. Navigating to \"HomeScreen\"...')\n    this.setState( {isUserAuth: true, user} )\n  }\n\n  render() {\n\n    if (!this.state.isUserAuth) {\n      return <LoginScreen authUser={this.authUser} />\n\n    } else {\n      return (\n\n        <NavigationContainer>\n          <HomeScreen user={this.state.user} />\n        </NavigationContainer>\n\n        // <NavigationContainer>\n        //   <Tab.Navigator\n        //     screenOptions={mainScreenOptions}\n        //   >\n        //     <Tab.Screen name=\"Home\" component={HomeScreen} initialParams={{userInfo: this.state.userInfo}}/>\n        //     <Tab.Screen name=\"Settings\" component={SettingsScreen} initialParams={{userInfo: this.state.userInfo}} />\n        //   </Tab.Navigator>    \n        // </NavigationContainer>\n\n      );  \n    }\n  }\n}","// Emotion configs\r\nconst emotionGroupsNames = [ 'Bem & Calmo', 'Bem & Energizado', 'Mal & Calmo', 'Mal & Energizado' ]\r\nconst goodEnergizedEmotions = ['Animação', 'Concentração', 'Desinibição', 'Motivação', 'Euforia']\r\nconst goodCalmEmotions = ['Alívio', 'Calma', 'Conforto', 'Despreocupação', 'Inspiração', 'Orgulho', 'Paz', 'Relaxamento', 'Satisfação', 'Segurança', 'Criatividade']\r\nconst badEnergizedEmotions = ['Inquietação', 'Ansiedade', 'Desespero', 'Frustração', 'Insatisfação', 'Irritação', 'Medo', 'Vergonha', 'Preocupação', 'Impaciência', 'Sobrecarregado(a)', 'Tensão']\r\nconst badCalmEmotions = ['Depressão', 'Timidez', 'Cansaço', 'Tristeza','Confusão', 'Desanimo', 'Insegurança', 'Solidão', 'Tédio']\r\n// const badEnergizedEmotions = ['Agitação', 'Ansiedade', 'Tristeza', 'Decepção', 'Depressão', 'Desespero', 'Frustração', 'Insatisfação', 'Irritação', 'Medo', 'Paranoia', 'Preocupação', 'Impaciencia', 'Raiva', 'Revolta', 'Sobrecarregado(a)', 'Tensão', 'Nojo']\r\n\r\nconst emotionGroups = [ goodCalmEmotions.sort(), goodEnergizedEmotions.sort(), badCalmEmotions.sort(), badEnergizedEmotions.sort() ]\r\nconst basicEmotions = [ ...emotionGroups[0], ...emotionGroups[1], ...emotionGroups[2], ...emotionGroups[3] ]\r\n\r\nconst emotionTypes = ['Positiva', 'Negativa']\r\nconst emotionEnergy = ['Calmo(a)', 'Energizado(a)']\r\n\r\nvar defaultEmotions = []\r\nvar type, energy\r\n\r\nfor (let emotion of basicEmotions) {\r\n    type = emotionGroups[0].includes(emotion) || emotionGroups[1].includes(emotion) ? emotionTypes[0] : emotionTypes[1]\r\n    energy = emotionGroups[0].includes(emotion) || emotionGroups[2].includes(emotion) ? emotionEnergy[0] : emotionEnergy[1]\r\n    defaultEmotions.push({name: emotion, type: type, energy: energy})\r\n}\r\n\r\n// console.log(defaultEmotions);\r\n\r\nmodule.exports = defaultEmotions;"],"sourceRoot":""}