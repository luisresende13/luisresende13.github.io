{"version":3,"sources":["styles/entrancesStyles.js","components/subcomponents/UserEntryCards.js","shared/dateRange.js","components/EntrancesComponent.js","styles/postEntryStyles.js","components/subcomponents/GoogleMapsAPI.js","components/subcomponents/OpenWeatherMapAPI.js","components/PostEntryComponent.js","styles/loginStyles.js","components/LoginComponent.js","App.js","assets/wallpaper.jpg"],"names":["styles","mainView","flex","postButton","position","height","width","borderRadius","bottom","alignSelf","backgroundColor","justifyContent","postButtonLabel","scrollView","section","paddingVertical","borderBottomWidth","borderColor","sectionTitle","fontSize","color","fontWeight","card","marginTop","paddingHorizontal","cardRow","flexDirection","alignItems","moodBadge","fontFamily","textAlign","emotionBadge","marginRight","textBadge","paddingTop","paddingBottom","lineHeight","textAlignVertical","text","spaceBetween","icon","entryIcon","paddingRight","borderWidth","corsURI","Platform","OS","moodColors","MoodHeader","entry","View","style","Text","mood","star","name","fill","marginLeft","startTime","slice","Address","useState","isCollapsed","setIsCollapsed","address","numberOfLines","onPress","top","Emotions","emotions","length","flexWrap","PaddingBottom","map","emotion","index","Pressable","Jornal","jornal","left","EntryCard","EmptyCard","props","textStyle","navigation","navigate","CardsLoadingMessage","UserEntryCards","state","date","userEntries","isEntriesSyncing","newPost","syncUserEntries","bind","console","log","this","setInterval","updateIfNewPost","forgetNewPost","selDateEntries","filter","a","async","setState","fetch","method","UsersResult","usersStatus","status","statusText","ok","json","users","user","email","userInfo","reverse","entriesSynced","Error","UserEntryCardsList","Component","dateRange","monthDict","englishMonthSigs","portugueseMonthSigs","englishWeekDayMap","Today","now","Date","toString","split","join","getNextDate","next","nextDate","indexOf","formatDate","selDate","ymd","yesterday","englishWeekDay","weekDay","prefix","i","oneDigit","stringNumber","EntrancesScreen","time","selectedDate","entriesLoading","onNextButtonPress","setSelectedDate","setParams","isToday","ImageBackground","source","require","ScrollView","route","params","StatusBar","currentHeight","entrances","content","flexGrow","contentRow","padding","entryTitle","paddingLeft","postButtonView","moodButtonView","moodButton","marginColor","marginWidth","jornalText","saveButton","borderTopLeftRadius","borderTopRightRadius","saveButtonLabel","marginVertical","marginHorizontal","entryCardEmotionBadge","datetimeTitle","GoogleMapsAPI","GoogleMapsJavascriptAPIkey","GoogleMapsGeocodingAPIKey","OpenWeatherMapAPI","KEY","Location","moods","emotionGroupsNames","goodEnergizedEmotions","goodCalmEmotions","badEnergizedEmotions","badCalmEmotions","basicEmotions","emotionGroups","isSelectedEmotions","monthSigs","months","monthNameMap","monthSig","getTime","formatPostEntryDatetimeTitle","m","PostEntranceScreen","selectedMood","jornalEntry","weather","selectedEntry","isLoading","isFetchingLocationOrWeather","locationServiceEnabled","userCoordinates","userAddressList","onSaveButtonPress","EmotionButtons","MoodButtons","postEntryHeader","onEmotionButtonPress","onMoodButtonPress","inputSection","setSelectedEntry","InputCard","JornalInput","postNewEntryAsync","checkIfLocationEnabled","getCurrentLocation","coords","lat","latitude","lng","longitude","then","res","resStatus","LocationServiceEnabled","enabled","Alert","alert","cancelable","response","fetchWeather","goBack","item","selectMood","selColor","moodButtonViewStyle","title","selectEmotion","TextInput","multiline","scrollEnabled","placeholder","onChangeText","value","setSelected","sectionName","cardBodyStyle","inputs","addressObj","newEntry","street","streetNumber","district","subregion","region","isoCountryCode","endTime","error","info","postUserEntryOpts","headers","body","JSON","stringify","username","postUserEntryResult","isDataLoading","minHeight","disabled","login","titleView","titleIcon","cardHeader","cardTitle","cardSection","loadingIcon","inputField","button","buttonLabel","msgBox","msg","falseParams","appendValueToUri","uri","validateEmail","emailStatus","apiResp","apiRespJson","formatCheck","smtpCheck","LoginScreen","textContentType","autoComplete","importantForAutofill","secureTextEntry","submitButton","LoginIcon","loginMsg","password","isUserAuth","setLoginMsg","onSignIn","onSignUp","animation","setTimeout","textField","setField","sign","signIn","encPass","UsersStatus","Users","authUser","postUserResult","emailValidation","reqStatus","passwordCheck","postUserOpts","entries","postUserStatus","successMsg","errMsg","Stack","createNativeStackNavigator","HomeScreen","Navigator","initialRouteName","screenOptions","headerShown","Screen","component","options","initialParams","App","NavigationContainer","module","exports"],"mappings":"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ACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,a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","file":"static/js/app.d21fb9ae.chunk.js","sourcesContent":["import { StatusBar } from 'expo-status-bar';\r\n\r\n//import StatusBar from 'react-native'\r\n// import { Platform } from 'react-native';\r\n\r\n// import { Dimensions } from 'react-native';\r\n// var windowWidth = Dimensions.get('window').width;\r\n// var windowHeight = Dimensions.get('window').height;\r\n\r\n// import DeviceInfo from 'react-native-device-info';\r\n// import AsyncStorage from '@react-native-community/async-storage';\r\n\r\n// // how can i do some code that will gives me if its \"Handset\"=> Smartphone , \r\n// //if its \"unknown\"=> Laptop/Computer \r\n// //and it will be saved as well in my async-storage.\r\n\r\n// //this some example that i wanna get it works well coz now its not work good\r\n\r\n// const funct1=  (type) => {\r\n// let type = DeviceInfo.getDeviceType();\r\n\r\n// if type==='Handset'{\r\n//   AsyncStorage.setItem('PLATFORM-TYPE', 'Smartphone');\r\n// }\r\n// if type==='unknown'{\r\n//   AsyncStorage.setItem('PLATFORM-TYPE', 'Laptop/Computer');\r\n// }\r\n// };\r\n\r\nconst styles = {\r\n    mainView: {\r\n        flex: 1,                 \r\n        // marginTop: StatusBar.currentHeight,\r\n    },\r\n    postButton: {\r\n        position: 'absolute',\r\n        height: 60,\r\n        width: 60,\r\n        borderRadius: 30,\r\n        bottom: '2%',\r\n        alignSelf: 'center',\r\n        backgroundColor: 'rgba(0,0,0,1)',\r\n        justifyContent: 'center',  \r\n    },\r\n    postButtonLabel: {\r\n        alignSelf: 'center',\r\n    },\r\n    scrollView: {\r\n        // paddingHorizontal: Platform.OS != 'web' ? '5%' : '5%',\r\n        height: '100%',\r\n        width: '100%',\r\n        // alignSelf: 'center',\r\n    },\r\n    section: {\r\n        width: 350,\r\n        paddingVertical: '16%',\r\n        borderBottomWidth: 1,\r\n        borderColor: 'rgba(155,155,155,0.3)',\r\n        alignSelf: 'center',\r\n    },\r\n    sectionTitle: {\r\n        paddingVertical: 7.5,\r\n        fontSize: 18,\r\n        color: 'white',\r\n        fontWeight: '400',\r\n    },\r\n    card: {\r\n        marginTop: '5%',\r\n        paddingVertical: 5,\r\n        paddingHorizontal: 10,\r\n        borderRadius: 20,\r\n        backgroundColor: 'rgba(0,0,0,0.2)',\r\n    },\r\n    cardRow: {\r\n        flexDirection: 'row',\r\n        paddingVertical: 5,\r\n        alignItems: 'center',\r\n    },\r\n    moodBadge: {\r\n        fontFamily: 'sans-serif',\r\n        backgroundColor: 'green',\r\n        borderRadius: 30,\r\n        paddingVertical: 6,\r\n        width: 130,\r\n        fontSize: 16,\r\n        textAlign: 'center',\r\n    },\r\n    emotionBadge: {\r\n        // fontFamily: 'sans-serif',\r\n        backgroundColor: 'ghostwhite',\r\n        borderRadius: 18,\r\n        paddingVertical: 6,\r\n        paddingHorizontal: 12.5,\r\n        marginRight: 6,\r\n        fontSize: 15,\r\n        textAlign: 'center',\r\n    },\r\n    textBadge: {\r\n        backgroundColor: 'ghostwhite',\r\n        borderRadius: 17,\r\n        paddingTop: 5,\r\n        paddingBottom: 8,\r\n        paddingHorizontal: 11,\r\n        width: '100%',\r\n        fontSize: 15,\r\n        lineHeight: 22,\r\n        textAlign: 'left',\r\n        textAlignVertical: 'top',\r\n},\r\n    text: {\r\n        // fontFamily: 'sans-serif',\r\n        fontSize: 14,\r\n        color: 'white'\r\n    },\r\n    spaceBetween: {\r\n        justifyContent: 'space-between',\r\n    },\r\n    icon: {\r\n        paddingHorizontal: 12,\r\n    },\r\n    entryIcon: {\r\n        paddingRight: 0,\r\n        borderWidth: 1,\r\n    }    \r\n};\r\n\r\nexport default styles;","// Module import\r\nimport React, { Component, useState } from 'react';\r\nimport { View, Text, Pressable, Platform } from 'react-native';\r\nimport { Icon } from 'react-native-eva-icons'\r\n\r\n// Local import\r\nimport styles from '../../styles/entrancesStyles'\r\n\r\n// cors-midpoint uri (needed to avoid cors' allow-cross-origin error when fetching in web platforms)\r\nconst corsURI = Platform.OS == 'web' ? 'https://morning-journey-78874.herokuapp.com/' : ''\r\n// App server connection uri\r\nconst appServerURI = 'https://mood-tracker-server.herokuapp.com/'\r\n\r\n// Defining mood colors schema\r\nconst moodColors = {'Horrível': '#ff3333', 'Mal': '#0099cc', 'Regular': '#ffffff', 'Bem': '#ffff33', 'Ótimo': '#00b300'};\r\n\r\nfunction MoodHeader({entry}) {\r\n    return(\r\n        <View style={[styles.cardRow, styles.spaceBetween]}>\r\n            <View style={{flexDirection: 'row', alignItems: 'center'}}>\r\n                <Text style={[styles.moodBadge, {backgroundColor: moodColors[entry.mood]}]}>{entry.mood}</Text>\r\n                { entry.star ? <Icon name='star' fill='gold' width={27} height={27} style={{marginLeft: 12}} /> : <></> }\r\n            </View>\r\n            <View style={[styles.cardRow]}>\r\n                <Icon name='edit' height={18} width={18} fill='rgba(255,255,255,0.75)' style={{marginRight: 6}} />\r\n                <Text style={styles.text}>{entry.startTime.slice(0,5)}</Text>\r\n            </View>\r\n        </View>\r\n\r\n    )\r\n}\r\n\r\nfunction Address ({entry}) {\r\n\r\n    const [isCollapsed, setIsCollapsed] = useState( 1 );\r\n    if (entry.address) {\r\n        return(\r\n            <View style={styles.cardRow}>\r\n                <Text numberOfLines={ isCollapsed } onPress={ () => { setIsCollapsed( isCollapsed ? 0 : 1 ) }} style={styles.text}>\r\n                    <Icon name='pin' height={17} width={17} fill='rgba(255,255,255,0.75)' style={{marginRight: 5, top: 2}} />\r\n                    {entry.address}\r\n                </Text>\r\n            </View>        \r\n        )\r\n    } else {\r\n        return <></>\r\n    }\r\n}\r\n\r\nfunction Emotions ({entry}) {\r\n    if (entry.emotions.length>0) {\r\n        return (\r\n            <View style={[styles.cardRow, {flexWrap: 'wrap', justifyContent: 'flex-start', paddingTop: 2, PaddingBottom: 0}]}>\r\n                { entry.emotions.map((emotion, index) => {\r\n                    return(\r\n                        <Pressable key={'emotion-' + emotion} style={{paddingVertical: 5, paddingHorizontal: 2}}>\r\n                            <Text style={[styles.emotionBadge]}>{emotion}</Text>\r\n                        </Pressable>\r\n                    )\r\n                })}\r\n            </View>\r\n        )\r\n    } else {\r\n        return (\r\n            <></>\r\n        )\r\n    }\r\n}\r\n\r\nfunction Jornal({ entry }) {\r\n    if (entry.jornal) {\r\n        return(\r\n            <View style={styles.cardRow}>\r\n                \r\n                <Text style={styles.textBadge}>\r\n                    <Icon name='book-open' height={20} width={20} fill='rgba(0,0,0,0.25)' style={{top: 4, left: 1, marginRight: 6}} />\r\n                    {entry.jornal}\r\n                </Text>\r\n            </View>\r\n        )\r\n    } else {\r\n        return <></>\r\n    }\r\n}\r\n\r\nfunction EntryCard({ entry }) {\r\n    return (\r\n        <View style={styles.card}>\r\n            <MoodHeader entry={entry} />\r\n            <Emotions entry={entry} />\r\n            <Address entry={entry} />\r\n            <Jornal entry={entry} />\r\n        </View>\r\n    );\r\n}\r\n\r\nfunction EmptyCard(props) {\r\n    const textStyle = {fontSize: 16, color: 'white', marginTop: 7}\r\n    return (\r\n        <Pressable onPress={ () => props.navigation.navigate( 'PostEntrance', {} ) } style={[styles.card, {alignItems: 'center', justifyContent: 'center', fontSize: 16, height: 145}]}>\r\n            <Icon name='inbox' fill='rgba(255,255,255,0.3)' width={25} height={25} />\r\n            <Text style={textStyle}> Nenhuma entrada encontrada. </Text>\r\n            <Text style={textStyle}> Pressione aqui para adicionar uma a este dia! </Text>\r\n        </Pressable>\r\n    );\r\n}\r\n\r\nfunction CardsLoadingMessage() {\r\n    return(\r\n        <View style={[styles.card, {alignItems: 'center', justifyContent: 'center', height: 145}]}>\r\n            <Icon name='sync-outline' fill='rgba(0,0,0,0.3)' width={25} height={25} />\r\n        </View>\r\n    )\r\n}\r\n\r\nexport default class UserEntryCards extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            date: this.props.date,\r\n            userEntries: [],\r\n            isEntriesSyncing: false,\r\n            newPost: this.props.newPost,\r\n        };\r\n        this.syncUserEntries = this.syncUserEntries.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log('\"Subcomponent UserEntryCards did mount...\"')\r\n        this.syncUserEntries()\r\n        setInterval( () => { this.updateIfNewPost() }, 1000 * 5 )\r\n        // setInterval( () => { console.log('Default auto syncing started...'); this.syncUserEntries() }, 1000 * 10 )\r\n        \r\n    }\r\n\r\n    updateIfNewPost () {\r\n        if (this.props.newPost) {\r\n            console.log('JUST POSTED WARNING: POSTED. Selecting current date ...');\r\n            this.props.forgetNewPost();\r\n            this.syncUserEntries();\r\n        }\r\n    }\r\n\r\n    UserEntryCardsList() {\r\n        const selDateEntries = this.state.userEntries.filter( (entry) => entry.date === this.props.date )\r\n\r\n        if (selDateEntries.length) {\r\n            return selDateEntries.map( entry => <EntryCard key={'entry-card-'+entry.startTime} entry={entry} />)\r\n        \r\n        } else if (this.state.isEntriesSyncing) {    \r\n            return <CardsLoadingMessage />\r\n\r\n        } else {\r\n            return <EmptyCard navigation={this.props.navigation} />\r\n        }\r\n    }\r\n    \r\n    async syncUserEntries() {\r\n\r\n        console.log('SYNC ENTRIES STATUS: Started...')\r\n        this.setState({ isEntriesSyncing: true });\r\n    \r\n        try {\r\n\r\n            var UsersResult = await fetch( corsURI + appServerURI + 'Users', { method: 'GET' });\r\n            const usersStatus =  'Status: ' + UsersResult.status + ', ' + UsersResult.statusText\r\n\r\n            if (UsersResult.ok) {\r\n                const users = await UsersResult.json();\r\n                const user = users.filter((user) => user.email === this.props.userInfo.email)[0]\r\n                console.log('fetch GET request for user entries successful.')\r\n                console.log(usersStatus)\r\n\r\n                this.setState({userEntries: user['entries'].reverse(), entriesSynced: true})  \r\n                console.log('SYNC ENTRIES STATUS: Successful.')\r\n\r\n            } else {\r\n                console.log( new Error('\"fetch\" GET request for user entries failed. Throwing error...') )\r\n                throw new Error(usersStatus)\r\n            }\r\n    \r\n        } catch (error) {\r\n                console.log('SYNC ENTRIES STATUS: Error captured. Printing error...')\r\n                console.log(error);\r\n\r\n        } finally {\r\n            this.setState({ isEntriesSyncing: false });\r\n            console.log('SYNC ENTRIES STATUS: Finished.')\r\n        }    \r\n    }\r\n\r\n    render() {\r\n        console.log('\"Rendering \"UserEntryCards\" subcomponent...\"')\r\n        return this.UserEntryCardsList()\r\n    }\r\n}","const dateRange = [\r\n    \"2021-01-01\",\r\n    \"2021-01-02\",\r\n    \"2021-01-03\",\r\n    \"2021-01-04\",\r\n    \"2021-01-05\",\r\n    \"2021-01-06\",\r\n    \"2021-01-07\",\r\n    \"2021-01-08\",\r\n    \"2021-01-09\",\r\n    \"2021-01-10\",\r\n    \"2021-01-11\",\r\n    \"2021-01-12\",\r\n    \"2021-01-13\",\r\n    \"2021-01-14\",\r\n    \"2021-01-15\",\r\n    \"2021-01-16\",\r\n    \"2021-01-17\",\r\n    \"2021-01-18\",\r\n    \"2021-01-19\",\r\n    \"2021-01-20\",\r\n    \"2021-01-21\",\r\n    \"2021-01-22\",\r\n    \"2021-01-23\",\r\n    \"2021-01-24\",\r\n    \"2021-01-25\",\r\n    \"2021-01-26\",\r\n    \"2021-01-27\",\r\n    \"2021-01-28\",\r\n    \"2021-01-29\",\r\n    \"2021-01-30\",\r\n    \"2021-01-31\",\r\n    \"2021-02-01\",\r\n    \"2021-02-02\",\r\n    \"2021-02-03\",\r\n    \"2021-02-04\",\r\n    \"2021-02-05\",\r\n    \"2021-02-06\",\r\n    \"2021-02-07\",\r\n    \"2021-02-08\",\r\n    \"2021-02-09\",\r\n    \"2021-02-10\",\r\n    \"2021-02-11\",\r\n    \"2021-02-12\",\r\n    \"2021-02-13\",\r\n    \"2021-02-14\",\r\n    \"2021-02-15\",\r\n    \"2021-02-16\",\r\n    \"2021-02-17\",\r\n    \"2021-02-18\",\r\n    \"2021-02-19\",\r\n    \"2021-02-20\",\r\n    \"2021-02-21\",\r\n    \"2021-02-22\",\r\n    \"2021-02-23\",\r\n    \"2021-02-24\",\r\n    \"2021-02-25\",\r\n    \"2021-02-26\",\r\n    \"2021-02-27\",\r\n    \"2021-02-28\",\r\n    \"2021-03-01\",\r\n    \"2021-03-02\",\r\n    \"2021-03-03\",\r\n    \"2021-03-04\",\r\n    \"2021-03-05\",\r\n    \"2021-03-06\",\r\n    \"2021-03-07\",\r\n    \"2021-03-08\",\r\n    \"2021-03-09\",\r\n    \"2021-03-10\",\r\n    \"2021-03-11\",\r\n    \"2021-03-12\",\r\n    \"2021-03-13\",\r\n    \"2021-03-14\",\r\n    \"2021-03-15\",\r\n    \"2021-03-16\",\r\n    \"2021-03-17\",\r\n    \"2021-03-18\",\r\n    \"2021-03-19\",\r\n    \"2021-03-20\",\r\n    \"2021-03-21\",\r\n    \"2021-03-22\",\r\n    \"2021-03-23\",\r\n    \"2021-03-24\",\r\n    \"2021-03-25\",\r\n    \"2021-03-26\",\r\n    \"2021-03-27\",\r\n    \"2021-03-28\",\r\n    \"2021-03-29\",\r\n    \"2021-03-30\",\r\n    \"2021-03-31\",\r\n    \"2021-04-01\",\r\n    \"2021-04-02\",\r\n    \"2021-04-03\",\r\n    \"2021-04-04\",\r\n    \"2021-04-05\",\r\n    \"2021-04-06\",\r\n    \"2021-04-07\",\r\n    \"2021-04-08\",\r\n    \"2021-04-09\",\r\n    \"2021-04-10\",\r\n    \"2021-04-11\",\r\n    \"2021-04-12\",\r\n    \"2021-04-13\",\r\n    \"2021-04-14\",\r\n    \"2021-04-15\",\r\n    \"2021-04-16\",\r\n    \"2021-04-17\",\r\n    \"2021-04-18\",\r\n    \"2021-04-19\",\r\n    \"2021-04-20\",\r\n    \"2021-04-21\",\r\n    \"2021-04-22\",\r\n    \"2021-04-23\",\r\n    \"2021-04-24\",\r\n    \"2021-04-25\",\r\n    \"2021-04-26\",\r\n    \"2021-04-27\",\r\n    \"2021-04-28\",\r\n    \"2021-04-29\",\r\n    \"2021-04-30\",\r\n    \"2021-05-01\",\r\n    \"2021-05-02\",\r\n    \"2021-05-03\",\r\n    \"2021-05-04\",\r\n    \"2021-05-05\",\r\n    \"2021-05-06\",\r\n    \"2021-05-07\",\r\n    \"2021-05-08\",\r\n    \"2021-05-09\",\r\n    \"2021-05-10\",\r\n    \"2021-05-11\",\r\n    \"2021-05-12\",\r\n    \"2021-05-13\",\r\n    \"2021-05-14\",\r\n    \"2021-05-15\",\r\n    \"2021-05-16\",\r\n    \"2021-05-17\",\r\n    \"2021-05-18\",\r\n    \"2021-05-19\",\r\n    \"2021-05-20\",\r\n    \"2021-05-21\",\r\n    \"2021-05-22\",\r\n    \"2021-05-23\",\r\n    \"2021-05-24\",\r\n    \"2021-05-25\",\r\n    \"2021-05-26\",\r\n    \"2021-05-27\",\r\n    \"2021-05-28\",\r\n    \"2021-05-29\",\r\n    \"2021-05-30\",\r\n    \"2021-05-31\",\r\n    \"2021-06-01\",\r\n    \"2021-06-02\",\r\n    \"2021-06-03\",\r\n    \"2021-06-04\",\r\n    \"2021-06-05\",\r\n    \"2021-06-06\",\r\n    \"2021-06-07\",\r\n    \"2021-06-08\",\r\n    \"2021-06-09\",\r\n    \"2021-06-10\",\r\n    \"2021-06-11\",\r\n    \"2021-06-12\",\r\n    \"2021-06-13\",\r\n    \"2021-06-14\",\r\n    \"2021-06-15\",\r\n    \"2021-06-16\",\r\n    \"2021-06-17\",\r\n    \"2021-06-18\",\r\n    \"2021-06-19\",\r\n    \"2021-06-20\",\r\n    \"2021-06-21\",\r\n    \"2021-06-22\",\r\n    \"2021-06-23\",\r\n    \"2021-06-24\",\r\n    \"2021-06-25\",\r\n    \"2021-06-26\",\r\n    \"2021-06-27\",\r\n    \"2021-06-28\",\r\n    \"2021-06-29\",\r\n    \"2021-06-30\",\r\n    \"2021-07-01\",\r\n    \"2021-07-02\",\r\n    \"2021-07-03\",\r\n    \"2021-07-04\",\r\n    \"2021-07-05\",\r\n    \"2021-07-06\",\r\n    \"2021-07-07\",\r\n    \"2021-07-08\",\r\n    \"2021-07-09\",\r\n    \"2021-07-10\",\r\n    \"2021-07-11\",\r\n    \"2021-07-12\",\r\n    \"2021-07-13\",\r\n    \"2021-07-14\",\r\n    \"2021-07-15\",\r\n    \"2021-07-16\",\r\n    \"2021-07-17\",\r\n    \"2021-07-18\",\r\n    \"2021-07-19\",\r\n    \"2021-07-20\",\r\n    \"2021-07-21\",\r\n    \"2021-07-22\",\r\n    \"2021-07-23\",\r\n    \"2021-07-24\",\r\n    \"2021-07-25\",\r\n    \"2021-07-26\",\r\n    \"2021-07-27\",\r\n    \"2021-07-28\",\r\n    \"2021-07-29\",\r\n    \"2021-07-30\",\r\n    \"2021-07-31\",\r\n    \"2021-08-01\",\r\n    \"2021-08-02\",\r\n    \"2021-08-03\",\r\n    \"2021-08-04\",\r\n    \"2021-08-05\",\r\n    \"2021-08-06\",\r\n    \"2021-08-07\",\r\n    \"2021-08-08\",\r\n    \"2021-08-09\",\r\n    \"2021-08-10\",\r\n    \"2021-08-11\",\r\n    \"2021-08-12\",\r\n    \"2021-08-13\",\r\n    \"2021-08-14\",\r\n    \"2021-08-15\",\r\n    \"2021-08-16\",\r\n    \"2021-08-17\",\r\n    \"2021-08-18\",\r\n    \"2021-08-19\",\r\n    \"2021-08-20\",\r\n    \"2021-08-21\",\r\n    \"2021-08-22\",\r\n    \"2021-08-23\",\r\n    \"2021-08-24\",\r\n    \"2021-08-25\",\r\n    \"2021-08-26\",\r\n    \"2021-08-27\",\r\n    \"2021-08-28\",\r\n    \"2021-08-29\",\r\n    \"2021-08-30\",\r\n    \"2021-08-31\",\r\n    \"2021-09-01\",\r\n    \"2021-09-02\",\r\n    \"2021-09-03\",\r\n    \"2021-09-04\",\r\n    \"2021-09-05\",\r\n    \"2021-09-06\",\r\n    \"2021-09-07\",\r\n    \"2021-09-08\",\r\n    \"2021-09-09\",\r\n    \"2021-09-10\",\r\n    \"2021-09-11\",\r\n    \"2021-09-12\",\r\n    \"2021-09-13\",\r\n    \"2021-09-14\",\r\n    \"2021-09-15\",\r\n    \"2021-09-16\",\r\n    \"2021-09-17\",\r\n    \"2021-09-18\",\r\n    \"2021-09-19\",\r\n    \"2021-09-20\",\r\n    \"2021-09-21\",\r\n    \"2021-09-22\",\r\n    \"2021-09-23\",\r\n    \"2021-09-24\",\r\n    \"2021-09-25\",\r\n    \"2021-09-26\",\r\n    \"2021-09-27\",\r\n    \"2021-09-28\",\r\n    \"2021-09-29\",\r\n    \"2021-09-30\",\r\n    \"2021-10-01\",\r\n    \"2021-10-02\",\r\n    \"2021-10-03\",\r\n    \"2021-10-04\",\r\n    \"2021-10-05\",\r\n    \"2021-10-06\",\r\n    \"2021-10-07\",\r\n    \"2021-10-08\",\r\n    \"2021-10-09\",\r\n    \"2021-10-10\",\r\n    \"2021-10-11\",\r\n    \"2021-10-12\",\r\n    \"2021-10-13\",\r\n    \"2021-10-14\",\r\n    \"2021-10-15\",\r\n    \"2021-10-16\",\r\n    \"2021-10-17\",\r\n    \"2021-10-18\",\r\n    \"2021-10-19\",\r\n    \"2021-10-20\",\r\n    \"2021-10-21\",\r\n    \"2021-10-22\",\r\n    \"2021-10-23\",\r\n    \"2021-10-24\",\r\n    \"2021-10-25\",\r\n    \"2021-10-26\",\r\n    \"2021-10-27\",\r\n    \"2021-10-28\",\r\n    \"2021-10-29\",\r\n    \"2021-10-30\",\r\n    \"2021-10-31\",\r\n    \"2021-11-01\",\r\n    \"2021-11-02\",\r\n    \"2021-11-03\",\r\n    \"2021-11-04\",\r\n    \"2021-11-05\",\r\n    \"2021-11-06\",\r\n    \"2021-11-07\",\r\n    \"2021-11-08\",\r\n    \"2021-11-09\",\r\n    \"2021-11-10\",\r\n    \"2021-11-11\",\r\n    \"2021-11-12\",\r\n    \"2021-11-13\",\r\n    \"2021-11-14\",\r\n    \"2021-11-15\",\r\n    \"2021-11-16\",\r\n    \"2021-11-17\",\r\n    \"2021-11-18\",\r\n    \"2021-11-19\",\r\n    \"2021-11-20\",\r\n    \"2021-11-21\",\r\n    \"2021-11-22\",\r\n    \"2021-11-23\",\r\n    \"2021-11-24\",\r\n    \"2021-11-25\",\r\n    \"2021-11-26\",\r\n    \"2021-11-27\",\r\n    \"2021-11-28\",\r\n    \"2021-11-29\",\r\n    \"2021-11-30\",\r\n    \"2021-12-01\",\r\n    \"2021-12-02\",\r\n    \"2021-12-03\",\r\n    \"2021-12-04\",\r\n    \"2021-12-05\",\r\n    \"2021-12-06\",\r\n    \"2021-12-07\",\r\n    \"2021-12-08\",\r\n    \"2021-12-09\",\r\n    \"2021-12-10\",\r\n    \"2021-12-11\",\r\n    \"2021-12-12\",\r\n    \"2021-12-13\",\r\n    \"2021-12-14\",\r\n    \"2021-12-15\",\r\n    \"2021-12-16\",\r\n    \"2021-12-17\",\r\n    \"2021-12-18\",\r\n    \"2021-12-19\",\r\n    \"2021-12-20\",\r\n    \"2021-12-21\",\r\n    \"2021-12-22\",\r\n    \"2021-12-23\",\r\n    \"2021-12-24\",\r\n    \"2021-12-25\",\r\n    \"2021-12-26\",\r\n    \"2021-12-27\",\r\n    \"2021-12-28\",\r\n    \"2021-12-29\",\r\n    \"2021-12-30\",\r\n    \"2021-12-31\",\r\n    \"2022-01-01\",\r\n    \"2022-01-02\",\r\n    \"2022-01-03\",\r\n    \"2022-01-04\",\r\n    \"2022-01-05\",\r\n    \"2022-01-06\",\r\n    \"2022-01-07\",\r\n    \"2022-01-08\",\r\n    \"2022-01-09\",\r\n    \"2022-01-10\",\r\n    \"2022-01-11\",\r\n    \"2022-01-12\",\r\n    \"2022-01-13\",\r\n    \"2022-01-14\",\r\n    \"2022-01-15\",\r\n    \"2022-01-16\",\r\n    \"2022-01-17\",\r\n    \"2022-01-18\",\r\n    \"2022-01-19\",\r\n    \"2022-01-20\",\r\n    \"2022-01-21\",\r\n    \"2022-01-22\",\r\n    \"2022-01-23\",\r\n    \"2022-01-24\",\r\n    \"2022-01-25\",\r\n    \"2022-01-26\",\r\n    \"2022-01-27\",\r\n    \"2022-01-28\",\r\n    \"2022-01-29\",\r\n    \"2022-01-30\",\r\n    \"2022-01-31\",\r\n    \"2022-02-01\",\r\n    \"2022-02-02\",\r\n    \"2022-02-03\",\r\n    \"2022-02-04\",\r\n    \"2022-02-05\",\r\n    \"2022-02-06\",\r\n    \"2022-02-07\",\r\n    \"2022-02-08\",\r\n    \"2022-02-09\",\r\n    \"2022-02-10\",\r\n    \"2022-02-11\",\r\n    \"2022-02-12\",\r\n    \"2022-02-13\",\r\n    \"2022-02-14\",\r\n    \"2022-02-15\",\r\n    \"2022-02-16\",\r\n    \"2022-02-17\",\r\n    \"2022-02-18\",\r\n    \"2022-02-19\",\r\n    \"2022-02-20\",\r\n    \"2022-02-21\",\r\n    \"2022-02-22\",\r\n    \"2022-02-23\",\r\n    \"2022-02-24\",\r\n    \"2022-02-25\",\r\n    \"2022-02-26\",\r\n    \"2022-02-27\",\r\n    \"2022-02-28\",\r\n    \"2022-03-01\",\r\n    \"2022-03-02\",\r\n    \"2022-03-03\",\r\n    \"2022-03-04\",\r\n    \"2022-03-05\",\r\n    \"2022-03-06\",\r\n    \"2022-03-07\",\r\n    \"2022-03-08\",\r\n    \"2022-03-09\",\r\n    \"2022-03-10\",\r\n    \"2022-03-11\",\r\n    \"2022-03-12\",\r\n    \"2022-03-13\",\r\n    \"2022-03-14\",\r\n    \"2022-03-15\",\r\n    \"2022-03-16\",\r\n    \"2022-03-17\",\r\n    \"2022-03-18\",\r\n    \"2022-03-19\",\r\n    \"2022-03-20\",\r\n    \"2022-03-21\",\r\n    \"2022-03-22\",\r\n    \"2022-03-23\",\r\n    \"2022-03-24\",\r\n    \"2022-03-25\",\r\n    \"2022-03-26\",\r\n    \"2022-03-27\",\r\n    \"2022-03-28\",\r\n    \"2022-03-29\",\r\n    \"2022-03-30\",\r\n    \"2022-03-31\",\r\n    \"2022-04-01\",\r\n    \"2022-04-02\",\r\n    \"2022-04-03\",\r\n    \"2022-04-04\",\r\n    \"2022-04-05\",\r\n    \"2022-04-06\",\r\n    \"2022-04-07\",\r\n    \"2022-04-08\",\r\n    \"2022-04-09\",\r\n    \"2022-04-10\",\r\n    \"2022-04-11\",\r\n    \"2022-04-12\",\r\n    \"2022-04-13\",\r\n    \"2022-04-14\",\r\n    \"2022-04-15\",\r\n    \"2022-04-16\",\r\n    \"2022-04-17\",\r\n    \"2022-04-18\",\r\n    \"2022-04-19\",\r\n    \"2022-04-20\",\r\n    \"2022-04-21\",\r\n    \"2022-04-22\",\r\n    \"2022-04-23\",\r\n    \"2022-04-24\",\r\n    \"2022-04-25\",\r\n    \"2022-04-26\",\r\n    \"2022-04-27\",\r\n    \"2022-04-28\",\r\n    \"2022-04-29\",\r\n    \"2022-04-30\",\r\n    \"2022-05-01\",\r\n    \"2022-05-02\",\r\n    \"2022-05-03\",\r\n    \"2022-05-04\",\r\n    \"2022-05-05\",\r\n    \"2022-05-06\",\r\n    \"2022-05-07\",\r\n    \"2022-05-08\",\r\n    \"2022-05-09\",\r\n    \"2022-05-10\",\r\n    \"2022-05-11\",\r\n    \"2022-05-12\",\r\n    \"2022-05-13\",\r\n    \"2022-05-14\",\r\n    \"2022-05-15\",\r\n    \"2022-05-16\",\r\n    \"2022-05-17\",\r\n    \"2022-05-18\",\r\n    \"2022-05-19\",\r\n    \"2022-05-20\",\r\n    \"2022-05-21\",\r\n    \"2022-05-22\",\r\n    \"2022-05-23\",\r\n    \"2022-05-24\",\r\n    \"2022-05-25\",\r\n    \"2022-05-26\",\r\n    \"2022-05-27\",\r\n    \"2022-05-28\",\r\n    \"2022-05-29\",\r\n    \"2022-05-30\",\r\n    \"2022-05-31\",\r\n    \"2022-06-01\",\r\n    \"2022-06-02\",\r\n    \"2022-06-03\",\r\n    \"2022-06-04\",\r\n    \"2022-06-05\",\r\n    \"2022-06-06\",\r\n    \"2022-06-07\",\r\n    \"2022-06-08\",\r\n    \"2022-06-09\",\r\n    \"2022-06-10\",\r\n    \"2022-06-11\",\r\n    \"2022-06-12\",\r\n    \"2022-06-13\",\r\n    \"2022-06-14\",\r\n    \"2022-06-15\",\r\n    \"2022-06-16\",\r\n    \"2022-06-17\",\r\n    \"2022-06-18\",\r\n    \"2022-06-19\",\r\n    \"2022-06-20\",\r\n    \"2022-06-21\",\r\n    \"2022-06-22\",\r\n    \"2022-06-23\",\r\n    \"2022-06-24\",\r\n    \"2022-06-25\",\r\n    \"2022-06-26\",\r\n    \"2022-06-27\",\r\n    \"2022-06-28\",\r\n    \"2022-06-29\",\r\n    \"2022-06-30\"\r\n]\r\nexport default dateRange;","// Module imports\r\nimport React, { Component } from 'react';\r\nimport { View, Text, ImageBackground, Pressable, ScrollView } from 'react-native';\r\nimport { Icon } from 'react-native-eva-icons'\r\n\r\n// Component imports\r\nimport UserEntryCards from './subcomponents/UserEntryCards';\r\n\r\n// Local imports\r\nimport dateRange from '../shared/dateRange';\r\nimport styles from '../styles/entrancesStyles';\r\n\r\n// cors-midpoint uri (needed to avoid cors' allow-cross-origin error when fetching)\r\n// const corsURI = 'https://morning-journey-78874.herokuapp.com/';\r\n// const appServerURI = 'https://mood-tracker-server.herokuapp.com/'\r\n\r\n// Defining pertinent constants\r\nconst monthDict = {'Jan': '01', 'Feb': '02', 'Mar': '03', 'Apr': '04', 'May': '05', 'Jun': '06', 'Jul': '07', 'Ago': '08', 'Sep': '09', 'Oct': '10', 'Nov': '11', 'Dec': '12'}\r\nconst englishMonthSigs = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dec']\r\nconst portugueseMonthSigs = ['Jan', 'Fev', 'Mar', 'Abr', 'Mai', 'Jun', 'Jul', 'Ago', 'Set', 'Out', 'Nov', 'Dez']\r\nconst englishWeekDayMap = {'Mon': 'Seg', 'Tue': 'Ter', 'Wed': 'Qua', 'Thu': 'Qui', 'Fri': 'Sex', 'Sat': 'Sab', 'Sun': 'Dom'}\r\n\r\n// Defining pertinent functions\r\nfunction Today() {\r\n    const now = Date().toString().split(' ')\r\n    const today = [ now[3], monthDict[now[1]], now[2] ].join('-')\r\n    return today\r\n}\r\nfunction getNextDate(date, next='next') {\r\n    const nextDate = dateRange[dateRange.indexOf(date) + (next=='previous' ? -1 : 1)]\r\n    return nextDate\r\n}\r\nfunction getTime() {\r\n    //Wed,Jan,26,2022,15:12:37,GMT-0300,(Horário,Padrão,de,Brasília)\r\n    const now = Date().toString().split(' ')\r\n    const time = now[4]\r\n    // const time = new Date().toLocaleTimeString()\r\n    return time\r\n}\r\nfunction formatDate(selDate) {\r\n    \r\n    var ymd = selDate.split('-')\r\n    const yesterday = getNextDate(Today(), 'previous')\r\n    const englishWeekDay = new Date(ymd[0], ymd[1], ymd[2]).toString().split(' ')[0]\r\n    const weekDay = englishWeekDayMap[englishWeekDay]\r\n    var prefix = ''\r\n\r\n    if (selDate === Today()) prefix = 'Hoje, '\r\n    else if (selDate === yesterday) prefix = 'Ontem, '\r\n    else prefix = weekDay + ', '\r\n    \r\n    for (var i=0; i<12; i++) {\r\n        if (monthDict[ englishMonthSigs[i] ] == ymd[1]) {\r\n            return prefix + oneDigit(ymd[2]) + '° ' + portugueseMonthSigs[i]\r\n        }\r\n    }\r\n}\r\nfunction oneDigit(stringNumber) {\r\n    if (stringNumber[0] == '0') return stringNumber.slice(1, stringNumber.length)\r\n    else return stringNumber\r\n}\r\n\r\nexport default class EntrancesScreen extends Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            userEntries: [],\r\n            date: Today(),\r\n            time: getTime(),\r\n            selectedDate: Today(),\r\n            entriesLoading: false,\r\n            entriesSynced: false,\r\n        };\r\n        this.onNextButtonPress = this.onNextButtonPress.bind(this);\r\n        this.forgetNewPost = this.forgetNewPost.bind(this);         \r\n    }\r\n    \r\n    componentDidMount() {\r\n        console.log('\"Entries\" screen component did mount...')      \r\n    }\r\n\r\n    onNextButtonPress(next='next') { \r\n        function setSelectedDate() {\r\n            this.setState( {selectedDate: getNextDate(this.state.selectedDate, next)} ) \r\n        }\r\n        return setSelectedDate.bind(this);\r\n    }\r\n\r\n    forgetNewPost() {\r\n        function forgetNewPost() {\r\n            this.props.navigation.setParams({newPost: false});\r\n            this.setState({\r\n                selectedDate: Today(),\r\n            });\r\n        }\r\n        return forgetNewPost.bind(this);\r\n    }\r\n\r\n    render() {\r\n\r\n        console.log('Rendering \"Entries\" screen...')\r\n        const isToday = this.state.selectedDate === this.state.date\r\n\r\n        return(\r\n            <ImageBackground source={require('../assets/wallpaper.jpg')} style={[styles.mainView]}>\r\n                \r\n                <ScrollView style={styles.scrollView}>\r\n                        <View style={styles.section}>\r\n                            \r\n                            <View style={[styles.cardRow, {justifyContent: 'space-between'}]}>\r\n                                <Pressable onPress={ this.onNextButtonPress('previous') }>\r\n                                    <Icon name='arrow-back' width={35} height={35} fill='white' />\r\n                                </Pressable>\r\n                                <Text style={styles.sectionTitle}> { 'Suas entradas  •  ' + formatDate(this.state.selectedDate) } </Text>                                \r\n                                { !isToday ? (\r\n                                    <Pressable onPress={ this.onNextButtonPress('next') }>\r\n                                        <Icon name='arrow-forward' width={35} height={35} fill='white' />\r\n                                    </Pressable>   \r\n                                ) : (\r\n                                    <View style={{height: 35, width: 35}}></View>\r\n                                )}\r\n                            </View>\r\n\r\n                            <UserEntryCards\r\n                            navigation = {this.props.navigation}\r\n                            userInfo={this.props.route.params.userInfo}\r\n                            newPost={this.props.route.params.newPost}\r\n                            forgetNewPost={this.forgetNewPost()}\r\n                            date={this.state.selectedDate}\r\n                            />\r\n\r\n                        </View>\r\n                </ScrollView>\r\n\r\n                <Pressable onPress={() => { this.props.navigation.navigate( 'PostEntrance', {} )} }  style={[styles.postButton]}>\r\n                        <Icon name='plus-circle' width={72} height={72} fill='white' style={styles.postButtonLabel}/>\r\n                </Pressable>\r\n  \r\n            </ImageBackground>\r\n            )\r\n\r\n    }\r\n  }\r\n","import { StatusBar } from 'expo-status-bar';\r\n// import { Platform } from 'react-native';\r\n\r\nconst styles = {\r\n  mainView: {\r\n    flex: 1,                 \r\n    marginTop: StatusBar.currentHeight,\r\n  },\r\n  entrances: {\r\n    marginTop: StatusBar.currentHeight,\r\n    borderWidth: 0,\r\n    flex:1,\r\n    justifyContent: 'space-between',\r\n    alignItems: 'flex-start',\r\n  },\r\n  scrollView: {\r\n    // paddingHorizontal: Platform.OS != 'web' ? '5%' : '5%',\r\n    width: '100%',\r\n    alignSelf: 'center',\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    paddingBottom: '0%',\r\n    paddingHorizontal: '5%',\r\n    alignSelf: 'stretch',\r\n    borderColor: 'black',\r\n  },\r\n  section: {\r\n    width: 350,\r\n    paddingVertical: '16%',\r\n    borderBottomWidth: 1,\r\n    borderColor: 'rgba(155,155,155,0.3)',\r\n    alignSelf: 'center',\r\n  },\r\n  contentRow: {\r\n    flexDirection: 'column',\r\n    padding: 10,\r\n    marginTop: 22,\r\n    borderWidth: 1,\r\n    borderColor: 'rgba(155,155,155, 0.4)',\r\n    borderRadius: 30,\r\n    backgroundColor: 'rgba(255,255,255, 0.3)',\r\n\r\n  },\r\n  entryTitle: {\r\n    paddingVertical: 3,\r\n    paddingLeft: 4,\r\n    fontSize: 19,\r\n    color: 'white',\r\n  },\r\n  entryIcon: {\r\n    paddingRight: 0,\r\n  },\r\n  postButtonView: {\r\n    height: 60,\r\n    width: 60,\r\n    borderRadius: 30,\r\n    alignSelf: 'center',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    backgroundColor: 'white',\r\n  },\r\n  postButtonLabel: {\r\n    fontSize: 45,\r\n    fontWeight: 'bold',\r\n  },\r\n  moodButtonView: {\r\n    width: 65,\r\n    height: 65,\r\n    alignItems: 'center',\r\n    justifyContent: 'center'\r\n  },\r\n  moodButton: {\r\n      height: 53,\r\n      width: 53,\r\n      borderRadius: 30,\r\n      justifyContent: 'center',\r\n      marginColor: 'black',\r\n      marginWidth: 2,\r\n  },\r\n  date: {\r\n    position: 'relative',\r\n    left: '60%',\r\n    paddingVertical: 8,\r\n    paddingHorizontal: 10,\r\n    fontSize: 15,\r\n    alignSelf: 'center',\r\n    backgroundColor: 'white',\r\n    borderRadius: 20\r\n  },\r\n  jornalText: {\r\n    paddingVertical: 5,\r\n    paddingHorizontal: 12,\r\n    flex: 1,\r\n    textAlignVertical: 'top',\r\n    width: '100%',\r\n    borderRadius: 20,\r\n    color: 'white',\r\n    fontSize: 16,\r\n  },\r\n  saveButton: {\r\n    height: 50,\r\n    width: '100%',\r\n    borderTopLeftRadius: 30,\r\n    borderTopRightRadius: 30,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    backgroundColor: 'white'\r\n  },\r\n  saveButtonLabel: {\r\n    fontWeight:'bold',\r\n    fontSize: 19\r\n  },\r\n  card: {\r\n    marginTop: '5%',\r\n    paddingVertical: 5,\r\n    paddingHorizontal: 10,\r\n    borderRadius: 20,\r\n    backgroundColor: 'rgba(0,0,0,0.2)',\r\n  },\r\n  cardRow: {\r\n      flexDirection: 'row',\r\n      paddingVertical: 5,\r\n      alignItems: 'center',\r\n  },\r\n  moodBadge: {\r\n      backgroundColor: 'green',\r\n      borderRadius: 30,\r\n      paddingVertical: 6,\r\n      width: 130,\r\n      fontSize: 16,\r\n      textAlign: 'center',\r\n  },\r\n  emotionBadge: {\r\n      backgroundColor: 'rgba(1,1,1,0.5)',\r\n      borderRadius: 30,\r\n      paddingVertical: 6,\r\n      paddingHorizontal: 12.5,\r\n      fontSize: 15,\r\n      textAlign: 'center',\r\n      marginVertical: 5,\r\n      marginHorizontal: 5\r\n  },\r\n  entryCardEmotionBadge: {\r\n    fontFamily: 'sans-serif',\r\n    backgroundColor: 'aliceblue',\r\n    borderRadius: 30,\r\n    paddingVertical: 7,\r\n    paddingHorizontal: 12.5,\r\n    marginRight: 6,\r\n    fontSize: 15,\r\n    textAlign: 'center',\r\n  },\r\n  datetimeTitle: {\r\n    fontSize: 16,\r\n    marginRight: 3,\r\n  },\r\n}\r\n\r\nexport default styles;","const GoogleMapsAPI = {\r\n    GoogleMapsJavascriptAPIkey: \"AIzaSyBVWbOwPAMRyz2bS6rYHrDftVeihQ8WMCo\",\r\n    GoogleMapsGeocodingAPIKey: \"AIzaSyB6O-DpvulBC0rom1mGy-mBcstIbPlDPHA\",\r\n}\r\n\r\nexport default GoogleMapsAPI","const OpenWeatherMapAPI = {\r\n    KEY: \"de9e6896f84109d7920528172207411a\",\r\n}\r\nexport default OpenWeatherMapAPI\r\n","import React, { Component } from 'react';\r\nimport { View, Text, ImageBackground, Pressable, ScrollView, Platform, TextInput } from 'react-native';\r\n// import { TextInput } from 'react-native-gesture-handler';\r\nimport { Icon } from 'react-native-eva-icons'\r\n\r\nimport styles from '../styles/postEntryStyles'\r\n\r\n// Geocoding and weather dependencies and APIs\r\nimport * as Location from 'expo-location';\r\nimport GoogleMapsAPI from './subcomponents/GoogleMapsAPI'\r\nLocation.setGoogleApiKey(GoogleMapsAPI.GoogleMapsGeocodingAPIKey)\r\nimport OpenWeatherMapAPI from './subcomponents/OpenWeatherMapAPI';\r\n\r\n// cors-midpoint uri (needed to avoid cors' allow-cross-origin error when fetching in web platforms)\r\nconst corsURI = Platform.OS == 'web' ? 'https://morning-journey-78874.herokuapp.com/' : ''\r\nconst appServerURI = 'https://mood-tracker-server.herokuapp.com/'\r\n\r\n// Date() => wed jan 91 2022 07:46:57 ...\r\nconst now = new Date().toString().split(' ')\r\nconst datetime = now[2] + ' ' + now[1] + ' ' + now[3] + ' - ' + now[4].slice(0, 5)\r\n\r\n// Mood configs\r\nconst moodColors = ['#ff3333', '#0099cc', 'lightblue', '#ffff33', '#00b300']\r\nconst moods = ['Horrível', 'Mal', 'Regular', 'Bem', 'Ótimo']\r\n\r\n// Emotion configs\r\nconst emotionGroupsNames = [ 'Bem & Energizado', 'Bem & Calmo', 'Mal e Energizado', 'Mal & Calmo' ]\r\n\r\nconst goodEnergizedEmotions = ['Animação', 'Concentração', 'Desinibição', 'Motivação', 'Euforia']\r\nconst goodCalmEmotions = ['Alívio', 'Calma', 'Conforto', 'Despreocupação', 'Inspiração', 'Orgulho', 'Paz', 'Relaxamento', 'Satisfação', 'Segurança']\r\nconst badEnergizedEmotions = ['Agitação', 'Ansiedade', 'Tristeza', 'Decepção', 'Depressão', 'Desespero', 'Frustração', 'Insatisfação', 'Irritação', 'Medo', 'Paranoia', 'Preocupação', 'Impaciencia', 'Raiva', 'Revolta', 'Sobrecarregado(a)', 'Tensão', 'Nojo']\r\nconst badCalmEmotions = ['Timidez', 'Cansaço', 'Confusão', 'Desanimo', 'Vergonha', 'Insegurança', 'Apátia', 'Solidão', 'Tédio']\r\n\r\nconst basicEmotions = [ ...goodEnergizedEmotions, ...goodCalmEmotions, ...badEnergizedEmotions, ...badCalmEmotions ]\r\nconst emotionGroups = [ goodEnergizedEmotions, goodCalmEmotions, badEnergizedEmotions, badCalmEmotions ]\r\n\r\nvar isSelectedEmotions = {}\r\nfor ( let emotion of basicEmotions){\r\n    isSelectedEmotions[emotion] = false\r\n}\r\n\r\n// Date config\r\nconst monthSigs = ['Jan', 'Feb', 'Mar', 'Apr', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dec']\r\nconst months = ['01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12']\r\n\r\nconst monthNameMap = {\r\n    '01': 'Janeiro',\r\n    '02': 'Fevereiro',\r\n    '03': 'Março',\r\n    '04': 'Abril',\r\n    '05': 'Maio',\r\n    '06': 'Junho',\r\n    '07': 'Julho',\r\n    '08': 'Agosto',\r\n    '09': 'Setembro',\r\n    '10': 'Outubro',\r\n    '11': 'Novembro',\r\n    '12': 'Dezembro',\r\n}\r\n\r\n// Functions\r\n\r\nfunction convertMonthSig(monthSig) {\r\n    const thisMonth = months[monthSigs.indexOf(monthSig)]\r\n    return thisMonth\r\n}\r\n\r\nfunction Today() {\r\n    const now = Date().toString().split(' ')\r\n    const today = [ now[3], convertMonthSig(now[1]), now[2] ].join('-')\r\n    return today\r\n}\r\n\r\nfunction getTime() {\r\n    //Wed,Jan,26,2022,15:12:37,GMT-0300,(Horário,Padrão,de,Brasília)\r\n    const now = Date().toString().split(' ')\r\n    const time = now[4]\r\n    return time\r\n}\r\n\r\nfunction oneDigit(stringNumber) {\r\n    if (stringNumber[0] == '0') return stringNumber.slice(1, stringNumber.length)\r\n    else return stringNumber\r\n}\r\n\r\nfunction formatPostEntryDatetimeTitle(date, time) {\r\n    const ymd = date.split('-')\r\n    const m = monthNameMap[ ymd[1] ]\r\n    return oneDigit( ymd[2] ) + ' ' + m + ' ' + ymd[0] + ' - ' + time.slice(0,5)\r\n}\r\n\r\nfunction formattedAddress(addressObj) {\r\n    return addressObj.street + ', ' + addressObj.streetNumber + ' - ' + addressObj.district + ', ' + addressObj.subregion + '. ' + addressObj.region + ', ' + addressObj.isoCountryCode + '.'\r\n}\r\n\r\nexport default class PostEntranceScreen extends Component {\r\n  \r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            \r\n            date: Today(),\r\n            startTime: getTime(),\r\n            star: false,\r\n            selectedMood: '',\r\n            emotions: [],\r\n            jornalEntry: '',    \r\n            address: {},\r\n            weather: {},\r\n\r\n            selectedEntry: 'Avaliação',\r\n            isSelectedEmotions: isSelectedEmotions,\r\n            isLoading: false,\r\n            isFetchingLocationOrWeather: false,\r\n\r\n            locationServiceEnabled: null,\r\n            userCoordinates: null,\r\n            userAddressList: [],\r\n        };\r\n\r\n        this.onSaveButtonPress = this.onSaveButtonPress.bind(this);\r\n        this.EmotionButtons = this.EmotionButtons.bind(this);\r\n        this.MoodButtons = this.MoodButtons.bind(this);\r\n        this.postEntryHeader = this.postEntryHeader.bind(this);\r\n        this.onEmotionButtonPress = this.onEmotionButtonPress.bind(this);\r\n        this.onMoodButtonPress = this.onMoodButtonPress.bind(this);\r\n        this.inputSection = this.inputSection.bind(this);\r\n        this.setSelectedEntry = this.setSelectedEntry.bind(this);\r\n        this.InputCard = this.InputCard.bind(this);\r\n        this.JornalInput = this.JornalInput.bind(this);\r\n        this.postNewEntryAsync = this.postNewEntryAsync.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({isFetchingLocationOrWeather: true})\r\n        console.log('PostEntryScreen component did mount. Fetching user position and weather data...')\r\n        this.checkIfLocationEnabled();\r\n        this.getCurrentLocation();\r\n    }\r\n    \r\n    async fetchWeather() {\r\n\r\n        try {\r\n\r\n            if (this.state.userCoordinates) {\r\n\r\n                console.log('FETCH WEATHER STATUS: STARTED...!')\r\n                const coords = this.state.userCoordinates\r\n                const lat = coords.latitude\r\n                const lng = coords.longitude\r\n                \r\n                await fetch(\r\n                    `http://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lng}&APPID=${OpenWeatherMapAPI.KEY}&units=metric`\r\n                )\r\n                .then(res => {\r\n                    const resStatus = 'Status: ' + res.status + ', Status Text: ' + res.statusText\r\n                    if (!res.ok) \r\n                        throw new Error(resStatus)\r\n                    else {\r\n                        return res.json()\r\n                    }\r\n                })\r\n                .then(json => {\r\n                    // console.log('Fetch weather response:')\r\n                    // console.log(json);\r\n                    console.log('FETCH WEATHER STATUS: SUCCESSFUL!')\r\n                    this.setState({weather: json})\r\n                });\r\n          \r\n            } else {\r\n                console.log('FETCH WEATHER STATUS: UNABLE TO START! USER POSITION NOT AVAILABLE.')\r\n            }\r\n\r\n        } catch(error) {\r\n            console.log('FETCH WEATHER STATUS: ERROR! LOGGING ERROR...')\r\n            console.log(error)\r\n\r\n        } finally {\r\n            console.log('FETCH WEATHER STATUS: FINISHED!')    \r\n            this.setState({isFetchingLocationOrWeather: false})\r\n        }\r\n    }\r\n\r\n    // Check if device has location services enabled\r\n    async checkIfLocationEnabled () {\r\n\r\n        if ( !this.state.LocationServiceEnabled ) {\r\n            try{\r\n                console.log('GEOCODING PROCESS (CHECK): CHECKING IF USER HAS SERVICES ENABLED.' )\r\n                let enabled = await Location.hasServicesEnabledAsync();\r\n            \r\n                if (!enabled) {\r\n                    console.log('GEOCODING PROCESS (CHECK): CHECKED! USER DOES NOT HAVE SERVICES ENABLED.' )\r\n                    Alert.alert(\r\n                        'Location Service not enabled',\r\n                        'Please enable your location services to continue',\r\n                        [{ text: 'OK' }],\r\n                        { cancelable: false }\r\n                    )\r\n                } else {\r\n                    console.log('GEOCODING PROCESS (CHECK): CHECKED! USER HAS LOCATION SERVICES ENABLED.')\r\n                    this.setState({LocationServiceEnabled: enabled});\r\n                }\r\n\r\n            } catch(error) {\r\n                console.log(\"GEOCODING PROCESS (CHECK): ERROR IN SERVICES PERMISSION CHECK! COULD'NT CHECK IF USER HAS SERVICES ENABLED.\")\r\n            \r\n            } finally {\r\n                console.log(\"GEOCODING PROCESS (CHECK): FINISHED!\")\r\n            }\r\n        \r\n        } else {\r\n                console.log(\"GEOCODING PROCESS (CHECK): SKIPPING! USER ALREADY GRANTED PERMISSION.\")\r\n        } \r\n\r\n    };\r\n    \r\n    // Check for permission, get current user position and use reverse geocoding for user coordinates\r\n    async getCurrentLocation() {\r\n    \r\n        try {\r\n            console.log('GEOCODING PROCESS (PERMISSION): REQUEST PERMISSION ASYNC...')\r\n            // let { status } = await Location.requestPermissionsAsync();\r\n            let { status } = await Location.requestForegroundPermissionsAsync()\r\n            // let { status } = await Location.requestBackgroundPermissionsAsync()\r\n        \r\n            if (status !== 'granted') {\r\n                console.log('GEOCODING PROCESS (PERMISSION): PERMISSION NOT GRANTED!')\r\n                Alert.alert(\r\n                    'Permission not granted',\r\n                    'Allow the app to use location service.',\r\n                    [{ text: 'OK' }],\r\n                    { cancelable: false }\r\n                );\r\n\r\n            } else {\r\n                console.log('GEOCODING PROCESS (PERMISSION): PERMISSION GRANTED!')\r\n            }\r\n        \r\n            console.log('GEOCODING PROCESS (REQUEST): GETTING CURRENT USER POSITION ASYNC...')\r\n            let { coords } = await Location.getCurrentPositionAsync();\r\n            \r\n            if (coords) {   \r\n                const { latitude, longitude } = coords;\r\n                this.setState({userCoordinates: coords})\r\n                console.log(`GEOCODING PROCESS (REQUEST): CURRENT USER POSITION FOUND... Latitude: ${latitude}, Logitude: ${longitude}`)\r\n                console.log('GEOCODING PROCESS (REVERSE GEOCODING): REVERSE GEOCODE ASYNC...')  \r\n                let response = await Location.reverseGeocodeAsync({ latitude, longitude });\r\n        \r\n                if (response) {\r\n                    this.setState({userAddressList: response, address: response[0]})\r\n                    console.log('GEOCODING PROCESS (REVERSE GEOCODING): REVERSE GEOCODE SUCCESSFUL! UPDATING STATE...')  \r\n\r\n                } else {\r\n                    console.log('GEOCODING PROCESS (REVERSE GEOCODING): REVERSE GEOCODE FAILED! LOGGING RESPONSE...')  \r\n                    console.log(response)\r\n                }\r\n        \r\n            } else {\r\n                console.log(`GEOCODING PROCESS (REVERSE GEOCODING): USER POSITION NOT FOUND! UNABLE TO PROCEED TO REVERSE GEOCODING...`)\r\n            }\r\n    \r\n        } catch (error) {\r\n            console.log('GEOCODING PROCESS: ERROR IN USER POSITION REQUEST! LOGGING ERROR...')\r\n            console.log(error)\r\n        \r\n        } finally {\r\n            console.log('GEOCODING PROCESS: USER POSITION REQUEST FINISHED. PROCEEDING TO FETCH WEATHER DATA...')\r\n            this.fetchWeather()\r\n        }\r\n    };\r\n\r\n    postEntryHeader() {\r\n        return(\r\n            <View style={[styles.cardRow, {justifyContent: 'space-between'}]}>\r\n                <Pressable onPress={() => {this.props.navigation.goBack()}}  style={styles.postButton}>\r\n                    <Icon name='arrow-back' fill='white' height={30} width={30}/>\r\n                </Pressable>\r\n                <View style={[styles.entryCardEmotionBadge, {flexDirection: 'row', alignItems: 'center'}]}>\r\n                    <Text style={styles.datetimeTitle}> { formatPostEntryDatetimeTitle(this.state.date, this.state.startTime) } </Text>\r\n                    <Icon name='edit' fill='rgba(75,75,75,1)' height={20} width={20}/>\r\n                </View>\r\n                <Pressable onPress={() => {this.setState({star: !this.state.star})}}  style={styles.postButton}>\r\n                    <Icon name={this.state.star ? 'star' : 'star-outline'} fill='rgba(245,245,245,0.7)' height={30} width={30}/>\r\n                </Pressable>\r\n            </View>\r\n        )\r\n    }\r\n\r\n    onMoodButtonPress(item) {\r\n        function selectMood() {\r\n            if (this.state.selectedMood==item) {\r\n                this.setState({selectedMood: null})\r\n            } else {\r\n                this.setState({selectedMood: item})\r\n            }\r\n        }\r\n        selectMood = selectMood.bind(this);\r\n        return selectMood\r\n    }\r\n\r\n    MoodButtons() {\r\n        \r\n        return moods.map((item, index) => {\r\n\r\n            const selColor = moodColors[index]\r\n            const moodButtonViewStyle = {\r\n                width: 65,\r\n                height: 65,\r\n                alignItems: 'center',\r\n                justifyContent: 'center',\r\n                borderWidth: this.state.selectedMood==item ? 3 : 0,\r\n                borderRadius: 32.5,\r\n                borderColor: selColor,\r\n            }        \r\n\r\n            return(\r\n                <View key={'mood '+index} style={moodButtonViewStyle} >\r\n                    <Pressable\r\n                    title={item}\r\n                    onPress={this.onMoodButtonPress(item)}\r\n                    style={[\r\n                        styles.moodButton,\r\n                        this.state.selectedMood==item ? {\r\n                            fontWeight: 'bold',\r\n                            backgroundColor: selColor,\r\n                        } : {\r\n                            fontWeight: null,\r\n                            backgroundColor: selColor\r\n                        }\r\n                    ]}\r\n                    >\r\n                        <Text style={{textAlign: 'center', textAlignVertical: 'center'}}>{item}</Text>\r\n                    </Pressable>\r\n                </View>\r\n            )\r\n        })\r\n    }\r\n\r\n    onEmotionButtonPress(emotion) { \r\n        function selectEmotion () {\r\n            this.setState({\r\n                isSelectedEmotions: {\r\n                    ...this.state.isSelectedEmotions,\r\n                    [emotion]: !this.state.isSelectedEmotions[emotion]\r\n                }\r\n            })\r\n        }\r\n        selectEmotion = selectEmotion.bind(this);\r\n        return selectEmotion\r\n    }\r\n\r\n    EmotionButtons(emotions) {\r\n        return(\r\n            emotions.map( emotion => (\r\n                <Pressable\r\n                key={'emotion-' + emotion}\r\n                title={emotion}\r\n                style={ {} }\r\n                onPress={this.onEmotionButtonPress(emotion)}\r\n                >\r\n                    <Text style={[styles.emotionBadge, {backgroundColor: this.state.isSelectedEmotions[emotion] ? 'lightblue' : 'white' }]}>{emotion}</Text>\r\n                </Pressable>\r\n            ))\r\n        )\r\n    }\r\n\r\n    JornalInput() {\r\n        return(\r\n            <TextInput\r\n            multiline\r\n            scrollEnabled\r\n            placeholder='Today was...' \r\n            onChangeText={text => this.setState({jornalEntry: text})}\r\n            value={this.state.jornalEntry}\r\n            // numberOfLines={3}\r\n            style={styles.jornalText}\r\n            >\r\n            </TextInput>\r\n        )\r\n    }\r\n\r\n    setSelectedEntry (entry) {\r\n        function setSelected() {\r\n            this.setState( {selectedEntry:  this.state.selectedEntry === entry ? null : entry  } )\r\n        }\r\n        setSelected = setSelected.bind(this);\r\n        return setSelected\r\n    }\r\n\r\n    inputSection(sectionName, cardBodyStyle, inputs) {\r\n        if (this.state.selectedEntry === sectionName) {\r\n            if (sectionName == 'Emoções') {\r\n                return emotionGroups.map((emotions, index) => (\r\n                    <View key={'emotion-group-' + index} style={{width: '100%', alignItems: 'center', marginVertical: 10}}>\r\n                        <Text style={{fontSize: 15, color: 'white', marginVertical: 8}}>{emotionGroupsNames[index]}</Text>\r\n                        <View key={index} style={[styles.cardRow, cardBodyStyle]}>\r\n                            {inputs(emotions)}\r\n                        </View>\r\n                    </View>\r\n                ))\r\n            } else {\r\n                return(\r\n                    <View style={[styles.cardRow, cardBodyStyle]}>\r\n                        {inputs}\r\n                    </View>\r\n                )    \r\n            }\r\n        } else {\r\n            return(\r\n                <></>\r\n            )\r\n        }\r\n    }\r\n\r\n    InputCard(sectionName, icon, cardBodyStyle, inputs) {\r\n        return(\r\n            <View style={[styles.card]}>\r\n                <Pressable style={styles.cardRow}  onPress={this.setSelectedEntry(sectionName)}>\r\n                    <Icon name={icon} fill='rgba(255,255,255,0.75)' height={28} width={28} style={styles.entryIcon} />\r\n                    <Text style={styles.entryTitle}> {sectionName} </Text>\r\n                </Pressable>\r\n\r\n                {this.inputSection(sectionName=sectionName, cardBodyStyle=cardBodyStyle, inputs=inputs)}  \r\n\r\n            </View>\r\n        )\r\n    }\r\n\r\n    onSaveButtonPress () {\r\n        if (!this.state.selectedMood) {\r\n            alert('Necessário adicionar uma avaliação.')\r\n\r\n        } else {\r\n            try {\r\n                const newEntry = {\r\n                    jornal: this.state.jornalEntry,\r\n                    mood: this.state.selectedMood,\r\n                    emotions: basicEmotions.filter( emotion => this.state.isSelectedEmotions[emotion] ) ,\r\n                    address: formattedAddress(this.state.address),\r\n                    date: Today(),\r\n                    startTime: this.state.startTime,\r\n                    endTime: getTime(),\r\n                    star: this.state.star,\r\n                }\r\n                this.postNewEntryAsync(newEntry)\r\n\r\n            } catch (error) {\r\n                alert('Não foi possível postar sua entrada. Tente novamente...')\r\n                console.log('Error when attempting to post user entry. Logging error...')\r\n                console.log(error)\r\n            }\r\n        }\r\n    }\r\n\r\n    async postNewEntryAsync(newEntry) {\r\n        this.setState({ isLoading: true });\r\n        var info = this.props.route.params.userInfo;\r\n\r\n        try {\r\n            const postUserEntryOpts = { \r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify( newEntry ),\r\n            }\r\n            var postUserEntryResult = await fetch( corsURI + appServerURI + 'Users/' + info.username + '/entries', postUserEntryOpts);\r\n            // var postUserEntryResult = await fetch('http://localhost:3000/Users/' + info.username + '/entries', postUserEntryOpts);\r\n\r\n            if (postUserEntryResult.ok) {\r\n                console.log('fetch POST request successful')\r\n                console.log('Status: ' + postUserEntryResult.status + ', ' + postUserEntryResult.statusText)\r\n                this.props.navigation.navigate('Entrances', {newPost: true} )    \r\n\r\n            } else {\r\n                console.log('fetch POST request failed. Throwing error...')\r\n                throw new Error('Status: ' + postUserEntryResult.status + ', ' + postUserEntryResult.statusText)\r\n            }\r\n\r\n        } catch (error) {\r\n            console.log('Erro capturado:')\r\n            console.log(error);\r\n\r\n        } finally {\r\n            this.setState({ isLoading: false });\r\n    }\r\n}\r\n  \r\n    render() {\r\n        console.log('Rendering \"Post Entry\" screen...')\r\n        const isDataLoading = this.state.isFetchingLocationOrWeather\r\n        return(\r\n            <ImageBackground source={require('../assets/wallpaper.jpg')} style={styles.mainView}>\r\n\r\n                <ScrollView style={styles.scrollView}>\r\n                    <View style={styles.section}>\r\n                            {this.postEntryHeader()}\r\n                            {this.InputCard('Avaliação', 'smiling-face', {justifyContent: 'space-between'}, this.MoodButtons())}\r\n                            {this.InputCard('Emoções', 'checkmark-square-outline', {flexWrap: 'wrap', justifyContent: 'center'}, this.EmotionButtons)}\r\n                            {this.InputCard('Jornal', 'book', {flexDirection: 'column', minHeight: 130}, this.JornalInput())}\r\n                    </View>\r\n                </ScrollView>  \r\n\r\n                <Pressable\r\n                onPress={this.onSaveButtonPress}\r\n                disabled={isDataLoading}\r\n                style={styles.saveButton}\r\n                >\r\n                    {isDataLoading ? (\r\n                        <Icon name={'sync-outline'} fill='black' width={28} height={28} />\r\n                    ) : (\r\n                        <Text style={styles.saveButtonLabel}> Salvar </Text>\r\n                    )}\r\n                </Pressable>\r\n    \r\n            </ImageBackground>\r\n        )    \r\n    }\r\n}","var styles = {\r\n    login: {\r\n        mainView: {\r\n            flex: 1,\r\n            justifyContent: 'center',\r\n            alignItems: 'center',\r\n            // paddingHorizontal: Platform.OS != 'web' ? '5%' : '5%',\r\n        },\r\n        titleView: {\r\n            flexDirection: 'row',\r\n            justifyContent: 'center',\r\n            alignItems: 'center',\r\n            minHeight: 60,\r\n        },\r\n        title: {\r\n            fontSize: 30,\r\n            fontWeight: 'bold',\r\n            color: 'white',\r\n            alignSelf: 'center',\r\n        },\r\n        titleIcon: {\r\n            width: 30,\r\n            height: 30,\r\n            marginLeft: 6,\r\n            paddingTop: 3,\r\n        },\r\n        card: {\r\n            height: '55%',\r\n            minHeight: 390,\r\n            width: 350,\r\n            paddingHorizontal: 10,\r\n            paddingVertical: 10,\r\n            borderWidth: 1,\r\n            borderRadius: 10,\r\n            backgroundColor: 'azure',\r\n        },\r\n        cardHeader: {\r\n            height: '25%',\r\n            width: '100%',\r\n        },\r\n        cardTitle: {\r\n            position: 'relative',\r\n            top: '30%',\r\n            left: '5%',\r\n            fontSize: 24,\r\n            fontWeight: 'bold',\r\n            color: 'black',\r\n        },\r\n        cardSection: {\r\n            height: '25%',\r\n            justifyContent: 'space-evenly',\r\n            alignItems: 'center',\r\n        },\r\n        loadingIcon: {\r\n            alignSelf: 'center'\r\n        },\r\n        inputField: {\r\n            minHeight: 40,\r\n            width: '100%',\r\n            paddingLeft: 10,\r\n            fontSize: 14,\r\n            borderWidth: 1,\r\n            borderRadius: 5,\r\n            backgroundColor: 'white'\r\n        },\r\n        button: {\r\n            height: 40,\r\n            width: '100%',\r\n            textAlign: 'center',\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n            borderWidth: 1,\r\n            borderRadius: 5,\r\n            borderColor: 'white',\r\n            backgroundColor: 'lightblue',        \r\n        },\r\n        buttonLabel: {\r\n            fontSize: 15,\r\n            fontWeight: 'bold',\r\n            color: 'black',\r\n        },\r\n        text: {\r\n            fontSize: 15,\r\n            textAlign: 'center',\r\n        },\r\n        msgBox: {\r\n            width: 350,\r\n            height: 36,\r\n            justifyContent: 'center',\r\n            backgroundColor: 'rgb(30,30,30)',\r\n            borderWidth: 1,\r\n            borderColor: 'rgb(40,40,40)',\r\n        },\r\n        msg: {\r\n            textAlign: 'center',\r\n            color: 'white',\r\n        },\r\n    }\r\n};\r\nexport default styles;","import { Icon } from 'react-native-eva-icons'\r\n\r\nimport React, { Component } from 'react';\r\nimport { View, Text, ImageBackground, TextInput, Pressable, Platform } from 'react-native';\r\nimport styles from '../styles/loginStyles'\r\n\r\n// App server connection settings\r\nconst corsURI = Platform.OS == 'web' ? 'https://morning-journey-78874.herokuapp.com/' : ''\r\nconst appServerURI = 'https://mood-tracker-server.herokuapp.com/'\r\n\r\n// Email Validation settings\r\n\r\n// const Verifier = require('email-verifier')\r\nconst emailVerification_APIKEY = \"at_TPKXmSQnStekLzTbstLO9GyHvd7or\"\r\n// let verifier = new Verifier(emailVerification_APIKEY);\r\nconst emailVerification_APIURI = (emailAddress) => `https://emailverification.whoisxmlapi.com/api/v2?apiKey=${emailVerification_APIKEY}&emailAddress=${emailAddress}`\r\nconst falseParams = ['validateDNS', 'checkCatchAll', 'checkFree', 'checkDisposable']\r\nfunction appendValueToUri(uri, params, value) {\r\n  for (let param of params) {\r\n    uri += '&' + param + '=' + value\r\n  }\r\n  return uri\r\n}\r\n\r\nasync function validateEmail(email) {\r\n\r\n  console.log('EMAIL VERIFICATION STATUS: Fetching email verification api...')\r\n\r\n  try {\r\n\r\n    var uri = emailVerification_APIURI(email)\r\n    uri = appendValueToUri(uri, falseParams, '0')\r\n    var emailStatus = {ok: false, status: 'Email não verificado.'}\r\n    const apiResp = await fetch( uri , { method: 'GET' } )\r\n  \r\n    if (apiResp.ok) {\r\n  \r\n      console.log('EMAIL VERIFICATION STATUS: Api fetch request successful.')\r\n      const apiRespJson = await apiResp.json()\r\n  \r\n      if ( apiRespJson.formatCheck=='false' ) {\r\n        emailStatus.status = 'Email inválido.'\r\n      } else if ( apiRespJson.smtpCheck=='false' ) {\r\n        emailStatus.status = 'Email não existe.'\r\n      } else {\r\n        emailStatus = {ok: true, status: 'Email válido.'}\r\n      }\r\n      \r\n      return emailStatus\r\n  \r\n    } else {\r\n      console.log('EMAIL VERIFICATION STATUS: Api fetch request failed. Throwing error...')\r\n      throw new Error('Status: ' + apiResp.status + ', Status Text: ' + apiResp.statusText)\r\n    }  \r\n\r\n  } finally {\r\n    console.log('EMAIL VERIFICATION STATUS: Concluído')\r\n\r\n  }\r\n  // Use the email verification api using its module...\r\n  // verifier.verify(email, (err, data) => {\r\n  //   if (err) throw err;\r\n  //   console.log(data);\r\n  // });\r\n}\r\n\r\nfunction validatePassword(password) {\r\n  console.log('VALIDATING PASSWORD FOR SIGNUP...')\r\n\r\n  const hasMinLength = password.length > 6\r\n  var res\r\n  if (!hasMinLength) {\r\n    res = {ok: false, status: 'A senha deve ter no mínimo 6 caractéres.'}\r\n  } else {\r\n    res = {ok: true, status: 'Senha válida.'}\r\n  }\r\n  return res\r\n}\r\n\r\nclass LoginScreen extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      userInfo: {\r\n        password: '',\r\n        email: '',\r\n        username: '',\r\n      },\r\n      loginMsg: '',\r\n      isUserAuth: false,\r\n      isDataLoading: false,\r\n    }\r\n    this.onChangeText = this.onChangeText.bind(this);\r\n    this.submitButton = this.submitButton.bind(this);\r\n    this.loginMsg = this.loginMsg.bind(this);\r\n    this.setLoginMsg = this.setLoginMsg.bind(this);\r\n    this.onSignIn = this.onSignIn.bind(this);\r\n    this.onSignUp = this.onSignUp.bind(this);\r\n  }\r\n\r\n  LoginIcon() {  \r\n    if (this.state.isDataLoading) {\r\n      return <Icon name='loader-outline' animation='pulse' fill='#000000' width={30} height={30} />\r\n    } else {\r\n      return <Icon name='log-in-outline' animation='pulse' fill='#000000' width={30} height={30} />\r\n    }\r\n  }\r\n\r\n  setLoginMsg(msg) {\r\n    this.setState({loginMsg: msg})\r\n    setTimeout( () => this.setState({loginMsg: ''}) , 1000 * 5 )\r\n  }\r\n\r\n  loginMsg() {\r\n      return(\r\n        <View style={[styles.login.msgBox, this.state.loginMsg ? {} : {backgroundColor: 'transparent', borderColor: 'transparent'} ]}>\r\n          <Text style={styles.login.msg}>{this.state.loginMsg}</Text>\r\n        </View>\r\n      )\r\n  }\r\n\r\n  onChangeText(textField) {\r\n    function setField(text) {\r\n      this.setState( { userInfo: { ...this.state.userInfo, [textField] : text}} )\r\n    }\r\n    setField = setField.bind(this);\r\n    return setField\r\n  }\r\n\r\n  submitButton(sign) {\r\n    const signIn = sign == 'signin'\r\n    return(\r\n      <Pressable onPress={signIn ? this.onSignIn : this.onSignUp} style={[styles.login.button]}>\r\n        <Text style={styles.login.buttonLabel}>{ signIn ? 'Entrar' : 'Cadastrar' }</Text>\r\n      </Pressable>\r\n    )\r\n  }\r\n\r\n  encryptedPassword() {\r\n    var encPass = ''\r\n    for (var i=0; i<this.state.userInfo.password.length; i++) {\r\n      encPass += '*'\r\n    }\r\n    return encPass\r\n  }\r\n\r\n  LoginScreen = () => {\r\n    return(\r\n      <ImageBackground source={require('../assets/wallpaper.jpg')} style={[styles.login.mainView ,{justifyContent: 'space-evenly'}]}>\r\n        \r\n        <View style={styles.login.titleView}>\r\n          {/* <View style={styles.login.titleIcon}></View> */}\r\n          <Text style={styles.login.title}>Mood Tracker</Text>\r\n          {/* <Icon name='clock' width={25} height={25} fill='white' animation='pulse' style={styles.login.titleIcon} /> */}\r\n        </View>\r\n\r\n        <View style={styles.login.card}>\r\n          <View style={styles.login.cardHeader} >\r\n            <Text style={styles.login.cardTitle}>Entrar</Text>\r\n          </View>\r\n          <View style={styles.login.cardSection}>\r\n            <TextInput\r\n            placeholder='Email'\r\n            textContentType='emailAddress'\r\n            style={styles.login.inputField}\r\n            onChangeText={this.onChangeText('email')}\r\n            autoComplete='email'\r\n            importantForAutofill='yes'\r\n            >\r\n            </TextInput>\r\n            <TextInput\r\n            placeholder='Senha'\r\n            textContentType='password'\r\n            secureTextEntry={true}\r\n            style={styles.login.inputField}\r\n            onChangeText={this.onChangeText('password')}\r\n            autoComplete='password'\r\n            importantForAutofill='yes'\r\n            ></TextInput>\r\n          </View>\r\n          <View style={styles.login.cardSection}>\r\n            {this.submitButton('signin')}\r\n            {this.submitButton('signup')}\r\n          </View>\r\n          <View style={[styles.login.cardSection]}>\r\n            {this.LoginIcon()}\r\n          </View>\r\n        </View>\r\n\r\n        {this.loginMsg()}\r\n\r\n      </ImageBackground>\r\n    )\r\n  }\r\n\r\n  async onSignIn() {\r\n\r\n    console.log('SIGNIN STATUS: started...')\r\n    var info = this.state.userInfo;\r\n    this.setState({ isDataLoading: true });\r\n\r\n    try {\r\n\r\n      var UsersResult = await fetch( corsURI + appServerURI + 'Users', { method: 'GET' });\r\n      const UsersStatus = 'Status: ' + UsersResult.status + ', ' + 'Status Text: ' + UsersResult.statusText\r\n      if (UsersResult.ok) {\r\n        console.log('fetch GET request for users data at signin successful.');\r\n        console.log(UsersStatus)\r\n      } else {\r\n        console.log('fetch GET request for users data at signin failed. Printing fetch response...')\r\n        console.log(JSON.stringify(UsersResult))\r\n        console.log('Throwing error...')\r\n        throw new Error(UsersStatus)\r\n      }\r\n\r\n      const Users = await UsersResult.json();\r\n      const user = Users.filter((user) => user.email === info.email)[0]\r\n      \r\n      if ( user ) {          \r\n        \r\n        if (user.password === info.password) {\r\n          const userInfo = { ...info, username: info.email.split('@')[0]}\r\n          this.setState( {isUserAuth: true, userInfo} )\r\n          const successMsg = 'Login realizado com sucesso!'\r\n          this.setLoginMsg(successMsg)\r\n          console.log('SIGNIN STATUS: Sucesso.')\r\n\r\n        } else {\r\n          const errMsg = 'Senha incorreta.'\r\n          this.setLoginMsg(errMsg)\r\n          console.log('SIGNIN STATUS: ' + errMsg);\r\n        }\r\n\r\n      } else {\r\n        const errMsg = 'Email não cadastrado!'\r\n        this.setLoginMsg(errMsg)\r\n        console.log('SIGNIN STATUS: ' + errMsg)\r\n      }\r\n\r\n    } catch (error) {\r\n      const errMsg = 'Erro no servidor! Tente novamente...'\r\n      this.setLoginMsg(errMsg)\r\n      console.log('Error catched in fetch GET request for users data at  signin. Printing Error...')\r\n      console.log('SIGNIN STATUS:' + 'Erro capturado. Imprimindo erro...')\r\n      console.log(error);\r\n\r\n    } finally {\r\n      this.setState({ isDataLoading: false });\r\n      console.log('SIGNIN STATUS: Concluido.')\r\n      if (this.state.isUserAuth) this.props.authUser(this.state.userInfo)        // Father class component method that authenticates the user and redirects to entrances screen.\r\n    }\r\n  }\r\n\r\n  async onSignUp() {\r\n\r\n    console.log('SIGNUP STATUS: started...')\r\n    var info = this.state.userInfo;\r\n    this.setState({ isDataLoading: true });\r\n    \r\n    try {\r\n\r\n      var postUserResult = {ok: false}\r\n\r\n      // Validating email and password\r\n      const emailValidation = await validateEmail(info.email)\r\n      console.log('SING UP STATUS: ' + emailValidation.status)\r\n      if (!emailValidation.ok) {\r\n          this.setLoginMsg(emailValidation.status)\r\n          return\r\n      }\r\n\r\n      // Checking if email is already registerd\r\n      var UsersResult = await fetch( corsURI + appServerURI + 'Users', { method: 'GET' } );  \r\n      const reqStatus = 'Status: ' + UsersResult.status + ', ' + UsersResult.statusText\r\n      if (UsersResult.ok) {\r\n        console.log('fetch GET request for users data at signup successful.')\r\n        console.log(reqStatus)\r\n      } else {\r\n        console.log('fetch GET request for users data at signup failed. Throwing error...')\r\n        throw new Error(reqStatus)\r\n      }\r\n\r\n      const Users = await UsersResult.json();\r\n      const User = Users.filter((user) => user.email === info.email)[0]\r\n      if ( !User ) {\r\n\r\n        // Validating Password\r\n        const passwordCheck = validatePassword(info.password)\r\n        if (!passwordCheck.ok) {\r\n          console.log('SING UP STATUS: ' + passwordCheck.status)\r\n          this.setLoginMsg(passwordCheck.status)\r\n          return\r\n      }\r\n\r\n        // Registering new user by posting user identification to database\r\n        info.username = info.email.split('@')[0]\r\n        const postUserOpts = { \r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify( { entries: [], ...info } )\r\n        }\r\n        \r\n        postUserResult = await fetch( corsURI + appServerURI +  'Users/' + info.username, postUserOpts );\r\n        const postUserStatus = 'Status: ' + postUserResult.status + ', ' + postUserResult.statusText\r\n\r\n        if (postUserResult.ok) {\r\n          const successMsg = 'Cadastro realizado com sucesso!'\r\n          this.setLoginMsg(successMsg)\r\n          console.log('fetch POST request for user data at signup successful.')\r\n          console.log(postUserStatus)\r\n          console.log('SING UP STATUS: ' + successMsg)\r\n\r\n        } else {\r\n          console.log('fetch POST request for user data at signup failed. Throwing error...')\r\n          throw new Error(postUserStatus)\r\n        }\r\n\r\n      } else {\r\n        const errMsg = 'Email já cadastrado.'\r\n        this.setLoginMsg(errMsg)\r\n        console.log('SING UP STATUS: ' + errMsg)\r\n      }\r\n\r\n    } catch (error) {\r\n      const errMsg = 'Erro no servidor, não foi possível realizar o cadastro. Por favor, tente novamente.'\r\n      this.setLoginMsg(errMsg)\r\n      console.log('SING UP STATUS: Erro capturado. Imprimindo erro...')\r\n      console.log(error);\r\n\r\n    } finally {\r\n      this.setState({ isDataLoading: false })\r\n      console.log('SING UP STATUS: Concluido.')\r\n      if (postUserResult.ok)  this.onSignIn()\r\n    }\r\n  }\r\n\r\n  render() {\r\n\r\n    console.log('Rendering \"LoginComponent\" screen...')\r\n    return this.LoginScreen()\r\n  \r\n  }\r\n}\r\n\r\nexport default LoginScreen;","import React, { Component } from 'react';\nimport { View, Text, Button, ImageBackground} from 'react-native';\n\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\n// import { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\n//import { createDrawerNavigator } from '@react-navigation/drawer';\n\n// Custom Components\nimport EntrancesScreen from './components/EntrancesComponent';\nimport PostEntranceScreen from './components/PostEntryComponent';\nimport LoginScreen from './components/LoginComponent'\n\nconst Stack = createNativeStackNavigator();\n// const Tab = createBottomTabNavigator();\n\n// const EntrancesScreen = (props) => (\n//   <View style={styles.app.background}>\n//   <Button title='Tela de entradas. Clique para postar...' onPress={() => props.navigation.navigate('PostEntrance') }>\n//     <Text></Text>\n//   </Button>\n//   </View>\n// )\n\n// const PostEntranceScreen = (props) => (\n//   <View style={styles.app.background}>\n//   <Button title='Tela de postar entradas. Clique para voltar...' onPress={() => props.navigation.navigate('Entrances') }>\n//   </Button>\n//   </View>\n// )\n\n// const LoginScreen = (props) => (\n//   <View style={styles.app.background}>\n//   <Button title='Clique para entrar' onPress={() => props.authUser({username: 'example', password: 'example', email: 'email@example.com'})}>\n//   </Button>\n//   </View>\n// )\n\nconst HomeScreen = (props) => {\n\n  console.log('Returning \"HomeScreen\" Component...')\n  return(\n    <Stack.Navigator \n    initialRouteName='Entrances'\n    screenOptions={{\n      headerShown: false,\n    }}\n    >\n      <Stack.Screen\n      name=\"Entrances\"\n      component={EntrancesScreen}\n      options={{title: 'Suas entradas'}}\n      initialParams={{userInfo: props.userInfo}}\n      // initialParams={{userInfo: props.route.params.userInfo}}\n      />\n      <Stack.Screen\n      name=\"PostEntrance\"\n      component={PostEntranceScreen}\n      options={{title: 'Adicione uma  entrada'}}\n      initialParams={{userInfo: props.userInfo}}\n      // initialParams={{userInfo: props.route.params.userInfo}}\n      />\n    </Stack.Navigator>\n  )  \n}\n\nfunction SettingsScreen() {\n  return(\n    <ImageBackground source={require('./assets/wallpaper.jpg')} style={{width: '100%', height: '100%'}}>\n      <Text>Settings</Text>\n    </ImageBackground>\n  )\n}\n\n// const mainScreenOptions = ({ route }) => ({\n//   headerShown: false,\n//   tabBarActiveTintColor: 'tomato',\n//   tabBarInactiveTintColor: 'gray',\n//   tabBarHideOnKeyboard: true,\n//   tabBarIcon: ({ focused, color, size }) => {\n//     let iconName;\n//     if (route.name === 'Home') {\n//       iconName = focused\n//         ? 'home'\n//         : 'home-outline';\n//     } else if (route.name === 'Settings') {\n//       iconName = focused ? 'settings' : 'settings-outline';\n//     }\n//     // You can return any component that you like here!\n//     return <Icon name={iconName} width={size} height={size} fill='rgb(35,35,35)'></Icon>\n//   },\n// })\n\nexport default class App extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isUserAuth: false,\n      userInfo: null,\n    };\n\n    this.authUser = this.authUser.bind(this);\n  }\n\n  authUser(userInfo) {\n    console.log('User authenticated. Navigating to \"Entries\" screen...')\n    this.setState( {isUserAuth: true, userInfo} )\n  }\n\n  render() {\n\n    if (!this.state.isUserAuth) {\n      return <LoginScreen authUser={this.authUser} />\n\n    } else {\n      return (\n\n        <NavigationContainer>\n          <HomeScreen userInfo={this.state.userInfo} />\n        </NavigationContainer>\n\n        // <NavigationContainer>\n        //   <Tab.Navigator\n        //     screenOptions={mainScreenOptions}\n        //   >\n        //     <Tab.Screen name=\"Home\" component={HomeScreen} initialParams={{userInfo: this.state.userInfo}}/>\n        //     <Tab.Screen name=\"Settings\" component={SettingsScreen} initialParams={{userInfo: this.state.userInfo}} />\n        //   </Tab.Navigator>    \n        // </NavigationContainer>\n\n      );  \n    }\n  }\n}\n\nconst styles = {\n  app: {\n    background: {\n      flex: 1,\n      alignItems: 'center',\n      justifyContent: 'center'  \n    }\n  }\n}","module.exports = __webpack_public_path__ + \"static/media/wallpaper.9987c866.jpg\";"],"sourceRoot":""}