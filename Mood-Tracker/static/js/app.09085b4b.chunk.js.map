{"version":3,"sources":["assets/wallpaper.jpg","styles/entrancesStyles.js","components/subcomponents/UserEntryCards.js","shared/dateRange.js","components/EntrancesComponent.js","styles/postEntryStyles.js","components/subcomponents/GoogleMapsAPI.js","components/subcomponents/OpenWeatherMapAPI.js","components/PostEntryComponent.js","styles/loginStyles.js","components/LoginComponent.js","App.js"],"names":["module","exports","styles","mainView","flex","postButton","position","height","width","borderRadius","bottom","alignSelf","backgroundColor","justifyContent","postButtonLabel","scrollView","section","paddingVertical","borderBottomWidth","borderColor","sectionTitle","fontSize","color","fontWeight","card","marginTop","paddingHorizontal","cardRow","flexDirection","alignItems","moodBadge","textAlign","emotionBadge","marginRight","textBadge","paddingTop","paddingBottom","lineHeight","textAlignVertical","text","spaceBetween","icon","entryIcon","paddingRight","borderWidth","editButtonsView","editButton","editButtonLabel","msgBox","msg","corsURI","Platform","OS","appServerURI","moodColors","monthDict","MoodHeader","entry","View","style","Text","mood","star","name","fill","weather","Image","source","uri","main","temp","toString","slice","startTime","Address","useState","isCollapsed","setIsCollapsed","address","numberOfLines","onPress","top","Emotions","emotions","length","flexWrap","PaddingBottom","map","emotion","index","Jornal","jornal","left","EmptyCard","props","today","date","now","Date","split","join","Today","navigateParams","currentEntry","type","textStyle","Pressable","navigation","navigate","disabled","CardsLoadingMessage","UserEntryCards","state","userEntries","isEntriesSyncing","isLoading","EntryCard","bind","EditEntryButtons","editUserEntry","deleteUserEntry","syncUserEntries","console","log","this","setInterval","updateIfPosted","posted","status","forgetPosted","setSelectedEntryId","selectedEntryId","_id","entryId","selDateEntries","filter","onButtonPress","isButtonPressed","setIsButtonPressed","label","onPressIn","onPressOut","selectedEntry","a","async","setState","UsersResult","ok","fetch","userInfo","username","method","usersStatus","statusText","Error","setAlertMsg","json","users","user","email","reverse","entriesSynced","UserEntryCardsList","Component","dateRange","englishMonthSigs","portugueseMonthSigs","englishWeekDayMap","getNextDate","next","nextDate","indexOf","formatDate","selDate","ymd","yesterday","englishWeekDay","weekDay","prefix","i","oneDigit","stringNumber","EntrancesScreen","DateNavigationButton","buttonColor","onNextButtonPress","time","selectedDate","entriesLoading","alertMsg","setParams","id","setSelectedDate","route","params","loginMsg","setTimeout","ImageBackground","require","ScrollView","login","StatusBar","currentHeight","entrances","content","flexGrow","contentRow","padding","entryTitle","paddingLeft","postButtonView","moodButtonView","moodButton","jornalText","saveButton","borderTopLeftRadius","borderTopRightRadius","saveButtonLabel","marginVertical","marginHorizontal","entryCardEmotionBadge","datetimeTitle","GoogleMapsAPI","GoogleMapsJavascriptAPIkey","GoogleMapsGeocodingAPIKey","OpenWeatherMapAPI","KEY","Location","moods","moodColorsRGBA","moodIcons","emotionGroupsNames","emotionGroups","sort","basicEmotions","isSelectedEmotions","monthNameMap","getTime","formatPostEntryDatetimeTitle","m","PostEntranceScreen","endTime","selectedMood","jornalEntry","isMoodUnmarked","isFetchingLocationOrWeather","locationServiceEnabled","userCoordinates","fillEntryIfEdit","onSaveButtonPress","EmotionButtons","MoodButtons","postEntryHeader","onEmotionButtonPress","onMoodButtonPress","inputCardBody","setSelectedEntry","InputCard","JornalInput","postNewEntryAsync","checkIfLocationEnabled","getCurrentLocation","isSelectedEmotionsNew","goBack","item","selectMood","alpha","selected","unmarked","selColor","size","selectEmotion","title","TextInput","multiline","scrollEnabled","placeholder","placeholderTextColor","onChangeText","value","setSelected","sectionName","cardBodyStyle","inputs","newEntry","lastEdited","error","setLoginMsg","isDataLoading","ActivityIndicator","info","editMode","postUserEntryResult","postUserEntryOpts","headers","body","JSON","stringify","postUserEntryStatus","coords","lat","latitude","lng","longitude","then","res","resStatus","weatherInfo","coord","clouds","wind","visibility","enabled","LocationServiceEnabled","alert","response","addressObj","street","streetNumber","district","subregion","region","isoCountryCode","fetchWeather","minHeight","titleView","titleIcon","marginLeft","cardHeader","cardTitle","cardSection","loadingIcon","inputField","button","buttonLabel","falseParams","appendValueToUri","validateEmail","emailStatus","apiResp","apiRespJson","formatCheck","smtpCheck","LoginScreen","textContentType","autoComplete","importantForAutofill","secureTextEntry","submitButton","LoginIcon","password","isUserAuth","onSignIn","onSignUp","animation","textField","setField","sign","signIn","errMsg","isInputEmpty","UsersStatus","Users","authUser","postUserResult","emailValidation","reqStatus","passwordCheck","postUserOpts","entries","postUserStatus","successMsg","Stack","createNativeStackNavigator","HomeScreen","Navigator","initialRouteName","screenOptions","headerShown","Screen","component","options","initialParams","App","NavigationContainer"],"mappings":"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ACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,c,+aCjhBJ,IAAM7G,EAAY,CAAC,IAAO,KAAM,IAAO,KAAM,IAAO,KAAM,IAAO,KAAM,IAAO,KAAM,IAAO,KAAM,IAAO,KAAM,IAAO,KAAM,IAAO,KAAM,IAAO,KAAM,IAAO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","file":"static/js/app.09085b4b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/wallpaper.9987c866.jpg\";","import { StatusBar } from 'expo-status-bar';\r\n\r\n//import StatusBar from 'react-native'\r\n// import { Platform } from 'react-native';\r\n\r\n// import { Dimensions } from 'react-native';\r\n// var windowWidth = Dimensions.get('window').width;\r\n// var windowHeight = Dimensions.get('window').height;\r\n\r\n// import DeviceInfo from 'react-native-device-info';\r\n// import AsyncStorage from '@react-native-community/async-storage';\r\n\r\n// // how can i do some code that will gives me if its \"Handset\"=> Smartphone , \r\n// //if its \"unknown\"=> Laptop/Computer \r\n// //and it will be saved as well in my async-storage.\r\n\r\n// //this some example that i wanna get it works well coz now its not work good\r\n\r\n// const funct1=  (type) => {\r\n// let type = DeviceInfo.getDeviceType();\r\n\r\n// if type==='Handset'{\r\n//   AsyncStorage.setItem('PLATFORM-TYPE', 'Smartphone');\r\n// }\r\n// if type==='unknown'{\r\n//   AsyncStorage.setItem('PLATFORM-TYPE', 'Laptop/Computer');\r\n// }\r\n// };\r\n\r\nconst styles = {\r\n    mainView: {\r\n        flex: 1,                 \r\n        // marginTop: StatusBar.currentHeight,\r\n    },\r\n    postButton: {\r\n        position: 'absolute',\r\n        height: 60,\r\n        width: 60,\r\n        borderRadius: 30,\r\n        bottom: '2%',\r\n        alignSelf: 'center',\r\n        backgroundColor: 'rgba(0,0,0,1)',\r\n        justifyContent: 'center',  \r\n    },\r\n    postButtonLabel: {\r\n        alignSelf: 'center',\r\n    },\r\n    scrollView: {\r\n        // paddingHorizontal: Platform.OS != 'web' ? '5%' : '5%',\r\n        height: '100%',\r\n        width: '100%',\r\n        // alignSelf: 'center',\r\n    },\r\n    section: {\r\n        width: 350,\r\n        paddingVertical: '16%',\r\n        borderBottomWidth: 1,\r\n        borderColor: 'rgba(155,155,155,0.3)',\r\n        alignSelf: 'center',\r\n    },\r\n    sectionTitle: {\r\n        paddingVertical: 7.5,\r\n        fontSize: 18,\r\n        color: 'white',\r\n        fontWeight: '400',\r\n    },\r\n    card: {\r\n        marginTop: '5%',\r\n        paddingVertical: 5,\r\n        paddingHorizontal: 10,\r\n        borderRadius: 20,\r\n        backgroundColor: 'rgba(0,0,0,0.2)',\r\n    },\r\n    cardRow: {\r\n        flexDirection: 'row',\r\n        paddingVertical: 5,\r\n        alignItems: 'center',\r\n    },\r\n    moodBadge: {\r\n        // fontFamily: 'sans-serif',\r\n        backgroundColor: 'green',\r\n        borderRadius: 30,\r\n        paddingVertical: 6,\r\n        width: 130,\r\n        fontSize: 15,\r\n        textAlign: 'center',\r\n    },\r\n    emotionBadge: {\r\n        // fontFamily: 'sans-serif',\r\n        backgroundColor: 'aliceblue',\r\n        borderRadius: 18,\r\n        paddingVertical: 6,\r\n        paddingHorizontal: 12.5,\r\n        marginRight: 6,\r\n        fontSize: 14,\r\n        textAlign: 'center',\r\n    },\r\n    textBadge: {\r\n        backgroundColor: 'aliceblue',\r\n        borderRadius: 17,\r\n        paddingTop: 5,\r\n        paddingBottom: 8,\r\n        paddingHorizontal: 11,\r\n        width: '100%',\r\n        fontSize: 15,\r\n        lineHeight: 22,\r\n        textAlign: 'left',\r\n        textAlignVertical: 'top',\r\n},\r\n    text: {\r\n        // fontFamily: 'sans-serif',\r\n        fontSize: 14,\r\n        color: 'white'\r\n    },\r\n    spaceBetween: {\r\n        justifyContent: 'space-between',\r\n    },\r\n    icon: {\r\n        paddingHorizontal: 12,\r\n    },\r\n    entryIcon: {\r\n        paddingRight: 0,\r\n        borderWidth: 1,\r\n    },\r\n    editButtonsView: {\r\n        flexDirection: 'row',\r\n        height: 55,\r\n        paddingBottom: 5,\r\n        alignItems: 'flex-end',\r\n        justifyContent: 'space-between'\r\n    },\r\n    editButton: {\r\n        height: 37,\r\n        width: 102,\r\n        borderWidth: 1,\r\n        borderColor: 'aliceblue',\r\n        borderRadius: 19,\r\n        alignItems: 'center',\r\n        justifyContent: 'center'\r\n    },\r\n    editButtonLabel: {\r\n        fontSize: 15,\r\n        fontWeight: '400',\r\n        color: 'white',\r\n    },\r\n    msgBox: {\r\n        width: 300,\r\n        height: 36,\r\n        justifyContent: 'center',\r\n        backgroundColor: 'rgb(30,30,30)',\r\n        borderWidth: 1,\r\n        borderColor: 'rgb(40,40,40)',\r\n        \r\n    },\r\n    msg: {\r\n        textAlign: 'center',\r\n        color: 'white',\r\n        // paddingHorizontal: 20,\r\n    },\r\n};\r\n\r\nexport default styles;","// Module import\r\nimport React, { Component, useState } from 'react';\r\nimport { Platform, View, Text, Pressable, Image } from 'react-native';\r\nimport { Icon } from 'react-native-eva-icons'\r\n\r\n// Local import\r\nimport styles from '../../styles/entrancesStyles'\r\n\r\n// cors-midpoint uri (needed to avoid cors' allow-cross-origin error when fetching in web platforms)\r\nconst corsURI = Platform.OS == 'web' ? 'https://morning-journey-78874.herokuapp.com/' : ''\r\nconst appServerURI = 'https://mood-tracker-server.herokuapp.com/'\r\n\r\n// OpenWeatherMap API weather icons URI:\r\nfunction openWeatherMapIconsURI (icon) {\r\n    if (Platform.OS === 'android') {\r\n        return `http://openweathermap.org/img/wn/${icon}@2x.png`\r\n\r\n    } else if (Platform.OS === 'web') {\r\n        return `https://openweathermap.org/img/wn/${icon}@2x.png`\r\n    }\r\n}\r\n\r\n// Defining mood colors schema\r\n// const moodColors = ['#ff3333', '#0099cc', '#add8e6', '#ffff33', '#00cc00']\r\nconst moodColors = {'Horrível': '#ff3333', 'Mal': '#0099cc', 'Regular': '#add8e6', 'Bem': '#ffff33', 'Ótimo': '#00cc00'};\r\n\r\nconst monthDict = {'Jan': '01', 'Feb': '02', 'Mar': '03', 'Apr': '04', 'May': '05', 'Jun': '06', 'Jul': '07', 'Ago': '08', 'Sep': '09', 'Oct': '10', 'Nov': '11', 'Dec': '12'}\r\nfunction Today() {\r\n    const now = Date().toString().split(' ')\r\n    const today = [ now[3], monthDict[now[1]], now[2] ].join('-')\r\n    return today\r\n}\r\n\r\nfunction MoodHeader({entry}) {\r\n    return(\r\n        <View style={ [styles.cardRow, styles.spaceBetween] }>\r\n            <View style={ [{flexDirection: 'row', alignItems: 'center'} ] }>\r\n                <Text style={[styles.moodBadge, {backgroundColor: moodColors[entry.mood]}]}>{entry.mood}</Text>\r\n                    { entry.star ? (\r\n                    <View style={{height: 30, width: 42, alignItems: 'flex-end', justifyContent: 'center'}}>\r\n                        <Icon name='star' fill='gold' width={28} height={28} style={{}} />\r\n                    </View>\r\n                    ) : <></> }                    \r\n                    { entry.weather ? (\r\n                        <View style={{height: 30, width: 50, alignItems: 'flex-end', justifyContent: 'center'}}>\r\n                            <Image source={{uri: openWeatherMapIconsURI(entry.weather.weather.icon)}} style={{width: 40, height: 40}} />\r\n                        </View>\r\n                    ) : <></> }                    \r\n                    { entry.weather ? (\r\n                        <View style={{height: 30, width: 40, alignItems: 'flex-end', justifyContent: 'center'}}>\r\n                            <Text style={{fontSize: 14, fontWeight: '500', color:'#fffd'}}> { entry.weather.main.temp.toString().slice(0,2) + '°C' } </Text>\r\n                        </View>\r\n                    ) : <></> }                \r\n                \r\n            </View>\r\n            <View style={[styles.cardRow]}>\r\n                <Icon name='edit' height={18} width={18} fill='rgba(255,255,255,0.75)' style={{marginRight: 6}} />\r\n                <Text style={styles.text}>{entry.startTime.slice(0,5)}</Text>\r\n            </View>\r\n        </View>\r\n\r\n    )\r\n}\r\n\r\nfunction Address ({entry}) {\r\n\r\n    const [isCollapsed, setIsCollapsed] = useState( 1 );\r\n    if (entry.address) {\r\n        return(\r\n            <View style={styles.cardRow}>\r\n                <Text numberOfLines={ isCollapsed } onPress={ () => { setIsCollapsed( isCollapsed ? 0 : 1 ) }} style={styles.text}>\r\n                    <Icon name='pin' height={17} width={17} fill='rgba(255,255,255,0.75)' style={{marginRight: 5, top: 2}} />\r\n                    {entry.address}\r\n                </Text>\r\n            </View>        \r\n        )\r\n    } else {\r\n        return <></>\r\n    }\r\n}\r\n\r\nfunction Emotions ({entry}) {\r\n    if (entry.emotions.length>0) {\r\n        return (\r\n            <View style={[styles.cardRow, {flexWrap: 'wrap', justifyContent: 'flex-start', paddingTop: 2, PaddingBottom: 0}]}>\r\n                { entry.emotions.map((emotion, index) => {\r\n                    return(\r\n                        <View key={'emotion-' + emotion} style={{paddingVertical: 5, paddingHorizontal: 2}}>\r\n                            <Text style={[styles.emotionBadge]}>{emotion}</Text>\r\n                        </View>\r\n                    )\r\n                })}\r\n            </View>\r\n        )\r\n    } else {\r\n        return (\r\n            <></>\r\n        )\r\n    }\r\n}\r\n\r\nfunction Jornal({ entry }) {\r\n    if (entry.jornal) {\r\n        return(\r\n            <View style={styles.cardRow}>\r\n                <Text style={styles.textBadge}>\r\n                    <Icon name='book-open' height={20} width={20} fill='rgba(0,0,0,0.25)' style={{top: 4, left: 1, marginRight: 6}} />\r\n                    {entry.jornal}\r\n                </Text>\r\n            </View>\r\n        )\r\n    } else {\r\n        return <></>\r\n    }\r\n}\r\n\r\nfunction EmptyCard(props) {\r\n    const today = props.date == Today()\r\n    const navigateParams = {\r\n        currentEntry: {\r\n            type: today ? 'new' : 'custom-date',\r\n            date: props.date,\r\n            entry: null\r\n        }\r\n    }\r\n    const textStyle = {fontSize: 16, color: 'white', marginTop: 7}\r\n    return (\r\n        <Pressable\r\n        onPress={ () => props.navigation.navigate('PostEntrance', navigateParams) }\r\n        disabled={!today}\r\n        style={[styles.card, {alignItems: 'center', justifyContent: 'center', fontSize: 16, height: today ? 145 : 117}]}\r\n        >\r\n            <Icon name='inbox' fill='rgba(255,255,255,0.3)' width={25} height={25} />\r\n            <Text style={textStyle}> Nenhuma entrada encontrada. </Text>\r\n            { today ? <Text style={textStyle}> Pressione aqui para adicionar uma a este dia! </Text> : null }\r\n        </Pressable>\r\n    );\r\n}\r\n\r\nfunction CardsLoadingMessage() {\r\n    return(\r\n        <View style={[styles.card, {alignItems: 'center', justifyContent: 'center', height: 145}]}>\r\n            <Icon name='sync-outline' fill='rgba(0,0,0,0.3)' width={25} height={25} />\r\n        </View>\r\n    )\r\n}\r\n\r\nexport default class UserEntryCards extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            userEntries: [],\r\n            isEntriesSyncing: false,\r\n            isLoading: false,\r\n        };\r\n        this.EntryCard = this.EntryCard.bind(this);\r\n        // this.onEntryCardPress = this.onEntryCardPress.bind(this);\r\n        this.EditEntryButtons = this.EditEntryButtons.bind(this);\r\n        this.editUserEntry = this.editUserEntry.bind(this);\r\n        this.deleteUserEntry = this.deleteUserEntry.bind(this);\r\n        this.syncUserEntries = this.syncUserEntries.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log('Subcomponent \"UserEntryCards\" did mount...')\r\n        this.syncUserEntries()\r\n        setInterval( () => { this.updateIfPosted() }, 1000 * 3 )\r\n        // setInterval( () => { console.log('Default auto syncing started...'); this.syncUserEntries() }, 1000 * 10 )\r\n        \r\n    }\r\n\r\n    updateIfPosted () {\r\n        if (this.props.posted.status) {\r\n            console.log('JUST POSTED STATUS: POSTED. Redirecting date and syncing entries ...');\r\n            this.props.forgetPosted();\r\n            this.syncUserEntries();\r\n            }\r\n    }\r\n\r\n    EntryCard({ entry }) {\r\n        function onEntryCardPress() {\r\n            this.props.setSelectedEntryId(this.props.selectedEntryId === entry._id ? null : entry._id)\r\n        }\r\n        return (\r\n        <Pressable onPress={onEntryCardPress.bind(this)} style={styles.card}>\r\n            <MoodHeader entry={entry} />\r\n            <Emotions entry={entry} />\r\n            <Address entry={entry} />\r\n            <Jornal entry={entry} />\r\n            <this.EditEntryButtons entryId={entry._id} />\r\n        </Pressable>\r\n        );\r\n    }    \r\n\r\n    UserEntryCardsList() {\r\n        const selDateEntries = this.state.userEntries.filter( (entry) => entry.date === this.props.date )\r\n\r\n        if (selDateEntries.length) {\r\n            return selDateEntries.map( entry => <this.EntryCard key={'entry-card-'+entry.startTime} entry={entry} />)\r\n        \r\n        } else if (this.state.isEntriesSyncing) {    \r\n            return <CardsLoadingMessage />\r\n\r\n        } else {\r\n            return <EmptyCard navigation={this.props.navigation} date={this.props.date} />\r\n        }\r\n    }\r\n\r\n    EditEntryButtons(props) {\r\n        const buttonLabels = ['Editar', 'Excluir']\r\n        const onButtonPress = { 'Editar': this.editUserEntry, 'Excluir': this.deleteUserEntry }\r\n\r\n        const [isButtonPressed, setIsButtonPressed] = useState({\r\n            'Editar': false,\r\n            'Excluir': false,\r\n        })\r\n\r\n        if (this.props.selectedEntryId == props.entryId) {\r\n            return(\r\n                <View style={styles.editButtonsView}>\r\n                    { buttonLabels.map( (label) => (\r\n                        <Pressable\r\n                        key={`èdit-${label}-${props.entryId}`}\r\n                        style={[styles.editButton,  {backgroundColor: isButtonPressed[label] ? (label=='Excluir' ? '#000f' : '#fff2') : '#0000', borderColor: label=='Excluir' ? 'red' : 'white' }]}\r\n                        disabled={ this.state.isLoading | this.state.isEntriesSyncing }\r\n                        onPress={ onButtonPress[label] }\r\n                        onPressIn={() => setIsButtonPressed({ ...isButtonPressed, [label]: !isButtonPressed[label] })}\r\n                        onPressOut={() => setIsButtonPressed({ ...isButtonPressed, [label]: !isButtonPressed[label] })}\r\n                        >\r\n                            <Text style={[styles.editButtonLabel, {color: label=='Excluir' ? 'red' : 'white' }]}>{label}</Text>                    \r\n                        </Pressable>\r\n                    )) }\r\n            </View>\r\n            )\r\n        } else {\r\n            return null\r\n        }\r\n    }\r\n\r\n    editUserEntry() {\r\n        const selectedEntry = this.state.userEntries.filter( (entry) => entry._id == this.props.selectedEntryId )[0]\r\n        // this.setState({selectedEntryId: null})\r\n        this.props.navigation.navigate('PostEntrance', { currentEntry: {type: 'edit', date: selectedEntry.date, entry: selectedEntry} })\r\n    }\r\n\r\n    async deleteUserEntry() {\r\n\r\n        console.log('DELETE USER ENTRY STATUS: Started...')\r\n        this.setState({ isLoading: true });\r\n        // prompt()\r\n\r\n        try {\r\n            var UsersResult = {ok: false, status: 999}\r\n            UsersResult = await fetch( corsURI + appServerURI + 'Users/' + this.props.userInfo.username + '/entries/' + this.props.selectedEntryId, { method: 'DELETE' });\r\n            // var UsersResult = await fetch( 'https://localhost:3000/' + 'Users/' + this.props.userInfo.username + '/entries/' + this.props.selectedEntryId, { method: 'DELETE' });\r\n            const usersStatus =  'Status: ' + UsersResult.status + ', ' + UsersResult.statusText\r\n\r\n            if (UsersResult.ok) {\r\n                // const users = await UsersResult.json();\r\n                console.log('fetch DELETE request for user entry successful.')\r\n                console.log(usersStatus)\r\n                console.log('DELETE USER ENTRY STATUS: Successful.')\r\n\r\n            } else {\r\n                console.log( new Error('\"fetch\" DELETE request for user entry failed. Throwing error...') )\r\n                throw new Error(usersStatus)\r\n            }\r\n    \r\n        } catch (error) {\r\n                console.log('DELETE USER ENTRY STATUS: Error captured. Printing error...')\r\n                console.log(error);\r\n                this.props.setAlertMsg('Não foi possível deletar a entrada. Tente novamente.')\r\n\r\n        } finally {\r\n            this.setState({ isLoading: false});\r\n            this.props.setSelectedEntryId(null)\r\n            console.log('DELETE USER ENTRY STATUS: FINISHED. Proceeding to sync user entries...')\r\n            if (UsersResult.ok) {this.syncUserEntries()}\r\n        }    \r\n    }\r\n\r\n    async syncUserEntries() {\r\n\r\n        console.log('SYNC ENTRIES STATUS: Started...')\r\n        this.setState({ isEntriesSyncing: true });\r\n    \r\n        try {\r\n\r\n            var UsersResult = await fetch( corsURI + appServerURI + 'Users', { method: 'GET' });\r\n            const usersStatus =  'Status: ' + UsersResult.status + ', ' + UsersResult.statusText\r\n\r\n            if (UsersResult.ok) {\r\n                const users = await UsersResult.json();\r\n                const user = users.filter((user) => user.email === this.props.userInfo.email)[0]\r\n                console.log('fetch GET request for user entries successful.')\r\n                console.log(usersStatus)\r\n\r\n                this.setState({userEntries: user['entries'].reverse(), entriesSynced: true})  \r\n                console.log('SYNC ENTRIES STATUS: Successful.')\r\n\r\n            } else {\r\n                console.log( new Error('\"fetch\" GET request for user entries failed. Throwing error...') )\r\n                throw new Error(usersStatus)\r\n            }\r\n    \r\n        } catch (error) {\r\n                console.log('SYNC ENTRIES STATUS: Error captured. Printing error...')\r\n                console.log(error);\r\n                this.props.setAlertMsg('Não foi possível sincronizar as entradas. Por favor, aguarde..')\r\n\r\n        } finally {\r\n            this.setState({ isEntriesSyncing: false });\r\n            console.log('SYNC ENTRIES STATUS: Finished.')\r\n        }    \r\n    }\r\n\r\n    render() {\r\n        // console.log('\"Rendering \"UserEntryCards\" subcomponent...\"')\r\n        return this.UserEntryCardsList()\r\n    }\r\n}","const dateRange = [\r\n    \"2021-01-01\",\r\n    \"2021-01-02\",\r\n    \"2021-01-03\",\r\n    \"2021-01-04\",\r\n    \"2021-01-05\",\r\n    \"2021-01-06\",\r\n    \"2021-01-07\",\r\n    \"2021-01-08\",\r\n    \"2021-01-09\",\r\n    \"2021-01-10\",\r\n    \"2021-01-11\",\r\n    \"2021-01-12\",\r\n    \"2021-01-13\",\r\n    \"2021-01-14\",\r\n    \"2021-01-15\",\r\n    \"2021-01-16\",\r\n    \"2021-01-17\",\r\n    \"2021-01-18\",\r\n    \"2021-01-19\",\r\n    \"2021-01-20\",\r\n    \"2021-01-21\",\r\n    \"2021-01-22\",\r\n    \"2021-01-23\",\r\n    \"2021-01-24\",\r\n    \"2021-01-25\",\r\n    \"2021-01-26\",\r\n    \"2021-01-27\",\r\n    \"2021-01-28\",\r\n    \"2021-01-29\",\r\n    \"2021-01-30\",\r\n    \"2021-01-31\",\r\n    \"2021-02-01\",\r\n    \"2021-02-02\",\r\n    \"2021-02-03\",\r\n    \"2021-02-04\",\r\n    \"2021-02-05\",\r\n    \"2021-02-06\",\r\n    \"2021-02-07\",\r\n    \"2021-02-08\",\r\n    \"2021-02-09\",\r\n    \"2021-02-10\",\r\n    \"2021-02-11\",\r\n    \"2021-02-12\",\r\n    \"2021-02-13\",\r\n    \"2021-02-14\",\r\n    \"2021-02-15\",\r\n    \"2021-02-16\",\r\n    \"2021-02-17\",\r\n    \"2021-02-18\",\r\n    \"2021-02-19\",\r\n    \"2021-02-20\",\r\n    \"2021-02-21\",\r\n    \"2021-02-22\",\r\n    \"2021-02-23\",\r\n    \"2021-02-24\",\r\n    \"2021-02-25\",\r\n    \"2021-02-26\",\r\n    \"2021-02-27\",\r\n    \"2021-02-28\",\r\n    \"2021-03-01\",\r\n    \"2021-03-02\",\r\n    \"2021-03-03\",\r\n    \"2021-03-04\",\r\n    \"2021-03-05\",\r\n    \"2021-03-06\",\r\n    \"2021-03-07\",\r\n    \"2021-03-08\",\r\n    \"2021-03-09\",\r\n    \"2021-03-10\",\r\n    \"2021-03-11\",\r\n    \"2021-03-12\",\r\n    \"2021-03-13\",\r\n    \"2021-03-14\",\r\n    \"2021-03-15\",\r\n    \"2021-03-16\",\r\n    \"2021-03-17\",\r\n    \"2021-03-18\",\r\n    \"2021-03-19\",\r\n    \"2021-03-20\",\r\n    \"2021-03-21\",\r\n    \"2021-03-22\",\r\n    \"2021-03-23\",\r\n    \"2021-03-24\",\r\n    \"2021-03-25\",\r\n    \"2021-03-26\",\r\n    \"2021-03-27\",\r\n    \"2021-03-28\",\r\n    \"2021-03-29\",\r\n    \"2021-03-30\",\r\n    \"2021-03-31\",\r\n    \"2021-04-01\",\r\n    \"2021-04-02\",\r\n    \"2021-04-03\",\r\n    \"2021-04-04\",\r\n    \"2021-04-05\",\r\n    \"2021-04-06\",\r\n    \"2021-04-07\",\r\n    \"2021-04-08\",\r\n    \"2021-04-09\",\r\n    \"2021-04-10\",\r\n    \"2021-04-11\",\r\n    \"2021-04-12\",\r\n    \"2021-04-13\",\r\n    \"2021-04-14\",\r\n    \"2021-04-15\",\r\n    \"2021-04-16\",\r\n    \"2021-04-17\",\r\n    \"2021-04-18\",\r\n    \"2021-04-19\",\r\n    \"2021-04-20\",\r\n    \"2021-04-21\",\r\n    \"2021-04-22\",\r\n    \"2021-04-23\",\r\n    \"2021-04-24\",\r\n    \"2021-04-25\",\r\n    \"2021-04-26\",\r\n    \"2021-04-27\",\r\n    \"2021-04-28\",\r\n    \"2021-04-29\",\r\n    \"2021-04-30\",\r\n    \"2021-05-01\",\r\n    \"2021-05-02\",\r\n    \"2021-05-03\",\r\n    \"2021-05-04\",\r\n    \"2021-05-05\",\r\n    \"2021-05-06\",\r\n    \"2021-05-07\",\r\n    \"2021-05-08\",\r\n    \"2021-05-09\",\r\n    \"2021-05-10\",\r\n    \"2021-05-11\",\r\n    \"2021-05-12\",\r\n    \"2021-05-13\",\r\n    \"2021-05-14\",\r\n    \"2021-05-15\",\r\n    \"2021-05-16\",\r\n    \"2021-05-17\",\r\n    \"2021-05-18\",\r\n    \"2021-05-19\",\r\n    \"2021-05-20\",\r\n    \"2021-05-21\",\r\n    \"2021-05-22\",\r\n    \"2021-05-23\",\r\n    \"2021-05-24\",\r\n    \"2021-05-25\",\r\n    \"2021-05-26\",\r\n    \"2021-05-27\",\r\n    \"2021-05-28\",\r\n    \"2021-05-29\",\r\n    \"2021-05-30\",\r\n    \"2021-05-31\",\r\n    \"2021-06-01\",\r\n    \"2021-06-02\",\r\n    \"2021-06-03\",\r\n    \"2021-06-04\",\r\n    \"2021-06-05\",\r\n    \"2021-06-06\",\r\n    \"2021-06-07\",\r\n    \"2021-06-08\",\r\n    \"2021-06-09\",\r\n    \"2021-06-10\",\r\n    \"2021-06-11\",\r\n    \"2021-06-12\",\r\n    \"2021-06-13\",\r\n    \"2021-06-14\",\r\n    \"2021-06-15\",\r\n    \"2021-06-16\",\r\n    \"2021-06-17\",\r\n    \"2021-06-18\",\r\n    \"2021-06-19\",\r\n    \"2021-06-20\",\r\n    \"2021-06-21\",\r\n    \"2021-06-22\",\r\n    \"2021-06-23\",\r\n    \"2021-06-24\",\r\n    \"2021-06-25\",\r\n    \"2021-06-26\",\r\n    \"2021-06-27\",\r\n    \"2021-06-28\",\r\n    \"2021-06-29\",\r\n    \"2021-06-30\",\r\n    \"2021-07-01\",\r\n    \"2021-07-02\",\r\n    \"2021-07-03\",\r\n    \"2021-07-04\",\r\n    \"2021-07-05\",\r\n    \"2021-07-06\",\r\n    \"2021-07-07\",\r\n    \"2021-07-08\",\r\n    \"2021-07-09\",\r\n    \"2021-07-10\",\r\n    \"2021-07-11\",\r\n    \"2021-07-12\",\r\n    \"2021-07-13\",\r\n    \"2021-07-14\",\r\n    \"2021-07-15\",\r\n    \"2021-07-16\",\r\n    \"2021-07-17\",\r\n    \"2021-07-18\",\r\n    \"2021-07-19\",\r\n    \"2021-07-20\",\r\n    \"2021-07-21\",\r\n    \"2021-07-22\",\r\n    \"2021-07-23\",\r\n    \"2021-07-24\",\r\n    \"2021-07-25\",\r\n    \"2021-07-26\",\r\n    \"2021-07-27\",\r\n    \"2021-07-28\",\r\n    \"2021-07-29\",\r\n    \"2021-07-30\",\r\n    \"2021-07-31\",\r\n    \"2021-08-01\",\r\n    \"2021-08-02\",\r\n    \"2021-08-03\",\r\n    \"2021-08-04\",\r\n    \"2021-08-05\",\r\n    \"2021-08-06\",\r\n    \"2021-08-07\",\r\n    \"2021-08-08\",\r\n    \"2021-08-09\",\r\n    \"2021-08-10\",\r\n    \"2021-08-11\",\r\n    \"2021-08-12\",\r\n    \"2021-08-13\",\r\n    \"2021-08-14\",\r\n    \"2021-08-15\",\r\n    \"2021-08-16\",\r\n    \"2021-08-17\",\r\n    \"2021-08-18\",\r\n    \"2021-08-19\",\r\n    \"2021-08-20\",\r\n    \"2021-08-21\",\r\n    \"2021-08-22\",\r\n    \"2021-08-23\",\r\n    \"2021-08-24\",\r\n    \"2021-08-25\",\r\n    \"2021-08-26\",\r\n    \"2021-08-27\",\r\n    \"2021-08-28\",\r\n    \"2021-08-29\",\r\n    \"2021-08-30\",\r\n    \"2021-08-31\",\r\n    \"2021-09-01\",\r\n    \"2021-09-02\",\r\n    \"2021-09-03\",\r\n    \"2021-09-04\",\r\n    \"2021-09-05\",\r\n    \"2021-09-06\",\r\n    \"2021-09-07\",\r\n    \"2021-09-08\",\r\n    \"2021-09-09\",\r\n    \"2021-09-10\",\r\n    \"2021-09-11\",\r\n    \"2021-09-12\",\r\n    \"2021-09-13\",\r\n    \"2021-09-14\",\r\n    \"2021-09-15\",\r\n    \"2021-09-16\",\r\n    \"2021-09-17\",\r\n    \"2021-09-18\",\r\n    \"2021-09-19\",\r\n    \"2021-09-20\",\r\n    \"2021-09-21\",\r\n    \"2021-09-22\",\r\n    \"2021-09-23\",\r\n    \"2021-09-24\",\r\n    \"2021-09-25\",\r\n    \"2021-09-26\",\r\n    \"2021-09-27\",\r\n    \"2021-09-28\",\r\n    \"2021-09-29\",\r\n    \"2021-09-30\",\r\n    \"2021-10-01\",\r\n    \"2021-10-02\",\r\n    \"2021-10-03\",\r\n    \"2021-10-04\",\r\n    \"2021-10-05\",\r\n    \"2021-10-06\",\r\n    \"2021-10-07\",\r\n    \"2021-10-08\",\r\n    \"2021-10-09\",\r\n    \"2021-10-10\",\r\n    \"2021-10-11\",\r\n    \"2021-10-12\",\r\n    \"2021-10-13\",\r\n    \"2021-10-14\",\r\n    \"2021-10-15\",\r\n    \"2021-10-16\",\r\n    \"2021-10-17\",\r\n    \"2021-10-18\",\r\n    \"2021-10-19\",\r\n    \"2021-10-20\",\r\n    \"2021-10-21\",\r\n    \"2021-10-22\",\r\n    \"2021-10-23\",\r\n    \"2021-10-24\",\r\n    \"2021-10-25\",\r\n    \"2021-10-26\",\r\n    \"2021-10-27\",\r\n    \"2021-10-28\",\r\n    \"2021-10-29\",\r\n    \"2021-10-30\",\r\n    \"2021-10-31\",\r\n    \"2021-11-01\",\r\n    \"2021-11-02\",\r\n    \"2021-11-03\",\r\n    \"2021-11-04\",\r\n    \"2021-11-05\",\r\n    \"2021-11-06\",\r\n    \"2021-11-07\",\r\n    \"2021-11-08\",\r\n    \"2021-11-09\",\r\n    \"2021-11-10\",\r\n    \"2021-11-11\",\r\n    \"2021-11-12\",\r\n    \"2021-11-13\",\r\n    \"2021-11-14\",\r\n    \"2021-11-15\",\r\n    \"2021-11-16\",\r\n    \"2021-11-17\",\r\n    \"2021-11-18\",\r\n    \"2021-11-19\",\r\n    \"2021-11-20\",\r\n    \"2021-11-21\",\r\n    \"2021-11-22\",\r\n    \"2021-11-23\",\r\n    \"2021-11-24\",\r\n    \"2021-11-25\",\r\n    \"2021-11-26\",\r\n    \"2021-11-27\",\r\n    \"2021-11-28\",\r\n    \"2021-11-29\",\r\n    \"2021-11-30\",\r\n    \"2021-12-01\",\r\n    \"2021-12-02\",\r\n    \"2021-12-03\",\r\n    \"2021-12-04\",\r\n    \"2021-12-05\",\r\n    \"2021-12-06\",\r\n    \"2021-12-07\",\r\n    \"2021-12-08\",\r\n    \"2021-12-09\",\r\n    \"2021-12-10\",\r\n    \"2021-12-11\",\r\n    \"2021-12-12\",\r\n    \"2021-12-13\",\r\n    \"2021-12-14\",\r\n    \"2021-12-15\",\r\n    \"2021-12-16\",\r\n    \"2021-12-17\",\r\n    \"2021-12-18\",\r\n    \"2021-12-19\",\r\n    \"2021-12-20\",\r\n    \"2021-12-21\",\r\n    \"2021-12-22\",\r\n    \"2021-12-23\",\r\n    \"2021-12-24\",\r\n    \"2021-12-25\",\r\n    \"2021-12-26\",\r\n    \"2021-12-27\",\r\n    \"2021-12-28\",\r\n    \"2021-12-29\",\r\n    \"2021-12-30\",\r\n    \"2021-12-31\",\r\n    \"2022-01-01\",\r\n    \"2022-01-02\",\r\n    \"2022-01-03\",\r\n    \"2022-01-04\",\r\n    \"2022-01-05\",\r\n    \"2022-01-06\",\r\n    \"2022-01-07\",\r\n    \"2022-01-08\",\r\n    \"2022-01-09\",\r\n    \"2022-01-10\",\r\n    \"2022-01-11\",\r\n    \"2022-01-12\",\r\n    \"2022-01-13\",\r\n    \"2022-01-14\",\r\n    \"2022-01-15\",\r\n    \"2022-01-16\",\r\n    \"2022-01-17\",\r\n    \"2022-01-18\",\r\n    \"2022-01-19\",\r\n    \"2022-01-20\",\r\n    \"2022-01-21\",\r\n    \"2022-01-22\",\r\n    \"2022-01-23\",\r\n    \"2022-01-24\",\r\n    \"2022-01-25\",\r\n    \"2022-01-26\",\r\n    \"2022-01-27\",\r\n    \"2022-01-28\",\r\n    \"2022-01-29\",\r\n    \"2022-01-30\",\r\n    \"2022-01-31\",\r\n    \"2022-02-01\",\r\n    \"2022-02-02\",\r\n    \"2022-02-03\",\r\n    \"2022-02-04\",\r\n    \"2022-02-05\",\r\n    \"2022-02-06\",\r\n    \"2022-02-07\",\r\n    \"2022-02-08\",\r\n    \"2022-02-09\",\r\n    \"2022-02-10\",\r\n    \"2022-02-11\",\r\n    \"2022-02-12\",\r\n    \"2022-02-13\",\r\n    \"2022-02-14\",\r\n    \"2022-02-15\",\r\n    \"2022-02-16\",\r\n    \"2022-02-17\",\r\n    \"2022-02-18\",\r\n    \"2022-02-19\",\r\n    \"2022-02-20\",\r\n    \"2022-02-21\",\r\n    \"2022-02-22\",\r\n    \"2022-02-23\",\r\n    \"2022-02-24\",\r\n    \"2022-02-25\",\r\n    \"2022-02-26\",\r\n    \"2022-02-27\",\r\n    \"2022-02-28\",\r\n    \"2022-03-01\",\r\n    \"2022-03-02\",\r\n    \"2022-03-03\",\r\n    \"2022-03-04\",\r\n    \"2022-03-05\",\r\n    \"2022-03-06\",\r\n    \"2022-03-07\",\r\n    \"2022-03-08\",\r\n    \"2022-03-09\",\r\n    \"2022-03-10\",\r\n    \"2022-03-11\",\r\n    \"2022-03-12\",\r\n    \"2022-03-13\",\r\n    \"2022-03-14\",\r\n    \"2022-03-15\",\r\n    \"2022-03-16\",\r\n    \"2022-03-17\",\r\n    \"2022-03-18\",\r\n    \"2022-03-19\",\r\n    \"2022-03-20\",\r\n    \"2022-03-21\",\r\n    \"2022-03-22\",\r\n    \"2022-03-23\",\r\n    \"2022-03-24\",\r\n    \"2022-03-25\",\r\n    \"2022-03-26\",\r\n    \"2022-03-27\",\r\n    \"2022-03-28\",\r\n    \"2022-03-29\",\r\n    \"2022-03-30\",\r\n    \"2022-03-31\",\r\n    \"2022-04-01\",\r\n    \"2022-04-02\",\r\n    \"2022-04-03\",\r\n    \"2022-04-04\",\r\n    \"2022-04-05\",\r\n    \"2022-04-06\",\r\n    \"2022-04-07\",\r\n    \"2022-04-08\",\r\n    \"2022-04-09\",\r\n    \"2022-04-10\",\r\n    \"2022-04-11\",\r\n    \"2022-04-12\",\r\n    \"2022-04-13\",\r\n    \"2022-04-14\",\r\n    \"2022-04-15\",\r\n    \"2022-04-16\",\r\n    \"2022-04-17\",\r\n    \"2022-04-18\",\r\n    \"2022-04-19\",\r\n    \"2022-04-20\",\r\n    \"2022-04-21\",\r\n    \"2022-04-22\",\r\n    \"2022-04-23\",\r\n    \"2022-04-24\",\r\n    \"2022-04-25\",\r\n    \"2022-04-26\",\r\n    \"2022-04-27\",\r\n    \"2022-04-28\",\r\n    \"2022-04-29\",\r\n    \"2022-04-30\",\r\n    \"2022-05-01\",\r\n    \"2022-05-02\",\r\n    \"2022-05-03\",\r\n    \"2022-05-04\",\r\n    \"2022-05-05\",\r\n    \"2022-05-06\",\r\n    \"2022-05-07\",\r\n    \"2022-05-08\",\r\n    \"2022-05-09\",\r\n    \"2022-05-10\",\r\n    \"2022-05-11\",\r\n    \"2022-05-12\",\r\n    \"2022-05-13\",\r\n    \"2022-05-14\",\r\n    \"2022-05-15\",\r\n    \"2022-05-16\",\r\n    \"2022-05-17\",\r\n    \"2022-05-18\",\r\n    \"2022-05-19\",\r\n    \"2022-05-20\",\r\n    \"2022-05-21\",\r\n    \"2022-05-22\",\r\n    \"2022-05-23\",\r\n    \"2022-05-24\",\r\n    \"2022-05-25\",\r\n    \"2022-05-26\",\r\n    \"2022-05-27\",\r\n    \"2022-05-28\",\r\n    \"2022-05-29\",\r\n    \"2022-05-30\",\r\n    \"2022-05-31\",\r\n    \"2022-06-01\",\r\n    \"2022-06-02\",\r\n    \"2022-06-03\",\r\n    \"2022-06-04\",\r\n    \"2022-06-05\",\r\n    \"2022-06-06\",\r\n    \"2022-06-07\",\r\n    \"2022-06-08\",\r\n    \"2022-06-09\",\r\n    \"2022-06-10\",\r\n    \"2022-06-11\",\r\n    \"2022-06-12\",\r\n    \"2022-06-13\",\r\n    \"2022-06-14\",\r\n    \"2022-06-15\",\r\n    \"2022-06-16\",\r\n    \"2022-06-17\",\r\n    \"2022-06-18\",\r\n    \"2022-06-19\",\r\n    \"2022-06-20\",\r\n    \"2022-06-21\",\r\n    \"2022-06-22\",\r\n    \"2022-06-23\",\r\n    \"2022-06-24\",\r\n    \"2022-06-25\",\r\n    \"2022-06-26\",\r\n    \"2022-06-27\",\r\n    \"2022-06-28\",\r\n    \"2022-06-29\",\r\n    \"2022-06-30\"\r\n]\r\nexport default dateRange;","// Module imports\r\nimport React, { Component } from 'react';\r\nimport { View, Text, ImageBackground, Pressable, ScrollView } from 'react-native';\r\nimport { Icon } from 'react-native-eva-icons'\r\n\r\n// Component imports\r\nimport UserEntryCards from './subcomponents/UserEntryCards';\r\n\r\n// Local imports\r\nimport dateRange from '../shared/dateRange';\r\nimport styles from '../styles/entrancesStyles';\r\n\r\n// cors-midpoint uri (needed to avoid cors' allow-cross-origin error when fetching)\r\n// const corsURI = 'https://morning-journey-78874.herokuapp.com/';\r\n// const appServerURI = 'https://mood-tracker-server.herokuapp.com/'\r\n\r\n// Defining pertinent constants\r\nconst monthDict = {'Jan': '01', 'Feb': '02', 'Mar': '03', 'Apr': '04', 'May': '05', 'Jun': '06', 'Jul': '07', 'Ago': '08', 'Sep': '09', 'Oct': '10', 'Nov': '11', 'Dec': '12'}\r\nconst englishMonthSigs = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dec']\r\nconst portugueseMonthSigs = ['Jan', 'Fev', 'Mar', 'Abr', 'Mai', 'Jun', 'Jul', 'Ago', 'Set', 'Out', 'Nov', 'Dez']\r\nconst englishWeekDayMap = {'Mon': 'Seg', 'Tue': 'Ter', 'Wed': 'Qua', 'Thu': 'Qui', 'Fri': 'Sex', 'Sat': 'Sab', 'Sun': 'Dom'}\r\n\r\n// Defining pertinent functions\r\nfunction Today() {\r\n    const now = Date().toString().split(' ')\r\n    const today = [ now[3], monthDict[now[1]], now[2] ].join('-')\r\n    return today\r\n}\r\nfunction getNextDate(date, next='next') {\r\n    const nextDate = dateRange[dateRange.indexOf(date) + (next=='previous' ? -1 : 1)]\r\n    return nextDate\r\n}\r\nfunction getTime() {\r\n    //Wed,Jan,26,2022,15:12:37,GMT-0300,(Horário,Padrão,de,Brasília)\r\n    const now = Date().toString().split(' ')\r\n    const time = now[4]\r\n    // const time = new Date().toLocaleTimeString()\r\n    return time\r\n}\r\nfunction formatDate(selDate) {\r\n    \r\n    var ymd = selDate.split('-')\r\n    const yesterday = getNextDate(Today(), 'previous')\r\n    const englishWeekDay = new Date(ymd[0], ymd[1], ymd[2]).toString().split(' ')[0]\r\n    const weekDay = englishWeekDayMap[englishWeekDay]\r\n    var prefix = ''\r\n\r\n    if (selDate === Today()) prefix = 'Hoje, '\r\n    else if (selDate === yesterday) prefix = 'Ontem, '\r\n    else prefix = weekDay + ', '\r\n    \r\n    for (var i=0; i<12; i++) {\r\n        if (monthDict[ englishMonthSigs[i] ] == ymd[1]) {\r\n            return prefix + oneDigit(ymd[2]) + '° ' + portugueseMonthSigs[i]\r\n        }\r\n    }\r\n}\r\nfunction oneDigit(stringNumber) {\r\n    if (stringNumber[0] == '0') return stringNumber.slice(1, stringNumber.length)\r\n    else return stringNumber\r\n}\r\n\r\nexport default class EntrancesScreen extends Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            userEntries: [],\r\n            date: Today(),\r\n            time: getTime(),\r\n            selectedDate: Today(),\r\n            entriesLoading: false,\r\n            entriesSynced: false,\r\n            alertMsg: '',\r\n        };\r\n        this.onNextButtonPress = this.onNextButtonPress.bind(this);\r\n        this.forgetPosted = this.forgetPosted.bind(this);\r\n        this.setAlertMsg = this. setAlertMsg.bind(this);\r\n        this.setSelectedEntryId = this.setSelectedEntryId.bind(this);\r\n    }\r\n    \r\n    componentDidMount() {\r\n        console.log('\"Entries\" screen component did mount...')      \r\n        this.props.navigation.setParams({posted: {status: false, entry: null}});\r\n    }\r\n\r\n    setSelectedEntryId(id) {\r\n        this.setState({selectedEntryId: id})\r\n    }\r\n\r\n    onNextButtonPress(next='next') {\r\n        function setSelectedDate() {\r\n            this.setState({\r\n                selectedEntryId: null,\r\n                selectedDate: getNextDate(this.state.selectedDate, next),\r\n            })\r\n        }\r\n        return setSelectedDate.bind(this);\r\n    }\r\n\r\n    forgetPosted() {\r\n        this.setState({\r\n            selectedEntryId: null,\r\n            selectedDate: this.props.route.params.posted.entry.type == 'new' ? Today() : this.state.selectedDate,\r\n        });\r\n        this.props.navigation.setParams({posted: {status: false, entry: null}});\r\n    }\r\n\r\n    setAlertMsg(msg) {\r\n        this.setState({loginMsg: msg})\r\n        setTimeout( () => this.setState({loginMsg: ''}) , 1000 * 5 )\r\n    }\r\n    \r\n    alertMsg() {\r\n        return(\r\n            <View style={[styles.msgBox, this.state.alertMsg ? {} : {backgroundColor: 'transparent', borderColor: 'transparent'} ]}>\r\n                <Text style={styles.msg}>{this.state.alertMsg}</Text>\r\n            </View>\r\n        )\r\n    }\r\n\r\n    DateNavigationButton = ({next, today}) => {\r\n        const buttonColor = next=='next' ? (today ? 'rgba(255,255,255,0.1)' : 'white') : 'white'\r\n        return(\r\n            <Pressable onPress={ this.onNextButtonPress(next) } disabled={ next=='next' & today }>\r\n                <Icon name={ next=='next' ? 'arrow-forward' : 'arrow-back'} width={35} height={35} fill={buttonColor} />\r\n            </Pressable>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        // console.log('Rendering \"Entries\" screen...')\r\n        const today = this.state.selectedDate === Today()\r\n        return(\r\n            <ImageBackground source={require('../assets/wallpaper.jpg')} style={[styles.mainView]}>\r\n                \r\n                <ScrollView style={styles.scrollView}>\r\n                    <View style={styles.section}>\r\n                        <View style={[styles.cardRow, {justifyContent: 'space-between'}]}>\r\n                            <this.DateNavigationButton icon='arrow-back' next='previous' />\r\n                            <Text style={styles.sectionTitle}> {'Suas entradas  •  ' + formatDate(this.state.selectedDate)} </Text>                                \r\n                            <this.DateNavigationButton icon='arrow-forward' next='next' today={today} />\r\n                        </View>\r\n                        <UserEntryCards\r\n                        date={this.state.selectedDate}\r\n                        selectedEntryId={this.state.selectedEntryId}\r\n                        userInfo={this.props.route.params.userInfo}\r\n                        posted={this.props.route.params.posted}\r\n                        setSelectedEntryId={this.setSelectedEntryId}\r\n                        forgetPosted={this.forgetPosted}\r\n                        setAlertMsg = {this.setAlertMsg}\r\n                        navigation = {this.props.navigation}\r\n                        />\r\n                    </View>\r\n                </ScrollView>\r\n\r\n                <Pressable onPress={() => {this.props.navigation.navigate( 'PostEntrance', {currentEntry: {type: 'new', date: Today(), entry: null}} )}}  style={[styles.postButton]}>\r\n                    <Icon name='plus-circle' width={72} height={72} fill='white' style={styles.postButtonLabel}/>\r\n                </Pressable>\r\n\r\n                {this.alertMsg()}\r\n  \r\n            </ImageBackground>\r\n            )\r\n\r\n    }\r\n  }\r\n","import { StatusBar } from 'expo-status-bar';\r\n// import { Platform } from 'react-native';\r\n\r\nconst styles = {\r\n  login: {\r\n    msgBox: {\r\n      position: 'absolute',\r\n      bottom: '10%',\r\n      width: 300,\r\n      alignSelf: 'center',\r\n      // width: 350,\r\n      height: 36,\r\n      justifyContent: 'center',\r\n      backgroundColor: 'rgb(30,30,30)',\r\n      borderWidth: 1,\r\n      borderColor: 'rgb(40,40,40)',\r\n    },\r\n    msg: {\r\n        textAlign: 'center',\r\n        color: 'white',\r\n        // paddingHorizontal: 15,\r\n    },\r\n  },\r\n  mainView: {\r\n    flex: 1,                 \r\n    marginTop: StatusBar.currentHeight,\r\n  },\r\n  entrances: {\r\n    marginTop: StatusBar.currentHeight,\r\n    borderWidth: 0,\r\n    flex:1,\r\n    justifyContent: 'space-between',\r\n    alignItems: 'flex-start',\r\n  },\r\n  scrollView: {\r\n    // paddingHorizontal: Platform.OS != 'web' ? '5%' : '5%',\r\n    width: '100%',\r\n    alignSelf: 'center',\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    paddingBottom: '0%',\r\n    paddingHorizontal: '5%',\r\n    alignSelf: 'stretch',\r\n    borderColor: 'black',\r\n  },\r\n  section: {\r\n    width: 350,\r\n    paddingVertical: '16%',\r\n    borderBottomWidth: 1,\r\n    borderColor: 'rgba(155,155,155,0.3)',\r\n    alignSelf: 'center',\r\n  },\r\n  contentRow: {\r\n    flexDirection: 'column',\r\n    padding: 10,\r\n    marginTop: 22,\r\n    borderWidth: 1,\r\n    borderColor: 'rgba(155,155,155, 0.4)',\r\n    borderRadius: 30,\r\n    backgroundColor: 'rgba(255,255,255, 0.3)',\r\n\r\n  },\r\n  entryTitle: {\r\n    paddingVertical: 3,\r\n    paddingLeft: 4,\r\n    fontSize: 19,\r\n    color: 'white',\r\n  },\r\n  entryIcon: {\r\n    paddingRight: 0,\r\n  },\r\n  postButtonView: {\r\n    height: 60,\r\n    width: 60,\r\n    borderRadius: 30,\r\n    alignSelf: 'center',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    backgroundColor: 'white',\r\n  },\r\n  postButtonLabel: {\r\n    fontSize: 45,\r\n    fontWeight: 'bold',\r\n  },\r\n  moodButtonView: {\r\n    width: 65,\r\n    height: 65,\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    borderWidth: 1,\r\n  },\r\n  moodButton: {\r\n    width: 65,\r\n    height: 65,\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n  date: {\r\n    position: 'relative',\r\n    left: '60%',\r\n    paddingVertical: 8,\r\n    paddingHorizontal: 10,\r\n    fontSize: 15,\r\n    alignSelf: 'center',\r\n    backgroundColor: 'white',\r\n    borderRadius: 20\r\n  },\r\n  jornalText: {\r\n    paddingVertical: 5,\r\n    paddingHorizontal: 12,\r\n    flex: 1,\r\n    textAlignVertical: 'top',\r\n    width: '100%',\r\n    borderRadius: 20,\r\n    color: 'white',\r\n    fontSize: 16,\r\n  },\r\n  saveButton: {\r\n    height: 50,\r\n    width: '100%',\r\n    borderTopLeftRadius: 30,\r\n    borderTopRightRadius: 30,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    backgroundColor: 'white'\r\n  },\r\n  saveButtonLabel: {\r\n    fontWeight:'bold',\r\n    fontSize: 19\r\n  },\r\n  card: {\r\n    marginTop: '5%',\r\n    paddingVertical: 5,\r\n    paddingHorizontal: 10,\r\n    borderRadius: 20,\r\n    backgroundColor: 'rgba(0,0,0,0.2)',\r\n  },\r\n  cardRow: {\r\n      flexDirection: 'row',\r\n      paddingVertical: 5,\r\n      alignItems: 'center',\r\n  },\r\n  moodBadge: {\r\n      backgroundColor: 'green',\r\n      borderRadius: 30,\r\n      paddingVertical: 6,\r\n      width: 130,\r\n      fontSize: 16,\r\n      textAlign: 'center',\r\n  },\r\n  emotionBadge: {\r\n      backgroundColor: 'rgba(1,1,1,0.5)',\r\n      borderRadius: 30,\r\n      paddingVertical: 6,\r\n      paddingHorizontal: 12.5,\r\n      fontSize: 15,\r\n      textAlign: 'center',\r\n      marginVertical: 5,\r\n      marginHorizontal: 5\r\n  },\r\n  entryCardEmotionBadge: {\r\n    backgroundColor: 'aliceblue',\r\n    borderRadius: 30,\r\n    paddingVertical: 7,\r\n    paddingHorizontal: 12.5,\r\n    marginRight: 6,\r\n    fontSize: 15,\r\n    textAlign: 'center',\r\n  },\r\n  datetimeTitle: {\r\n    fontSize: 16,\r\n    marginRight: 3,\r\n  },\r\n}\r\n\r\nexport default styles;","const GoogleMapsAPI = {\r\n    GoogleMapsJavascriptAPIkey: \"AIzaSyBVWbOwPAMRyz2bS6rYHrDftVeihQ8WMCo\",\r\n    GoogleMapsGeocodingAPIKey: \"AIzaSyB6O-DpvulBC0rom1mGy-mBcstIbPlDPHA\",\r\n}\r\n\r\nexport default GoogleMapsAPI","const OpenWeatherMapAPI = {\r\n    KEY: \"de9e6896f84109d7920528172207411a\",\r\n}\r\nexport default OpenWeatherMapAPI\r\n","import React, { Component } from 'react';\r\nimport { View, Text, ImageBackground, Pressable, ScrollView, Platform, TextInput, ActivityIndicator } from 'react-native';\r\n\r\nimport { Icon } from 'react-native-eva-icons'\r\nimport VectorIcon from 'react-native-vector-icons/MaterialCommunityIcons';\r\n\r\nimport styles from '../styles/postEntryStyles'\r\n\r\n// Geocoding and weather dependencies and APIs\r\nimport * as Location from 'expo-location';\r\nimport GoogleMapsAPI from './subcomponents/GoogleMapsAPI'\r\nLocation.setGoogleApiKey(GoogleMapsAPI.GoogleMapsGeocodingAPIKey)\r\nimport OpenWeatherMapAPI from './subcomponents/OpenWeatherMapAPI';\r\n\r\n// cors-midpoint uri (needed to avoid cors' allow-cross-origin error when fetching in web platforms)\r\nconst corsURI = Platform.OS == 'web' ? 'https://morning-journey-78874.herokuapp.com/' : ''\r\nconst appServerURI = 'https://mood-tracker-server.herokuapp.com/'\r\n\r\n// Date() => wed jan 91 2022 07:46:57 ...\r\nconst now = new Date().toString().split(' ')\r\nconst datetime = now[2] + ' ' + now[1] + ' ' + now[3] + ' - ' + now[4].slice(0, 5)\r\n\r\n// Mood configs\r\nconst moods = ['Horrível', 'Mal', 'Regular', 'Bem', 'Ótimo']\r\nconst moodColorsHEX = ['#ff3333', '#0099cc', '#add8e6', '#ffff33', '#00cc00']\r\nconst moodColorsRGBA = ['rgba(255, 51, 51, 1)', 'rgba(0, 153, 204, 1)', 'rgba(173, 216, 230, 1)', 'rgba(255, 255, 51, 1)', 'rgba(0, 204, 0, 1)']\r\nconst moodColorsTransp = (alpha) => [`rgba(255, 51, 51, ${alpha})`, `rgba(0, 153, 204, ${alpha})`, `rgba(173, 216, 230, ${alpha})`, `rgba(255, 255, 51, ${alpha})`, `rgba(0, 204, 0, ${alpha})`]\r\nconst moodIcons = ['emoticon-dead', 'emoticon-sad', 'emoticon-neutral', 'emoticon-happy', 'emoticon-excited']\r\n\r\n// Emotion configs\r\nconst emotionGroupsNames = [ 'Bem & Calmo', 'Bem & Energizado', 'Mal & Calmo', 'Mal & Energizado' ]\r\nconst goodEnergizedEmotions = ['Animação', 'Concentração', 'Desinibição', 'Motivação', 'Euforia']\r\nconst goodCalmEmotions = ['Alívio', 'Calma', 'Conforto', 'Despreocupação', 'Inspiração', 'Orgulho', 'Paz', 'Relaxamento', 'Satisfação', 'Segurança', 'Criatividade']\r\nconst badEnergizedEmotions = ['Inquietação', 'Ansiedade', 'Desespero', 'Frustração', 'Insatisfação', 'Irritação', 'Medo', 'Vergonha', 'Preocupação', 'Impaciência', 'Sobrecarregado(a)', 'Tensão']\r\nconst badCalmEmotions = ['Depressão', 'Timidez', 'Cansaço', 'Tristeza','Confusão', 'Desanimo', 'Insegurança', 'Solidão', 'Tédio']\r\n// const badEnergizedEmotions = ['Agitação', 'Ansiedade', 'Tristeza', 'Decepção', 'Depressão', 'Desespero', 'Frustração', 'Insatisfação', 'Irritação', 'Medo', 'Paranoia', 'Preocupação', 'Impaciencia', 'Raiva', 'Revolta', 'Sobrecarregado(a)', 'Tensão', 'Nojo']\r\n\r\nconst emotionGroups = [ goodCalmEmotions.sort(), goodEnergizedEmotions.sort(), badCalmEmotions.sort(), badEnergizedEmotions.sort() ]\r\nconst basicEmotions = [ ...emotionGroups[0], ...emotionGroups[1], ...emotionGroups[2], ...emotionGroups[3] ]\r\n\r\nvar isSelectedEmotions = {}\r\nfor ( let emotion of basicEmotions){\r\n    isSelectedEmotions[emotion] = false\r\n}\r\n\r\n// Date config\r\nconst monthSigs = ['Jan', 'Feb', 'Mar', 'Apr', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dec']\r\nconst months = ['01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12']\r\n\r\nconst monthNameMap = {\r\n    '01': 'Janeiro',\r\n    '02': 'Fevereiro',\r\n    '03': 'Março',\r\n    '04': 'Abril',\r\n    '05': 'Maio',\r\n    '06': 'Junho',\r\n    '07': 'Julho',\r\n    '08': 'Agosto',\r\n    '09': 'Setembro',\r\n    '10': 'Outubro',\r\n    '11': 'Novembro',\r\n    '12': 'Dezembro',\r\n}\r\n\r\n// Functions\r\n\r\nfunction convertMonthSig(monthSig) {\r\n    const thisMonth = months[monthSigs.indexOf(monthSig)]\r\n    return thisMonth\r\n}\r\n\r\nfunction Today() {\r\n    const now = Date().toString().split(' ')\r\n    const today = [ now[3], convertMonthSig(now[1]), now[2] ].join('-')\r\n    return today\r\n}\r\n\r\nfunction getTime() {\r\n    //Wed,Jan,26,2022,15:12:37,GMT-0300,(Horário,Padrão,de,Brasília)\r\n    const now = Date().toString().split(' ')\r\n    const time = now[4]\r\n    return time\r\n}\r\n\r\nfunction oneDigit(stringNumber) {\r\n    if (stringNumber[0] == '0') return stringNumber.slice(1, stringNumber.length)\r\n    else return stringNumber\r\n}\r\n\r\nfunction formatPostEntryDatetimeTitle(date, time) {\r\n    const ymd = date.split('-')\r\n    const m = monthNameMap[ ymd[1] ]\r\n    return oneDigit( ymd[2] ) + ' ' + m + ' ' + ymd[0] + ' - ' + time.slice(0,5)\r\n}\r\n\r\nfunction formattedAddress(addressObj) {\r\n    return addressObj.street + ', ' + addressObj.streetNumber + ' - ' + addressObj.district + ', ' + addressObj.subregion + '. ' + addressObj.region + ', ' + addressObj.isoCountryCode + '.'\r\n}\r\n\r\nexport default class PostEntranceScreen extends Component {\r\n  \r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            \r\n            date: this.props.route.params.currentEntry.date,\r\n            startTime: getTime(),\r\n            endTime: null,\r\n            star: false,\r\n            selectedMood: '',\r\n            emotions: [],\r\n            jornalEntry: '',    \r\n            address: null,\r\n            weather: null,\r\n\r\n            selectedEntry: 'Avaliação',\r\n            isMoodUnmarked: true,\r\n            isSelectedEmotions: isSelectedEmotions,\r\n            isLoading: false,\r\n            isFetchingLocationOrWeather: false,\r\n\r\n            locationServiceEnabled: null,\r\n            userCoordinates: null,\r\n\r\n            loginMsg: '',\r\n        };\r\n\r\n        this.fillEntryIfEdit = this.fillEntryIfEdit.bind(this);\r\n        this.onSaveButtonPress = this.onSaveButtonPress.bind(this);\r\n        this.saveButton = this.saveButton.bind(this);\r\n        this.EmotionButtons = this.EmotionButtons.bind(this);\r\n        this.MoodButtons = this.MoodButtons.bind(this);\r\n        this.postEntryHeader = this.postEntryHeader.bind(this);\r\n        this.onEmotionButtonPress = this.onEmotionButtonPress.bind(this);\r\n        this.onMoodButtonPress = this.onMoodButtonPress.bind(this);\r\n        this.inputCardBody = this.inputCardBody.bind(this);\r\n        this.setSelectedEntry = this.setSelectedEntry.bind(this);\r\n        this.InputCard = this.InputCard.bind(this);\r\n        this.JornalInput = this.JornalInput.bind(this);\r\n        this.postNewEntryAsync = this.postNewEntryAsync.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        // console.log('\"PostEntryComponent\" did mount.')\r\n        this.fillEntryIfEdit()\r\n    }\r\n    \r\n    fillEntryIfEdit() {\r\n        const currentEntry = this.props.route.params.currentEntry\r\n        switch (currentEntry.type) {\r\n            case 'new':\r\n                console.log('INITIATING BLANK ENTRY! FETCHING LOCATION AND WEATHER DATA...')\r\n                this.setState({ \r\n                    // date: currentEntry.date,\r\n                    // startTime: getTime(),\r\n                    isFetchingLocationOrWeather: true\r\n                })\r\n                this.checkIfLocationEnabled();\r\n                this.getCurrentLocation();                    \r\n                break;\r\n        \r\n            case 'custom-date':\r\n                console.log('INITIALIZING CUSTOM DATE ENTRY! SETTING DATE TO: ' + currentEntry.date)\r\n                break\r\n                // this.setState({\r\n                    // date: currentEntry.date,\r\n                    // startTime: getTime(),    \r\n                // })\r\n\r\n            case 'edit':\r\n                const entry = currentEntry.entry\r\n                console.log('INITIALIZING EDIT MODE ENTRY! FILLING ENTRY FOR ID: ' + entry._id)\r\n                var isSelectedEmotionsNew = {}\r\n                for ( let emotion of basicEmotions ) {\r\n                    isSelectedEmotionsNew[emotion] = entry.emotions.indexOf(emotion) != -1\r\n                }\r\n                this.setState({\r\n                    // date: entry.date,\r\n                    startTime: entry.startTime,\r\n                    endTime: entry.endTime,\r\n                    star: entry.star,\r\n                    selectedMood: entry.mood,\r\n                    isSelectedEmotions: isSelectedEmotionsNew,\r\n                    jornalEntry: entry.jornal,\r\n                    address: entry.address,\r\n                    weather: entry.weather,\r\n                    isMoodUnmarked: false,\r\n                })\r\n                break\r\n    \r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    postEntryHeader() {\r\n        return(\r\n            <View style={[styles.cardRow, {justifyContent: 'space-between'}]}>\r\n                <Pressable onPress={() => {this.props.navigation.goBack()}}  style={styles.postButton}>\r\n                    <Icon name='arrow-back' fill='white' height={30} width={30}/>\r\n                </Pressable>\r\n                <View style={[styles.entryCardEmotionBadge, {flexDirection: 'row', alignItems: 'center'}]}>\r\n                    <Text style={styles.datetimeTitle}> { formatPostEntryDatetimeTitle(this.state.date, this.state.startTime) } </Text>\r\n                    <Icon name='edit' fill='rgba(75,75,75,1)' height={20} width={20}/>\r\n                </View>\r\n                <Pressable onPress={() => {this.setState({star: !this.state.star})}}  style={styles.postButton}>\r\n                    <Icon name={this.state.star ? 'star' : 'star-outline'} fill='rgba(245,245,245,0.7)' height={30} width={30}/>\r\n                </Pressable>\r\n            </View>\r\n        )\r\n    }\r\n\r\n    onMoodButtonPress(item) {\r\n        function selectMood() {\r\n            if (this.state.selectedMood==item) {\r\n                this.setState({selectedMood: null, isMoodUnmarked: true})\r\n            } else {\r\n                this.setState({selectedMood: item, isMoodUnmarked: false})\r\n            }\r\n        }\r\n        selectMood = selectMood.bind(this);\r\n        return selectMood\r\n    }\r\n\r\n    MoodButtons() {\r\n        return moods.map((item, index) => {\r\n            const selected = this.state.selectedMood == item\r\n            const unmarked = this.state.isMoodUnmarked\r\n            const selColor = moodColorsRGBA[index]\r\n            return(\r\n                <View key={'mood '+index} style={styles.moodButton} >\r\n                    <VectorIcon\r\n                    name={moodIcons[index]}\r\n                    size={unmarked ? 52 : (selected ? 57 : 50) }\r\n                    color={ unmarked ? selColor : (selected ? selColor : moodColorsTransp(0.5)[index]) }\r\n                    onPress={this.onMoodButtonPress(item)}\r\n                    />\r\n                </View>\r\n            )\r\n        })\r\n    }\r\n\r\n    onEmotionButtonPress(emotion) { \r\n        function selectEmotion () {\r\n            this.setState({\r\n                isSelectedEmotions: {\r\n                    ...this.state.isSelectedEmotions,\r\n                    [emotion]: !this.state.isSelectedEmotions[emotion]\r\n                }\r\n            })\r\n        }\r\n        selectEmotion = selectEmotion.bind(this);\r\n        return selectEmotion\r\n    }\r\n\r\n    EmotionButtons(emotions) {\r\n        return(\r\n            emotions.map( emotion => (\r\n                <Pressable\r\n                key={'emotion-' + emotion}\r\n                title={emotion}\r\n                onPress={this.onEmotionButtonPress(emotion)}\r\n                >\r\n                    <Text style={[styles.emotionBadge, {backgroundColor: this.state.isSelectedEmotions[emotion] ? 'lightblue' : 'aliceblue' }]}>{emotion}</Text>\r\n                </Pressable>\r\n            ))\r\n        )\r\n    }\r\n\r\n    JornalInput() {\r\n        return(\r\n            <TextInput\r\n            multiline\r\n            scrollEnabled\r\n            placeholder='Escreva aqui...'\r\n            placeholderTextColor='rgba(255,255,255,0.6)'\r\n            onChangeText={text => this.setState({jornalEntry: text})}\r\n            value={this.state.jornalEntry}\r\n            style={styles.jornalText}\r\n            >\r\n            </TextInput>\r\n        )\r\n    }\r\n\r\n    setSelectedEntry (entry) {\r\n        function setSelected() {\r\n            this.setState( {selectedEntry:  this.state.selectedEntry === entry ? null : entry  } )\r\n        }\r\n        setSelected = setSelected.bind(this);\r\n        return setSelected\r\n    }\r\n\r\n    inputCardBody(sectionName, cardBodyStyle, inputs) {\r\n        if (this.state.selectedEntry === sectionName) {\r\n            if (sectionName == 'Emoções') {\r\n                return emotionGroups.map((emotions, index) => (\r\n                    <View key={'emotion-group-' + index} style={{width: '100%', alignItems: 'center', marginVertical: 10}}>\r\n                        <Text style={{fontSize: 15, color: 'white', marginVertical: 8}}>{emotionGroupsNames[index]}</Text>\r\n                        <View key={index} style={[styles.cardRow, cardBodyStyle]}>\r\n                            {inputs(emotions)}\r\n                        </View>\r\n                    </View>\r\n                ))\r\n            } else {\r\n                return(\r\n                    <View style={[styles.cardRow, cardBodyStyle]}>\r\n                        {inputs}\r\n                    </View>\r\n                )    \r\n            }\r\n        } else {\r\n            return(\r\n                <></>\r\n            )\r\n        }\r\n    }\r\n\r\n    InputCard(sectionName, icon, cardBodyStyle, inputs) {\r\n        if (sectionName !== 'Jornal') {\r\n            return(\r\n                <Pressable style={[styles.card]} onPress={this.setSelectedEntry(sectionName)} >\r\n                    <View style={styles.cardRow}  >\r\n                        <Icon name={icon} fill='rgba(255,255,255,0.75)' height={28} width={28} style={styles.entryIcon} />\r\n                        <Text style={styles.entryTitle}> {sectionName} </Text>\r\n                    </View>    \r\n                    {this.inputCardBody(sectionName=sectionName, cardBodyStyle=cardBodyStyle, inputs=inputs)}  \r\n                </Pressable>   \r\n            )\r\n        } else {\r\n            return(\r\n                <View style={[styles.card]} >\r\n                    <Pressable style={styles.cardRow} onPress={this.setSelectedEntry(sectionName)} >\r\n                        <Icon name={icon} fill='rgba(255,255,255,0.75)' height={28} width={28} style={styles.entryIcon} />\r\n                        <Text style={styles.entryTitle}> {sectionName} </Text>\r\n                    </Pressable>    \r\n                    {this.inputCardBody(sectionName=sectionName, cardBodyStyle=cardBodyStyle, inputs=inputs)}  \r\n                </View>   \r\n            )\r\n        }\r\n    }\r\n\r\n    loginMsg() {\r\n        return(\r\n          <View style={[styles.login.msgBox, this.state.loginMsg ? {} : {backgroundColor: 'transparent', borderColor: 'transparent'} ]}>\r\n            <Text style={styles.login.msg}>{this.state.loginMsg}</Text>\r\n          </View>\r\n        )\r\n    }\r\n\r\n    setLoginMsg(msg) {\r\n        this.setState({loginMsg: msg})\r\n        setTimeout( () => this.setState({loginMsg: ''}) , 1000 * 5 )\r\n    }    \r\n\r\n    onSaveButtonPress() {\r\n        if (!this.state.selectedMood) {\r\n            this.setLoginMsg('Necessário adicionar uma avaliação.')\r\n            this.setState({selectedEntry: 'Avaliação'})\r\n\r\n        } else {\r\n            try {\r\n                if (this.props.route.params.currentEntry === 'new') {\r\n                    this.setState({\r\n                        endTime: getTime(),\r\n                        // date: Today(),\r\n                    })\r\n                }\r\n                const newEntry = {\r\n                    startTime: this.state.startTime,\r\n                    endTime: this.state.endTime,\r\n                    lastEdited: getTime(),\r\n                    date: this.state.date,\r\n                    star: this.state.star,\r\n                    mood: this.state.selectedMood,\r\n                    emotions: basicEmotions.filter( emotion => this.state.isSelectedEmotions[emotion] ),\r\n                    jornal: this.state.jornalEntry,\r\n                    address: this.state.address,\r\n                    weather: this.state.weather,\r\n                }\r\n                this.postNewEntryAsync(newEntry)\r\n\r\n            } catch (error) {\r\n                // alert('Não foi possível postar sua entrada. Tente novamente...')\r\n                this.setLoginMsg('Não foi possível postar a entrada. Tente novamente...')\r\n                console.log('Error when attempting to post user entry. Logging error...')\r\n                console.log(error)\r\n            }\r\n        }\r\n    }\r\n\r\n    saveButton() {\r\n        const isDataLoading = this.state.isFetchingLocationOrWeather | this.state.isLoading\r\n        return(\r\n            <Pressable\r\n            onPress={this.onSaveButtonPress}\r\n            disabled={isDataLoading}\r\n            style={styles.saveButton}\r\n            >\r\n                { isDataLoading ? (\r\n                    <ActivityIndicator size='small' color='#000000' /> // <Icon name={'sync-outline'} fill='black' width={28} height={28} />\r\n                ) : (\r\n                    <Text style={styles.saveButtonLabel}> Salvar </Text>\r\n                ) }\r\n            </Pressable>\r\n        )\r\n    }\r\n\r\n    async postNewEntryAsync(newEntry) {\r\n        this.setState({ isLoading: true });\r\n        var info = this.props.route.params.userInfo;\r\n        const currentEntry = this.props.route.params.currentEntry\r\n        const editMode = currentEntry.type === 'edit';\r\n        try {\r\n            console.log('POST ENTRY STATUS: Started...')\r\n            var postUserEntryResult = {ok: false, status: '999', statusText: 'Post not fetched yet.'}\r\n            const postUserEntryOpts = { \r\n                method: editMode? 'PUT' : 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify( newEntry ),\r\n            }\r\n            // var postUserEntryResult = await fetch('http://localhost:3000/Users/' + info.username + '/entries', postUserEntryOpts);\r\n            postUserEntryResult = await fetch( corsURI + appServerURI + 'Users/' + info.username + '/entries' + (editMode ? '/'+currentEntry.entry._id : ''), postUserEntryOpts);\r\n            const postUserEntryStatus = 'Status: ' + postUserEntryResult.status + ', ' + postUserEntryResult.statusText\r\n\r\n            if (postUserEntryResult.ok) {\r\n                console.log('POST ENTRY STATUS: Successful.')\r\n                console.log(postUserEntryStatus)\r\n                    \r\n            } else {\r\n                console.log('POST ENTRY STATUS: Failed. Throwing error...')\r\n                throw new Error(postUserEntryStatus)\r\n            }\r\n\r\n        } catch (error) {\r\n            console.log('Erro capturado:')\r\n            console.log(error);\r\n\r\n        } finally {\r\n            console.log('POST ENTRY STATUS: Finished.')\r\n            this.setState({ isLoading: false });\r\n            if (postUserEntryResult.ok) this.props.navigation.navigate('Entrances', {posted: {status: true, entry: currentEntry} } )\r\n        }\r\n    }\r\n\r\n    async fetchWeather() {\r\n\r\n        try {\r\n            if (this.state.userCoordinates) {\r\n\r\n                console.log('FETCH WEATHER STATUS: STARTED...!')\r\n                const coords = this.state.userCoordinates\r\n                const lat = coords.latitude\r\n                const lng = coords.longitude\r\n                \r\n                await fetch(\r\n                    `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lng}&APPID=${OpenWeatherMapAPI.KEY}&units=metric`\r\n                )\r\n                .then(res => {\r\n                    const resStatus = 'Status: ' + res.status + ', Status Text: ' + res.statusText\r\n                    if (!res.ok) \r\n                        throw new Error(resStatus)\r\n                    else {\r\n                        return res.json()\r\n                    }\r\n                })\r\n                .then(weather => {\r\n                    console.log('FETCH WEATHER STATUS: SUCCESSFUL!')\r\n                    // console.log(weather);\r\n\r\n                    const weatherInfo = {\r\n                        coords: weather.coord,\r\n                        name: weather.name,\r\n                        weather: weather.weather[0],\r\n                        main: weather.main,\r\n                        clouds: weather.clouds,\r\n                        wind: weather.wind,\r\n                        visibility: weather.visibility,\r\n                    }\r\n\r\n                    this.setState({weather: weatherInfo})\r\n                });\r\n        \r\n            } else {\r\n                console.log('FETCH WEATHER STATUS: UNABLE TO START! USER POSITION NOT AVAILABLE.')\r\n            }\r\n\r\n        } catch(error) {\r\n            console.log('FETCH WEATHER STATUS: ERROR! LOGGING ERROR...')\r\n            console.log(error)\r\n\r\n        } finally {\r\n            console.log('FETCH WEATHER STATUS: FINISHED!')    \r\n            this.setState({isFetchingLocationOrWeather: false})\r\n        }\r\n    }\r\n\r\n    // Check if device has location services enabled\r\n    async checkIfLocationEnabled () {\r\n\r\n        if ( !this.state.locationServiceEnabled ) {\r\n            try{\r\n                console.log('GEOCODING PROCESS (CHECK): CHECKING IF USER HAS SERVICES ENABLED.' )\r\n                let enabled = await Location.hasServicesEnabledAsync();\r\n            \r\n                if (!enabled) {\r\n                    console.log('GEOCODING PROCESS (CHECK): CHECKED! USER DOES NOT HAVE SERVICES ENABLED.' )\r\n                    alert('Location Service not enabled. Please enable your location services.')\r\n                } else {\r\n                    console.log('GEOCODING PROCESS (CHECK): CHECKED! USER HAS SERVICES ENABLED.')\r\n                    this.setState({LocationServiceEnabled: enabled});\r\n                }\r\n\r\n            } catch(error) {\r\n                console.log(\"GEOCODING PROCESS (CHECK): ERROR IN SERVICES PERMISSION CHECK! COULD'NT CHECK IF USER HAS SERVICES ENABLED.\")\r\n            \r\n            } finally {\r\n                console.log(\"GEOCODING PROCESS (CHECK): FINISHED!\")\r\n            }\r\n        \r\n        } else {\r\n                console.log(\"GEOCODING PROCESS (CHECK): SKIPPING! USER ALREADY HAS SERVICES ENABLED.\")\r\n        } \r\n\r\n    };\r\n\r\n    // Check for permission, get current user position and use reverse geocoding for user coordinates\r\n    async getCurrentLocation() {\r\n\r\n        try {\r\n            console.log('GEOCODING PROCESS (PERMISSION): REQUEST PERMISSION ASYNC...')\r\n            let { status } = await Location.requestForegroundPermissionsAsync()\r\n            // let { status } = await Location.requestBackgroundPermissionsAsync()\r\n        \r\n            if (status !== 'granted') {\r\n                console.log('GEOCODING PROCESS (PERMISSION): PERMISSION NOT GRANTED!')\r\n                alert('Permission not granted. Allow the app to use location service.');\r\n\r\n            } else {\r\n                console.log('GEOCODING PROCESS (PERMISSION): PERMISSION GRANTED!')\r\n            }\r\n        \r\n            console.log('GEOCODING PROCESS (REQUEST): GETTING CURRENT USER POSITION ASYNC...')\r\n            let { coords } = await Location.getCurrentPositionAsync();\r\n            \r\n            if (coords) {   \r\n                const { latitude, longitude } = coords;\r\n                this.setState({userCoordinates: coords})\r\n                console.log(`GEOCODING PROCESS (REQUEST): CURRENT USER POSITION FOUND... Latitude: ${latitude}, Logitude: ${longitude}`)\r\n                console.log('GEOCODING PROCESS (REVERSE GEOCODING): REVERSE GEOCODE ASYNC...')  \r\n                let response = await Location.reverseGeocodeAsync({ latitude, longitude });\r\n        \r\n                if (response) {\r\n                    this.setState({ address: formattedAddress(response[0]) })\r\n                    console.log('GEOCODING PROCESS (REVERSE GEOCODING): REVERSE GEOCODE SUCCESSFUL! UPDATING STATE...')  \r\n\r\n                } else {\r\n                    console.log('GEOCODING PROCESS (REVERSE GEOCODING): REVERSE GEOCODE FAILED! LOGGING RESPONSE...')  \r\n                    console.log(response)\r\n                }\r\n        \r\n            } else {\r\n                console.log(`GEOCODING PROCESS (REVERSE GEOCODING): USER POSITION NOT FOUND! UNABLE TO PROCEED TO REVERSE GEOCODING...`)\r\n            }\r\n\r\n        } catch (error) {\r\n            console.log('GEOCODING PROCESS: ERROR IN USER POSITION REQUEST! LOGGING ERROR...')\r\n            console.log(error)\r\n        \r\n        } finally {\r\n            console.log('GEOCODING PROCESS: USER POSITION REQUEST FINISHED. PROCEEDING TO FETCH WEATHER DATA...')\r\n            this.fetchWeather()\r\n        }\r\n    };\r\n\r\n    render() {\r\n        // console.log('Rendering \"Post Entry\" screen...')\r\n        return(\r\n            <ImageBackground source={require('../assets/wallpaper.jpg')} style={styles.mainView}>\r\n\r\n                <ScrollView style={styles.scrollView}>\r\n                    <View style={styles.section}>\r\n                            {this.postEntryHeader()}\r\n                            {this.InputCard('Avaliação', 'smiling-face', {justifyContent: 'space-between'}, this.MoodButtons())}\r\n                            {this.InputCard('Emoções', 'checkmark-square-outline', {flexWrap: 'wrap', justifyContent: 'center'}, this.EmotionButtons)}\r\n                            {this.InputCard('Jornal', 'book', {flexDirection: 'column', minHeight: 130}, this.JornalInput())}\r\n                    </View>\r\n                </ScrollView>  \r\n\r\n                <this.saveButton />\r\n\r\n                {this.loginMsg()}\r\n\r\n            </ImageBackground>\r\n        )    \r\n    }\r\n}","var styles = {\r\n    login: {\r\n        mainView: {\r\n            flex: 1,\r\n            justifyContent: 'center',\r\n            alignItems: 'center',\r\n            // paddingHorizontal: Platform.OS != 'web' ? '5%' : '5%',\r\n        },\r\n        titleView: {\r\n            flexDirection: 'row',\r\n            justifyContent: 'center',\r\n            alignItems: 'center',\r\n            minHeight: 60,\r\n        },\r\n        title: {\r\n            fontSize: 30,\r\n            fontWeight: 'bold',\r\n            color: 'white',\r\n            alignSelf: 'center',\r\n        },\r\n        titleIcon: {\r\n            width: 30,\r\n            height: 30,\r\n            marginLeft: 6,\r\n            paddingTop: 3,\r\n        },\r\n        card: {\r\n            height: '55%',\r\n            minHeight: 390,\r\n            width: 350,\r\n            paddingHorizontal: 10,\r\n            paddingVertical: 10,\r\n            borderWidth: 1,\r\n            borderRadius: 10,\r\n            backgroundColor: 'azure',\r\n        },\r\n        cardHeader: {\r\n            height: '25%',\r\n            width: '100%',\r\n        },\r\n        cardTitle: {\r\n            position: 'relative',\r\n            top: '30%',\r\n            left: '5%',\r\n            fontSize: 24,\r\n            fontWeight: 'bold',\r\n            color: 'black',\r\n        },\r\n        cardSection: {\r\n            height: '25%',\r\n            justifyContent: 'space-evenly',\r\n            alignItems: 'center',\r\n        },\r\n        loadingIcon: {\r\n            alignSelf: 'center'\r\n        },\r\n        inputField: {\r\n            minHeight: 40,\r\n            width: '100%',\r\n            paddingLeft: 10,\r\n            fontSize: 14,\r\n            borderWidth: 1,\r\n            borderRadius: 5,\r\n            backgroundColor: 'white'\r\n        },\r\n        button: {\r\n            height: 40,\r\n            width: '100%',\r\n            textAlign: 'center',\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n            borderWidth: 1,\r\n            borderRadius: 5,\r\n            borderColor: 'white',\r\n            backgroundColor: 'lightblue',        \r\n        },\r\n        buttonLabel: {\r\n            fontSize: 15,\r\n            fontWeight: 'bold',\r\n            color: 'black',\r\n        },\r\n        text: {\r\n            fontSize: 15,\r\n            textAlign: 'center',\r\n        },\r\n        msgBox: {\r\n            width: 300,\r\n            height: 36,\r\n            justifyContent: 'center',\r\n            backgroundColor: 'rgb(30,30,30)',\r\n            borderWidth: 1,\r\n            borderColor: 'rgb(40,40,40)',\r\n        },\r\n        msg: {\r\n            textAlign: 'center',\r\n            color: 'white',\r\n            // paddingHorizontal: 20,\r\n        },\r\n    }\r\n};\r\nexport default styles;","// import Icon from 'react-native-vector-icons/FontAwesome';\r\n// import { Ionicons } from '@expo/vector-icons';\r\nimport { Icon } from 'react-native-eva-icons'\r\n// import { WiDaySunny } from \"weather-icons-react\";\r\n\r\nimport React, { Component } from 'react';\r\nimport { View, Text, ImageBackground, TextInput, Pressable, Platform, ActivityIndicator } from 'react-native';\r\nimport styles from '../styles/loginStyles'\r\n\r\n// App server connection settings\r\nconst corsURI = Platform.OS == 'web' ? 'https://morning-journey-78874.herokuapp.com/' : ''\r\nconst appServerURI = 'https://mood-tracker-server.herokuapp.com/'\r\n\r\n// Email Validation settings\r\n\r\n// const Verifier = require('email-verifier')\r\nconst emailVerification_APIKEY = \"at_TPKXmSQnStekLzTbstLO9GyHvd7or\"\r\n// let verifier = new Verifier(emailVerification_APIKEY);\r\nconst emailVerification_APIURI = (emailAddress) => `https://emailverification.whoisxmlapi.com/api/v2?apiKey=${emailVerification_APIKEY}&emailAddress=${emailAddress}`\r\nconst falseParams = ['validateDNS', 'checkCatchAll', 'checkFree', 'checkDisposable']\r\nfunction appendValueToUri(uri, params, value) {\r\n  for (let param of params) {\r\n    uri += '&' + param + '=' + value\r\n  }\r\n  return uri\r\n}\r\n\r\nasync function validateEmail(email) {\r\n\r\n  console.log('EMAIL VERIFICATION STATUS: Fetching email verification api...')\r\n\r\n  try {\r\n\r\n    var uri = emailVerification_APIURI(email)\r\n    uri = appendValueToUri(uri, falseParams, '0')\r\n    var emailStatus = {ok: false, status: 'Email não verificado.'}\r\n    const apiResp = await fetch( uri , { method: 'GET' } )\r\n  \r\n    if (apiResp.ok) {\r\n  \r\n      console.log('EMAIL VERIFICATION STATUS: Api fetch request successful.')\r\n      const apiRespJson = await apiResp.json()\r\n  \r\n      if ( apiRespJson.formatCheck=='false' ) {\r\n        emailStatus.status = 'Email inválido.'\r\n      } else if ( apiRespJson.smtpCheck=='false' ) {\r\n        emailStatus.status = 'Email não existe.'\r\n      } else {\r\n        emailStatus = {ok: true, status: 'Email válido.'}\r\n      }\r\n      \r\n      return emailStatus\r\n  \r\n    } else {\r\n      console.log('EMAIL VERIFICATION STATUS: Api fetch request failed. Throwing error...')\r\n      throw new Error('Status: ' + apiResp.status + ', Status Text: ' + apiResp.statusText)\r\n    }  \r\n\r\n  } finally {\r\n    console.log('EMAIL VERIFICATION STATUS: Concluído')\r\n\r\n  }\r\n  // Use the email verification api using its module...\r\n  // verifier.verify(email, (err, data) => {\r\n  //   if (err) throw err;\r\n  //   console.log(data);\r\n  // });\r\n}\r\n\r\nfunction validatePassword(password) {\r\n  console.log('VALIDATING PASSWORD FOR SIGNUP...')\r\n\r\n  const hasMinLength = password.length > 6\r\n  var res\r\n  if (!hasMinLength) {\r\n    res = {ok: false, status: 'A senha deve ter no mínimo 6 caractéres.'}\r\n  } else {\r\n    res = {ok: true, status: 'Senha válida.'}\r\n  }\r\n  return res\r\n}\r\n\r\nclass LoginScreen extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      userInfo: {\r\n        password: '',\r\n        email: '',\r\n        username: '',\r\n      },\r\n      loginMsg: '',\r\n      isUserAuth: false,\r\n      isDataLoading: false,\r\n    }\r\n    this.onChangeText = this.onChangeText.bind(this);\r\n    this.submitButton = this.submitButton.bind(this);\r\n    this.loginMsg = this.loginMsg.bind(this);\r\n    this.setLoginMsg = this.setLoginMsg.bind(this);\r\n    this.onSignIn = this.onSignIn.bind(this);\r\n    this.onSignUp = this.onSignUp.bind(this);\r\n  }\r\n\r\n  LoginIcon() {  \r\n    if (this.state.isDataLoading) {\r\n      return <ActivityIndicator color='#000000' />\r\n    } else {\r\n      return <Icon name='log-in-outline' animation='pulse' fill='#000' width={30} height={30} />\r\n    }\r\n  }\r\n\r\n  setLoginMsg(msg) {\r\n    this.setState({loginMsg: msg})\r\n    setTimeout( () => this.setState({loginMsg: ''}) , 1000 * 5 )\r\n  }\r\n\r\n  loginMsg() {\r\n      return(\r\n        <View style={[styles.login.msgBox, this.state.loginMsg ? {} : {backgroundColor: 'transparent', borderColor: 'transparent'} ]}>\r\n          <Text style={styles.login.msg}>{this.state.loginMsg}</Text>\r\n        </View>\r\n      )\r\n  }\r\n\r\n  onChangeText(textField) {\r\n    function setField(text) {\r\n      this.setState( { userInfo: { ...this.state.userInfo, [textField] : text}} )\r\n    }\r\n    setField = setField.bind(this);\r\n    return setField\r\n  }\r\n\r\n  submitButton(sign) {\r\n    const signIn = sign == 'signin'\r\n    return(\r\n      <Pressable disabled={this.state.isDataLoading} onPress={signIn ? this.onSignIn : this.onSignUp} style={[styles.login.button]}>\r\n        <Text style={styles.login.buttonLabel}>{ signIn ? 'Entrar' : 'Cadastrar' }</Text>\r\n      </Pressable>\r\n    )\r\n  }\r\n\r\n  LoginScreen = () => {\r\n    return(\r\n      <ImageBackground source={require('../assets/wallpaper.jpg')} style={[styles.login.mainView ,{justifyContent: 'space-evenly'}]}>\r\n        \r\n        <View style={styles.login.titleView}>\r\n          <Text style={styles.login.title}>Mood Tracker</Text>\r\n        </View>\r\n\r\n        <View style={styles.login.card}>\r\n          <View style={styles.login.cardHeader} >\r\n            <Text style={styles.login.cardTitle}>Entrar</Text>\r\n          </View>\r\n          <View style={styles.login.cardSection}>\r\n            <TextInput\r\n            placeholder='Email'\r\n            textContentType='emailAddress'\r\n            style={styles.login.inputField}\r\n            onChangeText={this.onChangeText('email')}\r\n            autoComplete='email'\r\n            importantForAutofill='yes'\r\n            >\r\n            </TextInput>\r\n            <TextInput\r\n            placeholder='Senha'\r\n            textContentType='password'\r\n            secureTextEntry={true}\r\n            style={styles.login.inputField}\r\n            onChangeText={this.onChangeText('password')}\r\n            autoComplete='password'\r\n            importantForAutofill='yes'\r\n            >\r\n            </TextInput>\r\n          </View>\r\n          <View style={styles.login.cardSection}>\r\n            {this.submitButton('signin')}\r\n            {this.submitButton('signup')}\r\n          </View>\r\n          <View style={[styles.login.cardSection]}>\r\n            {this.LoginIcon()}\r\n          </View>\r\n        </View>\r\n\r\n        {this.loginMsg()}\r\n\r\n      </ImageBackground>\r\n    )\r\n  }\r\n\r\n  isInputEmpty() {\r\n    if (!this.state.userInfo.email) {\r\n      const errMsg = 'Insira um endereço de email.'\r\n      this.setLoginMsg(errMsg)\r\n      console.log('SIGNIN STATUS: ' + errMsg)\r\n      return true\r\n    } else if (!this.state.userInfo.password) {\r\n      const errMsg = 'Insira uma senha.'\r\n      this.setLoginMsg(errMsg)\r\n      console.log('SIGNIN STATUS: ' + errMsg)\r\n      return true\r\n    } else return false\r\n  }\r\n\r\n  async onSignIn() {\r\n\r\n    console.log('SIGNIN STATUS: Started...')\r\n    var info = this.state.userInfo;\r\n    this.setState({ isDataLoading: true });\r\n\r\n    try {\r\n\r\n      if (this.isInputEmpty()) return\r\n\r\n      var UsersResult = await fetch( corsURI + appServerURI + 'Users', { method: 'GET' });\r\n      const UsersStatus = 'Status: ' + UsersResult.status + ', ' + 'Status Text: ' + UsersResult.statusText\r\n      if (UsersResult.ok) {\r\n        console.log('fetch GET request for users data at signin successful.');\r\n        console.log(UsersStatus)\r\n      } else {\r\n        console.log('fetch GET request for users data at signin failed. Printing fetch response...')\r\n        console.log(JSON.stringify(UsersResult))\r\n        console.log('Throwing error...')\r\n        throw new Error(UsersStatus)\r\n      }\r\n\r\n      const Users = await UsersResult.json();\r\n      const user = Users.filter((user) => user.email === info.email)[0]\r\n      \r\n      if ( user ) {          \r\n        \r\n        if (user.password === info.password) {\r\n          const userInfo = { ...info, username: info.email.split('@')[0]}\r\n          this.setState( {isUserAuth: true, userInfo} )\r\n          const successMsg = 'Login realizado com sucesso!'\r\n          this.setLoginMsg(successMsg)\r\n          console.log('SIGNIN STATUS: Sucesso.')\r\n\r\n        } else {\r\n          const errMsg = 'Senha incorreta.'\r\n          this.setLoginMsg(errMsg)\r\n          console.log('SIGNIN STATUS: ' + errMsg);\r\n        }\r\n\r\n      } else {\r\n        const errMsg = 'Email não cadastrado!'\r\n        this.setLoginMsg(errMsg)\r\n        console.log('SIGNIN STATUS: ' + errMsg)\r\n      }\r\n\r\n    } catch (error) {\r\n      const errMsg = 'Erro no servidor! Tente novamente...'\r\n      this.setLoginMsg(errMsg)\r\n      console.log('Error catched in fetch GET request for users data at signin. Printing Error...')\r\n      console.log('SIGNIN STATUS:' + 'Erro capturado. Imprimindo erro...')\r\n      console.log(error);\r\n\r\n    } finally {\r\n      this.setState({ isDataLoading: false });\r\n      console.log('SIGNIN STATUS: Concluido.')\r\n      if (this.state.isUserAuth) this.props.authUser(this.state.userInfo)        // Father class component method that authenticates the user and redirects to entrances screen.\r\n    }\r\n  }\r\n\r\n  async onSignUp() {\r\n\r\n    console.log('SIGNUP STATUS: started...')\r\n    var info = this.state.userInfo;\r\n    this.setState({ isDataLoading: true });\r\n    \r\n    try {\r\n\r\n      var postUserResult = {ok: false}\r\n      if (this.isInputEmpty()) return\r\n\r\n      // Validating email and password\r\n      const emailValidation = await validateEmail(info.email)\r\n      console.log('SING UP STATUS: ' + emailValidation.status)\r\n      if (!emailValidation.ok) {\r\n          this.setLoginMsg(emailValidation.status)\r\n          return\r\n      }\r\n\r\n      // Checking if email is already registerd\r\n      var UsersResult = await fetch( corsURI + appServerURI + 'Users', { method: 'GET' } );  \r\n      const reqStatus = 'Status: ' + UsersResult.status + ', ' + UsersResult.statusText\r\n      if (UsersResult.ok) {\r\n        console.log('fetch GET request for users data at signup successful.')\r\n        console.log(reqStatus)\r\n      } else {\r\n        console.log('fetch GET request for users data at signup failed. Throwing error...')\r\n        throw new Error(reqStatus)\r\n      }\r\n\r\n      const Users = await UsersResult.json();\r\n      const User = Users.filter((user) => user.email === info.email)[0]\r\n      if ( !User ) {\r\n\r\n        // Validating Password\r\n        const passwordCheck = validatePassword(info.password)\r\n        if (!passwordCheck.ok) {\r\n          console.log('SING UP STATUS: ' + passwordCheck.status)\r\n          this.setLoginMsg(passwordCheck.status)\r\n          return\r\n      }\r\n\r\n        // Registering new user by posting user identification to database\r\n        info.username = info.email.split('@')[0]\r\n        const postUserOpts = { \r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify( { entries: [], ...info } )\r\n        }\r\n        \r\n        postUserResult = await fetch( corsURI + appServerURI +  'Users/' + info.username, postUserOpts );\r\n        const postUserStatus = 'Status: ' + postUserResult.status + ', ' + postUserResult.statusText\r\n\r\n        if (postUserResult.ok) {\r\n          const successMsg = 'Cadastro realizado com sucesso!'\r\n          this.setLoginMsg(successMsg)\r\n          console.log('fetch POST request for user data at signup successful.')\r\n          console.log(postUserStatus)\r\n          console.log('SING UP STATUS: ' + successMsg)\r\n\r\n        } else {\r\n          console.log('fetch POST request for user data at signup failed. Throwing error...')\r\n          throw new Error(postUserStatus)\r\n        }\r\n\r\n      } else {\r\n        const errMsg = 'Email já cadastrado.'\r\n        this.setLoginMsg(errMsg)\r\n        console.log('SING UP STATUS: ' + errMsg)\r\n      }\r\n\r\n    } catch (error) {\r\n      const errMsg = 'Erro no servidor, tente novamente...'\r\n      this.setLoginMsg(errMsg)\r\n      console.log('SING UP STATUS: Erro capturado. Imprimindo erro...')\r\n      console.log(error);\r\n\r\n    } finally {\r\n      this.setState({ isDataLoading: false })\r\n      console.log('SING UP STATUS: Concluido.')\r\n      if (postUserResult.ok)  this.onSignIn()\r\n    }\r\n  }\r\n\r\n  render() {\r\n\r\n    // console.log('Rendering \"LoginComponent\" screen...')\r\n    return this.LoginScreen()\r\n  \r\n  }\r\n}\r\n\r\nexport default LoginScreen;","import React, { Component } from 'react';\nimport { Text, ImageBackground} from 'react-native';\n\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\n// import { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\n//import { createDrawerNavigator } from '@react-navigation/drawer';\n\nimport EntrancesScreen from './components/EntrancesComponent';\nimport PostEntranceScreen from './components/PostEntryComponent';\nimport LoginScreen from './components/LoginComponent'\n\nconst Stack = createNativeStackNavigator();\n// const Tab = createBottomTabNavigator();\n\nconst HomeScreen = (props) => {\n\n  // console.log('Returning \"HomeScreen\" Component...')\n  return(\n    <Stack.Navigator \n    initialRouteName='Entrances'\n    screenOptions={{\n      headerShown: false,\n    }}\n    >\n      <Stack.Screen\n      name=\"Entrances\"\n      component={EntrancesScreen}\n      options={{title: 'Suas entradas'}}\n      initialParams={{userInfo: props.userInfo}}\n      // initialParams={{userInfo: props.route.params.userInfo}}\n      />\n      <Stack.Screen\n      name=\"PostEntrance\"\n      component={PostEntranceScreen}\n      options={{title: 'Adicione uma  entrada'}}\n      initialParams={{userInfo: props.userInfo}}\n      // initialParams={{userInfo: props.route.params.userInfo}}\n      />\n    </Stack.Navigator>\n  )  \n}\n\n// function SettingsScreen() {\n//   return(\n//     <ImageBackground source={require('./assets/wallpaper.jpg')} style={{width: '100%', height: '100%'}}>\n//       <Text>Settings</Text>\n//     </ImageBackground>\n//   )\n// }\n\n// const mainScreenOptions = ({ route }) => ({\n//   headerShown: false,\n//   tabBarActiveTintColor: 'tomato',\n//   tabBarInactiveTintColor: 'gray',\n//   tabBarHideOnKeyboard: true,\n//   tabBarIcon: ({ focused, color, size }) => {\n//     let iconName;\n//     if (route.name === 'Home') {\n//       iconName = focused\n//         ? 'home'\n//         : 'home-outline';\n//     } else if (route.name === 'Settings') {\n//       iconName = focused ? 'settings' : 'settings-outline';\n//     }\n//     // You can return any component that you like here!\n//     return <Icon name={iconName} width={size} height={size} fill='rgb(35,35,35)'></Icon>\n//   },\n// })\n\nexport default class App extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isUserAuth: false,\n      userInfo: null,\n    };\n    this.authUser = this.authUser.bind(this);\n  }\n\n  authUser(userInfo) {\n    console.log('User authenticated. Navigating to \"HomeScreen\"...')\n    this.setState( {isUserAuth: true, userInfo} )\n  }\n\n  render() {\n\n    if (!this.state.isUserAuth) {\n      return <LoginScreen authUser={this.authUser} />\n\n    } else {\n      return (\n\n        <NavigationContainer>\n          <HomeScreen userInfo={this.state.userInfo} />\n        </NavigationContainer>\n\n        // <NavigationContainer>\n        //   <Tab.Navigator\n        //     screenOptions={mainScreenOptions}\n        //   >\n        //     <Tab.Screen name=\"Home\" component={HomeScreen} initialParams={{userInfo: this.state.userInfo}}/>\n        //     <Tab.Screen name=\"Settings\" component={SettingsScreen} initialParams={{userInfo: this.state.userInfo}} />\n        //   </Tab.Navigator>    \n        // </NavigationContainer>\n\n      );  \n    }\n  }\n}"],"sourceRoot":""}